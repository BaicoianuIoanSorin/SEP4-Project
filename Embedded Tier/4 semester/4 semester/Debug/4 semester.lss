
4 semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000656  00800200  00008f1c  00008fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff0  00800856  00800856  00009606  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b10  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a7ea  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000303a  00000000  00000000  0001499e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006fe4  00000000  00000000  000179d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000296c  00000000  00000000  0001e9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004138  00000000  00000000  00021328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007061  00000000  00000000  00025460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0002c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c1       	rjmp	.+516    	; 0x206 <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_12>
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 93 3b 	jmp	0x7726	; 0x7726 <__vector_25>
      68:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__vector_26>
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 29 3c 	jmp	0x7852	; 0x7852 <__vector_36>
      94:	0c 94 7b 3c 	jmp	0x78f6	; 0x78f6 <__vector_37>
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c6 40 	jmp	0x818c	; 0x818c <__vector_39>
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bf 3c 	jmp	0x797e	; 0x797e <__vector_51>
      d0:	0c 94 11 3d 	jmp	0x7a22	; 0x7a22 <__vector_52>
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 55 3d 	jmp	0x7aaa	; 0x7aaa <__vector_54>
      dc:	0c 94 a7 3d 	jmp	0x7b4e	; 0x7b4e <__vector_55>
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3b 30       	cpi	r19, 0x0B	; 11
      e6:	3b 30       	cpi	r19, 0x0B	; 11
      e8:	3b 30       	cpi	r19, 0x0B	; 11
      ea:	9a 30       	cpi	r25, 0x0A	; 10
      ec:	a5 30       	cpi	r26, 0x05	; 5
      ee:	dc 30       	cpi	r29, 0x0C	; 12
      f0:	3b 30       	cpi	r19, 0x0B	; 11
      f2:	3b 30       	cpi	r19, 0x0B	; 11
      f4:	9a 30       	cpi	r25, 0x0A	; 10
      f6:	a5 30       	cpi	r26, 0x05	; 5
      f8:	e8 40       	sbci	r30, 0x08	; 8
      fa:	58 41       	sbci	r21, 0x18	; 24
      fc:	58 41       	sbci	r21, 0x18	; 24
      fe:	58 41       	sbci	r21, 0x18	; 24
     100:	58 41       	sbci	r21, 0x18	; 24
     102:	58 41       	sbci	r21, 0x18	; 24
     104:	58 41       	sbci	r21, 0x18	; 24
     106:	58 41       	sbci	r21, 0x18	; 24
     108:	e8 40       	sbci	r30, 0x08	; 8
     10a:	58 41       	sbci	r21, 0x18	; 24
     10c:	58 41       	sbci	r21, 0x18	; 24
     10e:	58 41       	sbci	r21, 0x18	; 24
     110:	58 41       	sbci	r21, 0x18	; 24
     112:	58 41       	sbci	r21, 0x18	; 24
     114:	58 41       	sbci	r21, 0x18	; 24
     116:	58 41       	sbci	r21, 0x18	; 24
     118:	ea 40       	sbci	r30, 0x0A	; 10
     11a:	58 41       	sbci	r21, 0x18	; 24
     11c:	58 41       	sbci	r21, 0x18	; 24
     11e:	58 41       	sbci	r21, 0x18	; 24
     120:	58 41       	sbci	r21, 0x18	; 24
     122:	58 41       	sbci	r21, 0x18	; 24
     124:	58 41       	sbci	r21, 0x18	; 24
     126:	58 41       	sbci	r21, 0x18	; 24
     128:	58 41       	sbci	r21, 0x18	; 24
     12a:	58 41       	sbci	r21, 0x18	; 24
     12c:	58 41       	sbci	r21, 0x18	; 24
     12e:	58 41       	sbci	r21, 0x18	; 24
     130:	58 41       	sbci	r21, 0x18	; 24
     132:	58 41       	sbci	r21, 0x18	; 24
     134:	58 41       	sbci	r21, 0x18	; 24
     136:	58 41       	sbci	r21, 0x18	; 24
     138:	ea 40       	sbci	r30, 0x0A	; 10
     13a:	58 41       	sbci	r21, 0x18	; 24
     13c:	58 41       	sbci	r21, 0x18	; 24
     13e:	58 41       	sbci	r21, 0x18	; 24
     140:	58 41       	sbci	r21, 0x18	; 24
     142:	58 41       	sbci	r21, 0x18	; 24
     144:	58 41       	sbci	r21, 0x18	; 24
     146:	58 41       	sbci	r21, 0x18	; 24
     148:	58 41       	sbci	r21, 0x18	; 24
     14a:	58 41       	sbci	r21, 0x18	; 24
     14c:	58 41       	sbci	r21, 0x18	; 24
     14e:	58 41       	sbci	r21, 0x18	; 24
     150:	58 41       	sbci	r21, 0x18	; 24
     152:	58 41       	sbci	r21, 0x18	; 24
     154:	58 41       	sbci	r21, 0x18	; 24
     156:	58 41       	sbci	r21, 0x18	; 24
     158:	54 41       	sbci	r21, 0x14	; 20
     15a:	58 41       	sbci	r21, 0x18	; 24
     15c:	58 41       	sbci	r21, 0x18	; 24
     15e:	58 41       	sbci	r21, 0x18	; 24
     160:	58 41       	sbci	r21, 0x18	; 24
     162:	58 41       	sbci	r21, 0x18	; 24
     164:	58 41       	sbci	r21, 0x18	; 24
     166:	58 41       	sbci	r21, 0x18	; 24
     168:	1f 41       	sbci	r17, 0x1F	; 31
     16a:	58 41       	sbci	r21, 0x18	; 24
     16c:	58 41       	sbci	r21, 0x18	; 24
     16e:	58 41       	sbci	r21, 0x18	; 24
     170:	58 41       	sbci	r21, 0x18	; 24
     172:	58 41       	sbci	r21, 0x18	; 24
     174:	58 41       	sbci	r21, 0x18	; 24
     176:	58 41       	sbci	r21, 0x18	; 24
     178:	58 41       	sbci	r21, 0x18	; 24
     17a:	58 41       	sbci	r21, 0x18	; 24
     17c:	58 41       	sbci	r21, 0x18	; 24
     17e:	58 41       	sbci	r21, 0x18	; 24
     180:	58 41       	sbci	r21, 0x18	; 24
     182:	58 41       	sbci	r21, 0x18	; 24
     184:	58 41       	sbci	r21, 0x18	; 24
     186:	58 41       	sbci	r21, 0x18	; 24
     188:	13 41       	sbci	r17, 0x13	; 19
     18a:	58 41       	sbci	r21, 0x18	; 24
     18c:	58 41       	sbci	r21, 0x18	; 24
     18e:	58 41       	sbci	r21, 0x18	; 24
     190:	58 41       	sbci	r21, 0x18	; 24
     192:	58 41       	sbci	r21, 0x18	; 24
     194:	58 41       	sbci	r21, 0x18	; 24
     196:	58 41       	sbci	r21, 0x18	; 24
     198:	37 41       	sbci	r19, 0x17	; 23

0000019a <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <prvCheckTasksWaitingTermination>
     1ae:	80 91 1a 16 	lds	r24, 0x161A	; 0x80161a <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	10 f0       	brcs	.+4      	; 0x1ba <prvIdleTask+0x20>
     1b6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
     1ba:	0e 94 09 32 	call	0x6412	; 0x6412 <vApplicationIdleHook>
     1be:	f5 cf       	rjmp	.-22     	; 0x1aa <prvIdleTask+0x10>

000001c0 <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	27 97       	sbiw	r28, 0x07	; 7
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	8e 83       	std	Y+6, r24	; 0x06
     1d8:	ce 01       	movw	r24, r28
     1da:	05 96       	adiw	r24, 0x05	; 5
     1dc:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <prvGetNextExpireTime>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	89 83       	std	Y+1, r24	; 0x01
     1e6:	9a 83       	std	Y+2, r25	; 0x02
     1e8:	ab 83       	std	Y+3, r26	; 0x03
     1ea:	bc 83       	std	Y+4, r27	; 0x04
     1ec:	2d 81       	ldd	r18, Y+5	; 0x05
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	ab 81       	ldd	r26, Y+3	; 0x03
     1f4:	bc 81       	ldd	r27, Y+4	; 0x04
     1f6:	42 2f       	mov	r20, r18
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <prvProcessTimerOrBlockTask>
     200:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <prvProcessReceivedCommands>
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <prvTimerTask+0x18>

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d1 e2       	ldi	r29, 0x21	; 33
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0c bf       	out	0x3c, r16	; 60

00000216 <__do_copy_data>:
     216:	18 e0       	ldi	r17, 0x08	; 8
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b2 e0       	ldi	r27, 0x02	; 2
     21c:	ec e1       	ldi	r30, 0x1C	; 28
     21e:	ff e8       	ldi	r31, 0x8F	; 143
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	a6 35       	cpi	r26, 0x56	; 86
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	28 e1       	ldi	r18, 0x18	; 24
     232:	a6 e5       	ldi	r26, 0x56	; 86
     234:	b8 e0       	ldi	r27, 0x08	; 8
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a6 34       	cpi	r26, 0x46	; 70
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 6f 33 	call	0x66de	; 0x66de <main>
     244:	0c 94 8c 47 	jmp	0x8f18	; 0x8f18 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <ApplicationTask>:
#include "Application.h"

void ApplicationTask(void *pvParameters)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	6c 97       	sbiw	r28, 0x1c	; 28
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	9c 8f       	std	Y+28, r25	; 0x1c
     26c:	8b 8f       	std	Y+27, r24	; 0x1b
	for (;;)
	{
		//if(ALL_READY_BITS == ALL_READY_BITS){
			//Use in the future when we have both sensors = xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
			xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     26e:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <measureEventGroup>
     272:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <measureEventGroup+0x1>
     276:	45 e0       	ldi	r20, 0x05	; 5
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	f7 d5       	rcall	.+3054   	; 0xe6e <xEventGroupSetBits>
		//}
		
		//Use in the future when we have both sensors = EventBits_t eventBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
		EventBits_t eventBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     280:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <dataReadyEventGroup>
     284:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <dataReadyEventGroup+0x1>
     288:	cc 24       	eor	r12, r12
     28a:	ca 94       	dec	r12
     28c:	dc 2c       	mov	r13, r12
     28e:	76 01       	movw	r14, r12
     290:	01 e0       	ldi	r16, 0x01	; 1
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	4a e0       	ldi	r20, 0x0A	; 10
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	b1 d4       	rcall	.+2402   	; 0xc00 <xEventGroupWaitBits>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	ab 83       	std	Y+3, r26	; 0x03
     2a8:	bc 83       	std	Y+4, r27	; 0x04
		if(eventBits & (ALL_READY_BITS))
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	ab 81       	ldd	r26, Y+3	; 0x03
     2b0:	bc 81       	ldd	r27, Y+4	; 0x04
     2b2:	8a 70       	andi	r24, 0x0A	; 10
     2b4:	99 27       	eor	r25, r25
     2b6:	aa 27       	eor	r26, r26
     2b8:	bb 27       	eor	r27, r27
     2ba:	89 2b       	or	r24, r25
     2bc:	8a 2b       	or	r24, r26
     2be:	8b 2b       	or	r24, r27
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <ApplicationTask+0x7a>
     2c2:	43 c0       	rjmp	.+134    	; 0x34a <ApplicationTask+0x100>
		{
			printf("ALL DATA COLLECTED\n");
     2c4:	82 e2       	ldi	r24, 0x22	; 34
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
			printf("Temperature is: %x,\n and humidity is: %x, \n CO2 is: %x \n",getTemperature(),getHumidity(),getCo2());
     2cc:	c8 d0       	rcall	.+400    	; 0x45e <getCo2>
     2ce:	7c 01       	movw	r14, r24
     2d0:	b6 d3       	rcall	.+1900   	; 0xa3e <getHumidity>
     2d2:	8c 01       	movw	r16, r24
     2d4:	bf d3       	rcall	.+1918   	; 0xa54 <getTemperature>
     2d6:	2f 2d       	mov	r18, r15
     2d8:	2f 93       	push	r18
     2da:	2e 2d       	mov	r18, r14
     2dc:	2f 93       	push	r18
     2de:	21 2f       	mov	r18, r17
     2e0:	2f 93       	push	r18
     2e2:	20 2f       	mov	r18, r16
     2e4:	2f 93       	push	r18
     2e6:	29 2f       	mov	r18, r25
     2e8:	2f 93       	push	r18
     2ea:	8f 93       	push	r24
     2ec:	85 e3       	ldi	r24, 0x35	; 53
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	89 2f       	mov	r24, r25
     2f2:	8f 93       	push	r24
     2f4:	85 e3       	ldi	r24, 0x35	; 53
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	8f 93       	push	r24
     2fa:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     2fe:	8d b7       	in	r24, 0x3d	; 61
     300:	9e b7       	in	r25, 0x3e	; 62
     302:	08 96       	adiw	r24, 0x08	; 8
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
			
			setTemperature(getTemperature());
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	a2 d3       	rcall	.+1860   	; 0xa54 <getTemperature>
			setHumidity(getHumidity());
     310:	ff d0       	rcall	.+510    	; 0x510 <setTemperature>
     312:	95 d3       	rcall	.+1834   	; 0xa3e <getHumidity>
     314:	e9 d0       	rcall	.+466    	; 0x4e8 <setHumidity>
			
			setCo2Ppm(getCo2());
     316:	a3 d0       	rcall	.+326    	; 0x45e <getCo2>
     318:	0f d1       	rcall	.+542    	; 0x538 <setCo2Ppm>
     31a:	ce 01       	movw	r24, r28
     31c:	05 96       	adiw	r24, 0x05	; 5
			
			lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
     31e:	62 e0       	ldi	r22, 0x02	; 2
     320:	1f d1       	rcall	.+574    	; 0x560 <sensorDataPackageHandler_getLoRaPayload>
     322:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <upLinkMessageBuffer>
     326:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <upLinkMessageBuffer+0x1>
			xMessageBufferSend(upLinkMessageBuffer,&_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     32a:	be 01       	movw	r22, r28
     32c:	6b 5f       	subi	r22, 0xFB	; 251
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	0f ef       	ldi	r16, 0xFF	; 255
     332:	1f ef       	ldi	r17, 0xFF	; 255
     334:	98 01       	movw	r18, r16
     336:	46 e1       	ldi	r20, 0x16	; 22
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	0e 94 0b 14 	call	0x2816	; 0x2816 <xStreamBufferSend>
     33e:	60 e1       	ldi	r22, 0x10	; 16
     340:	7d e1       	ldi	r23, 0x1D	; 29
     342:	80 e0       	ldi	r24, 0x00	; 0
																					
			vTaskDelay(pdMS_TO_TICKS(120000));
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
     34a:	63 e0       	ldi	r22, 0x03	; 3
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
			//xSemaphoreGive(tempHumSemaphore);
		}
		vTaskDelay(pdMS_TO_TICKS(50));
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
     356:	8b cf       	rjmp	.-234    	; 0x26e <ApplicationTask+0x24>

00000358 <createApplicationTask>:
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
	}
     35c:	0f 93       	push	r16
}

void createApplicationTask(UBaseType_t Taskpriority)
{
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     36a:	e1 2c       	mov	r14, r1
     36c:	f1 2c       	mov	r15, r1
     36e:	09 81       	ldd	r16, Y+1	; 0x01
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 ec       	ldi	r20, 0xC0	; 192
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	6e e6       	ldi	r22, 0x6E	; 110
     37a:	72 e0       	ldi	r23, 0x02	; 2
     37c:	85 e2       	ldi	r24, 0x25	; 37
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
	,  "AppTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + Taskpriority
	,  NULL );
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	08 95       	ret

00000394 <initializeCo2Driver>:
void myCo2CallBack(uint16_t ppm);

uint16_t co2Ppm = 0;
mh_z19_returnCode_t rc;

void initializeCo2Driver(){
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	//rc = mh_z19_takeMeassuring();
	mh_z19_initialise(ser_USART3);
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
     3a2:	8b e1       	ldi	r24, 0x1B	; 27
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 1e 3a 	call	0x743c	; 0x743c <mh_z19_injectCallBack>
}
     3aa:	00 00       	nop
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <Co2Task>:

void Co2Task(void* pvpParameter){
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <Co2Task+0x10>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <Co2Task+0x12>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	8d 83       	std	Y+5, r24	; 0x05
	while(1){
		EventBits_t eventBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     3cc:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <measureEventGroup>
     3d0:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <measureEventGroup+0x1>
     3d4:	cc 24       	eor	r12, r12
     3d6:	ca 94       	dec	r12
     3d8:	dc 2c       	mov	r13, r12
     3da:	76 01       	movw	r14, r12
     3dc:	01 e0       	ldi	r16, 0x01	; 1
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	44 e0       	ldi	r20, 0x04	; 4
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	0b d4       	rcall	.+2070   	; 0xc00 <xEventGroupWaitBits>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	ab 83       	std	Y+3, r26	; 0x03
     3f4:	bc 83       	std	Y+4, r27	; 0x04
		if(eventBits & (CO2_MEASURE_BIT)){
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	ab 81       	ldd	r26, Y+3	; 0x03
     3fc:	bc 81       	ldd	r27, Y+4	; 0x04
     3fe:	84 70       	andi	r24, 0x04	; 4
     400:	99 27       	eor	r25, r25
     402:	aa 27       	eor	r26, r26
     404:	bb 27       	eor	r27, r27
     406:	89 2b       	or	r24, r25
     408:	8a 2b       	or	r24, r26
     40a:	8b 2b       	or	r24, r27
     40c:	f9 f2       	breq	.-66     	; 0x3cc <Co2Task+0x1a>
			printf("Measuring CO2... \n");
     40e:	86 e7       	ldi	r24, 0x76	; 118
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
			measureCo2();
     416:	2e d0       	rcall	.+92     	; 0x474 <measureCo2>
			xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
     418:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <dataReadyEventGroup>
     41c:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <dataReadyEventGroup+0x1>
     420:	48 e0       	ldi	r20, 0x08	; 8
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	22 d5       	rcall	.+2628   	; 0xe6e <xEventGroupSetBits>
			vTaskDelay(pdMS_TO_TICKS(10));
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	cb 01       	movw	r24, r22
     430:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
		}
	}
     434:	cb cf       	rjmp	.-106    	; 0x3cc <Co2Task+0x1a>

00000436 <myCo2CallBack>:
}

void myCo2CallBack(uint16_t ppm)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	1f 92       	push	r1
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
	co2Ppm = ppm;
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <__data_end+0x1>
     44e:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <__data_end>
}
     452:	00 00       	nop
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <getCo2>:

uint16_t getCo2(){
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	return co2Ppm;
     466:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <__data_end>
     46a:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <__data_end+0x1>
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <measureCo2>:

void measureCo2(){
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	rc = mh_z19_takeMeassuring();
     47c:	0e 94 23 3a 	call	0x7446	; 0x7446 <mh_z19_takeMeassuring>
     480:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <rc>
	if (rc != MHZ19_OK)
     484:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <rc>
     488:	88 23       	and	r24, r24
     48a:	59 f0       	breq	.+22     	; 0x4a2 <measureCo2+0x2e>
	{
		printf("Something went wrong with CO2 sensor");
     48c:	88 e8       	ldi	r24, 0x88	; 136
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	89 2f       	mov	r24, r25
     492:	8f 93       	push	r24
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	8f 93       	push	r24
     49a:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
	}
}
     4a2:	00 00       	nop
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <createCo2Task>:

void createCo2Task(UBaseType_t Taskpriority){
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	1f 92       	push	r1
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	89 83       	std	Y+1, r24	; 0x01
	initializeCo2Driver();
     4bc:	6b df       	rcall	.-298    	; 0x394 <initializeCo2Driver>
	xTaskCreate(
     4be:	e1 2c       	mov	r14, r1
     4c0:	f1 2c       	mov	r15, r1
     4c2:	09 81       	ldd	r16, Y+1	; 0x01
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 ec       	ldi	r20, 0xC0	; 192
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	6d ea       	ldi	r22, 0xAD	; 173
     4ce:	72 e0       	ldi	r23, 0x02	; 2
     4d0:	89 ed       	ldi	r24, 0xD9	; 217
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + Taskpriority,
	NULL
	);
     4d8:	00 00       	nop
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	08 95       	ret

000004e8 <setHumidity>:

uint16_t temperature;
uint16_t humidity;
uint16_t co2Ppm;

void setHumidity(uint16_t value){
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	1f 92       	push	r1
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
	humidity = value;
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	90 93 5b 08 	sts	0x085B, r25	; 0x80085b <humidity+0x1>
     500:	80 93 5a 08 	sts	0x085A, r24	; 0x80085a <humidity>
}
     504:	00 00       	nop
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <setTemperature>:
void setTemperature(uint16_t value){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	1f 92       	push	r1
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	89 83       	std	Y+1, r24	; 0x01
	temperature = value;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <temperature+0x1>
     528:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <temperature>
}
     52c:	00 00       	nop
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <setCo2Ppm>:
void setCo2Ppm(uint16_t value){
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	1f 92       	push	r1
     53e:	1f 92       	push	r1
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01
	co2Ppm = value;
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <__data_end+0x1>
     550:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <__data_end>
}
     554:	00 00       	nop
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <sensorDataPackageHandler_getLoRaPayload>:


lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	00 d0       	rcall	.+0      	; 0x566 <sensorDataPackageHandler_getLoRaPayload+0x6>
     566:	1f 92       	push	r1
     568:	1f 92       	push	r1
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	9c 83       	std	Y+4, r25	; 0x04
     570:	8b 83       	std	Y+3, r24	; 0x03
     572:	6d 83       	std	Y+5, r22	; 0x05
	lora_driver_payload_t* payload_t;
	
	payload_t = pvPortMalloc(sizeof(lora_driver_payload_t));
     574:	86 e1       	ldi	r24, 0x16	; 22
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	d5 d5       	rcall	.+2986   	; 0x1124 <pvPortMalloc>
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01
	
	if(payload_t != NULL){
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	89 2b       	or	r24, r25
     584:	09 f4       	brne	.+2      	; 0x588 <sensorDataPackageHandler_getLoRaPayload+0x28>
     586:	46 c0       	rjmp	.+140    	; 0x614 <sensorDataPackageHandler_getLoRaPayload+0xb4>
		payload_t->portNo=port_No;
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	9a 81       	ldd	r25, Y+2	; 0x02
     58c:	2d 81       	ldd	r18, Y+5	; 0x05
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
		payload_t->len=6;
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	26 e0       	ldi	r18, 0x06	; 6
     598:	fc 01       	movw	r30, r24
     59a:	21 83       	std	Z+1, r18	; 0x01
		payload_t->bytes[0]=co2Ppm >> 8;
     59c:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <__data_end>
     5a0:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <__data_end+0x1>
     5a4:	89 2f       	mov	r24, r25
     5a6:	99 27       	eor	r25, r25
     5a8:	28 2f       	mov	r18, r24
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	fc 01       	movw	r30, r24
     5b0:	22 83       	std	Z+2, r18	; 0x02
		payload_t->bytes[1]=co2Ppm & 0xFF;
     5b2:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <__data_end>
     5b6:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <__data_end+0x1>
     5ba:	28 2f       	mov	r18, r24
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	9a 81       	ldd	r25, Y+2	; 0x02
     5c0:	fc 01       	movw	r30, r24
     5c2:	23 83       	std	Z+3, r18	; 0x03
		payload_t->bytes[2]=humidity >> 8;
     5c4:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <humidity>
     5c8:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <humidity+0x1>
     5cc:	89 2f       	mov	r24, r25
     5ce:	99 27       	eor	r25, r25
     5d0:	28 2f       	mov	r18, r24
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	fc 01       	movw	r30, r24
     5d8:	24 83       	std	Z+4, r18	; 0x04
		payload_t->bytes[3]=humidity & 0xFF;
     5da:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <humidity>
     5de:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <humidity+0x1>
     5e2:	28 2f       	mov	r18, r24
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	9a 81       	ldd	r25, Y+2	; 0x02
     5e8:	fc 01       	movw	r30, r24
     5ea:	25 83       	std	Z+5, r18	; 0x05
		payload_t->bytes[4]=temperature >> 8;
     5ec:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <temperature>
     5f0:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <temperature+0x1>
     5f4:	89 2f       	mov	r24, r25
     5f6:	99 27       	eor	r25, r25
     5f8:	28 2f       	mov	r18, r24
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	fc 01       	movw	r30, r24
     600:	26 83       	std	Z+6, r18	; 0x06
		payload_t->bytes[5]=temperature & 0xFF;
     602:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <temperature>
     606:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <temperature+0x1>
     60a:	28 2f       	mov	r18, r24
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	fc 01       	movw	r30, r24
     612:	27 83       	std	Z+7, r18	; 0x07
	}
	
	return *payload_t;
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	29 81       	ldd	r18, Y+1	; 0x01
     61a:	3a 81       	ldd	r19, Y+2	; 0x02
     61c:	46 e1       	ldi	r20, 0x16	; 22
     61e:	f9 01       	movw	r30, r18
     620:	dc 01       	movw	r26, r24
     622:	01 90       	ld	r0, Z+
     624:	0d 92       	st	X+, r0
     626:	4a 95       	dec	r20
     628:	e1 f7       	brne	.-8      	; 0x622 <sensorDataPackageHandler_getLoRaPayload+0xc2>
}
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <lora_handler_uplink_payload>:
lora_driver_payload_t uplink_payload;

void lora_handler_task( void *pvParameters );

void lora_handler_uplink_payload(UBaseType_t lora_handler_task_priority)
{
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	1f 92       	push	r1
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     650:	e1 2c       	mov	r14, r1
     652:	f1 2c       	mov	r15, r1
     654:	09 81       	ldd	r16, Y+1	; 0x01
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	48 e8       	ldi	r20, 0x88	; 136
     65c:	51 e0       	ldi	r21, 0x01	; 1
     65e:	65 eb       	ldi	r22, 0xB5	; 181
     660:	72 e0       	ldi	r23, 0x02	; 2
     662:	86 e7       	ldi	r24, 0x76	; 118
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
	,  "Uplink_payload_handler_task"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     66a:	00 00       	nop
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	08 95       	ret

0000067a <_lora_setup>:

 void _lora_setup(void)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	66 97       	sbiw	r28, 0x16	; 22
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     694:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <lora_driver_rn2483FactoryReset>
     698:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     69c:	29 2f       	mov	r18, r25
     69e:	2f 93       	push	r18
     6a0:	8f 93       	push	r24
     6a2:	81 ed       	ldi	r24, 0xD1	; 209
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	89 2f       	mov	r24, r25
     6a8:	8f 93       	push	r24
     6aa:	81 ed       	ldi	r24, 0xD1	; 209
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	8f 93       	push	r24
     6b0:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     6bc:	0e 94 1e 38 	call	0x703c	; 0x703c <lora_driver_configureToEu868>
     6c0:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     6c4:	29 2f       	mov	r18, r25
     6c6:	2f 93       	push	r18
     6c8:	8f 93       	push	r24
     6ca:	84 ee       	ldi	r24, 0xE4	; 228
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	89 2f       	mov	r24, r25
     6d0:	8f 93       	push	r24
     6d2:	84 ee       	ldi	r24, 0xE4	; 228
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	8f 93       	push	r24
     6d8:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     6e4:	ce 01       	movw	r24, r28
     6e6:	03 96       	adiw	r24, 0x03	; 3
     6e8:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <lora_driver_getRn2483Hweui>
     6ec:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     6f4:	9c 01       	movw	r18, r24
     6f6:	ce 01       	movw	r24, r28
     6f8:	03 96       	adiw	r24, 0x03	; 3
     6fa:	49 2f       	mov	r20, r25
     6fc:	4f 93       	push	r20
     6fe:	8f 93       	push	r24
     700:	83 2f       	mov	r24, r19
     702:	8f 93       	push	r24
     704:	82 2f       	mov	r24, r18
     706:	8f 93       	push	r24
     708:	8d ef       	ldi	r24, 0xFD	; 253
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	89 2f       	mov	r24, r25
     70e:	8f 93       	push	r24
     710:	8d ef       	ldi	r24, 0xFD	; 253
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	8f 93       	push	r24
     716:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     726:	ce 01       	movw	r24, r28
     728:	03 96       	adiw	r24, 0x03	; 3
     72a:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <lora_driver_setDeviceIdentifier>
     72e:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     732:	29 2f       	mov	r18, r25
     734:	2f 93       	push	r18
     736:	8f 93       	push	r24
     738:	ce 01       	movw	r24, r28
     73a:	03 96       	adiw	r24, 0x03	; 3
     73c:	29 2f       	mov	r18, r25
     73e:	2f 93       	push	r18
     740:	8f 93       	push	r24
     742:	81 e1       	ldi	r24, 0x11	; 17
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	89 2f       	mov	r24, r25
     748:	8f 93       	push	r24
     74a:	81 e1       	ldi	r24, 0x11	; 17
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	8f 93       	push	r24
     750:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     760:	ce 01       	movw	r24, r28
     762:	03 96       	adiw	r24, 0x03	; 3
     764:	ac 01       	movw	r20, r24
     766:	66 e2       	ldi	r22, 0x26	; 38
     768:	73 e0       	ldi	r23, 0x03	; 3
     76a:	87 e4       	ldi	r24, 0x47	; 71
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <lora_driver_setOtaaIdentity>
     772:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     776:	29 2f       	mov	r18, r25
     778:	2f 93       	push	r18
     77a:	8f 93       	push	r24
     77c:	ce 01       	movw	r24, r28
     77e:	03 96       	adiw	r24, 0x03	; 3
     780:	29 2f       	mov	r18, r25
     782:	2f 93       	push	r18
     784:	8f 93       	push	r24
     786:	86 e2       	ldi	r24, 0x26	; 38
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	89 2f       	mov	r24, r25
     78c:	8f 93       	push	r24
     78e:	86 e2       	ldi	r24, 0x26	; 38
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	8f 93       	push	r24
     794:	87 e4       	ldi	r24, 0x47	; 71
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	89 2f       	mov	r24, r25
     79a:	8f 93       	push	r24
     79c:	87 e4       	ldi	r24, 0x47	; 71
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	8f 93       	push	r24
     7a2:	88 e5       	ldi	r24, 0x58	; 88
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	89 2f       	mov	r24, r25
     7a8:	8f 93       	push	r24
     7aa:	88 e5       	ldi	r24, 0x58	; 88
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	8f 93       	push	r24
     7b0:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     7b4:	8d b7       	in	r24, 0x3d	; 61
     7b6:	9e b7       	in	r25, 0x3e	; 62
     7b8:	0a 96       	adiw	r24, 0x0a	; 10
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     7c4:	0e 94 01 37 	call	0x6e02	; 0x6e02 <lora_driver_saveMac>
     7c8:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     7cc:	29 2f       	mov	r18, r25
     7ce:	2f 93       	push	r18
     7d0:	8f 93       	push	r24
     7d2:	8e e8       	ldi	r24, 0x8E	; 142
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	89 2f       	mov	r24, r25
     7d8:	8f 93       	push	r24
     7da:	8e e8       	ldi	r24, 0x8E	; 142
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	8f 93       	push	r24
     7e0:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <lora_driver_setAdaptiveDataRate>
     7f2:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     7f6:	29 2f       	mov	r18, r25
     7f8:	2f 93       	push	r18
     7fa:	8f 93       	push	r24
     7fc:	8d e9       	ldi	r24, 0x9D	; 157
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	89 2f       	mov	r24, r25
     802:	8f 93       	push	r24
     804:	8d e9       	ldi	r24, 0x9D	; 157
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	8f 93       	push	r24
     80a:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     816:	84 ef       	ldi	r24, 0xF4	; 244
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 06 38 	call	0x700c	; 0x700c <lora_driver_setReceiveDelay>
     81e:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     822:	29 2f       	mov	r18, r25
     824:	2f 93       	push	r18
     826:	8f 93       	push	r24
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	8f 93       	push	r24
     82c:	84 ef       	ldi	r24, 0xF4	; 244
     82e:	8f 93       	push	r24
     830:	8e eb       	ldi	r24, 0xBE	; 190
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	89 2f       	mov	r24, r25
     836:	8f 93       	push	r24
     838:	8e eb       	ldi	r24, 0xBE	; 190
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	8f 93       	push	r24
     83e:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	89 83       	std	Y+1, r24	; 0x01
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <lora_driver_join>
     858:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     860:	9c 01       	movw	r18, r24
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	43 2f       	mov	r20, r19
     86a:	4f 93       	push	r20
     86c:	2f 93       	push	r18
     86e:	29 2f       	mov	r18, r25
     870:	2f 93       	push	r18
     872:	8f 93       	push	r24
     874:	8e ed       	ldi	r24, 0xDE	; 222
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	89 2f       	mov	r24, r25
     87a:	8f 93       	push	r24
     87c:	8e ed       	ldi	r24, 0xDE	; 222
     87e:	93 e0       	ldi	r25, 0x03	; 3
     880:	8f 93       	push	r24
     882:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	88 30       	cpi	r24, 0x08	; 8
     896:	81 f0       	breq	.+32     	; 0x8b8 <_lora_setup+0x23e>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     89e:	66 e3       	ldi	r22, 0x36	; 54
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	81 50       	subi	r24, 0x01	; 1
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	88 23       	and	r24, r24
     8b4:	71 f6       	brne	.-100    	; 0x852 <_lora_setup+0x1d8>
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <_lora_setup+0x240>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
     8b8:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LORA_ACCEPTED)
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	88 30       	cpi	r24, 0x08	; 8
     8be:	21 f4       	brne	.+8      	; 0x8c8 <_lora_setup+0x24e>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <status_leds_ledOn>
		while (1)
		{
			taskYIELD();
		}
	}
}
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <_lora_setup+0x260>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <status_leds_fastBlink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     8d4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
		}
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <_lora_setup+0x25a>
	}
}
     8da:	66 96       	adiw	r28, 0x16	; 22
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	2a 97       	sbiw	r28, 0x0a	; 10
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	9a 87       	std	Y+10, r25	; 0x0a
     906:	89 87       	std	Y+9, r24	; 0x09
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 92 36 	call	0x6d24	; 0x6d24 <lora_driver_resetRn2483>
	vTaskDelay(2);
     90e:	62 e0       	ldi	r22, 0x02	; 2
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
	lora_driver_resetRn2483(0);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 92 36 	call	0x6d24	; 0x6d24 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     920:	66 e9       	ldi	r22, 0x96	; 150
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     92c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <lora_driver_flushBuffers>

	_lora_setup();
     930:	a4 de       	rcall	.-696    	; 0x67a <_lora_setup>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000UL); // Upload message every 5 minutes (300000 ms)
     932:	88 e8       	ldi	r24, 0x88	; 136
     934:	9e e0       	ldi	r25, 0x0E	; 14
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	ab 83       	std	Y+3, r26	; 0x03
     940:	bc 83       	std	Y+4, r27	; 0x04
	xLastWakeTime = xTaskGetTickCount();
     942:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <xTaskGetTickCount>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	8d 83       	std	Y+5, r24	; 0x05
     94c:	9e 83       	std	Y+6, r25	; 0x06
     94e:	af 83       	std	Y+7, r26	; 0x07
     950:	b8 87       	std	Y+8, r27	; 0x08
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	ab 81       	ldd	r26, Y+3	; 0x03
     958:	bc 81       	ldd	r27, Y+4	; 0x04
     95a:	9e 01       	movw	r18, r28
     95c:	2b 5f       	subi	r18, 0xFB	; 251
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	ac 01       	movw	r20, r24
     962:	bd 01       	movw	r22, r26
     964:	c9 01       	movw	r24, r18
     966:	0e 94 0c 1b 	call	0x3618	; 0x3618 <xTaskDelayUntil>

		
		xMessageBufferReceive(upLinkMessageBuffer,&uplink_payload,sizeof(uplink_payload),portMAX_DELAY);
     96a:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <upLinkMessageBuffer>
     96e:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <upLinkMessageBuffer+0x1>
     972:	0f ef       	ldi	r16, 0xFF	; 255
     974:	1f ef       	ldi	r17, 0xFF	; 255
     976:	98 01       	movw	r18, r16
     978:	46 e1       	ldi	r20, 0x16	; 22
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e2       	ldi	r22, 0x20	; 32
     97e:	78 e1       	ldi	r23, 0x18	; 24
     980:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xStreamBufferReceive>
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &uplink_payload)));
     98a:	60 e2       	ldi	r22, 0x20	; 32
     98c:	78 e1       	ldi	r23, 0x18	; 24
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 30 37 	call	0x6e60	; 0x6e60 <lora_driver_sendUploadMessage>
     994:	0e 94 1d 39 	call	0x723a	; 0x723a <lora_driver_mapReturnCodeToText>
     998:	29 2f       	mov	r18, r25
     99a:	2f 93       	push	r18
     99c:	8f 93       	push	r24
     99e:	8e ef       	ldi	r24, 0xFE	; 254
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	89 2f       	mov	r24, r25
     9a4:	8f 93       	push	r24
     9a6:	8e ef       	ldi	r24, 0xFE	; 254
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	8f 93       	push	r24
     9ac:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
	}
     9b8:	cc cf       	rjmp	.-104    	; 0x952 <lora_handler_task+0x66>

000009ba <initializeEventGroup>:
EventGroupHandle_t dataReadyEventGroup;
MessageBufferHandle_t upLinkMessageBuffer;
//MessageBufferHandle_t downLinkMessageBuffer;

void initializeEventGroup()
{
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
	dataReadyEventGroup = xEventGroupCreate();
     9c2:	fd d0       	rcall	.+506    	; 0xbbe <xEventGroupCreate>
     9c4:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <dataReadyEventGroup+0x1>
     9c8:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
     9cc:	f8 d0       	rcall	.+496    	; 0xbbe <xEventGroupCreate>
     9ce:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <measureEventGroup+0x1>
     9d2:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <measureEventGroup>
     9d6:	00 00       	nop
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <createUpLinkMessageBuffer>:
     9de:	cf 93       	push	r28


void createUpLinkMessageBuffer()
{
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	
	upLinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	8c e2       	ldi	r24, 0x2C	; 44
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 1a 13 	call	0x2634	; 0x2634 <xStreamBufferGenericCreate>
     9f4:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <upLinkMessageBuffer+0x1>
     9f8:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <upLinkMessageBuffer>
	if(upLinkMessageBuffer == NULL )
     9fc:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <upLinkMessageBuffer>
     a00:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <upLinkMessageBuffer+0x1>
     a04:	89 2b       	or	r24, r25
     a06:	61 f4       	brne	.+24     	; 0xa20 <createUpLinkMessageBuffer+0x42>
	{
		printf("Not enough heap memory for uplink message buffer");
     a08:	83 e1       	ldi	r24, 0x13	; 19
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	89 2f       	mov	r24, r25
     a0e:	8f 93       	push	r24
     a10:	83 e1       	ldi	r24, 0x13	; 19
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	8f 93       	push	r24
     a16:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
	}
	else
	{
		printf("Uplink message buffer created succesffully");
	}
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <createUpLinkMessageBuffer+0x58>
	{
		printf("Not enough heap memory for uplink message buffer");
	}
	else
	{
		printf("Uplink message buffer created succesffully");
     a20:	84 e4       	ldi	r24, 0x44	; 68
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	89 2f       	mov	r24, r25
     a26:	8f 93       	push	r24
     a28:	84 e4       	ldi	r24, 0x44	; 68
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	8f 93       	push	r24
     a2e:	0e 94 6e 44 	call	0x88dc	; 0x88dc <printf>
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
	}
     a36:	00 00       	nop
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <getHumidity>:
void create(UBaseType_t Taskpriority)
{
	initializeTempAndHumDriver();
	createTempAndHumTask(Taskpriority);
	
}
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <humidity>
     a4a:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <humidity+0x1>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <getTemperature>:
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <temperature>
     a60:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <temperature+0x1>
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <initializeTempAndHumDriver>:

void initializeTempAndHumDriver()
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	1f 92       	push	r1
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
     a74:	0e 94 b4 34 	call	0x6968	; 0x6968 <hih8120_initialise>
     a78:	89 83       	std	Y+1, r24	; 0x01

	if ( HIH8120_OK == returnCode )
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	88 23       	and	r24, r24
     a7e:	29 f4       	brne	.+10     	; 0xa8a <initializeTempAndHumDriver+0x20>
	{
		printf("Temp and Hum Driver Initialized ok\n");
     a80:	8f e6       	ldi	r24, 0x6F	; 111
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
	}
}
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <initializeTempAndHumDriver+0x28>
	{
		printf("Temp and Hum Driver Initialized ok\n");
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
     a8a:	82 e9       	ldi	r24, 0x92	; 146
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
	}
}
     a92:	00 00       	nop
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <measureTempAndHum>:

void measureTempAndHum()
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	if ( HIH8120_OK != hih8120_wakeup() )
     aa4:	0e 94 cc 34 	call	0x6998	; 0x6998 <hih8120_wakeup>
     aa8:	88 23       	and	r24, r24
     aaa:	21 f0       	breq	.+8      	; 0xab4 <measureTempAndHum+0x18>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
     aac:	8c ea       	ldi	r24, 0xAC	; 172
     aae:	94 e0       	ldi	r25, 0x04	; 4
     ab0:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
     ab4:	63 e0       	ldi	r22, 0x03	; 3
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
     ac0:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <hih8120_measure>
     ac4:	88 23       	and	r24, r24
     ac6:	21 f0       	breq	.+8      	; 0xad0 <measureTempAndHum+0x34>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
     ac8:	8c ec       	ldi	r24, 0xCC	; 204
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
}
     adc:	00 00       	nop
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <TempAndHumTask>:

void TempAndHumTask(void* pvpParameter)
{
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <TempAndHumTask+0x10>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <TempAndHumTask+0x12>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	9e 83       	std	Y+6, r25	; 0x06
     afc:	8d 83       	std	Y+5, r24	; 0x05
	
	while(1)
	{
		//Use it for later when we have both sensors = EventBits_t eventBits = xEventGroupWaitBits(measureEventGroup,ALL_MEASURE_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
		EventBits_t eventBits = xEventGroupWaitBits(measureEventGroup,HUMIDITY_TEMPERATURE_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     afe:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <measureEventGroup>
     b02:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <measureEventGroup+0x1>
     b06:	cc 24       	eor	r12, r12
     b08:	ca 94       	dec	r12
     b0a:	dc 2c       	mov	r13, r12
     b0c:	76 01       	movw	r14, r12
     b0e:	01 e0       	ldi	r16, 0x01	; 1
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	72 d0       	rcall	.+228    	; 0xc00 <xEventGroupWaitBits>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	ab 83       	std	Y+3, r26	; 0x03
     b26:	bc 83       	std	Y+4, r27	; 0x04
		if(eventBits & (HUMIDITY_TEMPERATURE_MEASURE_BIT))
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	ab 81       	ldd	r26, Y+3	; 0x03
     b2e:	bc 81       	ldd	r27, Y+4	; 0x04
     b30:	81 70       	andi	r24, 0x01	; 1
     b32:	99 27       	eor	r25, r25
     b34:	aa 27       	eor	r26, r26
     b36:	bb 27       	eor	r27, r27
     b38:	89 2b       	or	r24, r25
     b3a:	8a 2b       	or	r24, r26
     b3c:	8b 2b       	or	r24, r27
     b3e:	d1 f0       	breq	.+52     	; 0xb74 <TempAndHumTask+0x90>
		{
			puts("Measuring metrics...");
     b40:	81 ef       	ldi	r24, 0xF1	; 241
     b42:	94 e0       	ldi	r25, 0x04	; 4
     b44:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
			measureTempAndHum();
     b48:	a9 df       	rcall	.-174    	; 0xa9c <measureTempAndHum>
			temperature = hih8120_getTemperature_x10();
     b4a:	0e 94 29 35 	call	0x6a52	; 0x6a52 <hih8120_getTemperature_x10>
     b4e:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <temperature+0x1>
     b52:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <temperature>
			humidity = hih8120_getHumidityPercent_x10();
     b56:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <hih8120_getHumidityPercent_x10>
     b5a:	90 93 5b 08 	sts	0x085B, r25	; 0x80085b <humidity+0x1>
     b5e:	80 93 5a 08 	sts	0x085A, r24	; 0x80085a <humidity>
			//printf("Temperature: %d\n",Temp);
			//printf("Humidity: %d\n",Humidity);
			//Use it for later when we have both sensors = xEventGroupSetBits(dataReadyEventGroup,ALL_READY_BIT);
			xEventGroupSetBits(dataReadyEventGroup,HUMIDITY_TEMPERATURE_READY_BIT);
     b62:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <dataReadyEventGroup>
     b66:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <dataReadyEventGroup+0x1>
     b6a:	42 e0       	ldi	r20, 0x02	; 2
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	7d d1       	rcall	.+762    	; 0xe6e <xEventGroupSetBits>
		}
		vTaskDelay(pdMS_TO_TICKS(10));
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	cb 01       	movw	r24, r22
     b7a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
	}
     b7e:	bf cf       	rjmp	.-130    	; 0xafe <TempAndHumTask+0x1a>

00000b80 <createTempAndHumTask>:
}

void createTempAndHumTask(UBaseType_t Taskpriority)
{
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	1f 92       	push	r1
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	initializeTempAndHumDriver();
     b92:	6b df       	rcall	.-298    	; 0xa6a <initializeTempAndHumDriver>
	xTaskCreate(
     b94:	e1 2c       	mov	r14, r1
     b96:	f1 2c       	mov	r15, r1
     b98:	09 81       	ldd	r16, Y+1	; 0x01
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 ec       	ldi	r20, 0xC0	; 192
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	75 e0       	ldi	r23, 0x05	; 5
     ba6:	82 e7       	ldi	r24, 0x72	; 114
     ba8:	95 e0       	ldi	r25, 0x05	; 5
     baa:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
	,  "TempAndHumTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + Taskpriority
	,  NULL );
}
     bae:	00 00       	nop
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <xEventGroupCreate>:
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	1f 92       	push	r1
     bc4:	1f 92       	push	r1
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	8f e0       	ldi	r24, 0x0F	; 15
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	aa d2       	rcall	.+1364   	; 0x1124 <pvPortMalloc>
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	89 2b       	or	r24, r25
     bda:	59 f0       	breq	.+22     	; 0xbf2 <xEventGroupCreate+0x34>
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	fc 01       	movw	r30, r24
     be2:	10 82       	st	Z, r1
     be4:	11 82       	std	Z+1, r1	; 0x01
     be6:	12 82       	std	Z+2, r1	; 0x02
     be8:	13 82       	std	Z+3, r1	; 0x03
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	04 96       	adiw	r24, 0x04	; 4
     bf0:	52 d5       	rcall	.+2724   	; 0x1696 <vListInitialise>
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <xEventGroupWaitBits>:
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	6d 97       	sbiw	r28, 0x1d	; 29
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	9b 8b       	std	Y+19, r25	; 0x13
     c22:	8a 8b       	std	Y+18, r24	; 0x12
     c24:	4c 8b       	std	Y+20, r20	; 0x14
     c26:	5d 8b       	std	Y+21, r21	; 0x15
     c28:	6e 8b       	std	Y+22, r22	; 0x16
     c2a:	7f 8b       	std	Y+23, r23	; 0x17
     c2c:	28 8f       	std	Y+24, r18	; 0x18
     c2e:	09 8f       	std	Y+25, r16	; 0x19
     c30:	ca 8e       	std	Y+26, r12	; 0x1a
     c32:	db 8e       	std	Y+27, r13	; 0x1b
     c34:	ec 8e       	std	Y+28, r14	; 0x1c
     c36:	fd 8e       	std	Y+29, r15	; 0x1d
     c38:	8a 89       	ldd	r24, Y+18	; 0x12
     c3a:	9b 89       	ldd	r25, Y+19	; 0x13
     c3c:	9a 87       	std	Y+10, r25	; 0x0a
     c3e:	89 87       	std	Y+9, r24	; 0x09
     c40:	1d 82       	std	Y+5, r1	; 0x05
     c42:	1e 82       	std	Y+6, r1	; 0x06
     c44:	1f 82       	std	Y+7, r1	; 0x07
     c46:	18 86       	std	Y+8, r1	; 0x08
     c48:	1b 86       	std	Y+11, r1	; 0x0b
     c4a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	a2 81       	ldd	r26, Z+2	; 0x02
     c5a:	b3 81       	ldd	r27, Z+3	; 0x03
     c5c:	8c 87       	std	Y+12, r24	; 0x0c
     c5e:	9d 87       	std	Y+13, r25	; 0x0d
     c60:	ae 87       	std	Y+14, r26	; 0x0e
     c62:	bf 87       	std	Y+15, r27	; 0x0f
     c64:	2c 89       	ldd	r18, Y+20	; 0x14
     c66:	3d 89       	ldd	r19, Y+21	; 0x15
     c68:	4e 89       	ldd	r20, Y+22	; 0x16
     c6a:	5f 89       	ldd	r21, Y+23	; 0x17
     c6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c70:	ae 85       	ldd	r26, Y+14	; 0x0e
     c72:	bf 85       	ldd	r27, Y+15	; 0x0f
     c74:	09 8d       	ldd	r16, Y+25	; 0x19
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	07 d2       	rcall	.+1038   	; 0x108a <prvTestWaitCondition>
     c7c:	88 8b       	std	Y+16, r24	; 0x10
     c7e:	88 89       	ldd	r24, Y+16	; 0x10
     c80:	88 23       	and	r24, r24
     c82:	59 f1       	breq	.+86     	; 0xcda <xEventGroupWaitBits+0xda>
     c84:	8c 85       	ldd	r24, Y+12	; 0x0c
     c86:	9d 85       	ldd	r25, Y+13	; 0x0d
     c88:	ae 85       	ldd	r26, Y+14	; 0x0e
     c8a:	bf 85       	ldd	r27, Y+15	; 0x0f
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	ab 83       	std	Y+3, r26	; 0x03
     c92:	bc 83       	std	Y+4, r27	; 0x04
     c94:	1a 8e       	std	Y+26, r1	; 0x1a
     c96:	1b 8e       	std	Y+27, r1	; 0x1b
     c98:	1c 8e       	std	Y+28, r1	; 0x1c
     c9a:	1d 8e       	std	Y+29, r1	; 0x1d
     c9c:	88 8d       	ldd	r24, Y+24	; 0x18
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <xEventGroupWaitBits+0xa4>
     ca2:	65 c0       	rjmp	.+202    	; 0xd6e <xEventGroupWaitBits+0x16e>
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	fc 01       	movw	r30, r24
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	42 81       	ldd	r20, Z+2	; 0x02
     cb0:	53 81       	ldd	r21, Z+3	; 0x03
     cb2:	8c 89       	ldd	r24, Y+20	; 0x14
     cb4:	9d 89       	ldd	r25, Y+21	; 0x15
     cb6:	ae 89       	ldd	r26, Y+22	; 0x16
     cb8:	bf 89       	ldd	r27, Y+23	; 0x17
     cba:	80 95       	com	r24
     cbc:	90 95       	com	r25
     cbe:	a0 95       	com	r26
     cc0:	b0 95       	com	r27
     cc2:	82 23       	and	r24, r18
     cc4:	93 23       	and	r25, r19
     cc6:	a4 23       	and	r26, r20
     cc8:	b5 23       	and	r27, r21
     cca:	29 85       	ldd	r18, Y+9	; 0x09
     ccc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cce:	f9 01       	movw	r30, r18
     cd0:	80 83       	st	Z, r24
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	a2 83       	std	Z+2, r26	; 0x02
     cd6:	b3 83       	std	Z+3, r27	; 0x03
     cd8:	4a c0       	rjmp	.+148    	; 0xd6e <xEventGroupWaitBits+0x16e>
     cda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cdc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cde:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ce0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ce2:	89 2b       	or	r24, r25
     ce4:	8a 2b       	or	r24, r26
     ce6:	8b 2b       	or	r24, r27
     ce8:	59 f4       	brne	.+22     	; 0xd00 <xEventGroupWaitBits+0x100>
     cea:	8c 85       	ldd	r24, Y+12	; 0x0c
     cec:	9d 85       	ldd	r25, Y+13	; 0x0d
     cee:	ae 85       	ldd	r26, Y+14	; 0x0e
     cf0:	bf 85       	ldd	r27, Y+15	; 0x0f
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	ab 83       	std	Y+3, r26	; 0x03
     cf8:	bc 83       	std	Y+4, r27	; 0x04
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	37 c0       	rjmp	.+110    	; 0xd6e <xEventGroupWaitBits+0x16e>
     d00:	88 8d       	ldd	r24, Y+24	; 0x18
     d02:	88 23       	and	r24, r24
     d04:	49 f0       	breq	.+18     	; 0xd18 <xEventGroupWaitBits+0x118>
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	af 81       	ldd	r26, Y+7	; 0x07
     d0c:	b8 85       	ldd	r27, Y+8	; 0x08
     d0e:	b1 60       	ori	r27, 0x01	; 1
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	af 83       	std	Y+7, r26	; 0x07
     d16:	b8 87       	std	Y+8, r27	; 0x08
     d18:	89 8d       	ldd	r24, Y+25	; 0x19
     d1a:	88 23       	and	r24, r24
     d1c:	49 f0       	breq	.+18     	; 0xd30 <xEventGroupWaitBits+0x130>
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	af 81       	ldd	r26, Y+7	; 0x07
     d24:	b8 85       	ldd	r27, Y+8	; 0x08
     d26:	b4 60       	ori	r27, 0x04	; 4
     d28:	8d 83       	std	Y+5, r24	; 0x05
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	af 83       	std	Y+7, r26	; 0x07
     d2e:	b8 87       	std	Y+8, r27	; 0x08
     d30:	2c 89       	ldd	r18, Y+20	; 0x14
     d32:	3d 89       	ldd	r19, Y+21	; 0x15
     d34:	4e 89       	ldd	r20, Y+22	; 0x16
     d36:	5f 89       	ldd	r21, Y+23	; 0x17
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	af 81       	ldd	r26, Y+7	; 0x07
     d3e:	b8 85       	ldd	r27, Y+8	; 0x08
     d40:	82 2b       	or	r24, r18
     d42:	93 2b       	or	r25, r19
     d44:	a4 2b       	or	r26, r20
     d46:	b5 2b       	or	r27, r21
     d48:	29 85       	ldd	r18, Y+9	; 0x09
     d4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d4c:	f9 01       	movw	r30, r18
     d4e:	34 96       	adiw	r30, 0x04	; 4
     d50:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d52:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d54:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d56:	5d 8d       	ldd	r21, Y+29	; 0x1d
     d58:	89 01       	movw	r16, r18
     d5a:	9a 01       	movw	r18, r20
     d5c:	ac 01       	movw	r20, r24
     d5e:	bd 01       	movw	r22, r26
     d60:	cf 01       	movw	r24, r30
     d62:	0e 94 ab 20 	call	0x4156	; 0x4156 <vTaskPlaceOnUnorderedEventList>
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	1a 82       	std	Y+2, r1	; 0x02
     d6a:	1b 82       	std	Y+3, r1	; 0x03
     d6c:	1c 82       	std	Y+4, r1	; 0x04
     d6e:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
     d72:	89 8b       	std	Y+17, r24	; 0x11
     d74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d76:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d78:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d7a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d7c:	89 2b       	or	r24, r25
     d7e:	8a 2b       	or	r24, r26
     d80:	8b 2b       	or	r24, r27
     d82:	09 f4       	brne	.+2      	; 0xd86 <xEventGroupWaitBits+0x186>
     d84:	5f c0       	rjmp	.+190    	; 0xe44 <xEventGroupWaitBits+0x244>
     d86:	89 89       	ldd	r24, Y+17	; 0x11
     d88:	88 23       	and	r24, r24
     d8a:	09 f4       	brne	.+2      	; 0xd8e <xEventGroupWaitBits+0x18e>
     d8c:	75 d6       	rcall	.+3306   	; 0x1a78 <vPortYield>
     d8e:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <uxTaskResetEventItemValue>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	ab 83       	std	Y+3, r26	; 0x03
     d9c:	bc 83       	std	Y+4, r27	; 0x04
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	ab 81       	ldd	r26, Y+3	; 0x03
     da4:	bc 81       	ldd	r27, Y+4	; 0x04
     da6:	88 27       	eor	r24, r24
     da8:	99 27       	eor	r25, r25
     daa:	aa 27       	eor	r26, r26
     dac:	b2 70       	andi	r27, 0x02	; 2
     dae:	89 2b       	or	r24, r25
     db0:	8a 2b       	or	r24, r26
     db2:	8b 2b       	or	r24, r27
     db4:	09 f0       	breq	.+2      	; 0xdb8 <xEventGroupWaitBits+0x1b8>
     db6:	3d c0       	rjmp	.+122    	; 0xe32 <xEventGroupWaitBits+0x232>
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	0f 92       	push	r0
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	fc 01       	movw	r30, r24
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	a2 81       	ldd	r26, Z+2	; 0x02
     dca:	b3 81       	ldd	r27, Z+3	; 0x03
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	ab 83       	std	Y+3, r26	; 0x03
     dd2:	bc 83       	std	Y+4, r27	; 0x04
     dd4:	2c 89       	ldd	r18, Y+20	; 0x14
     dd6:	3d 89       	ldd	r19, Y+21	; 0x15
     dd8:	4e 89       	ldd	r20, Y+22	; 0x16
     dda:	5f 89       	ldd	r21, Y+23	; 0x17
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	ab 81       	ldd	r26, Y+3	; 0x03
     de2:	bc 81       	ldd	r27, Y+4	; 0x04
     de4:	09 8d       	ldd	r16, Y+25	; 0x19
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	4f d1       	rcall	.+670    	; 0x108a <prvTestWaitCondition>
     dec:	88 23       	and	r24, r24
     dee:	e9 f0       	breq	.+58     	; 0xe2a <xEventGroupWaitBits+0x22a>
     df0:	88 8d       	ldd	r24, Y+24	; 0x18
     df2:	88 23       	and	r24, r24
     df4:	d1 f0       	breq	.+52     	; 0xe2a <xEventGroupWaitBits+0x22a>
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 81       	ld	r18, Z
     dfe:	31 81       	ldd	r19, Z+1	; 0x01
     e00:	42 81       	ldd	r20, Z+2	; 0x02
     e02:	53 81       	ldd	r21, Z+3	; 0x03
     e04:	8c 89       	ldd	r24, Y+20	; 0x14
     e06:	9d 89       	ldd	r25, Y+21	; 0x15
     e08:	ae 89       	ldd	r26, Y+22	; 0x16
     e0a:	bf 89       	ldd	r27, Y+23	; 0x17
     e0c:	80 95       	com	r24
     e0e:	90 95       	com	r25
     e10:	a0 95       	com	r26
     e12:	b0 95       	com	r27
     e14:	82 23       	and	r24, r18
     e16:	93 23       	and	r25, r19
     e18:	a4 23       	and	r26, r20
     e1a:	b5 23       	and	r27, r21
     e1c:	29 85       	ldd	r18, Y+9	; 0x09
     e1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e20:	f9 01       	movw	r30, r18
     e22:	80 83       	st	Z, r24
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	a2 83       	std	Z+2, r26	; 0x02
     e28:	b3 83       	std	Z+3, r27	; 0x03
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	ab 81       	ldd	r26, Y+3	; 0x03
     e38:	bc 81       	ldd	r27, Y+4	; 0x04
     e3a:	bb 27       	eor	r27, r27
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	ab 83       	std	Y+3, r26	; 0x03
     e42:	bc 83       	std	Y+4, r27	; 0x04
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	ab 81       	ldd	r26, Y+3	; 0x03
     e4a:	bc 81       	ldd	r27, Y+4	; 0x04
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	6d 96       	adiw	r28, 0x1d	; 29
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <xEventGroupSetBits>:
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	6d 97       	sbiw	r28, 0x1d	; 29
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	99 8f       	std	Y+25, r25	; 0x19
     e84:	88 8f       	std	Y+24, r24	; 0x18
     e86:	4a 8f       	std	Y+26, r20	; 0x1a
     e88:	5b 8f       	std	Y+27, r21	; 0x1b
     e8a:	6c 8f       	std	Y+28, r22	; 0x1c
     e8c:	7d 8f       	std	Y+29, r23	; 0x1d
     e8e:	1b 82       	std	Y+3, r1	; 0x03
     e90:	1c 82       	std	Y+4, r1	; 0x04
     e92:	1d 82       	std	Y+5, r1	; 0x05
     e94:	1e 82       	std	Y+6, r1	; 0x06
     e96:	88 8d       	ldd	r24, Y+24	; 0x18
     e98:	99 8d       	ldd	r25, Y+25	; 0x19
     e9a:	99 87       	std	Y+9, r25	; 0x09
     e9c:	88 87       	std	Y+8, r24	; 0x08
     e9e:	1f 82       	std	Y+7, r1	; 0x07
     ea0:	88 85       	ldd	r24, Y+8	; 0x08
     ea2:	99 85       	ldd	r25, Y+9	; 0x09
     ea4:	04 96       	adiw	r24, 0x04	; 4
     ea6:	9b 87       	std	Y+11, r25	; 0x0b
     ea8:	8a 87       	std	Y+10, r24	; 0x0a
     eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
     eac:	9b 85       	ldd	r25, Y+11	; 0x0b
     eae:	03 96       	adiw	r24, 0x03	; 3
     eb0:	9d 87       	std	Y+13, r25	; 0x0d
     eb2:	8c 87       	std	Y+12, r24	; 0x0c
     eb4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
     eb8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eba:	9b 85       	ldd	r25, Y+11	; 0x0b
     ebc:	fc 01       	movw	r30, r24
     ebe:	87 81       	ldd	r24, Z+7	; 0x07
     ec0:	90 85       	ldd	r25, Z+8	; 0x08
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	88 85       	ldd	r24, Y+8	; 0x08
     ec8:	99 85       	ldd	r25, Y+9	; 0x09
     eca:	fc 01       	movw	r30, r24
     ecc:	20 81       	ld	r18, Z
     ece:	31 81       	ldd	r19, Z+1	; 0x01
     ed0:	42 81       	ldd	r20, Z+2	; 0x02
     ed2:	53 81       	ldd	r21, Z+3	; 0x03
     ed4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ed8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     eda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     edc:	82 2b       	or	r24, r18
     ede:	93 2b       	or	r25, r19
     ee0:	a4 2b       	or	r26, r20
     ee2:	b5 2b       	or	r27, r21
     ee4:	28 85       	ldd	r18, Y+8	; 0x08
     ee6:	39 85       	ldd	r19, Y+9	; 0x09
     ee8:	f9 01       	movw	r30, r18
     eea:	80 83       	st	Z, r24
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	a2 83       	std	Z+2, r26	; 0x02
     ef0:	b3 83       	std	Z+3, r27	; 0x03
     ef2:	95 c0       	rjmp	.+298    	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	fc 01       	movw	r30, r24
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	95 81       	ldd	r25, Z+5	; 0x05
     efe:	9f 87       	std	Y+15, r25	; 0x0f
     f00:	8e 87       	std	Y+14, r24	; 0x0e
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	a2 81       	ldd	r26, Z+2	; 0x02
     f0e:	b3 81       	ldd	r27, Z+3	; 0x03
     f10:	88 8b       	std	Y+16, r24	; 0x10
     f12:	99 8b       	std	Y+17, r25	; 0x11
     f14:	aa 8b       	std	Y+18, r26	; 0x12
     f16:	bb 8b       	std	Y+19, r27	; 0x13
     f18:	1f 82       	std	Y+7, r1	; 0x07
     f1a:	88 89       	ldd	r24, Y+16	; 0x10
     f1c:	99 89       	ldd	r25, Y+17	; 0x11
     f1e:	aa 89       	ldd	r26, Y+18	; 0x12
     f20:	bb 89       	ldd	r27, Y+19	; 0x13
     f22:	88 27       	eor	r24, r24
     f24:	99 27       	eor	r25, r25
     f26:	aa 27       	eor	r26, r26
     f28:	8c 8b       	std	Y+20, r24	; 0x14
     f2a:	9d 8b       	std	Y+21, r25	; 0x15
     f2c:	ae 8b       	std	Y+22, r26	; 0x16
     f2e:	bf 8b       	std	Y+23, r27	; 0x17
     f30:	88 89       	ldd	r24, Y+16	; 0x10
     f32:	99 89       	ldd	r25, Y+17	; 0x11
     f34:	aa 89       	ldd	r26, Y+18	; 0x12
     f36:	bb 89       	ldd	r27, Y+19	; 0x13
     f38:	bb 27       	eor	r27, r27
     f3a:	88 8b       	std	Y+16, r24	; 0x10
     f3c:	99 8b       	std	Y+17, r25	; 0x11
     f3e:	aa 8b       	std	Y+18, r26	; 0x12
     f40:	bb 8b       	std	Y+19, r27	; 0x13
     f42:	8c 89       	ldd	r24, Y+20	; 0x14
     f44:	9d 89       	ldd	r25, Y+21	; 0x15
     f46:	ae 89       	ldd	r26, Y+22	; 0x16
     f48:	bf 89       	ldd	r27, Y+23	; 0x17
     f4a:	88 27       	eor	r24, r24
     f4c:	99 27       	eor	r25, r25
     f4e:	aa 27       	eor	r26, r26
     f50:	b4 70       	andi	r27, 0x04	; 4
     f52:	89 2b       	or	r24, r25
     f54:	8a 2b       	or	r24, r26
     f56:	8b 2b       	or	r24, r27
     f58:	b1 f4       	brne	.+44     	; 0xf86 <xEventGroupSetBits+0x118>
     f5a:	88 85       	ldd	r24, Y+8	; 0x08
     f5c:	99 85       	ldd	r25, Y+9	; 0x09
     f5e:	fc 01       	movw	r30, r24
     f60:	20 81       	ld	r18, Z
     f62:	31 81       	ldd	r19, Z+1	; 0x01
     f64:	42 81       	ldd	r20, Z+2	; 0x02
     f66:	53 81       	ldd	r21, Z+3	; 0x03
     f68:	88 89       	ldd	r24, Y+16	; 0x10
     f6a:	99 89       	ldd	r25, Y+17	; 0x11
     f6c:	aa 89       	ldd	r26, Y+18	; 0x12
     f6e:	bb 89       	ldd	r27, Y+19	; 0x13
     f70:	82 23       	and	r24, r18
     f72:	93 23       	and	r25, r19
     f74:	a4 23       	and	r26, r20
     f76:	b5 23       	and	r27, r21
     f78:	89 2b       	or	r24, r25
     f7a:	8a 2b       	or	r24, r26
     f7c:	8b 2b       	or	r24, r27
     f7e:	e9 f0       	breq	.+58     	; 0xfba <xEventGroupSetBits+0x14c>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	8f 83       	std	Y+7, r24	; 0x07
     f84:	1a c0       	rjmp	.+52     	; 0xfba <xEventGroupSetBits+0x14c>
     f86:	88 85       	ldd	r24, Y+8	; 0x08
     f88:	99 85       	ldd	r25, Y+9	; 0x09
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	42 81       	ldd	r20, Z+2	; 0x02
     f92:	53 81       	ldd	r21, Z+3	; 0x03
     f94:	88 89       	ldd	r24, Y+16	; 0x10
     f96:	99 89       	ldd	r25, Y+17	; 0x11
     f98:	aa 89       	ldd	r26, Y+18	; 0x12
     f9a:	bb 89       	ldd	r27, Y+19	; 0x13
     f9c:	28 23       	and	r18, r24
     f9e:	39 23       	and	r19, r25
     fa0:	4a 23       	and	r20, r26
     fa2:	5b 23       	and	r21, r27
     fa4:	88 89       	ldd	r24, Y+16	; 0x10
     fa6:	99 89       	ldd	r25, Y+17	; 0x11
     fa8:	aa 89       	ldd	r26, Y+18	; 0x12
     faa:	bb 89       	ldd	r27, Y+19	; 0x13
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	4a 07       	cpc	r20, r26
     fb2:	5b 07       	cpc	r21, r27
     fb4:	11 f4       	brne	.+4      	; 0xfba <xEventGroupSetBits+0x14c>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	88 23       	and	r24, r24
     fbe:	59 f1       	breq	.+86     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fc0:	8c 89       	ldd	r24, Y+20	; 0x14
     fc2:	9d 89       	ldd	r25, Y+21	; 0x15
     fc4:	ae 89       	ldd	r26, Y+22	; 0x16
     fc6:	bf 89       	ldd	r27, Y+23	; 0x17
     fc8:	88 27       	eor	r24, r24
     fca:	99 27       	eor	r25, r25
     fcc:	aa 27       	eor	r26, r26
     fce:	b1 70       	andi	r27, 0x01	; 1
     fd0:	89 2b       	or	r24, r25
     fd2:	8a 2b       	or	r24, r26
     fd4:	8b 2b       	or	r24, r27
     fd6:	81 f0       	breq	.+32     	; 0xff8 <xEventGroupSetBits+0x18a>
     fd8:	2b 81       	ldd	r18, Y+3	; 0x03
     fda:	3c 81       	ldd	r19, Y+4	; 0x04
     fdc:	4d 81       	ldd	r20, Y+5	; 0x05
     fde:	5e 81       	ldd	r21, Y+6	; 0x06
     fe0:	88 89       	ldd	r24, Y+16	; 0x10
     fe2:	99 89       	ldd	r25, Y+17	; 0x11
     fe4:	aa 89       	ldd	r26, Y+18	; 0x12
     fe6:	bb 89       	ldd	r27, Y+19	; 0x13
     fe8:	82 2b       	or	r24, r18
     fea:	93 2b       	or	r25, r19
     fec:	a4 2b       	or	r26, r20
     fee:	b5 2b       	or	r27, r21
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	9c 83       	std	Y+4, r25	; 0x04
     ff4:	ad 83       	std	Y+5, r26	; 0x05
     ff6:	be 83       	std	Y+6, r27	; 0x06
     ff8:	88 85       	ldd	r24, Y+8	; 0x08
     ffa:	99 85       	ldd	r25, Y+9	; 0x09
     ffc:	fc 01       	movw	r30, r24
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	a2 81       	ldd	r26, Z+2	; 0x02
    1004:	b3 81       	ldd	r27, Z+3	; 0x03
    1006:	b2 60       	ori	r27, 0x02	; 2
    1008:	29 81       	ldd	r18, Y+1	; 0x01
    100a:	3a 81       	ldd	r19, Y+2	; 0x02
    100c:	ac 01       	movw	r20, r24
    100e:	bd 01       	movw	r22, r26
    1010:	c9 01       	movw	r24, r18
    1012:	0e 94 19 23 	call	0x4632	; 0x4632 <vTaskRemoveFromUnorderedEventList>
    1016:	8e 85       	ldd	r24, Y+14	; 0x0e
    1018:	9f 85       	ldd	r25, Y+15	; 0x0f
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	8c 85       	ldd	r24, Y+12	; 0x0c
    1024:	9d 85       	ldd	r25, Y+13	; 0x0d
    1026:	28 17       	cp	r18, r24
    1028:	39 07       	cpc	r19, r25
    102a:	09 f0       	breq	.+2      	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    102c:	63 cf       	rjmp	.-314    	; 0xef4 <xEventGroupSetBits+0x86>
    102e:	88 85       	ldd	r24, Y+8	; 0x08
    1030:	99 85       	ldd	r25, Y+9	; 0x09
    1032:	fc 01       	movw	r30, r24
    1034:	20 81       	ld	r18, Z
    1036:	31 81       	ldd	r19, Z+1	; 0x01
    1038:	42 81       	ldd	r20, Z+2	; 0x02
    103a:	53 81       	ldd	r21, Z+3	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	ad 81       	ldd	r26, Y+5	; 0x05
    1042:	be 81       	ldd	r27, Y+6	; 0x06
    1044:	80 95       	com	r24
    1046:	90 95       	com	r25
    1048:	a0 95       	com	r26
    104a:	b0 95       	com	r27
    104c:	82 23       	and	r24, r18
    104e:	93 23       	and	r25, r19
    1050:	a4 23       	and	r26, r20
    1052:	b5 23       	and	r27, r21
    1054:	28 85       	ldd	r18, Y+8	; 0x08
    1056:	39 85       	ldd	r19, Y+9	; 0x09
    1058:	f9 01       	movw	r30, r18
    105a:	80 83       	st	Z, r24
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	a2 83       	std	Z+2, r26	; 0x02
    1060:	b3 83       	std	Z+3, r27	; 0x03
    1062:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    1066:	88 85       	ldd	r24, Y+8	; 0x08
    1068:	99 85       	ldd	r25, Y+9	; 0x09
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	a2 81       	ldd	r26, Z+2	; 0x02
    1072:	b3 81       	ldd	r27, Z+3	; 0x03
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	6d 96       	adiw	r28, 0x1d	; 29
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
    108a:	0f 93       	push	r16
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2a 97       	sbiw	r28, 0x0a	; 10
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	7b 83       	std	Y+3, r23	; 0x03
    10a4:	8c 83       	std	Y+4, r24	; 0x04
    10a6:	9d 83       	std	Y+5, r25	; 0x05
    10a8:	2e 83       	std	Y+6, r18	; 0x06
    10aa:	3f 83       	std	Y+7, r19	; 0x07
    10ac:	48 87       	std	Y+8, r20	; 0x08
    10ae:	59 87       	std	Y+9, r21	; 0x09
    10b0:	0a 87       	std	Y+10, r16	; 0x0a
    BaseType_t xWaitConditionMet = pdFALSE;
    10b2:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
    10b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b6:	88 23       	and	r24, r24
    10b8:	99 f4       	brne	.+38     	; 0x10e0 <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    10ba:	2a 81       	ldd	r18, Y+2	; 0x02
    10bc:	3b 81       	ldd	r19, Y+3	; 0x03
    10be:	4c 81       	ldd	r20, Y+4	; 0x04
    10c0:	5d 81       	ldd	r21, Y+5	; 0x05
    10c2:	8e 81       	ldd	r24, Y+6	; 0x06
    10c4:	9f 81       	ldd	r25, Y+7	; 0x07
    10c6:	a8 85       	ldd	r26, Y+8	; 0x08
    10c8:	b9 85       	ldd	r27, Y+9	; 0x09
    10ca:	82 23       	and	r24, r18
    10cc:	93 23       	and	r25, r19
    10ce:	a4 23       	and	r26, r20
    10d0:	b5 23       	and	r27, r21
    10d2:	89 2b       	or	r24, r25
    10d4:	8a 2b       	or	r24, r26
    10d6:	8b 2b       	or	r24, r27
    10d8:	d1 f0       	breq	.+52     	; 0x110e <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	17 c0       	rjmp	.+46     	; 0x110e <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    10e0:	2a 81       	ldd	r18, Y+2	; 0x02
    10e2:	3b 81       	ldd	r19, Y+3	; 0x03
    10e4:	4c 81       	ldd	r20, Y+4	; 0x04
    10e6:	5d 81       	ldd	r21, Y+5	; 0x05
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f 81       	ldd	r25, Y+7	; 0x07
    10ec:	a8 85       	ldd	r26, Y+8	; 0x08
    10ee:	b9 85       	ldd	r27, Y+9	; 0x09
    10f0:	28 23       	and	r18, r24
    10f2:	39 23       	and	r19, r25
    10f4:	4a 23       	and	r20, r26
    10f6:	5b 23       	and	r21, r27
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	a8 85       	ldd	r26, Y+8	; 0x08
    10fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1100:	28 17       	cp	r18, r24
    1102:	39 07       	cpc	r19, r25
    1104:	4a 07       	cpc	r20, r26
    1106:	5b 07       	cpc	r21, r27
    1108:	11 f4       	brne	.+4      	; 0x110e <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1110:	2a 96       	adiw	r28, 0x0a	; 10
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	2a 97       	sbiw	r28, 0x0a	; 10
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	9a 87       	std	Y+10, r25	; 0x0a
    113a:	89 87       	std	Y+9, r24	; 0x09
    113c:	1e 82       	std	Y+6, r1	; 0x06
    113e:	1d 82       	std	Y+5, r1	; 0x05
    1140:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
    1144:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <pxEnd>
    1148:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <pxEnd+0x1>
    114c:	89 2b       	or	r24, r25
    114e:	09 f4       	brne	.+2      	; 0x1152 <pvPortMalloc+0x2e>
    1150:	6e d1       	rcall	.+732    	; 0x142e <prvHeapInit>
    1152:	20 91 16 16 	lds	r18, 0x1616	; 0x801616 <xBlockAllocatedBit>
    1156:	30 91 17 16 	lds	r19, 0x1617	; 0x801617 <xBlockAllocatedBit+0x1>
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	82 23       	and	r24, r18
    1160:	93 23       	and	r25, r19
    1162:	89 2b       	or	r24, r25
    1164:	09 f0       	breq	.+2      	; 0x1168 <pvPortMalloc+0x44>
    1166:	e1 c0       	rjmp	.+450    	; 0x132a <pvPortMalloc+0x206>
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	89 2b       	or	r24, r25
    116e:	a1 f0       	breq	.+40     	; 0x1198 <pvPortMalloc+0x74>
    1170:	24 e0       	ldi	r18, 0x04	; 4
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	28 0f       	add	r18, r24
    117a:	39 1f       	adc	r19, r25
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	82 17       	cp	r24, r18
    1182:	93 07       	cpc	r25, r19
    1184:	48 f4       	brcc	.+18     	; 0x1198 <pvPortMalloc+0x74>
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	29 85       	ldd	r18, Y+9	; 0x09
    118c:	3a 85       	ldd	r19, Y+10	; 0x0a
    118e:	82 0f       	add	r24, r18
    1190:	93 1f       	adc	r25, r19
    1192:	9a 87       	std	Y+10, r25	; 0x0a
    1194:	89 87       	std	Y+9, r24	; 0x09
    1196:	02 c0       	rjmp	.+4      	; 0x119c <pvPortMalloc+0x78>
    1198:	1a 86       	std	Y+10, r1	; 0x0a
    119a:	19 86       	std	Y+9, r1	; 0x09
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	89 2b       	or	r24, r25
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <pvPortMalloc+0x82>
    11a4:	c2 c0       	rjmp	.+388    	; 0x132a <pvPortMalloc+0x206>
    11a6:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <xFreeBytesRemaining>
    11aa:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <xFreeBytesRemaining+0x1>
    11ae:	29 85       	ldd	r18, Y+9	; 0x09
    11b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b2:	82 17       	cp	r24, r18
    11b4:	93 07       	cpc	r25, r19
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <pvPortMalloc+0x96>
    11b8:	b8 c0       	rjmp	.+368    	; 0x132a <pvPortMalloc+0x206>
    11ba:	88 e0       	ldi	r24, 0x08	; 8
    11bc:	96 e1       	ldi	r25, 0x16	; 22
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <xStart>
    11c6:	90 91 09 16 	lds	r25, 0x1609	; 0x801609 <xStart+0x1>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <pvPortMalloc+0xc2>
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	fc 01       	movw	r30, r24
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	22 81       	ldd	r18, Z+2	; 0x02
    11ee:	33 81       	ldd	r19, Z+3	; 0x03
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	38 f4       	brcc	.+14     	; 0x1208 <pvPortMalloc+0xe4>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	89 2b       	or	r24, r25
    1206:	21 f7       	brne	.-56     	; 0x11d0 <pvPortMalloc+0xac>
    1208:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <pxEnd>
    120c:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <pxEnd+0x1>
    1210:	29 81       	ldd	r18, Y+1	; 0x01
    1212:	3a 81       	ldd	r19, Y+2	; 0x02
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	09 f4       	brne	.+2      	; 0x121c <pvPortMalloc+0xf8>
    121a:	87 c0       	rjmp	.+270    	; 0x132a <pvPortMalloc+0x206>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	fc 01       	movw	r30, r24
    1222:	20 81       	ld	r18, Z
    1224:	31 81       	ldd	r19, Z+1	; 0x01
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	82 0f       	add	r24, r18
    122c:	93 1f       	adc	r25, r19
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	fc 01       	movw	r30, r24
    1238:	20 81       	ld	r18, Z
    123a:	31 81       	ldd	r19, Z+1	; 0x01
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	fc 01       	movw	r30, r24
    1242:	31 83       	std	Z+1, r19	; 0x01
    1244:	20 83       	st	Z, r18
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	22 81       	ldd	r18, Z+2	; 0x02
    124e:	33 81       	ldd	r19, Z+3	; 0x03
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	28 1b       	sub	r18, r24
    1256:	39 0b       	sbc	r19, r25
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	00 f5       	brcc	.+64     	; 0x12a6 <pvPortMalloc+0x182>
    1266:	29 81       	ldd	r18, Y+1	; 0x01
    1268:	3a 81       	ldd	r19, Y+2	; 0x02
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	8f 83       	std	Y+7, r24	; 0x07
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	fc 01       	movw	r30, r24
    127c:	22 81       	ldd	r18, Z+2	; 0x02
    127e:	33 81       	ldd	r19, Z+3	; 0x03
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	28 1b       	sub	r18, r24
    1286:	39 0b       	sbc	r19, r25
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	fc 01       	movw	r30, r24
    128e:	33 83       	std	Z+3, r19	; 0x03
    1290:	22 83       	std	Z+2, r18	; 0x02
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	29 85       	ldd	r18, Y+9	; 0x09
    1298:	3a 85       	ldd	r19, Y+10	; 0x0a
    129a:	fc 01       	movw	r30, r24
    129c:	33 83       	std	Z+3, r19	; 0x03
    129e:	22 83       	std	Z+2, r18	; 0x02
    12a0:	8f 81       	ldd	r24, Y+7	; 0x07
    12a2:	98 85       	ldd	r25, Y+8	; 0x08
    12a4:	44 d1       	rcall	.+648    	; 0x152e <prvInsertBlockIntoFreeList>
    12a6:	20 91 0e 16 	lds	r18, 0x160E	; 0x80160e <xFreeBytesRemaining>
    12aa:	30 91 0f 16 	lds	r19, 0x160F	; 0x80160f <xFreeBytesRemaining+0x1>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	fc 01       	movw	r30, r24
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	a9 01       	movw	r20, r18
    12ba:	48 1b       	sub	r20, r24
    12bc:	59 0b       	sbc	r21, r25
    12be:	ca 01       	movw	r24, r20
    12c0:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <xFreeBytesRemaining+0x1>
    12c4:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <xFreeBytesRemaining>
    12c8:	20 91 0e 16 	lds	r18, 0x160E	; 0x80160e <xFreeBytesRemaining>
    12cc:	30 91 0f 16 	lds	r19, 0x160F	; 0x80160f <xFreeBytesRemaining+0x1>
    12d0:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <xMinimumEverFreeBytesRemaining>
    12d4:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <xMinimumEverFreeBytesRemaining+0x1>
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	40 f4       	brcc	.+16     	; 0x12ee <pvPortMalloc+0x1ca>
    12de:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <xFreeBytesRemaining>
    12e2:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <xFreeBytesRemaining+0x1>
    12e6:	90 93 11 16 	sts	0x1611, r25	; 0x801611 <xMinimumEverFreeBytesRemaining+0x1>
    12ea:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <xMinimumEverFreeBytesRemaining>
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	fc 01       	movw	r30, r24
    12f4:	22 81       	ldd	r18, Z+2	; 0x02
    12f6:	33 81       	ldd	r19, Z+3	; 0x03
    12f8:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <xBlockAllocatedBit>
    12fc:	90 91 17 16 	lds	r25, 0x1617	; 0x801617 <xBlockAllocatedBit+0x1>
    1300:	28 2b       	or	r18, r24
    1302:	39 2b       	or	r19, r25
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	fc 01       	movw	r30, r24
    130a:	33 83       	std	Z+3, r19	; 0x03
    130c:	22 83       	std	Z+2, r18	; 0x02
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	fc 01       	movw	r30, r24
    1314:	11 82       	std	Z+1, r1	; 0x01
    1316:	10 82       	st	Z, r1
    1318:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <xNumberOfSuccessfulAllocations>
    131c:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <xNumberOfSuccessfulAllocations+0x1>
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	90 93 13 16 	sts	0x1613, r25	; 0x801613 <xNumberOfSuccessfulAllocations+0x1>
    1326:	80 93 12 16 	sts	0x1612, r24	; 0x801612 <xNumberOfSuccessfulAllocations>
    132a:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	89 2b       	or	r24, r25
    1334:	11 f4       	brne	.+4      	; 0x133a <pvPortMalloc+0x216>
    1336:	0e 94 3c 32 	call	0x6478	; 0x6478 <vApplicationMallocFailedHook>
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	2a 96       	adiw	r28, 0x0a	; 10
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <vPortFree>:
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 d0       	rcall	.+0      	; 0x1356 <vPortFree+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <vPortFree+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	89 2b       	or	r24, r25
    136e:	09 f4       	brne	.+2      	; 0x1372 <vPortFree+0x22>
    1370:	54 c0       	rjmp	.+168    	; 0x141a <vPortFree+0xca>
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	91 95       	neg	r25
    1378:	81 95       	neg	r24
    137a:	91 09       	sbc	r25, r1
    137c:	29 81       	ldd	r18, Y+1	; 0x01
    137e:	3a 81       	ldd	r19, Y+2	; 0x02
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	fc 01       	movw	r30, r24
    1396:	22 81       	ldd	r18, Z+2	; 0x02
    1398:	33 81       	ldd	r19, Z+3	; 0x03
    139a:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <xBlockAllocatedBit>
    139e:	90 91 17 16 	lds	r25, 0x1617	; 0x801617 <xBlockAllocatedBit+0x1>
    13a2:	82 23       	and	r24, r18
    13a4:	93 23       	and	r25, r19
    13a6:	89 2b       	or	r24, r25
    13a8:	c1 f1       	breq	.+112    	; 0x141a <vPortFree+0xca>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	89 2b       	or	r24, r25
    13b6:	89 f5       	brne	.+98     	; 0x141a <vPortFree+0xca>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	fc 01       	movw	r30, r24
    13be:	22 81       	ldd	r18, Z+2	; 0x02
    13c0:	33 81       	ldd	r19, Z+3	; 0x03
    13c2:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <xBlockAllocatedBit>
    13c6:	90 91 17 16 	lds	r25, 0x1617	; 0x801617 <xBlockAllocatedBit+0x1>
    13ca:	80 95       	com	r24
    13cc:	90 95       	com	r25
    13ce:	28 23       	and	r18, r24
    13d0:	39 23       	and	r19, r25
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	fc 01       	movw	r30, r24
    13d8:	33 83       	std	Z+3, r19	; 0x03
    13da:	22 83       	std	Z+2, r18	; 0x02
    13dc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	fc 01       	movw	r30, r24
    13e6:	22 81       	ldd	r18, Z+2	; 0x02
    13e8:	33 81       	ldd	r19, Z+3	; 0x03
    13ea:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <xFreeBytesRemaining>
    13ee:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <xFreeBytesRemaining+0x1>
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <xFreeBytesRemaining+0x1>
    13fa:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <xFreeBytesRemaining>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	95 d0       	rcall	.+298    	; 0x152e <prvInsertBlockIntoFreeList>
    1404:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <xNumberOfSuccessfulFrees>
    1408:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <xNumberOfSuccessfulFrees+0x1>
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	90 93 15 16 	sts	0x1615, r25	; 0x801615 <xNumberOfSuccessfulFrees+0x1>
    1412:	80 93 14 16 	sts	0x1614, r24	; 0x801614 <xNumberOfSuccessfulFrees>
    1416:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    141a:	00 00       	nop
    141c:	26 96       	adiw	r28, 0x06	; 6
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	28 97       	sbiw	r28, 0x08	; 8
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    1442:	8c ea       	ldi	r24, 0xAC	; 172
    1444:	9d e0       	ldi	r25, 0x0D	; 13
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
    144a:	8c e5       	ldi	r24, 0x5C	; 92
    144c:	98 e0       	ldi	r25, 0x08	; 8
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	90 93 09 16 	sts	0x1609, r25	; 0x801609 <xStart+0x1>
    1462:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <xStart>
    xStart.xBlockSize = ( size_t ) 0;
    1466:	10 92 0b 16 	sts	0x160B, r1	; 0x80160b <xStart+0x3>
    146a:	10 92 0a 16 	sts	0x160A, r1	; 0x80160a <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    146e:	2d 81       	ldd	r18, Y+5	; 0x05
    1470:	3e 81       	ldd	r19, Y+6	; 0x06
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	a9 01       	movw	r20, r18
    1488:	48 1b       	sub	r20, r24
    148a:	59 0b       	sbc	r21, r25
    148c:	ca 01       	movw	r24, r20
    148e:	9c 83       	std	Y+4, r25	; 0x04
    1490:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	90 93 0d 16 	sts	0x160D, r25	; 0x80160d <pxEnd+0x1>
    149a:	80 93 0c 16 	sts	0x160C, r24	; 0x80160c <pxEnd>
    pxEnd->xBlockSize = 0;
    149e:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <pxEnd>
    14a2:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <pxEnd+0x1>
    14a6:	fc 01       	movw	r30, r24
    14a8:	13 82       	std	Z+3, r1	; 0x03
    14aa:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    14ac:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <pxEnd>
    14b0:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <pxEnd+0x1>
    14b4:	fc 01       	movw	r30, r24
    14b6:	11 82       	std	Z+1, r1	; 0x01
    14b8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	98 87       	std	Y+8, r25	; 0x08
    14c0:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
    14c4:	98 85       	ldd	r25, Y+8	; 0x08
    14c6:	2b 81       	ldd	r18, Y+3	; 0x03
    14c8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ca:	28 1b       	sub	r18, r24
    14cc:	39 0b       	sbc	r19, r25
    14ce:	8f 81       	ldd	r24, Y+7	; 0x07
    14d0:	98 85       	ldd	r25, Y+8	; 0x08
    14d2:	fc 01       	movw	r30, r24
    14d4:	33 83       	std	Z+3, r19	; 0x03
    14d6:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    14d8:	20 91 0c 16 	lds	r18, 0x160C	; 0x80160c <pxEnd>
    14dc:	30 91 0d 16 	lds	r19, 0x160D	; 0x80160d <pxEnd+0x1>
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	fc 01       	movw	r30, r24
    14e6:	31 83       	std	Z+1, r19	; 0x01
    14e8:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	fc 01       	movw	r30, r24
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	90 93 11 16 	sts	0x1611, r25	; 0x801611 <xMinimumEverFreeBytesRemaining+0x1>
    14f8:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	fc 01       	movw	r30, r24
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <xFreeBytesRemaining+0x1>
    150a:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e8       	ldi	r25, 0x80	; 128
    1512:	90 93 17 16 	sts	0x1617, r25	; 0x801617 <xBlockAllocatedBit+0x1>
    1516:	80 93 16 16 	sts	0x1616, r24	; 0x801616 <xBlockAllocatedBit>
}
    151a:	00 00       	nop
    151c:	28 96       	adiw	r28, 0x08	; 8
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <prvInsertBlockIntoFreeList+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <prvInsertBlockIntoFreeList+0x8>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    153e:	88 e0       	ldi	r24, 0x08	; 8
    1540:	96 e1       	ldi	r25, 0x16	; 22
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <prvInsertBlockIntoFreeList+0x28>
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	20 81       	ld	r18, Z
    155e:	31 81       	ldd	r19, Z+1	; 0x01
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	28 17       	cp	r18, r24
    1566:	39 07       	cpc	r19, r25
    1568:	78 f3       	brcs	.-34     	; 0x1548 <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	fc 01       	movw	r30, r24
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	28 0f       	add	r18, r24
    1582:	39 1f       	adc	r19, r25
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	28 17       	cp	r18, r24
    158a:	39 07       	cpc	r19, r25
    158c:	a9 f4       	brne	.+42     	; 0x15b8 <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	fc 01       	movw	r30, r24
    1594:	22 81       	ldd	r18, Z+2	; 0x02
    1596:	33 81       	ldd	r19, Z+3	; 0x03
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	fc 01       	movw	r30, r24
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	28 0f       	add	r18, r24
    15a4:	39 1f       	adc	r19, r25
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	fc 01       	movw	r30, r24
    15ac:	33 83       	std	Z+3, r19	; 0x03
    15ae:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	fc 01       	movw	r30, r24
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	28 17       	cp	r18, r24
    15de:	39 07       	cpc	r19, r25
    15e0:	c1 f5       	brne	.+112    	; 0x1652 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 81       	ld	r18, Z
    15ea:	31 81       	ldd	r19, Z+1	; 0x01
    15ec:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <pxEnd>
    15f0:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <pxEnd+0x1>
    15f4:	28 17       	cp	r18, r24
    15f6:	39 07       	cpc	r19, r25
    15f8:	11 f1       	breq	.+68     	; 0x163e <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	fc 01       	movw	r30, r24
    1600:	22 81       	ldd	r18, Z+2	; 0x02
    1602:	33 81       	ldd	r19, Z+3	; 0x03
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	fc 01       	movw	r30, r24
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	fc 01       	movw	r30, r24
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	fc 01       	movw	r30, r24
    161e:	33 83       	std	Z+3, r19	; 0x03
    1620:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	fc 01       	movw	r30, r24
    162e:	20 81       	ld	r18, Z
    1630:	31 81       	ldd	r19, Z+1	; 0x01
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	fc 01       	movw	r30, r24
    1638:	31 83       	std	Z+1, r19	; 0x01
    163a:	20 83       	st	Z, r18
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    163e:	20 91 0c 16 	lds	r18, 0x160C	; 0x80160c <pxEnd>
    1642:	30 91 0d 16 	lds	r19, 0x160D	; 0x80160d <pxEnd+0x1>
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	fc 01       	movw	r30, r24
    164c:	31 83       	std	Z+1, r19	; 0x01
    164e:	20 83       	st	Z, r18
    1650:	0a c0       	rjmp	.+20     	; 0x1666 <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	fc 01       	movw	r30, r24
    1658:	20 81       	ld	r18, Z
    165a:	31 81       	ldd	r19, Z+1	; 0x01
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	fc 01       	movw	r30, r24
    1662:	31 83       	std	Z+1, r19	; 0x01
    1664:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	28 17       	cp	r18, r24
    1670:	39 07       	cpc	r19, r25
    1672:	39 f0       	breq	.+14     	; 0x1682 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	2d 81       	ldd	r18, Y+5	; 0x05
    167a:	3e 81       	ldd	r19, Y+6	; 0x06
    167c:	fc 01       	movw	r30, r24
    167e:	31 83       	std	Z+1, r19	; 0x01
    1680:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1682:	00 00       	nop
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	1f 92       	push	r1
    169c:	1f 92       	push	r1
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	9c 01       	movw	r18, r24
    16ac:	2d 5f       	subi	r18, 0xFD	; 253
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	fc 01       	movw	r30, r24
    16b6:	32 83       	std	Z+2, r19	; 0x02
    16b8:	21 83       	std	Z+1, r18	; 0x01
    16ba:	29 81       	ldd	r18, Y+1	; 0x01
    16bc:	3a 81       	ldd	r19, Y+2	; 0x02
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	9f ef       	ldi	r25, 0xFF	; 255
    16c2:	dc 01       	movw	r26, r24
    16c4:	f9 01       	movw	r30, r18
    16c6:	83 83       	std	Z+3, r24	; 0x03
    16c8:	94 83       	std	Z+4, r25	; 0x04
    16ca:	a5 83       	std	Z+5, r26	; 0x05
    16cc:	b6 83       	std	Z+6, r27	; 0x06
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	9c 01       	movw	r18, r24
    16d4:	2d 5f       	subi	r18, 0xFD	; 253
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	fc 01       	movw	r30, r24
    16de:	30 87       	std	Z+8, r19	; 0x08
    16e0:	27 83       	std	Z+7, r18	; 0x07
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	9c 01       	movw	r18, r24
    16e8:	2d 5f       	subi	r18, 0xFD	; 253
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	fc 01       	movw	r30, r24
    16f2:	32 87       	std	Z+10, r19	; 0x0a
    16f4:	21 87       	std	Z+9, r18	; 0x09
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	fc 01       	movw	r30, r24
    16fc:	10 82       	st	Z, r1
    16fe:	00 00       	nop
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <vListInitialiseItem>:
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	1f 92       	push	r1
    1710:	1f 92       	push	r1
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	fc 01       	movw	r30, r24
    1720:	13 86       	std	Z+11, r1	; 0x0b
    1722:	12 86       	std	Z+10, r1	; 0x0a
    1724:	00 00       	nop
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2a 97       	sbiw	r28, 0x0a	; 10
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	98 87       	std	Y+8, r25	; 0x08
    1746:	8f 83       	std	Y+7, r24	; 0x07
    1748:	7a 87       	std	Y+10, r23	; 0x0a
    174a:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	a2 81       	ldd	r26, Z+2	; 0x02
    1758:	b3 81       	ldd	r27, Z+3	; 0x03
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	ad 83       	std	Y+5, r26	; 0x05
    1760:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	ad 81       	ldd	r26, Y+5	; 0x05
    1768:	be 81       	ldd	r27, Y+6	; 0x06
    176a:	8f 3f       	cpi	r24, 0xFF	; 255
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	af 4f       	sbci	r26, 0xFF	; 255
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	41 f4       	brne	.+16     	; 0x1784 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	98 85       	ldd	r25, Y+8	; 0x08
    1778:	fc 01       	movw	r30, r24
    177a:	81 85       	ldd	r24, Z+9	; 0x09
    177c:	92 85       	ldd	r25, Z+10	; 0x0a
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	20 c0       	rjmp	.+64     	; 0x17c4 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	03 96       	adiw	r24, 0x03	; 3
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	07 c0       	rjmp	.+14     	; 0x179e <vListInsert+0x6e>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	fc 01       	movw	r30, r24
    1796:	84 81       	ldd	r24, Z+4	; 0x04
    1798:	95 81       	ldd	r25, Z+5	; 0x05
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	fc 01       	movw	r30, r24
    17a4:	84 81       	ldd	r24, Z+4	; 0x04
    17a6:	95 81       	ldd	r25, Z+5	; 0x05
    17a8:	fc 01       	movw	r30, r24
    17aa:	20 81       	ld	r18, Z
    17ac:	31 81       	ldd	r19, Z+1	; 0x01
    17ae:	42 81       	ldd	r20, Z+2	; 0x02
    17b0:	53 81       	ldd	r21, Z+3	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	ad 81       	ldd	r26, Y+5	; 0x05
    17b8:	be 81       	ldd	r27, Y+6	; 0x06
    17ba:	82 17       	cp	r24, r18
    17bc:	93 07       	cpc	r25, r19
    17be:	a4 07       	cpc	r26, r20
    17c0:	b5 07       	cpc	r27, r21
    17c2:	30 f7       	brcc	.-52     	; 0x1790 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	fc 01       	movw	r30, r24
    17ca:	24 81       	ldd	r18, Z+4	; 0x04
    17cc:	35 81       	ldd	r19, Z+5	; 0x05
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	fc 01       	movw	r30, r24
    17d4:	35 83       	std	Z+5, r19	; 0x05
    17d6:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	fc 01       	movw	r30, r24
    17de:	84 81       	ldd	r24, Z+4	; 0x04
    17e0:	95 81       	ldd	r25, Z+5	; 0x05
    17e2:	29 85       	ldd	r18, Y+9	; 0x09
    17e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e6:	fc 01       	movw	r30, r24
    17e8:	37 83       	std	Z+7, r19	; 0x07
    17ea:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	29 81       	ldd	r18, Y+1	; 0x01
    17f2:	3a 81       	ldd	r19, Y+2	; 0x02
    17f4:	fc 01       	movw	r30, r24
    17f6:	37 83       	std	Z+7, r19	; 0x07
    17f8:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	29 85       	ldd	r18, Y+9	; 0x09
    1800:	3a 85       	ldd	r19, Y+10	; 0x0a
    1802:	fc 01       	movw	r30, r24
    1804:	35 83       	std	Z+5, r19	; 0x05
    1806:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	2f 81       	ldd	r18, Y+7	; 0x07
    180e:	38 85       	ldd	r19, Y+8	; 0x08
    1810:	fc 01       	movw	r30, r24
    1812:	33 87       	std	Z+11, r19	; 0x0b
    1814:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1816:	8f 81       	ldd	r24, Y+7	; 0x07
    1818:	98 85       	ldd	r25, Y+8	; 0x08
    181a:	fc 01       	movw	r30, r24
    181c:	80 81       	ld	r24, Z
    181e:	21 e0       	ldi	r18, 0x01	; 1
    1820:	28 0f       	add	r18, r24
    1822:	8f 81       	ldd	r24, Y+7	; 0x07
    1824:	98 85       	ldd	r25, Y+8	; 0x08
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18
}
    182a:	00 00       	nop
    182c:	2a 96       	adiw	r28, 0x0a	; 10
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	08 95       	ret

0000183e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	00 d0       	rcall	.+0      	; 0x1844 <uxListRemove+0x6>
    1844:	1f 92       	push	r1
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	fc 01       	movw	r30, r24
    1854:	82 85       	ldd	r24, Z+10	; 0x0a
    1856:	93 85       	ldd	r25, Z+11	; 0x0b
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	fc 01       	movw	r30, r24
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	95 81       	ldd	r25, Z+5	; 0x05
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	f9 01       	movw	r30, r18
    186c:	26 81       	ldd	r18, Z+6	; 0x06
    186e:	37 81       	ldd	r19, Z+7	; 0x07
    1870:	fc 01       	movw	r30, r24
    1872:	37 83       	std	Z+7, r19	; 0x07
    1874:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	fc 01       	movw	r30, r24
    187c:	86 81       	ldd	r24, Z+6	; 0x06
    187e:	97 81       	ldd	r25, Z+7	; 0x07
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	f9 01       	movw	r30, r18
    1886:	24 81       	ldd	r18, Z+4	; 0x04
    1888:	35 81       	ldd	r19, Z+5	; 0x05
    188a:	fc 01       	movw	r30, r24
    188c:	35 83       	std	Z+5, r19	; 0x05
    188e:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	21 81       	ldd	r18, Z+1	; 0x01
    1898:	32 81       	ldd	r19, Z+2	; 0x02
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	51 f4       	brne	.+20     	; 0x18b8 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	fc 01       	movw	r30, r24
    18aa:	26 81       	ldd	r18, Z+6	; 0x06
    18ac:	37 81       	ldd	r19, Z+7	; 0x07
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	fc 01       	movw	r30, r24
    18b4:	32 83       	std	Z+2, r19	; 0x02
    18b6:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	fc 01       	movw	r30, r24
    18be:	13 86       	std	Z+11, r1	; 0x0b
    18c0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	fc 01       	movw	r30, r24
    18c8:	80 81       	ld	r24, Z
    18ca:	2f ef       	ldi	r18, 0xFF	; 255
    18cc:	28 0f       	add	r18, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	fc 01       	movw	r30, r24
    18d4:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	fc 01       	movw	r30, r24
    18dc:	80 81       	ld	r24, Z
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	28 97       	sbiw	r28, 0x08	; 8
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
    1904:	7e 83       	std	Y+6, r23	; 0x06
    1906:	6d 83       	std	Y+5, r22	; 0x05
    1908:	58 87       	std	Y+8, r21	; 0x08
    190a:	4f 83       	std	Y+7, r20	; 0x07
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	29 81       	ldd	r18, Y+1	; 0x01
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	89 2f       	mov	r24, r25
    192e:	99 27       	eor	r25, r25
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	29 81       	ldd	r18, Y+1	; 0x01
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	fc 01       	movw	r30, r24
    193c:	20 83       	st	Z, r18
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	fc 01       	movw	r30, r24
    194e:	10 82       	st	Z, r1
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9c 83       	std	Y+4, r25	; 0x04
    1958:	8b 83       	std	Y+3, r24	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	fc 01       	movw	r30, r24
    1960:	10 82       	st	Z, r1
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	20 e8       	ldi	r18, 0x80	; 128
    1972:	fc 01       	movw	r30, r24
    1974:	20 83       	st	Z, r18
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	fc 01       	movw	r30, r24
    1986:	10 82       	st	Z, r1
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	fc 01       	movw	r30, r24
    1998:	10 82       	st	Z, r1
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	fc 01       	movw	r30, r24
    19aa:	10 82       	st	Z, r1
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	47 97       	sbiw	r24, 0x17	; 23
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	8f 81       	ldd	r24, Y+7	; 0x07
    19b8:	98 85       	ldd	r25, Y+8	; 0x08
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	29 81       	ldd	r18, Y+1	; 0x01
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	89 2f       	mov	r24, r25
    19d8:	99 27       	eor	r25, r25
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	07 97       	sbiw	r24, 0x07	; 7
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	28 96       	adiw	r28, 0x08	; 8
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <xPortStartScheduler>:
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	ff d0       	rcall	.+510    	; 0x1c10 <prvSetupTimerInterrupt>
    1a12:	a0 91 18 16 	lds	r26, 0x1618	; 0x801618 <pxCurrentTCB>
    1a16:	b0 91 19 16 	lds	r27, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    1a1a:	cd 91       	ld	r28, X+
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	dd 91       	ld	r29, X+
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	7f 90       	pop	r7
    1a54:	6f 90       	pop	r6
    1a56:	5f 90       	pop	r5
    1a58:	4f 90       	pop	r4
    1a5a:	3f 90       	pop	r3
    1a5c:	2f 90       	pop	r2
    1a5e:	1f 90       	pop	r1
    1a60:	0f 90       	pop	r0
    1a62:	0c be       	out	0x3c, r0	; 60
    1a64:	0f 90       	pop	r0
    1a66:	0b be       	out	0x3b, r0	; 59
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	08 95       	ret
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <vPortYield>:
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
    1a80:	0b b6       	in	r0, 0x3b	; 59
    1a82:	0f 92       	push	r0
    1a84:	0c b6       	in	r0, 0x3c	; 60
    1a86:	0f 92       	push	r0
    1a88:	1f 92       	push	r1
    1a8a:	11 24       	eor	r1, r1
    1a8c:	2f 92       	push	r2
    1a8e:	3f 92       	push	r3
    1a90:	4f 92       	push	r4
    1a92:	5f 92       	push	r5
    1a94:	6f 92       	push	r6
    1a96:	7f 92       	push	r7
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	a0 91 18 16 	lds	r26, 0x1618	; 0x801618 <pxCurrentTCB>
    1acc:	b0 91 19 16 	lds	r27, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    1ad0:	0d b6       	in	r0, 0x3d	; 61
    1ad2:	0d 92       	st	X+, r0
    1ad4:	0e b6       	in	r0, 0x3e	; 62
    1ad6:	0d 92       	st	X+, r0
    1ad8:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <vTaskSwitchContext>
    1adc:	a0 91 18 16 	lds	r26, 0x1618	; 0x801618 <pxCurrentTCB>
    1ae0:	b0 91 19 16 	lds	r27, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    1ae4:	cd 91       	ld	r28, X+
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	dd 91       	ld	r29, X+
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	7f 90       	pop	r7
    1b1e:	6f 90       	pop	r6
    1b20:	5f 90       	pop	r5
    1b22:	4f 90       	pop	r4
    1b24:	3f 90       	pop	r3
    1b26:	2f 90       	pop	r2
    1b28:	1f 90       	pop	r1
    1b2a:	0f 90       	pop	r0
    1b2c:	0c be       	out	0x3c, r0	; 60
    1b2e:	0f 90       	pop	r0
    1b30:	0b be       	out	0x3b, r0	; 59
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	08 95       	ret
	...

00001b3c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b3c:	0f 92       	push	r0
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	0f 92       	push	r0
    1b44:	0b b6       	in	r0, 0x3b	; 59
    1b46:	0f 92       	push	r0
    1b48:	0c b6       	in	r0, 0x3c	; 60
    1b4a:	0f 92       	push	r0
    1b4c:	1f 92       	push	r1
    1b4e:	11 24       	eor	r1, r1
    1b50:	2f 92       	push	r2
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
    1b8c:	a0 91 18 16 	lds	r26, 0x1618	; 0x801618 <pxCurrentTCB>
    1b90:	b0 91 19 16 	lds	r27, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    1b94:	0d b6       	in	r0, 0x3d	; 61
    1b96:	0d 92       	st	X+, r0
    1b98:	0e b6       	in	r0, 0x3e	; 62
    1b9a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1b9c:	83 e5       	ldi	r24, 0x53	; 83
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    1ba4:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <xTaskIncrementTick>
    1ba8:	88 23       	and	r24, r24
    1baa:	11 f0       	breq	.+4      	; 0x1bb0 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    1bac:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1bb0:	a0 91 18 16 	lds	r26, 0x1618	; 0x801618 <pxCurrentTCB>
    1bb4:	b0 91 19 16 	lds	r27, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    1bb8:	cd 91       	ld	r28, X+
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	dd 91       	ld	r29, X+
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	7f 90       	pop	r7
    1bf2:	6f 90       	pop	r6
    1bf4:	5f 90       	pop	r5
    1bf6:	4f 90       	pop	r4
    1bf8:	3f 90       	pop	r3
    1bfa:	2f 90       	pop	r2
    1bfc:	1f 90       	pop	r1
    1bfe:	0f 90       	pop	r0
    1c00:	0c be       	out	0x3c, r0	; 60
    1c02:	0f 90       	pop	r0
    1c04:	0b be       	out	0x3b, r0	; 59
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c0c:	08 95       	ret
	...

00001c10 <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    1c18:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	88 70       	andi	r24, 0x08	; 8
    1c20:	99 27       	eor	r25, r25
    1c22:	89 2b       	or	r24, r25
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <prvSetupTimerInterrupt+0x1a>
    1c26:	80 ee       	ldi	r24, 0xE0	; 224
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <prvSetupTimerInterrupt+0x1c>
    1c2a:	80 ec       	ldi	r24, 0xC0	; 192
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	97 70       	andi	r25, 0x07	; 7
    1c30:	89 2b       	or	r24, r25
    1c32:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1c34:	88 e1       	ldi	r24, 0x18	; 24
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	a8 95       	wdr
    1c3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    1c46:	00 00       	nop
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c4e:	76 df       	rcall	.-276    	; 0x1b3c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c50:	18 95       	reti
	...

00001c54 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <xQueueGenericReset+0x6>
    1c5a:	1f 92       	push	r1
    1c5c:	1f 92       	push	r1
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	6d 83       	std	Y+5, r22	; 0x05
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	0f 92       	push	r0
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	29 81       	ldd	r18, Y+1	; 0x01
    1c82:	3a 81       	ldd	r19, Y+2	; 0x02
    1c84:	f9 01       	movw	r30, r18
    1c86:	27 8d       	ldd	r18, Z+31	; 0x1f
    1c88:	42 2f       	mov	r20, r18
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	29 81       	ldd	r18, Y+1	; 0x01
    1c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 a1       	ldd	r18, Z+32	; 0x20
    1c94:	22 2f       	mov	r18, r18
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	42 9f       	mul	r20, r18
    1c9a:	b0 01       	movw	r22, r0
    1c9c:	43 9f       	mul	r20, r19
    1c9e:	70 0d       	add	r23, r0
    1ca0:	52 9f       	mul	r21, r18
    1ca2:	70 0d       	add	r23, r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	9b 01       	movw	r18, r22
    1ca8:	28 0f       	add	r18, r24
    1caa:	39 1f       	adc	r19, r25
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	24 83       	std	Z+4, r18	; 0x04
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	fc 01       	movw	r30, r24
    1cbc:	16 8e       	std	Z+30, r1	; 0x1e
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	20 81       	ld	r18, Z
    1cc6:	31 81       	ldd	r19, Z+1	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	fc 01       	movw	r30, r24
    1cce:	33 83       	std	Z+3, r19	; 0x03
    1cd0:	22 83       	std	Z+2, r18	; 0x02
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	20 81       	ld	r18, Z
    1cda:	31 81       	ldd	r19, Z+1	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	bc 01       	movw	r22, r24
    1cea:	61 50       	subi	r22, 0x01	; 1
    1cec:	71 09       	sbc	r23, r1
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	80 a1       	ldd	r24, Z+32	; 0x20
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	64 9f       	mul	r22, r20
    1cfc:	c0 01       	movw	r24, r0
    1cfe:	65 9f       	mul	r22, r21
    1d00:	90 0d       	add	r25, r0
    1d02:	74 9f       	mul	r23, r20
    1d04:	90 0d       	add	r25, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	28 0f       	add	r18, r24
    1d0a:	39 1f       	adc	r19, r25
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	fc 01       	movw	r30, r24
    1d12:	37 83       	std	Z+7, r19	; 0x07
    1d14:	26 83       	std	Z+6, r18	; 0x06
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	2f ef       	ldi	r18, 0xFF	; 255
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	21 a3       	std	Z+33, r18	; 0x21
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	2f ef       	ldi	r18, 0xFF	; 255
    1d26:	fc 01       	movw	r30, r24
    1d28:	22 a3       	std	Z+34, r18	; 0x22
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	88 23       	and	r24, r24
    1d2e:	79 f4       	brne	.+30     	; 0x1d4e <xQueueGenericReset+0xfa>
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	fc 01       	movw	r30, r24
    1d36:	80 85       	ldd	r24, Z+8	; 0x08
    1d38:	88 23       	and	r24, r24
    1d3a:	89 f0       	breq	.+34     	; 0x1d5e <xQueueGenericReset+0x10a>
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	08 96       	adiw	r24, 0x08	; 8
    1d42:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    1d46:	88 23       	and	r24, r24
    1d48:	51 f0       	breq	.+20     	; 0x1d5e <xQueueGenericReset+0x10a>
    1d4a:	96 de       	rcall	.-724    	; 0x1a78 <vPortYield>
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <xQueueGenericReset+0x10a>
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	08 96       	adiw	r24, 0x08	; 8
    1d54:	a0 dc       	rcall	.-1728   	; 0x1696 <vListInitialise>
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	43 96       	adiw	r24, 0x13	; 19
    1d5c:	9c dc       	rcall	.-1736   	; 0x1696 <vListInitialise>
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <xQueueGenericCreate>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	29 97       	sbiw	r28, 0x09	; 9
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	8f 83       	std	Y+7, r24	; 0x07
    1d8e:	68 87       	std	Y+8, r22	; 0x08
    1d90:	49 87       	std	Y+9, r20	; 0x09
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	48 2f       	mov	r20, r24
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	88 85       	ldd	r24, Y+8	; 0x08
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	42 9f       	mul	r20, r18
    1da0:	c0 01       	movw	r24, r0
    1da2:	43 9f       	mul	r20, r19
    1da4:	90 0d       	add	r25, r0
    1da6:	52 9f       	mul	r21, r18
    1da8:	90 0d       	add	r25, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	83 96       	adiw	r24, 0x23	; 35
    1db6:	b6 d9       	rcall	.-3220   	; 0x1124 <pvPortMalloc>
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	89 2b       	or	r24, r25
    1dc2:	99 f0       	breq	.+38     	; 0x1dea <xQueueGenericCreate+0x76>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	83 96       	adiw	r24, 0x23	; 35
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	89 01       	movw	r16, r18
    1de0:	29 85       	ldd	r18, Y+9	; 0x09
    1de2:	ac 01       	movw	r20, r24
    1de4:	68 85       	ldd	r22, Y+8	; 0x08
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	0d d0       	rcall	.+26     	; 0x1e04 <prvInitialiseNewQueue>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	29 96       	adiw	r28, 0x09	; 9
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <prvInitialiseNewQueue>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	27 97       	sbiw	r28, 0x07	; 7
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	6a 83       	std	Y+2, r22	; 0x02
    1e20:	5c 83       	std	Y+4, r21	; 0x04
    1e22:	4b 83       	std	Y+3, r20	; 0x03
    1e24:	2d 83       	std	Y+5, r18	; 0x05
    1e26:	1f 83       	std	Y+7, r17	; 0x07
    1e28:	0e 83       	std	Y+6, r16	; 0x06
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	88 23       	and	r24, r24
    1e2e:	41 f4       	brne	.+16     	; 0x1e40 <prvInitialiseNewQueue+0x3c>
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	9f 81       	ldd	r25, Y+7	; 0x07
    1e34:	2e 81       	ldd	r18, Y+6	; 0x06
    1e36:	3f 81       	ldd	r19, Y+7	; 0x07
    1e38:	fc 01       	movw	r30, r24
    1e3a:	31 83       	std	Z+1, r19	; 0x01
    1e3c:	20 83       	st	Z, r18
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <prvInitialiseNewQueue+0x4a>
    1e40:	8e 81       	ldd	r24, Y+6	; 0x06
    1e42:	9f 81       	ldd	r25, Y+7	; 0x07
    1e44:	2b 81       	ldd	r18, Y+3	; 0x03
    1e46:	3c 81       	ldd	r19, Y+4	; 0x04
    1e48:	fc 01       	movw	r30, r24
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e50:	9f 81       	ldd	r25, Y+7	; 0x07
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	fc 01       	movw	r30, r24
    1e56:	27 8f       	std	Z+31, r18	; 0x1f
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 a3       	std	Z+32, r18	; 0x20
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	9f 81       	ldd	r25, Y+7	; 0x07
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	f5 de       	rcall	.-534    	; 0x1c54 <xQueueGenericReset>
    1e6a:	00 00       	nop
    1e6c:	27 96       	adiw	r28, 0x07	; 7
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <xQueueGenericSend>:
    1e82:	0f 93       	push	r16
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	62 97       	sbiw	r28, 0x12	; 18
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	9b 87       	std	Y+11, r25	; 0x0b
    1e9a:	8a 87       	std	Y+10, r24	; 0x0a
    1e9c:	7d 87       	std	Y+13, r23	; 0x0d
    1e9e:	6c 87       	std	Y+12, r22	; 0x0c
    1ea0:	2e 87       	std	Y+14, r18	; 0x0e
    1ea2:	3f 87       	std	Y+15, r19	; 0x0f
    1ea4:	48 8b       	std	Y+16, r20	; 0x10
    1ea6:	59 8b       	std	Y+17, r21	; 0x11
    1ea8:	0a 8b       	std	Y+18, r16	; 0x12
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb0:	9b 83       	std	Y+3, r25	; 0x03
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	0f 92       	push	r0
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	26 8d       	ldd	r18, Z+30	; 0x1e
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	87 8d       	ldd	r24, Z+31	; 0x1f
    1eca:	28 17       	cp	r18, r24
    1ecc:	18 f0       	brcs	.+6      	; 0x1ed4 <xQueueGenericSend+0x52>
    1ece:	8a 89       	ldd	r24, Y+18	; 0x12
    1ed0:	82 30       	cpi	r24, 0x02	; 2
    1ed2:	f9 f4       	brne	.+62     	; 0x1f12 <xQueueGenericSend+0x90>
    1ed4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	9b 81       	ldd	r25, Y+3	; 0x03
    1edc:	4a 89       	ldd	r20, Y+18	; 0x12
    1ede:	b9 01       	movw	r22, r18
    1ee0:	9d d1       	rcall	.+826    	; 0x221c <prvCopyDataToQueue>
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	83 89       	ldd	r24, Z+19	; 0x13
    1eec:	88 23       	and	r24, r24
    1eee:	49 f0       	breq	.+18     	; 0x1f02 <xQueueGenericSend+0x80>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	43 96       	adiw	r24, 0x13	; 19
    1ef6:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    1efa:	88 23       	and	r24, r24
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <xQueueGenericSend+0x88>
    1efe:	bc dd       	rcall	.-1160   	; 0x1a78 <vPortYield>
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <xQueueGenericSend+0x88>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	88 23       	and	r24, r24
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <xQueueGenericSend+0x88>
    1f08:	b7 dd       	rcall	.-1170   	; 0x1a78 <vPortYield>
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	64 c0       	rjmp	.+200    	; 0x1fda <xQueueGenericSend+0x158>
    1f12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f16:	a8 89       	ldd	r26, Y+16	; 0x10
    1f18:	b9 89       	ldd	r27, Y+17	; 0x11
    1f1a:	89 2b       	or	r24, r25
    1f1c:	8a 2b       	or	r24, r26
    1f1e:	8b 2b       	or	r24, r27
    1f20:	21 f4       	brne	.+8      	; 0x1f2a <xQueueGenericSend+0xa8>
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	58 c0       	rjmp	.+176    	; 0x1fda <xQueueGenericSend+0x158>
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 23       	and	r24, r24
    1f2e:	31 f4       	brne	.+12     	; 0x1f3c <xQueueGenericSend+0xba>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	0e 94 7f 24 	call	0x48fe	; 0x48fe <vTaskInternalSetTimeOutState>
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	0f 92       	push	r0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	fc 01       	movw	r30, r24
    1f50:	81 a1       	ldd	r24, Z+33	; 0x21
    1f52:	8f 3f       	cpi	r24, 0xFF	; 255
    1f54:	21 f4       	brne	.+8      	; 0x1f5e <xQueueGenericSend+0xdc>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	11 a2       	std	Z+33, r1	; 0x21
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	fc 01       	movw	r30, r24
    1f64:	82 a1       	ldd	r24, Z+34	; 0x22
    1f66:	8f 3f       	cpi	r24, 0xFF	; 255
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <xQueueGenericSend+0xf0>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	fc 01       	movw	r30, r24
    1f70:	12 a2       	std	Z+34, r1	; 0x22
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	9e 01       	movw	r18, r28
    1f78:	22 5f       	subi	r18, 0xF2	; 242
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	05 96       	adiw	r24, 0x05	; 5
    1f80:	b9 01       	movw	r22, r18
    1f82:	0e 94 a2 24 	call	0x4944	; 0x4944 <xTaskCheckForTimeOut>
    1f86:	88 23       	and	r24, r24
    1f88:	11 f5       	brne	.+68     	; 0x1fce <xQueueGenericSend+0x14c>
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	e2 d2       	rcall	.+1476   	; 0x2554 <prvIsQueueFull>
    1f90:	88 23       	and	r24, r24
    1f92:	b9 f0       	breq	.+46     	; 0x1fc2 <xQueueGenericSend+0x140>
    1f94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f98:	a8 89       	ldd	r26, Y+16	; 0x10
    1f9a:	b9 89       	ldd	r27, Y+17	; 0x11
    1f9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f9e:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa0:	28 5f       	subi	r18, 0xF8	; 248
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	bd 01       	movw	r22, r26
    1fa8:	c9 01       	movw	r24, r18
    1faa:	0e 94 80 20 	call	0x4100	; 0x4100 <vTaskPlaceOnEventList>
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb2:	55 d2       	rcall	.+1194   	; 0x245e <prvUnlockQueue>
    1fb4:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    1fb8:	88 23       	and	r24, r24
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <xQueueGenericSend+0x13c>
    1fbc:	7b cf       	rjmp	.-266    	; 0x1eb4 <xQueueGenericSend+0x32>
    1fbe:	5c dd       	rcall	.-1352   	; 0x1a78 <vPortYield>
    1fc0:	79 cf       	rjmp	.-270    	; 0x1eb4 <xQueueGenericSend+0x32>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	4b d2       	rcall	.+1174   	; 0x245e <prvUnlockQueue>
    1fc8:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    1fcc:	73 cf       	rjmp	.-282    	; 0x1eb4 <xQueueGenericSend+0x32>
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	45 d2       	rcall	.+1162   	; 0x245e <prvUnlockQueue>
    1fd4:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	62 96       	adiw	r28, 0x12	; 18
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	0f 91       	pop	r16
    1fec:	08 95       	ret

00001fee <xQueueGenericSendFromISR>:
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	98 87       	std	Y+8, r25	; 0x08
    2004:	8f 83       	std	Y+7, r24	; 0x07
    2006:	7a 87       	std	Y+10, r23	; 0x0a
    2008:	69 87       	std	Y+9, r22	; 0x09
    200a:	5c 87       	std	Y+12, r21	; 0x0c
    200c:	4b 87       	std	Y+11, r20	; 0x0b
    200e:	2d 87       	std	Y+13, r18	; 0x0d
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	98 85       	ldd	r25, Y+8	; 0x08
    2014:	9b 83       	std	Y+3, r25	; 0x03
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	1c 82       	std	Y+4, r1	; 0x04
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	fc 01       	movw	r30, r24
    2020:	26 8d       	ldd	r18, Z+30	; 0x1e
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	fc 01       	movw	r30, r24
    2028:	87 8d       	ldd	r24, Z+31	; 0x1f
    202a:	28 17       	cp	r18, r24
    202c:	18 f0       	brcs	.+6      	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	a9 f5       	brne	.+106    	; 0x209e <__DATA_REGION_LENGTH__+0x9e>
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	fc 01       	movw	r30, r24
    203a:	82 a1       	ldd	r24, Z+34	; 0x22
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	fc 01       	movw	r30, r24
    2044:	86 8d       	ldd	r24, Z+30	; 0x1e
    2046:	8e 83       	std	Y+6, r24	; 0x06
    2048:	29 85       	ldd	r18, Y+9	; 0x09
    204a:	3a 85       	ldd	r19, Y+10	; 0x0a
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	4d 85       	ldd	r20, Y+13	; 0x0d
    2052:	b9 01       	movw	r22, r18
    2054:	e3 d0       	rcall	.+454    	; 0x221c <prvCopyDataToQueue>
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	8f 3f       	cpi	r24, 0xFF	; 255
    205a:	b9 f4       	brne	.+46     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	83 89       	ldd	r24, Z+19	; 0x13
    2064:	88 23       	and	r24, r24
    2066:	c1 f0       	breq	.+48     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	43 96       	adiw	r24, 0x13	; 19
    206e:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    2072:	88 23       	and	r24, r24
    2074:	89 f0       	breq	.+34     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2076:	8b 85       	ldd	r24, Y+11	; 0x0b
    2078:	9c 85       	ldd	r25, Y+12	; 0x0c
    207a:	89 2b       	or	r24, r25
    207c:	69 f0       	breq	.+26     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    207e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2080:	9c 85       	ldd	r25, Y+12	; 0x0c
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	28 2f       	mov	r18, r24
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	fc 01       	movw	r30, r24
    2096:	22 a3       	std	Z+34, r18	; 0x22
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	2d 96       	adiw	r28, 0x0d	; 13
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <xQueueReceive>:
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	61 97       	sbiw	r28, 0x11	; 17
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	9b 87       	std	Y+11, r25	; 0x0b
    20ca:	8a 87       	std	Y+10, r24	; 0x0a
    20cc:	7d 87       	std	Y+13, r23	; 0x0d
    20ce:	6c 87       	std	Y+12, r22	; 0x0c
    20d0:	2e 87       	std	Y+14, r18	; 0x0e
    20d2:	3f 87       	std	Y+15, r19	; 0x0f
    20d4:	48 8b       	std	Y+16, r20	; 0x10
    20d6:	59 8b       	std	Y+17, r21	; 0x11
    20d8:	19 82       	std	Y+1, r1	; 0x01
    20da:	8a 85       	ldd	r24, Y+10	; 0x0a
    20dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20de:	9b 83       	std	Y+3, r25	; 0x03
    20e0:	8a 83       	std	Y+2, r24	; 0x02
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	0f 92       	push	r0
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	fc 01       	movw	r30, r24
    20ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    20f0:	8c 83       	std	Y+4, r24	; 0x04
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	88 23       	and	r24, r24
    20f6:	f9 f0       	breq	.+62     	; 0x2136 <xQueueReceive+0x82>
    20f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	b9 01       	movw	r22, r18
    2102:	5c d1       	rcall	.+696    	; 0x23bc <prvCopyDataFromQueue>
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	2f ef       	ldi	r18, 0xFF	; 255
    2108:	28 0f       	add	r18, r24
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	fc 01       	movw	r30, r24
    2110:	26 8f       	std	Z+30, r18	; 0x1e
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	fc 01       	movw	r30, r24
    2118:	80 85       	ldd	r24, Z+8	; 0x08
    211a:	88 23       	and	r24, r24
    211c:	41 f0       	breq	.+16     	; 0x212e <xQueueReceive+0x7a>
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	08 96       	adiw	r24, 0x08	; 8
    2124:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    2128:	88 23       	and	r24, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <xQueueReceive+0x7a>
    212c:	a5 dc       	rcall	.-1718   	; 0x1a78 <vPortYield>
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	6a c0       	rjmp	.+212    	; 0x220a <__stack+0xb>
    2136:	8e 85       	ldd	r24, Y+14	; 0x0e
    2138:	9f 85       	ldd	r25, Y+15	; 0x0f
    213a:	a8 89       	ldd	r26, Y+16	; 0x10
    213c:	b9 89       	ldd	r27, Y+17	; 0x11
    213e:	89 2b       	or	r24, r25
    2140:	8a 2b       	or	r24, r26
    2142:	8b 2b       	or	r24, r27
    2144:	21 f4       	brne	.+8      	; 0x214e <xQueueReceive+0x9a>
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	5e c0       	rjmp	.+188    	; 0x220a <__stack+0xb>
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	88 23       	and	r24, r24
    2152:	31 f4       	brne	.+12     	; 0x2160 <xQueueReceive+0xac>
    2154:	ce 01       	movw	r24, r28
    2156:	05 96       	adiw	r24, 0x05	; 5
    2158:	0e 94 7f 24 	call	0x48fe	; 0x48fe <vTaskInternalSetTimeOutState>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	0f 92       	push	r0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	81 a1       	ldd	r24, Z+33	; 0x21
    2176:	8f 3f       	cpi	r24, 0xFF	; 255
    2178:	21 f4       	brne	.+8      	; 0x2182 <xQueueReceive+0xce>
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	9b 81       	ldd	r25, Y+3	; 0x03
    217e:	fc 01       	movw	r30, r24
    2180:	11 a2       	std	Z+33, r1	; 0x21
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	fc 01       	movw	r30, r24
    2188:	82 a1       	ldd	r24, Z+34	; 0x22
    218a:	8f 3f       	cpi	r24, 0xFF	; 255
    218c:	21 f4       	brne	.+8      	; 0x2196 <xQueueReceive+0xe2>
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	fc 01       	movw	r30, r24
    2194:	12 a2       	std	Z+34, r1	; 0x22
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	9e 01       	movw	r18, r28
    219c:	22 5f       	subi	r18, 0xF2	; 242
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	ce 01       	movw	r24, r28
    21a2:	05 96       	adiw	r24, 0x05	; 5
    21a4:	b9 01       	movw	r22, r18
    21a6:	0e 94 a2 24 	call	0x4944	; 0x4944 <xTaskCheckForTimeOut>
    21aa:	88 23       	and	r24, r24
    21ac:	11 f5       	brne	.+68     	; 0x21f2 <xQueueReceive+0x13e>
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	b3 d1       	rcall	.+870    	; 0x251a <prvIsQueueEmpty>
    21b4:	88 23       	and	r24, r24
    21b6:	b9 f0       	breq	.+46     	; 0x21e6 <xQueueReceive+0x132>
    21b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    21bc:	a8 89       	ldd	r26, Y+16	; 0x10
    21be:	b9 89       	ldd	r27, Y+17	; 0x11
    21c0:	2a 81       	ldd	r18, Y+2	; 0x02
    21c2:	3b 81       	ldd	r19, Y+3	; 0x03
    21c4:	2d 5e       	subi	r18, 0xED	; 237
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	ac 01       	movw	r20, r24
    21ca:	bd 01       	movw	r22, r26
    21cc:	c9 01       	movw	r24, r18
    21ce:	0e 94 80 20 	call	0x4100	; 0x4100 <vTaskPlaceOnEventList>
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	43 d1       	rcall	.+646    	; 0x245e <prvUnlockQueue>
    21d8:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    21dc:	88 23       	and	r24, r24
    21de:	09 f0       	breq	.+2      	; 0x21e2 <xQueueReceive+0x12e>
    21e0:	80 cf       	rjmp	.-256    	; 0x20e2 <xQueueReceive+0x2e>
    21e2:	4a dc       	rcall	.-1900   	; 0x1a78 <vPortYield>
    21e4:	7e cf       	rjmp	.-260    	; 0x20e2 <xQueueReceive+0x2e>
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	39 d1       	rcall	.+626    	; 0x245e <prvUnlockQueue>
    21ec:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    21f0:	78 cf       	rjmp	.-272    	; 0x20e2 <xQueueReceive+0x2e>
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	33 d1       	rcall	.+614    	; 0x245e <prvUnlockQueue>
    21f8:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	8c d1       	rcall	.+792    	; 0x251a <prvIsQueueEmpty>
    2202:	88 23       	and	r24, r24
    2204:	09 f4       	brne	.+2      	; 0x2208 <__stack+0x9>
    2206:	6d cf       	rjmp	.-294    	; 0x20e2 <xQueueReceive+0x2e>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	61 96       	adiw	r28, 0x11	; 17
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <prvCopyDataToQueue>:
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	27 97       	sbiw	r28, 0x07	; 7
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	7e 83       	std	Y+6, r23	; 0x06
    2236:	6d 83       	std	Y+5, r22	; 0x05
    2238:	4f 83       	std	Y+7, r20	; 0x07
    223a:	19 82       	std	Y+1, r1	; 0x01
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	fc 01       	movw	r30, r24
    2242:	86 8d       	ldd	r24, Z+30	; 0x1e
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	fc 01       	movw	r30, r24
    224c:	80 a1       	ldd	r24, Z+32	; 0x20
    224e:	88 23       	and	r24, r24
    2250:	b1 f4       	brne	.+44     	; 0x227e <prvCopyDataToQueue+0x62>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	fc 01       	movw	r30, r24
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	89 2b       	or	r24, r25
    225e:	09 f0       	breq	.+2      	; 0x2262 <prvCopyDataToQueue+0x46>
    2260:	9c c0       	rjmp	.+312    	; 0x239a <prvCopyDataToQueue+0x17e>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	fc 01       	movw	r30, r24
    2268:	84 81       	ldd	r24, Z+4	; 0x04
    226a:	95 81       	ldd	r25, Z+5	; 0x05
    226c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <xTaskPriorityDisinherit>
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	fc 01       	movw	r30, r24
    2278:	15 82       	std	Z+5, r1	; 0x05
    227a:	14 82       	std	Z+4, r1	; 0x04
    227c:	8e c0       	rjmp	.+284    	; 0x239a <prvCopyDataToQueue+0x17e>
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	88 23       	and	r24, r24
    2282:	d9 f5       	brne	.+118    	; 0x22fa <prvCopyDataToQueue+0xde>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	fc 01       	movw	r30, r24
    228a:	80 a1       	ldd	r24, Z+32	; 0x20
    228c:	48 2f       	mov	r20, r24
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	fc 01       	movw	r30, r24
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	2d 81       	ldd	r18, Y+5	; 0x05
    229c:	3e 81       	ldd	r19, Y+6	; 0x06
    229e:	b9 01       	movw	r22, r18
    22a0:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	fc 01       	movw	r30, r24
    22aa:	22 81       	ldd	r18, Z+2	; 0x02
    22ac:	33 81       	ldd	r19, Z+3	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	fc 01       	movw	r30, r24
    22b4:	80 a1       	ldd	r24, Z+32	; 0x20
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	28 0f       	add	r18, r24
    22bc:	39 1f       	adc	r19, r25
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	fc 01       	movw	r30, r24
    22c4:	33 83       	std	Z+3, r19	; 0x03
    22c6:	22 83       	std	Z+2, r18	; 0x02
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	fc 01       	movw	r30, r24
    22ce:	22 81       	ldd	r18, Z+2	; 0x02
    22d0:	33 81       	ldd	r19, Z+3	; 0x03
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	fc 01       	movw	r30, r24
    22d8:	84 81       	ldd	r24, Z+4	; 0x04
    22da:	95 81       	ldd	r25, Z+5	; 0x05
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <prvCopyDataToQueue+0xc8>
    22e2:	5b c0       	rjmp	.+182    	; 0x239a <prvCopyDataToQueue+0x17e>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	fc 01       	movw	r30, r24
    22ea:	20 81       	ld	r18, Z
    22ec:	31 81       	ldd	r19, Z+1	; 0x01
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	fc 01       	movw	r30, r24
    22f4:	33 83       	std	Z+3, r19	; 0x03
    22f6:	22 83       	std	Z+2, r18	; 0x02
    22f8:	50 c0       	rjmp	.+160    	; 0x239a <prvCopyDataToQueue+0x17e>
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	fc 01       	movw	r30, r24
    2300:	80 a1       	ldd	r24, Z+32	; 0x20
    2302:	48 2f       	mov	r20, r24
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	86 81       	ldd	r24, Z+6	; 0x06
    230e:	97 81       	ldd	r25, Z+7	; 0x07
    2310:	2d 81       	ldd	r18, Y+5	; 0x05
    2312:	3e 81       	ldd	r19, Y+6	; 0x06
    2314:	b9 01       	movw	r22, r18
    2316:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	fc 01       	movw	r30, r24
    2320:	26 81       	ldd	r18, Z+6	; 0x06
    2322:	37 81       	ldd	r19, Z+7	; 0x07
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	fc 01       	movw	r30, r24
    232a:	80 a1       	ldd	r24, Z+32	; 0x20
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	91 95       	neg	r25
    2332:	81 95       	neg	r24
    2334:	91 09       	sbc	r25, r1
    2336:	28 0f       	add	r18, r24
    2338:	39 1f       	adc	r19, r25
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	fc 01       	movw	r30, r24
    2340:	37 83       	std	Z+7, r19	; 0x07
    2342:	26 83       	std	Z+6, r18	; 0x06
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	fc 01       	movw	r30, r24
    234a:	26 81       	ldd	r18, Z+6	; 0x06
    234c:	37 81       	ldd	r19, Z+7	; 0x07
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	fc 01       	movw	r30, r24
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	28 17       	cp	r18, r24
    235a:	39 07       	cpc	r19, r25
    235c:	a8 f4       	brcc	.+42     	; 0x2388 <prvCopyDataToQueue+0x16c>
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	fc 01       	movw	r30, r24
    2364:	24 81       	ldd	r18, Z+4	; 0x04
    2366:	35 81       	ldd	r19, Z+5	; 0x05
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	fc 01       	movw	r30, r24
    236e:	80 a1       	ldd	r24, Z+32	; 0x20
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	91 95       	neg	r25
    2376:	81 95       	neg	r24
    2378:	91 09       	sbc	r25, r1
    237a:	28 0f       	add	r18, r24
    237c:	39 1f       	adc	r19, r25
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	fc 01       	movw	r30, r24
    2384:	37 83       	std	Z+7, r19	; 0x07
    2386:	26 83       	std	Z+6, r18	; 0x06
    2388:	8f 81       	ldd	r24, Y+7	; 0x07
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	31 f4       	brne	.+12     	; 0x239a <prvCopyDataToQueue+0x17e>
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	88 23       	and	r24, r24
    2392:	19 f0       	breq	.+6      	; 0x239a <prvCopyDataToQueue+0x17e>
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	21 e0       	ldi	r18, 0x01	; 1
    239e:	28 0f       	add	r18, r24
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	fc 01       	movw	r30, r24
    23a6:	26 8f       	std	Z+30, r18	; 0x1e
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	27 96       	adiw	r28, 0x07	; 7
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	08 95       	ret

000023bc <prvCopyDataFromQueue>:
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <prvCopyDataFromQueue+0x6>
    23c2:	1f 92       	push	r1
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	7c 83       	std	Y+4, r23	; 0x04
    23ce:	6b 83       	std	Y+3, r22	; 0x03
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	fc 01       	movw	r30, r24
    23d6:	80 a1       	ldd	r24, Z+32	; 0x20
    23d8:	88 23       	and	r24, r24
    23da:	c9 f1       	breq	.+114    	; 0x244e <prvCopyDataFromQueue+0x92>
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	fc 01       	movw	r30, r24
    23e2:	26 81       	ldd	r18, Z+6	; 0x06
    23e4:	37 81       	ldd	r19, Z+7	; 0x07
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	fc 01       	movw	r30, r24
    23ec:	80 a1       	ldd	r24, Z+32	; 0x20
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	28 0f       	add	r18, r24
    23f4:	39 1f       	adc	r19, r25
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	fc 01       	movw	r30, r24
    23fc:	37 83       	std	Z+7, r19	; 0x07
    23fe:	26 83       	std	Z+6, r18	; 0x06
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	fc 01       	movw	r30, r24
    2406:	26 81       	ldd	r18, Z+6	; 0x06
    2408:	37 81       	ldd	r19, Z+7	; 0x07
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	fc 01       	movw	r30, r24
    2410:	84 81       	ldd	r24, Z+4	; 0x04
    2412:	95 81       	ldd	r25, Z+5	; 0x05
    2414:	28 17       	cp	r18, r24
    2416:	39 07       	cpc	r19, r25
    2418:	50 f0       	brcs	.+20     	; 0x242e <prvCopyDataFromQueue+0x72>
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	fc 01       	movw	r30, r24
    2420:	20 81       	ld	r18, Z
    2422:	31 81       	ldd	r19, Z+1	; 0x01
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	fc 01       	movw	r30, r24
    242a:	37 83       	std	Z+7, r19	; 0x07
    242c:	26 83       	std	Z+6, r18	; 0x06
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	fc 01       	movw	r30, r24
    2434:	80 a1       	ldd	r24, Z+32	; 0x20
    2436:	48 2f       	mov	r20, r24
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	fc 01       	movw	r30, r24
    2440:	26 81       	ldd	r18, Z+6	; 0x06
    2442:	37 81       	ldd	r19, Z+7	; 0x07
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	b9 01       	movw	r22, r18
    244a:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>
    244e:	00 00       	nop
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	08 95       	ret

0000245e <prvUnlockQueue>:
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	00 d0       	rcall	.+0      	; 0x2464 <prvUnlockQueue+0x6>
    2464:	1f 92       	push	r1
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9c 83       	std	Y+4, r25	; 0x04
    246c:	8b 83       	std	Y+3, r24	; 0x03
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	fc 01       	movw	r30, r24
    247a:	82 a1       	ldd	r24, Z+34	; 0x22
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	12 c0       	rjmp	.+36     	; 0x24a4 <prvUnlockQueue+0x46>
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	fc 01       	movw	r30, r24
    2486:	83 89       	ldd	r24, Z+19	; 0x13
    2488:	88 23       	and	r24, r24
    248a:	81 f0       	breq	.+32     	; 0x24ac <prvUnlockQueue+0x4e>
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	43 96       	adiw	r24, 0x13	; 19
    2492:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    2496:	88 23       	and	r24, r24
    2498:	11 f0       	breq	.+4      	; 0x249e <prvUnlockQueue+0x40>
    249a:	0e 94 44 25 	call	0x4a88	; 0x4a88 <vTaskMissedYield>
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	81 50       	subi	r24, 0x01	; 1
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	18 16       	cp	r1, r24
    24a8:	5c f3       	brlt	.-42     	; 0x2480 <prvUnlockQueue+0x22>
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <prvUnlockQueue+0x50>
    24ac:	00 00       	nop
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	2f ef       	ldi	r18, 0xFF	; 255
    24b4:	fc 01       	movw	r30, r24
    24b6:	22 a3       	std	Z+34, r18	; 0x22
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	0f 92       	push	r0
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	fc 01       	movw	r30, r24
    24c8:	81 a1       	ldd	r24, Z+33	; 0x21
    24ca:	8a 83       	std	Y+2, r24	; 0x02
    24cc:	12 c0       	rjmp	.+36     	; 0x24f2 <prvUnlockQueue+0x94>
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	fc 01       	movw	r30, r24
    24d4:	80 85       	ldd	r24, Z+8	; 0x08
    24d6:	88 23       	and	r24, r24
    24d8:	81 f0       	breq	.+32     	; 0x24fa <prvUnlockQueue+0x9c>
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	08 96       	adiw	r24, 0x08	; 8
    24e0:	0e 94 a4 21 	call	0x4348	; 0x4348 <xTaskRemoveFromEventList>
    24e4:	88 23       	and	r24, r24
    24e6:	11 f0       	breq	.+4      	; 0x24ec <prvUnlockQueue+0x8e>
    24e8:	0e 94 44 25 	call	0x4a88	; 0x4a88 <vTaskMissedYield>
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	8a 83       	std	Y+2, r24	; 0x02
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	18 16       	cp	r1, r24
    24f6:	5c f3       	brlt	.-42     	; 0x24ce <prvUnlockQueue+0x70>
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <prvUnlockQueue+0x9e>
    24fa:	00 00       	nop
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	fc 01       	movw	r30, r24
    2504:	21 a3       	std	Z+33, r18	; 0x21
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	00 00       	nop
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <prvIsQueueEmpty>:
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	00 d0       	rcall	.+0      	; 0x2520 <prvIsQueueEmpty+0x6>
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	9b 83       	std	Y+3, r25	; 0x03
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	0f 92       	push	r0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	fc 01       	movw	r30, r24
    2534:	86 8d       	ldd	r24, Z+30	; 0x1e
    2536:	88 23       	and	r24, r24
    2538:	19 f4       	brne	.+6      	; 0x2540 <prvIsQueueEmpty+0x26>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <prvIsQueueEmpty+0x28>
    2540:	19 82       	std	Y+1, r1	; 0x01
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <prvIsQueueFull>:
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	00 d0       	rcall	.+0      	; 0x255a <prvIsQueueFull+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	0f 92       	push	r0
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	fc 01       	movw	r30, r24
    256e:	26 8d       	ldd	r18, Z+30	; 0x1e
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	fc 01       	movw	r30, r24
    2576:	87 8d       	ldd	r24, Z+31	; 0x1f
    2578:	28 17       	cp	r18, r24
    257a:	19 f4       	brne	.+6      	; 0x2582 <prvIsQueueFull+0x2e>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <prvIsQueueFull+0x30>
    2582:	19 82       	std	Y+1, r1	; 0x01
    2584:	0f 90       	pop	r0
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	08 95       	ret

00002596 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	29 97       	sbiw	r28, 0x09	; 9
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	4d 83       	std	Y+5, r20	; 0x05
    25b0:	5e 83       	std	Y+6, r21	; 0x06
    25b2:	6f 83       	std	Y+7, r22	; 0x07
    25b4:	78 87       	std	Y+8, r23	; 0x08
    25b6:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	0f 92       	push	r0
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	fc 01       	movw	r30, r24
    25cc:	81 a1       	ldd	r24, Z+33	; 0x21
    25ce:	8f 3f       	cpi	r24, 0xFF	; 255
    25d0:	21 f4       	brne	.+8      	; 0x25da <vQueueWaitForMessageRestricted+0x44>
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	fc 01       	movw	r30, r24
    25d8:	11 a2       	std	Z+33, r1	; 0x21
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	fc 01       	movw	r30, r24
    25e0:	82 a1       	ldd	r24, Z+34	; 0x22
    25e2:	8f 3f       	cpi	r24, 0xFF	; 255
    25e4:	21 f4       	brne	.+8      	; 0x25ee <vQueueWaitForMessageRestricted+0x58>
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	fc 01       	movw	r30, r24
    25ec:	12 a2       	std	Z+34, r1	; 0x22
    25ee:	0f 90       	pop	r0
    25f0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	fc 01       	movw	r30, r24
    25f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    25fa:	88 23       	and	r24, r24
    25fc:	71 f4       	brne	.+28     	; 0x261a <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	fc 01       	movw	r30, r24
    2604:	73 96       	adiw	r30, 0x13	; 19
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	af 81       	ldd	r26, Y+7	; 0x07
    260c:	b8 85       	ldd	r27, Y+8	; 0x08
    260e:	29 85       	ldd	r18, Y+9	; 0x09
    2610:	ac 01       	movw	r20, r24
    2612:	bd 01       	movw	r22, r26
    2614:	cf 01       	movw	r24, r30
    2616:	0e 94 2d 21 	call	0x425a	; 0x425a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	1f df       	rcall	.-450    	; 0x245e <prvUnlockQueue>
    }
    2620:	00 00       	nop
    2622:	29 96       	adiw	r28, 0x09	; 9
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    2634:	0f 93       	push	r16
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	28 97       	sbiw	r28, 0x08	; 8
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	9d 83       	std	Y+5, r25	; 0x05
    264c:	8c 83       	std	Y+4, r24	; 0x04
    264e:	7f 83       	std	Y+7, r23	; 0x07
    2650:	6e 83       	std	Y+6, r22	; 0x06
    2652:	48 87       	std	Y+8, r20	; 0x08
    2654:	88 85       	ldd	r24, Y+8	; 0x08
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	19 f4       	brne	.+6      	; 0x2660 <xStreamBufferGenericCreate+0x2c>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <xStreamBufferGenericCreate+0x2e>
    2660:	1b 82       	std	Y+3, r1	; 0x03
    2662:	8e 81       	ldd	r24, Y+6	; 0x06
    2664:	9f 81       	ldd	r25, Y+7	; 0x07
    2666:	89 2b       	or	r24, r25
    2668:	21 f4       	brne	.+8      	; 0x2672 <xStreamBufferGenericCreate+0x3e>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9f 83       	std	Y+7, r25	; 0x07
    2670:	8e 83       	std	Y+6, r24	; 0x06
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	9c 01       	movw	r18, r24
    2678:	20 5f       	subi	r18, 0xF0	; 240
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	82 17       	cp	r24, r18
    2682:	93 07       	cpc	r25, r19
    2684:	68 f4       	brcc	.+26     	; 0x26a0 <xStreamBufferGenericCreate+0x6c>
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	9d 83       	std	Y+5, r25	; 0x05
    268e:	8c 83       	std	Y+4, r24	; 0x04
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	0f 96       	adiw	r24, 0x0f	; 15
    2696:	0e 94 92 08 	call	0x1124	; 0x1124 <pvPortMalloc>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <xStreamBufferGenericCreate+0x70>
    26a0:	1a 82       	std	Y+2, r1	; 0x02
    26a2:	19 82       	std	Y+1, r1	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	89 2b       	or	r24, r25
    26aa:	69 f0       	breq	.+26     	; 0x26c6 <xStreamBufferGenericCreate+0x92>
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	bc 01       	movw	r22, r24
    26b2:	61 5f       	subi	r22, 0xF1	; 241
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	2e 81       	ldd	r18, Y+6	; 0x06
    26b8:	3f 81       	ldd	r19, Y+7	; 0x07
    26ba:	4c 81       	ldd	r20, Y+4	; 0x04
    26bc:	5d 81       	ldd	r21, Y+5	; 0x05
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	0b 81       	ldd	r16, Y+3	; 0x03
    26c4:	38 d5       	rcall	.+2672   	; 0x3136 <prvInitialiseNewStreamBuffer>
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	28 96       	adiw	r28, 0x08	; 8
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <xStreamBufferReset>:
    26de:	0f 93       	push	r16
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <xStreamBufferReset+0x8>
    26e6:	1f 92       	push	r1
    26e8:	1f 92       	push	r1
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	9d 83       	std	Y+5, r25	; 0x05
    26f0:	8c 83       	std	Y+4, r24	; 0x04
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	19 82       	std	Y+1, r1	; 0x01
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	0f 92       	push	r0
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	dc 01       	movw	r26, r24
    2708:	18 96       	adiw	r26, 0x08	; 8
    270a:	8d 91       	ld	r24, X+
    270c:	9c 91       	ld	r25, X
    270e:	19 97       	sbiw	r26, 0x09	; 9
    2710:	89 2b       	or	r24, r25
    2712:	39 f5       	brne	.+78     	; 0x2762 <xStreamBufferReset+0x84>
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	9b 81       	ldd	r25, Y+3	; 0x03
    2718:	fc 01       	movw	r30, r24
    271a:	82 85       	ldd	r24, Z+10	; 0x0a
    271c:	93 85       	ldd	r25, Z+11	; 0x0b
    271e:	89 2b       	or	r24, r25
    2720:	01 f5       	brne	.+64     	; 0x2762 <xStreamBufferReset+0x84>
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	dc 01       	movw	r26, r24
    2728:	1e 96       	adiw	r26, 0x0e	; 14
    272a:	ec 91       	ld	r30, X
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	dc 01       	movw	r26, r24
    2732:	16 96       	adiw	r26, 0x06	; 6
    2734:	2d 91       	ld	r18, X+
    2736:	3c 91       	ld	r19, X
    2738:	17 97       	sbiw	r26, 0x07	; 7
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	dc 01       	movw	r26, r24
    2740:	14 96       	adiw	r26, 0x04	; 4
    2742:	4d 91       	ld	r20, X+
    2744:	5c 91       	ld	r21, X
    2746:	15 97       	sbiw	r26, 0x05	; 5
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	dc 01       	movw	r26, r24
    274e:	1c 96       	adiw	r26, 0x0c	; 12
    2750:	6d 91       	ld	r22, X+
    2752:	7c 91       	ld	r23, X
    2754:	1d 97       	sbiw	r26, 0x0d	; 13
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	0e 2f       	mov	r16, r30
    275c:	ec d4       	rcall	.+2520   	; 0x3136 <prvInitialiseNewStreamBuffer>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	0f 90       	pop	r0
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <xStreamBufferSpacesAvailable>:
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	00 d0       	rcall	.+0      	; 0x2780 <xStreamBufferSpacesAvailable+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <xStreamBufferSpacesAvailable+0x8>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	fc 01       	movw	r30, r24
    2798:	24 81       	ldd	r18, Z+4	; 0x04
    279a:	35 81       	ldd	r19, Z+5	; 0x05
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	fc 01       	movw	r30, r24
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	fc 01       	movw	r30, r24
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	29 81       	ldd	r18, Y+1	; 0x01
    27ba:	3a 81       	ldd	r19, Y+2	; 0x02
    27bc:	a9 01       	movw	r20, r18
    27be:	48 1b       	sub	r20, r24
    27c0:	59 0b       	sbc	r21, r25
    27c2:	ca 01       	movw	r24, r20
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	fc 01       	movw	r30, r24
    27d8:	24 81       	ldd	r18, Z+4	; 0x04
    27da:	35 81       	ldd	r19, Z+5	; 0x05
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	82 17       	cp	r24, r18
    27e2:	93 07       	cpc	r25, r19
    27e4:	68 f0       	brcs	.+26     	; 0x2800 <xStreamBufferSpacesAvailable+0x86>
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	fc 01       	movw	r30, r24
    27ec:	84 81       	ldd	r24, Z+4	; 0x04
    27ee:	95 81       	ldd	r25, Z+5	; 0x05
    27f0:	29 81       	ldd	r18, Y+1	; 0x01
    27f2:	3a 81       	ldd	r19, Y+2	; 0x02
    27f4:	a9 01       	movw	r20, r18
    27f6:	48 1b       	sub	r20, r24
    27f8:	59 0b       	sbc	r21, r25
    27fa:	ca 01       	movw	r24, r20
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	26 96       	adiw	r28, 0x06	; 6
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	08 95       	ret

00002816 <xStreamBufferSend>:
    2816:	af 92       	push	r10
    2818:	bf 92       	push	r11
    281a:	cf 92       	push	r12
    281c:	df 92       	push	r13
    281e:	ef 92       	push	r14
    2820:	ff 92       	push	r15
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	69 97       	sbiw	r28, 0x19	; 25
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	99 8b       	std	Y+17, r25	; 0x11
    283c:	88 8b       	std	Y+16, r24	; 0x10
    283e:	7b 8b       	std	Y+19, r23	; 0x13
    2840:	6a 8b       	std	Y+18, r22	; 0x12
    2842:	5d 8b       	std	Y+21, r21	; 0x15
    2844:	4c 8b       	std	Y+20, r20	; 0x14
    2846:	0e 8b       	std	Y+22, r16	; 0x16
    2848:	1f 8b       	std	Y+23, r17	; 0x17
    284a:	28 8f       	std	Y+24, r18	; 0x18
    284c:	39 8f       	std	Y+25, r19	; 0x19
    284e:	88 89       	ldd	r24, Y+16	; 0x10
    2850:	99 89       	ldd	r25, Y+17	; 0x11
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	1a 82       	std	Y+2, r1	; 0x02
    2858:	19 82       	std	Y+1, r1	; 0x01
    285a:	8c 89       	ldd	r24, Y+20	; 0x14
    285c:	9d 89       	ldd	r25, Y+21	; 0x15
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	fc 01       	movw	r30, r24
    2868:	84 81       	ldd	r24, Z+4	; 0x04
    286a:	95 81       	ldd	r25, Z+5	; 0x05
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	98 87       	std	Y+8, r25	; 0x08
    2870:	8f 83       	std	Y+7, r24	; 0x07
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	fc 01       	movw	r30, r24
    2878:	86 85       	ldd	r24, Z+14	; 0x0e
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	81 70       	andi	r24, 0x01	; 1
    2880:	99 27       	eor	r25, r25
    2882:	89 2b       	or	r24, r25
    2884:	89 f0       	breq	.+34     	; 0x28a8 <xStreamBufferSend+0x92>
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	02 96       	adiw	r24, 0x02	; 2
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
    2890:	2b 81       	ldd	r18, Y+3	; 0x03
    2892:	3c 81       	ldd	r19, Y+4	; 0x04
    2894:	8f 81       	ldd	r24, Y+7	; 0x07
    2896:	98 85       	ldd	r25, Y+8	; 0x08
    2898:	82 17       	cp	r24, r18
    289a:	93 07       	cpc	r25, r19
    289c:	80 f4       	brcc	.+32     	; 0x28be <xStreamBufferSend+0xa8>
    289e:	1e 8a       	std	Y+22, r1	; 0x16
    28a0:	1f 8a       	std	Y+23, r1	; 0x17
    28a2:	18 8e       	std	Y+24, r1	; 0x18
    28a4:	19 8e       	std	Y+25, r1	; 0x19
    28a6:	0b c0       	rjmp	.+22     	; 0x28be <xStreamBufferSend+0xa8>
    28a8:	2b 81       	ldd	r18, Y+3	; 0x03
    28aa:	3c 81       	ldd	r19, Y+4	; 0x04
    28ac:	8f 81       	ldd	r24, Y+7	; 0x07
    28ae:	98 85       	ldd	r25, Y+8	; 0x08
    28b0:	82 17       	cp	r24, r18
    28b2:	93 07       	cpc	r25, r19
    28b4:	20 f4       	brcc	.+8      	; 0x28be <xStreamBufferSend+0xa8>
    28b6:	8f 81       	ldd	r24, Y+7	; 0x07
    28b8:	98 85       	ldd	r25, Y+8	; 0x08
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8e 89       	ldd	r24, Y+22	; 0x16
    28c0:	9f 89       	ldd	r25, Y+23	; 0x17
    28c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    28c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    28c6:	89 2b       	or	r24, r25
    28c8:	8a 2b       	or	r24, r26
    28ca:	8b 2b       	or	r24, r27
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <xStreamBufferSend+0xba>
    28ce:	47 c0       	rjmp	.+142    	; 0x295e <xStreamBufferSend+0x148>
    28d0:	ce 01       	movw	r24, r28
    28d2:	0b 96       	adiw	r24, 0x0b	; 11
    28d4:	0e 94 57 24 	call	0x48ae	; 0x48ae <vTaskSetTimeOutState>
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	0f 92       	push	r0
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	4b df       	rcall	.-362    	; 0x277a <xStreamBufferSpacesAvailable>
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	29 81       	ldd	r18, Y+1	; 0x01
    28ea:	3a 81       	ldd	r19, Y+2	; 0x02
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	28 17       	cp	r18, r24
    28f2:	39 07       	cpc	r19, r25
    28f4:	70 f4       	brcc	.+28     	; 0x2912 <xStreamBufferSend+0xfc>
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <xTaskGenericNotifyStateClear>
    2900:	0e 94 04 26 	call	0x4c08	; 0x4c08 <xTaskGetCurrentTaskHandle>
    2904:	9c 01       	movw	r18, r24
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	fc 01       	movw	r30, r24
    290c:	33 87       	std	Z+11, r19	; 0x0b
    290e:	22 87       	std	Z+10, r18	; 0x0a
    2910:	03 c0       	rjmp	.+6      	; 0x2918 <xStreamBufferSend+0x102>
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	23 c0       	rjmp	.+70     	; 0x295e <xStreamBufferSend+0x148>
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	8e 89       	ldd	r24, Y+22	; 0x16
    291e:	9f 89       	ldd	r25, Y+23	; 0x17
    2920:	a8 8d       	ldd	r26, Y+24	; 0x18
    2922:	b9 8d       	ldd	r27, Y+25	; 0x19
    2924:	5c 01       	movw	r10, r24
    2926:	6d 01       	movw	r12, r26
    2928:	e1 2c       	mov	r14, r1
    292a:	f1 2c       	mov	r15, r1
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	10 e0       	ldi	r17, 0x00	; 0
    2930:	98 01       	movw	r18, r16
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	ba 01       	movw	r22, r20
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <xTaskGenericNotifyWait>
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	fc 01       	movw	r30, r24
    2944:	13 86       	std	Z+11, r1	; 0x0b
    2946:	12 86       	std	Z+10, r1	; 0x0a
    2948:	9e 01       	movw	r18, r28
    294a:	2a 5e       	subi	r18, 0xEA	; 234
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	ce 01       	movw	r24, r28
    2950:	0b 96       	adiw	r24, 0x0b	; 11
    2952:	b9 01       	movw	r22, r18
    2954:	0e 94 a2 24 	call	0x4944	; 0x4944 <xTaskCheckForTimeOut>
    2958:	88 23       	and	r24, r24
    295a:	09 f4       	brne	.+2      	; 0x295e <xStreamBufferSend+0x148>
    295c:	bd cf       	rjmp	.-134    	; 0x28d8 <xStreamBufferSend+0xc2>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	89 2b       	or	r24, r25
    2964:	29 f4       	brne	.+10     	; 0x2970 <xStreamBufferSend+0x15a>
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	07 df       	rcall	.-498    	; 0x277a <xStreamBufferSpacesAvailable>
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	eb 81       	ldd	r30, Y+3	; 0x03
    2972:	fc 81       	ldd	r31, Y+4	; 0x04
    2974:	29 81       	ldd	r18, Y+1	; 0x01
    2976:	3a 81       	ldd	r19, Y+2	; 0x02
    2978:	4c 89       	ldd	r20, Y+20	; 0x14
    297a:	5d 89       	ldd	r21, Y+21	; 0x15
    297c:	6a 89       	ldd	r22, Y+18	; 0x12
    297e:	7b 89       	ldd	r23, Y+19	; 0x13
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	8f 01       	movw	r16, r30
    2986:	c2 d0       	rcall	.+388    	; 0x2b0c <prvWriteMessageToBuffer>
    2988:	9a 87       	std	Y+10, r25	; 0x0a
    298a:	89 87       	std	Y+9, r24	; 0x09
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	89 2b       	or	r24, r25
    2992:	41 f1       	breq	.+80     	; 0x29e4 <xStreamBufferSend+0x1ce>
    2994:	8d 81       	ldd	r24, Y+5	; 0x05
    2996:	9e 81       	ldd	r25, Y+6	; 0x06
    2998:	8b d3       	rcall	.+1814   	; 0x30b0 <prvBytesInBuffer>
    299a:	9c 01       	movw	r18, r24
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	fc 01       	movw	r30, r24
    29a2:	86 81       	ldd	r24, Z+6	; 0x06
    29a4:	97 81       	ldd	r25, Z+7	; 0x07
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	e0 f0       	brcs	.+56     	; 0x29e4 <xStreamBufferSend+0x1ce>
    29ac:	64 d7       	rcall	.+3784   	; 0x3876 <vTaskSuspendAll>
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	fc 01       	movw	r30, r24
    29b4:	80 85       	ldd	r24, Z+8	; 0x08
    29b6:	91 85       	ldd	r25, Z+9	; 0x09
    29b8:	89 2b       	or	r24, r25
    29ba:	99 f0       	breq	.+38     	; 0x29e2 <xStreamBufferSend+0x1cc>
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	fc 01       	movw	r30, r24
    29c2:	80 85       	ldd	r24, Z+8	; 0x08
    29c4:	91 85       	ldd	r25, Z+9	; 0x09
    29c6:	e1 2c       	mov	r14, r1
    29c8:	f1 2c       	mov	r15, r1
    29ca:	00 e0       	ldi	r16, 0x00	; 0
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	a9 01       	movw	r20, r18
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 65 28 	call	0x50ca	; 0x50ca <xTaskGenericNotify>
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	fc 01       	movw	r30, r24
    29de:	11 86       	std	Z+9, r1	; 0x09
    29e0:	10 86       	std	Z+8, r1	; 0x08
    29e2:	56 d7       	rcall	.+3756   	; 0x3890 <xTaskResumeAll>
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	69 96       	adiw	r28, 0x19	; 25
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	df 90       	pop	r13
    2a02:	cf 90       	pop	r12
    2a04:	bf 90       	pop	r11
    2a06:	af 90       	pop	r10
    2a08:	08 95       	ret

00002a0a <xStreamBufferSendFromISR>:
    2a0a:	cf 92       	push	r12
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	61 97       	sbiw	r28, 0x11	; 17
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	9b 87       	std	Y+11, r25	; 0x0b
    2a2c:	8a 87       	std	Y+10, r24	; 0x0a
    2a2e:	7d 87       	std	Y+13, r23	; 0x0d
    2a30:	6c 87       	std	Y+12, r22	; 0x0c
    2a32:	5f 87       	std	Y+15, r21	; 0x0f
    2a34:	4e 87       	std	Y+14, r20	; 0x0e
    2a36:	39 8b       	std	Y+17, r19	; 0x11
    2a38:	28 8b       	std	Y+16, r18	; 0x10
    2a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    2a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	fc 01       	movw	r30, r24
    2a50:	86 85       	ldd	r24, Z+14	; 0x0e
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	81 70       	andi	r24, 0x01	; 1
    2a58:	99 27       	eor	r25, r25
    2a5a:	89 2b       	or	r24, r25
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <xStreamBufferSendFromISR+0x5e>
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	02 96       	adiw	r24, 0x02	; 2
    2a64:	9a 83       	std	Y+2, r25	; 0x02
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	86 de       	rcall	.-756    	; 0x277a <xStreamBufferSpacesAvailable>
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	e9 81       	ldd	r30, Y+1	; 0x01
    2a74:	fa 81       	ldd	r31, Y+2	; 0x02
    2a76:	2d 81       	ldd	r18, Y+5	; 0x05
    2a78:	3e 81       	ldd	r19, Y+6	; 0x06
    2a7a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2a7c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2a7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a80:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	8f 01       	movw	r16, r30
    2a88:	41 d0       	rcall	.+130    	; 0x2b0c <prvWriteMessageToBuffer>
    2a8a:	98 87       	std	Y+8, r25	; 0x08
    2a8c:	8f 83       	std	Y+7, r24	; 0x07
    2a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a90:	98 85       	ldd	r25, Y+8	; 0x08
    2a92:	89 2b       	or	r24, r25
    2a94:	51 f1       	breq	.+84     	; 0x2aea <xStreamBufferSendFromISR+0xe0>
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	0a d3       	rcall	.+1556   	; 0x30b0 <prvBytesInBuffer>
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	86 81       	ldd	r24, Z+6	; 0x06
    2aa6:	97 81       	ldd	r25, Z+7	; 0x07
    2aa8:	28 17       	cp	r18, r24
    2aaa:	39 07       	cpc	r19, r25
    2aac:	f0 f0       	brcs	.+60     	; 0x2aea <xStreamBufferSendFromISR+0xe0>
    2aae:	19 86       	std	Y+9, r1	; 0x09
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	80 85       	ldd	r24, Z+8	; 0x08
    2ab8:	91 85       	ldd	r25, Z+9	; 0x09
    2aba:	89 2b       	or	r24, r25
    2abc:	b1 f0       	breq	.+44     	; 0x2aea <xStreamBufferSendFromISR+0xe0>
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	80 85       	ldd	r24, Z+8	; 0x08
    2ac6:	91 85       	ldd	r25, Z+9	; 0x09
    2ac8:	28 89       	ldd	r18, Y+16	; 0x10
    2aca:	39 89       	ldd	r19, Y+17	; 0x11
    2acc:	69 01       	movw	r12, r18
    2ace:	e1 2c       	mov	r14, r1
    2ad0:	f1 2c       	mov	r15, r1
    2ad2:	00 e0       	ldi	r16, 0x00	; 0
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	a9 01       	movw	r20, r18
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	0e 94 36 2a 	call	0x546c	; 0x546c <xTaskGenericNotifyFromISR>
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	11 86       	std	Z+9, r1	; 0x09
    2ae8:	10 86       	std	Z+8, r1	; 0x08
    2aea:	8f 81       	ldd	r24, Y+7	; 0x07
    2aec:	98 85       	ldd	r25, Y+8	; 0x08
    2aee:	61 96       	adiw	r28, 0x11	; 17
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	08 95       	ret

00002b0c <prvWriteMessageToBuffer>:
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	61 97       	sbiw	r28, 0x11	; 17
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	99 87       	std	Y+9, r25	; 0x09
    2b26:	88 87       	std	Y+8, r24	; 0x08
    2b28:	7b 87       	std	Y+11, r23	; 0x0b
    2b2a:	6a 87       	std	Y+10, r22	; 0x0a
    2b2c:	5d 87       	std	Y+13, r21	; 0x0d
    2b2e:	4c 87       	std	Y+12, r20	; 0x0c
    2b30:	3f 87       	std	Y+15, r19	; 0x0f
    2b32:	2e 87       	std	Y+14, r18	; 0x0e
    2b34:	19 8b       	std	Y+17, r17	; 0x11
    2b36:	08 8b       	std	Y+16, r16	; 0x10
    2b38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b3c:	89 2b       	or	r24, r25
    2b3e:	11 f4       	brne	.+4      	; 0x2b44 <prvWriteMessageToBuffer+0x38>
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	33 c0       	rjmp	.+102    	; 0x2baa <prvWriteMessageToBuffer+0x9e>
    2b44:	88 85       	ldd	r24, Y+8	; 0x08
    2b46:	99 85       	ldd	r25, Y+9	; 0x09
    2b48:	fc 01       	movw	r30, r24
    2b4a:	86 85       	ldd	r24, Z+14	; 0x0e
    2b4c:	88 2f       	mov	r24, r24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	81 70       	andi	r24, 0x01	; 1
    2b52:	99 27       	eor	r25, r25
    2b54:	89 2b       	or	r24, r25
    2b56:	a9 f4       	brne	.+42     	; 0x2b82 <prvWriteMessageToBuffer+0x76>
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b60:	9d 83       	std	Y+5, r25	; 0x05
    2b62:	8c 83       	std	Y+4, r24	; 0x04
    2b64:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b66:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b68:	9f 83       	std	Y+7, r25	; 0x07
    2b6a:	8e 83       	std	Y+6, r24	; 0x06
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	8e 81       	ldd	r24, Y+6	; 0x06
    2b72:	9f 81       	ldd	r25, Y+7	; 0x07
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	08 f4       	brcc	.+2      	; 0x2b7c <prvWriteMessageToBuffer+0x70>
    2b7a:	c9 01       	movw	r24, r18
    2b7c:	9d 87       	std	Y+13, r25	; 0x0d
    2b7e:	8c 87       	std	Y+12, r24	; 0x0c
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <prvWriteMessageToBuffer+0x9e>
    2b82:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b84:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b86:	88 89       	ldd	r24, Y+16	; 0x10
    2b88:	99 89       	ldd	r25, Y+17	; 0x11
    2b8a:	28 17       	cp	r18, r24
    2b8c:	39 07       	cpc	r19, r25
    2b8e:	60 f0       	brcs	.+24     	; 0x2ba8 <prvWriteMessageToBuffer+0x9c>
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	9e 01       	movw	r18, r28
    2b96:	24 5f       	subi	r18, 0xF4	; 244
    2b98:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9a:	88 85       	ldd	r24, Y+8	; 0x08
    2b9c:	99 85       	ldd	r25, Y+9	; 0x09
    2b9e:	42 e0       	ldi	r20, 0x02	; 2
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	b9 01       	movw	r22, r18
    2ba4:	4f d1       	rcall	.+670    	; 0x2e44 <prvWriteBytesToBuffer>
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <prvWriteMessageToBuffer+0x9e>
    2ba8:	19 82       	std	Y+1, r1	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	88 23       	and	r24, r24
    2bae:	59 f0       	breq	.+22     	; 0x2bc6 <prvWriteMessageToBuffer+0xba>
    2bb0:	4c 85       	ldd	r20, Y+12	; 0x0c
    2bb2:	5d 85       	ldd	r21, Y+13	; 0x0d
    2bb4:	2a 85       	ldd	r18, Y+10	; 0x0a
    2bb6:	3b 85       	ldd	r19, Y+11	; 0x0b
    2bb8:	88 85       	ldd	r24, Y+8	; 0x08
    2bba:	99 85       	ldd	r25, Y+9	; 0x09
    2bbc:	b9 01       	movw	r22, r18
    2bbe:	42 d1       	rcall	.+644    	; 0x2e44 <prvWriteBytesToBuffer>
    2bc0:	9b 83       	std	Y+3, r25	; 0x03
    2bc2:	8a 83       	std	Y+2, r24	; 0x02
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <prvWriteMessageToBuffer+0xbe>
    2bc6:	1b 82       	std	Y+3, r1	; 0x03
    2bc8:	1a 82       	std	Y+2, r1	; 0x02
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	61 96       	adiw	r28, 0x11	; 17
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	08 95       	ret

00002be4 <xStreamBufferReceive>:
    2be4:	af 92       	push	r10
    2be6:	bf 92       	push	r11
    2be8:	cf 92       	push	r12
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	62 97       	sbiw	r28, 0x12	; 18
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	9a 87       	std	Y+10, r25	; 0x0a
    2c0a:	89 87       	std	Y+9, r24	; 0x09
    2c0c:	7c 87       	std	Y+12, r23	; 0x0c
    2c0e:	6b 87       	std	Y+11, r22	; 0x0b
    2c10:	5e 87       	std	Y+14, r21	; 0x0e
    2c12:	4d 87       	std	Y+13, r20	; 0x0d
    2c14:	0f 87       	std	Y+15, r16	; 0x0f
    2c16:	18 8b       	std	Y+16, r17	; 0x10
    2c18:	29 8b       	std	Y+17, r18	; 0x11
    2c1a:	3a 8b       	std	Y+18, r19	; 0x12
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	98 87       	std	Y+8, r25	; 0x08
    2c22:	8f 83       	std	Y+7, r24	; 0x07
    2c24:	1a 82       	std	Y+2, r1	; 0x02
    2c26:	19 82       	std	Y+1, r1	; 0x01
    2c28:	8f 81       	ldd	r24, Y+7	; 0x07
    2c2a:	98 85       	ldd	r25, Y+8	; 0x08
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	86 85       	ldd	r24, Z+14	; 0x0e
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	81 70       	andi	r24, 0x01	; 1
    2c36:	99 27       	eor	r25, r25
    2c38:	89 2b       	or	r24, r25
    2c3a:	29 f0       	breq	.+10     	; 0x2c46 <xStreamBufferReceive+0x62>
    2c3c:	82 e0       	ldi	r24, 0x02	; 2
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <xStreamBufferReceive+0x66>
    2c46:	1e 82       	std	Y+6, r1	; 0x06
    2c48:	1d 82       	std	Y+5, r1	; 0x05
    2c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c4c:	98 89       	ldd	r25, Y+16	; 0x10
    2c4e:	a9 89       	ldd	r26, Y+17	; 0x11
    2c50:	ba 89       	ldd	r27, Y+18	; 0x12
    2c52:	89 2b       	or	r24, r25
    2c54:	8a 2b       	or	r24, r26
    2c56:	8b 2b       	or	r24, r27
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <xStreamBufferReceive+0x78>
    2c5a:	41 c0       	rjmp	.+130    	; 0x2cde <xStreamBufferReceive+0xfa>
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	0f 92       	push	r0
    2c62:	8f 81       	ldd	r24, Y+7	; 0x07
    2c64:	98 85       	ldd	r25, Y+8	; 0x08
    2c66:	24 d2       	rcall	.+1096   	; 0x30b0 <prvBytesInBuffer>
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
    2c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	82 17       	cp	r24, r18
    2c76:	93 07       	cpc	r25, r19
    2c78:	68 f0       	brcs	.+26     	; 0x2c94 <xStreamBufferReceive+0xb0>
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <xTaskGenericNotifyStateClear>
    2c84:	0e 94 04 26 	call	0x4c08	; 0x4c08 <xTaskGetCurrentTaskHandle>
    2c88:	9c 01       	movw	r18, r24
    2c8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8c:	98 85       	ldd	r25, Y+8	; 0x08
    2c8e:	fc 01       	movw	r30, r24
    2c90:	31 87       	std	Z+9, r19	; 0x09
    2c92:	20 87       	std	Z+8, r18	; 0x08
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	82 17       	cp	r24, r18
    2ca2:	93 07       	cpc	r25, r19
    2ca4:	08 f1       	brcs	.+66     	; 0x2ce8 <xStreamBufferReceive+0x104>
    2ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca8:	98 89       	ldd	r25, Y+16	; 0x10
    2caa:	a9 89       	ldd	r26, Y+17	; 0x11
    2cac:	ba 89       	ldd	r27, Y+18	; 0x12
    2cae:	5c 01       	movw	r10, r24
    2cb0:	6d 01       	movw	r12, r26
    2cb2:	e1 2c       	mov	r14, r1
    2cb4:	f1 2c       	mov	r15, r1
    2cb6:	00 e0       	ldi	r16, 0x00	; 0
    2cb8:	10 e0       	ldi	r17, 0x00	; 0
    2cba:	98 01       	movw	r18, r16
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	ba 01       	movw	r22, r20
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <xTaskGenericNotifyWait>
    2cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cca:	98 85       	ldd	r25, Y+8	; 0x08
    2ccc:	fc 01       	movw	r30, r24
    2cce:	11 86       	std	Z+9, r1	; 0x09
    2cd0:	10 86       	std	Z+8, r1	; 0x08
    2cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd4:	98 85       	ldd	r25, Y+8	; 0x08
    2cd6:	ec d1       	rcall	.+984    	; 0x30b0 <prvBytesInBuffer>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <xStreamBufferReceive+0x104>
    2cde:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce0:	98 85       	ldd	r25, Y+8	; 0x08
    2ce2:	e6 d1       	rcall	.+972    	; 0x30b0 <prvBytesInBuffer>
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cea:	3c 81       	ldd	r19, Y+4	; 0x04
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	82 17       	cp	r24, r18
    2cf2:	93 07       	cpc	r25, r19
    2cf4:	70 f5       	brcc	.+92     	; 0x2d52 <xStreamBufferReceive+0x16e>
    2cf6:	ed 81       	ldd	r30, Y+5	; 0x05
    2cf8:	fe 81       	ldd	r31, Y+6	; 0x06
    2cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cfe:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d00:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d06:	8f 81       	ldd	r24, Y+7	; 0x07
    2d08:	98 85       	ldd	r25, Y+8	; 0x08
    2d0a:	8f 01       	movw	r16, r30
    2d0c:	35 d0       	rcall	.+106    	; 0x2d78 <prvReadMessageFromBuffer>
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	89 2b       	or	r24, r25
    2d18:	e1 f0       	breq	.+56     	; 0x2d52 <xStreamBufferReceive+0x16e>
    2d1a:	ad d5       	rcall	.+2906   	; 0x3876 <vTaskSuspendAll>
    2d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1e:	98 85       	ldd	r25, Y+8	; 0x08
    2d20:	fc 01       	movw	r30, r24
    2d22:	82 85       	ldd	r24, Z+10	; 0x0a
    2d24:	93 85       	ldd	r25, Z+11	; 0x0b
    2d26:	89 2b       	or	r24, r25
    2d28:	99 f0       	breq	.+38     	; 0x2d50 <xStreamBufferReceive+0x16c>
    2d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2c:	98 85       	ldd	r25, Y+8	; 0x08
    2d2e:	fc 01       	movw	r30, r24
    2d30:	82 85       	ldd	r24, Z+10	; 0x0a
    2d32:	93 85       	ldd	r25, Z+11	; 0x0b
    2d34:	e1 2c       	mov	r14, r1
    2d36:	f1 2c       	mov	r15, r1
    2d38:	00 e0       	ldi	r16, 0x00	; 0
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	a9 01       	movw	r20, r18
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	0e 94 65 28 	call	0x50ca	; 0x50ca <xTaskGenericNotify>
    2d46:	8f 81       	ldd	r24, Y+7	; 0x07
    2d48:	98 85       	ldd	r25, Y+8	; 0x08
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	13 86       	std	Z+11, r1	; 0x0b
    2d4e:	12 86       	std	Z+10, r1	; 0x0a
    2d50:	9f d5       	rcall	.+2878   	; 0x3890 <xTaskResumeAll>
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	62 96       	adiw	r28, 0x12	; 18
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	08 95       	ret

00002d78 <prvReadMessageFromBuffer>:
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	62 97       	sbiw	r28, 0x12	; 18
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	9a 87       	std	Y+10, r25	; 0x0a
    2d92:	89 87       	std	Y+9, r24	; 0x09
    2d94:	7c 87       	std	Y+12, r23	; 0x0c
    2d96:	6b 87       	std	Y+11, r22	; 0x0b
    2d98:	5e 87       	std	Y+14, r21	; 0x0e
    2d9a:	4d 87       	std	Y+13, r20	; 0x0d
    2d9c:	38 8b       	std	Y+16, r19	; 0x10
    2d9e:	2f 87       	std	Y+15, r18	; 0x0f
    2da0:	1a 8b       	std	Y+18, r17	; 0x12
    2da2:	09 8b       	std	Y+17, r16	; 0x11
    2da4:	89 89       	ldd	r24, Y+17	; 0x11
    2da6:	9a 89       	ldd	r25, Y+18	; 0x12
    2da8:	89 2b       	or	r24, r25
    2daa:	81 f1       	breq	.+96     	; 0x2e0c <prvReadMessageFromBuffer+0x94>
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	fc 01       	movw	r30, r24
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	8b 83       	std	Y+3, r24	; 0x03
    2dba:	2f 85       	ldd	r18, Y+15	; 0x0f
    2dbc:	38 89       	ldd	r19, Y+16	; 0x10
    2dbe:	49 89       	ldd	r20, Y+17	; 0x11
    2dc0:	5a 89       	ldd	r21, Y+18	; 0x12
    2dc2:	be 01       	movw	r22, r28
    2dc4:	69 5f       	subi	r22, 0xF9	; 249
    2dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	ca d0       	rcall	.+404    	; 0x2f62 <prvReadBytesFromBuffer>
    2dce:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd0:	98 85       	ldd	r25, Y+8	; 0x08
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2dd8:	38 89       	ldd	r19, Y+16	; 0x10
    2dda:	89 89       	ldd	r24, Y+17	; 0x11
    2ddc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dde:	a9 01       	movw	r20, r18
    2de0:	48 1b       	sub	r20, r24
    2de2:	59 0b       	sbc	r21, r25
    2de4:	ca 01       	movw	r24, r20
    2de6:	98 8b       	std	Y+16, r25	; 0x10
    2de8:	8f 87       	std	Y+15, r24	; 0x0f
    2dea:	29 81       	ldd	r18, Y+1	; 0x01
    2dec:	3a 81       	ldd	r19, Y+2	; 0x02
    2dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df2:	82 17       	cp	r24, r18
    2df4:	93 07       	cpc	r25, r19
    2df6:	70 f4       	brcc	.+28     	; 0x2e14 <prvReadMessageFromBuffer+0x9c>
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    2e00:	fc 01       	movw	r30, r24
    2e02:	31 83       	std	Z+1, r19	; 0x01
    2e04:	20 83       	st	Z, r18
    2e06:	1a 82       	std	Y+2, r1	; 0x02
    2e08:	19 82       	std	Y+1, r1	; 0x01
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <prvReadMessageFromBuffer+0x9c>
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e16:	38 89       	ldd	r19, Y+16	; 0x10
    2e18:	49 81       	ldd	r20, Y+1	; 0x01
    2e1a:	5a 81       	ldd	r21, Y+2	; 0x02
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	9e d0       	rcall	.+316    	; 0x2f62 <prvReadBytesFromBuffer>
    2e26:	9e 83       	std	Y+6, r25	; 0x06
    2e28:	8d 83       	std	Y+5, r24	; 0x05
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2e:	62 96       	adiw	r28, 0x12	; 18
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	08 95       	ret

00002e44 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	9a 87       	std	Y+10, r25	; 0x0a
    2e5a:	89 87       	std	Y+9, r24	; 0x09
    2e5c:	7c 87       	std	Y+12, r23	; 0x0c
    2e5e:	6b 87       	std	Y+11, r22	; 0x0b
    2e60:	5e 87       	std	Y+14, r21	; 0x0e
    2e62:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	fc 01       	movw	r30, r24
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	9a 83       	std	Y+2, r25	; 0x02
    2e70:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e76:	fc 01       	movw	r30, r24
    2e78:	24 81       	ldd	r18, Z+4	; 0x04
    2e7a:	35 81       	ldd	r19, Z+5	; 0x05
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	a9 01       	movw	r20, r18
    2e82:	48 1b       	sub	r20, r24
    2e84:	59 0b       	sbc	r21, r25
    2e86:	ca 01       	movw	r24, r20
    2e88:	9c 83       	std	Y+4, r25	; 0x04
    2e8a:	8b 83       	std	Y+3, r24	; 0x03
    2e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	2b 81       	ldd	r18, Y+3	; 0x03
    2e96:	3c 81       	ldd	r19, Y+4	; 0x04
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	08 f4       	brcc	.+2      	; 0x2ea4 <prvWriteBytesToBuffer+0x60>
    2ea2:	c9 01       	movw	r24, r18
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	fc 01       	movw	r30, r24
    2eae:	24 85       	ldd	r18, Z+12	; 0x0c
    2eb0:	35 85       	ldd	r19, Z+13	; 0x0d
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	82 0f       	add	r24, r18
    2eb8:	93 1f       	adc	r25, r19
    2eba:	4f 81       	ldd	r20, Y+7	; 0x07
    2ebc:	58 85       	ldd	r21, Y+8	; 0x08
    2ebe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ec0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2ec8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eca:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ece:	98 85       	ldd	r25, Y+8	; 0x08
    2ed0:	82 17       	cp	r24, r18
    2ed2:	93 07       	cpc	r25, r19
    2ed4:	a8 f4       	brcc	.+42     	; 0x2f00 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ed6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ed8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eda:	8f 81       	ldd	r24, Y+7	; 0x07
    2edc:	98 85       	ldd	r25, Y+8	; 0x08
    2ede:	a9 01       	movw	r20, r18
    2ee0:	48 1b       	sub	r20, r24
    2ee2:	59 0b       	sbc	r21, r25
    2ee4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ee6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eea:	98 85       	ldd	r25, Y+8	; 0x08
    2eec:	28 0f       	add	r18, r24
    2eee:	39 1f       	adc	r19, r25
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	84 85       	ldd	r24, Z+12	; 0x0c
    2ef8:	95 85       	ldd	r25, Z+13	; 0x0d
    2efa:	b9 01       	movw	r22, r18
    2efc:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2f00:	29 81       	ldd	r18, Y+1	; 0x01
    2f02:	3a 81       	ldd	r19, Y+2	; 0x02
    2f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f08:	82 0f       	add	r24, r18
    2f0a:	93 1f       	adc	r25, r19
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	fc 01       	movw	r30, r24
    2f16:	24 81       	ldd	r18, Z+4	; 0x04
    2f18:	35 81       	ldd	r19, Z+5	; 0x05
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	82 17       	cp	r24, r18
    2f20:	93 07       	cpc	r25, r19
    2f22:	68 f0       	brcs	.+26     	; 0x2f3e <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	fc 01       	movw	r30, r24
    2f2a:	84 81       	ldd	r24, Z+4	; 0x04
    2f2c:	95 81       	ldd	r25, Z+5	; 0x05
    2f2e:	29 81       	ldd	r18, Y+1	; 0x01
    2f30:	3a 81       	ldd	r19, Y+2	; 0x02
    2f32:	a9 01       	movw	r20, r18
    2f34:	48 1b       	sub	r20, r24
    2f36:	59 0b       	sbc	r21, r25
    2f38:	ca 01       	movw	r24, r20
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	29 81       	ldd	r18, Y+1	; 0x01
    2f44:	3a 81       	ldd	r19, Y+2	; 0x02
    2f46:	fc 01       	movw	r30, r24
    2f48:	33 83       	std	Z+3, r19	; 0x03
    2f4a:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2f50:	2e 96       	adiw	r28, 0x0e	; 14
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	66 97       	sbiw	r28, 0x16	; 22
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	98 8b       	std	Y+16, r25	; 0x10
    2f78:	8f 87       	std	Y+15, r24	; 0x0f
    2f7a:	7a 8b       	std	Y+18, r23	; 0x12
    2f7c:	69 8b       	std	Y+17, r22	; 0x11
    2f7e:	5c 8b       	std	Y+20, r21	; 0x14
    2f80:	4b 8b       	std	Y+19, r20	; 0x13
    2f82:	3e 8b       	std	Y+22, r19	; 0x16
    2f84:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    2f86:	8d 89       	ldd	r24, Y+21	; 0x15
    2f88:	9e 89       	ldd	r25, Y+22	; 0x16
    2f8a:	9c 83       	std	Y+4, r25	; 0x04
    2f8c:	8b 83       	std	Y+3, r24	; 0x03
    2f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f90:	9c 89       	ldd	r25, Y+20	; 0x14
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	2b 81       	ldd	r18, Y+3	; 0x03
    2f98:	3c 81       	ldd	r19, Y+4	; 0x04
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	28 17       	cp	r18, r24
    2fa0:	39 07       	cpc	r19, r25
    2fa2:	08 f4       	brcc	.+2      	; 0x2fa6 <prvReadBytesFromBuffer+0x44>
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	98 87       	std	Y+8, r25	; 0x08
    2fa8:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2faa:	8f 81       	ldd	r24, Y+7	; 0x07
    2fac:	98 85       	ldd	r25, Y+8	; 0x08
    2fae:	89 2b       	or	r24, r25
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <prvReadBytesFromBuffer+0x52>
    2fb2:	73 c0       	rjmp	.+230    	; 0x309a <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    2fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb6:	98 89       	ldd	r25, Y+16	; 0x10
    2fb8:	fc 01       	movw	r30, r24
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc4:	98 89       	ldd	r25, Y+16	; 0x10
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	24 81       	ldd	r18, Z+4	; 0x04
    2fca:	35 81       	ldd	r19, Z+5	; 0x05
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd0:	a9 01       	movw	r20, r18
    2fd2:	48 1b       	sub	r20, r24
    2fd4:	59 0b       	sbc	r21, r25
    2fd6:	ca 01       	movw	r24, r20
    2fd8:	9a 87       	std	Y+10, r25	; 0x0a
    2fda:	89 87       	std	Y+9, r24	; 0x09
    2fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2fde:	98 85       	ldd	r25, Y+8	; 0x08
    2fe0:	9c 87       	std	Y+12, r25	; 0x0c
    2fe2:	8b 87       	std	Y+11, r24	; 0x0b
    2fe4:	29 85       	ldd	r18, Y+9	; 0x09
    2fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fe8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fea:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fec:	28 17       	cp	r18, r24
    2fee:	39 07       	cpc	r19, r25
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <prvReadBytesFromBuffer+0x92>
    2ff2:	c9 01       	movw	r24, r18
    2ff4:	9e 87       	std	Y+14, r25	; 0x0e
    2ff6:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffa:	98 89       	ldd	r25, Y+16	; 0x10
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	24 85       	ldd	r18, Z+12	; 0x0c
    3000:	35 85       	ldd	r19, Z+13	; 0x0d
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	28 0f       	add	r18, r24
    3008:	39 1f       	adc	r19, r25
    300a:	4d 85       	ldd	r20, Y+13	; 0x0d
    300c:	5e 85       	ldd	r21, Y+14	; 0x0e
    300e:	89 89       	ldd	r24, Y+17	; 0x11
    3010:	9a 89       	ldd	r25, Y+18	; 0x12
    3012:	b9 01       	movw	r22, r18
    3014:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    3018:	2f 81       	ldd	r18, Y+7	; 0x07
    301a:	38 85       	ldd	r19, Y+8	; 0x08
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	82 17       	cp	r24, r18
    3022:	93 07       	cpc	r25, r19
    3024:	a0 f4       	brcc	.+40     	; 0x304e <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3026:	2f 81       	ldd	r18, Y+7	; 0x07
    3028:	38 85       	ldd	r19, Y+8	; 0x08
    302a:	8d 85       	ldd	r24, Y+13	; 0x0d
    302c:	9e 85       	ldd	r25, Y+14	; 0x0e
    302e:	a9 01       	movw	r20, r18
    3030:	48 1b       	sub	r20, r24
    3032:	59 0b       	sbc	r21, r25
    3034:	8f 85       	ldd	r24, Y+15	; 0x0f
    3036:	98 89       	ldd	r25, Y+16	; 0x10
    3038:	fc 01       	movw	r30, r24
    303a:	64 85       	ldd	r22, Z+12	; 0x0c
    303c:	75 85       	ldd	r23, Z+13	; 0x0d
    303e:	29 89       	ldd	r18, Y+17	; 0x11
    3040:	3a 89       	ldd	r19, Y+18	; 0x12
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	0e 94 0f 44 	call	0x881e	; 0x881e <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    304e:	29 81       	ldd	r18, Y+1	; 0x01
    3050:	3a 81       	ldd	r19, Y+2	; 0x02
    3052:	8f 81       	ldd	r24, Y+7	; 0x07
    3054:	98 85       	ldd	r25, Y+8	; 0x08
    3056:	82 0f       	add	r24, r18
    3058:	93 1f       	adc	r25, r19
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    305e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3060:	98 89       	ldd	r25, Y+16	; 0x10
    3062:	fc 01       	movw	r30, r24
    3064:	24 81       	ldd	r18, Z+4	; 0x04
    3066:	35 81       	ldd	r19, Z+5	; 0x05
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	82 17       	cp	r24, r18
    306e:	93 07       	cpc	r25, r19
    3070:	68 f0       	brcs	.+26     	; 0x308c <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    3072:	8f 85       	ldd	r24, Y+15	; 0x0f
    3074:	98 89       	ldd	r25, Y+16	; 0x10
    3076:	fc 01       	movw	r30, r24
    3078:	84 81       	ldd	r24, Z+4	; 0x04
    307a:	95 81       	ldd	r25, Z+5	; 0x05
    307c:	29 81       	ldd	r18, Y+1	; 0x01
    307e:	3a 81       	ldd	r19, Y+2	; 0x02
    3080:	a9 01       	movw	r20, r18
    3082:	48 1b       	sub	r20, r24
    3084:	59 0b       	sbc	r21, r25
    3086:	ca 01       	movw	r24, r20
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    308c:	8f 85       	ldd	r24, Y+15	; 0x0f
    308e:	98 89       	ldd	r25, Y+16	; 0x10
    3090:	29 81       	ldd	r18, Y+1	; 0x01
    3092:	3a 81       	ldd	r19, Y+2	; 0x02
    3094:	fc 01       	movw	r30, r24
    3096:	31 83       	std	Z+1, r19	; 0x01
    3098:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    309a:	8f 81       	ldd	r24, Y+7	; 0x07
    309c:	98 85       	ldd	r25, Y+8	; 0x08
}
    309e:	66 96       	adiw	r28, 0x16	; 22
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

000030b0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <prvBytesInBuffer+0x6>
    30b6:	1f 92       	push	r1
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	9c 83       	std	Y+4, r25	; 0x04
    30be:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	fc 01       	movw	r30, r24
    30c6:	24 81       	ldd	r18, Z+4	; 0x04
    30c8:	35 81       	ldd	r19, Z+5	; 0x05
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	fc 01       	movw	r30, r24
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	82 0f       	add	r24, r18
    30d6:	93 1f       	adc	r25, r19
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	fc 01       	movw	r30, r24
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	29 81       	ldd	r18, Y+1	; 0x01
    30e8:	3a 81       	ldd	r19, Y+2	; 0x02
    30ea:	a9 01       	movw	r20, r18
    30ec:	48 1b       	sub	r20, r24
    30ee:	59 0b       	sbc	r21, r25
    30f0:	ca 01       	movw	r24, r20
    30f2:	9a 83       	std	Y+2, r25	; 0x02
    30f4:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	fc 01       	movw	r30, r24
    30fc:	24 81       	ldd	r18, Z+4	; 0x04
    30fe:	35 81       	ldd	r19, Z+5	; 0x05
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	9a 81       	ldd	r25, Y+2	; 0x02
    3104:	82 17       	cp	r24, r18
    3106:	93 07       	cpc	r25, r19
    3108:	68 f0       	brcs	.+26     	; 0x3124 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	fc 01       	movw	r30, r24
    3110:	84 81       	ldd	r24, Z+4	; 0x04
    3112:	95 81       	ldd	r25, Z+5	; 0x05
    3114:	29 81       	ldd	r18, Y+1	; 0x01
    3116:	3a 81       	ldd	r19, Y+2	; 0x02
    3118:	a9 01       	movw	r20, r18
    311a:	48 1b       	sub	r20, r24
    311c:	59 0b       	sbc	r21, r25
    311e:	ca 01       	movw	r24, r20
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	08 95       	ret

00003136 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    3136:	0f 93       	push	r16
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	29 97       	sbiw	r28, 0x09	; 9
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	7c 83       	std	Y+4, r23	; 0x04
    3152:	6b 83       	std	Y+3, r22	; 0x03
    3154:	5e 83       	std	Y+6, r21	; 0x06
    3156:	4d 83       	std	Y+5, r20	; 0x05
    3158:	38 87       	std	Y+8, r19	; 0x08
    315a:	2f 83       	std	Y+7, r18	; 0x07
    315c:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	4f e0       	ldi	r20, 0x0F	; 15
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	0e 94 18 44 	call	0x8830	; 0x8830 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	2b 81       	ldd	r18, Y+3	; 0x03
    3174:	3c 81       	ldd	r19, Y+4	; 0x04
    3176:	fc 01       	movw	r30, r24
    3178:	35 87       	std	Z+13, r19	; 0x0d
    317a:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	2d 81       	ldd	r18, Y+5	; 0x05
    3182:	3e 81       	ldd	r19, Y+6	; 0x06
    3184:	fc 01       	movw	r30, r24
    3186:	35 83       	std	Z+5, r19	; 0x05
    3188:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	2f 81       	ldd	r18, Y+7	; 0x07
    3190:	38 85       	ldd	r19, Y+8	; 0x08
    3192:	fc 01       	movw	r30, r24
    3194:	37 83       	std	Z+7, r19	; 0x07
    3196:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	29 85       	ldd	r18, Y+9	; 0x09
    319e:	fc 01       	movw	r30, r24
    31a0:	26 87       	std	Z+14, r18	; 0x0e
}
    31a2:	00 00       	nop
    31a4:	29 96       	adiw	r28, 0x09	; 9
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	0f 91       	pop	r16
    31b6:	08 95       	ret

000031b8 <xTaskCreate>:
    31b8:	af 92       	push	r10
    31ba:	bf 92       	push	r11
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	60 97       	sbiw	r28, 0x10	; 16
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	9f 83       	std	Y+7, r25	; 0x07
    31dc:	8e 83       	std	Y+6, r24	; 0x06
    31de:	79 87       	std	Y+9, r23	; 0x09
    31e0:	68 87       	std	Y+8, r22	; 0x08
    31e2:	5b 87       	std	Y+11, r21	; 0x0b
    31e4:	4a 87       	std	Y+10, r20	; 0x0a
    31e6:	3d 87       	std	Y+13, r19	; 0x0d
    31e8:	2c 87       	std	Y+12, r18	; 0x0c
    31ea:	0e 87       	std	Y+14, r16	; 0x0e
    31ec:	f8 8a       	std	Y+16, r15	; 0x10
    31ee:	ef 86       	std	Y+15, r14	; 0x0f
    31f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f4:	0e 94 92 08 	call	0x1124	; 0x1124 <pvPortMalloc>
    31f8:	9d 83       	std	Y+5, r25	; 0x05
    31fa:	8c 83       	std	Y+4, r24	; 0x04
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3200:	89 2b       	or	r24, r25
    3202:	b9 f0       	breq	.+46     	; 0x3232 <xTaskCreate+0x7a>
    3204:	84 e3       	ldi	r24, 0x34	; 52
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 92 08 	call	0x1124	; 0x1124 <pvPortMalloc>
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	89 2b       	or	r24, r25
    3216:	41 f0       	breq	.+16     	; 0x3228 <xTaskCreate+0x70>
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	2c 81       	ldd	r18, Y+4	; 0x04
    321e:	3d 81       	ldd	r19, Y+5	; 0x05
    3220:	fc 01       	movw	r30, r24
    3222:	34 8f       	std	Z+28, r19	; 0x1c
    3224:	23 8f       	std	Z+27, r18	; 0x1b
    3226:	07 c0       	rjmp	.+14     	; 0x3236 <xTaskCreate+0x7e>
    3228:	8c 81       	ldd	r24, Y+4	; 0x04
    322a:	9d 81       	ldd	r25, Y+5	; 0x05
    322c:	0e 94 a8 09 	call	0x1350	; 0x1350 <vPortFree>
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <xTaskCreate+0x7e>
    3232:	1a 82       	std	Y+2, r1	; 0x02
    3234:	19 82       	std	Y+1, r1	; 0x01
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	89 2b       	or	r24, r25
    323c:	c1 f0       	breq	.+48     	; 0x326e <xTaskCreate+0xb6>
    323e:	a9 81       	ldd	r26, Y+1	; 0x01
    3240:	ba 81       	ldd	r27, Y+2	; 0x02
    3242:	ef 85       	ldd	r30, Y+15	; 0x0f
    3244:	f8 89       	ldd	r31, Y+16	; 0x10
    3246:	2c 85       	ldd	r18, Y+12	; 0x0c
    3248:	3d 85       	ldd	r19, Y+13	; 0x0d
    324a:	4a 85       	ldd	r20, Y+10	; 0x0a
    324c:	5b 85       	ldd	r21, Y+11	; 0x0b
    324e:	68 85       	ldd	r22, Y+8	; 0x08
    3250:	79 85       	ldd	r23, Y+9	; 0x09
    3252:	8e 81       	ldd	r24, Y+6	; 0x06
    3254:	9f 81       	ldd	r25, Y+7	; 0x07
    3256:	a1 2c       	mov	r10, r1
    3258:	b1 2c       	mov	r11, r1
    325a:	6d 01       	movw	r12, r26
    325c:	7f 01       	movw	r14, r30
    325e:	0e 85       	ldd	r16, Y+14	; 0x0e
    3260:	19 d0       	rcall	.+50     	; 0x3294 <prvInitialiseNewTask>
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	05 d1       	rcall	.+522    	; 0x3472 <prvAddNewTaskToReadyList>
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	8b 83       	std	Y+3, r24	; 0x03
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <xTaskCreate+0xba>
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	8b 83       	std	Y+3, r24	; 0x03
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	60 96       	adiw	r28, 0x10	; 16
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	0f 91       	pop	r16
    3286:	ff 90       	pop	r15
    3288:	ef 90       	pop	r14
    328a:	df 90       	pop	r13
    328c:	cf 90       	pop	r12
    328e:	bf 90       	pop	r11
    3290:	af 90       	pop	r10
    3292:	08 95       	ret

00003294 <prvInitialiseNewTask>:
    3294:	af 92       	push	r10
    3296:	bf 92       	push	r11
    3298:	cf 92       	push	r12
    329a:	df 92       	push	r13
    329c:	ef 92       	push	r14
    329e:	ff 92       	push	r15
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	62 97       	sbiw	r28, 0x12	; 18
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	9d 83       	std	Y+5, r25	; 0x05
    32ba:	8c 83       	std	Y+4, r24	; 0x04
    32bc:	7f 83       	std	Y+7, r23	; 0x07
    32be:	6e 83       	std	Y+6, r22	; 0x06
    32c0:	59 87       	std	Y+9, r21	; 0x09
    32c2:	48 87       	std	Y+8, r20	; 0x08
    32c4:	3b 87       	std	Y+11, r19	; 0x0b
    32c6:	2a 87       	std	Y+10, r18	; 0x0a
    32c8:	0c 87       	std	Y+12, r16	; 0x0c
    32ca:	fe 86       	std	Y+14, r15	; 0x0e
    32cc:	ed 86       	std	Y+13, r14	; 0x0d
    32ce:	d8 8a       	std	Y+16, r13	; 0x10
    32d0:	cf 86       	std	Y+15, r12	; 0x0f
    32d2:	ba 8a       	std	Y+18, r11	; 0x12
    32d4:	a9 8a       	std	Y+17, r10	; 0x11
    32d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d8:	98 89       	ldd	r25, Y+16	; 0x10
    32da:	fc 01       	movw	r30, r24
    32dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    32de:	94 8d       	ldd	r25, Z+28	; 0x1c
    32e0:	28 85       	ldd	r18, Y+8	; 0x08
    32e2:	39 85       	ldd	r19, Y+9	; 0x09
    32e4:	a9 01       	movw	r20, r18
    32e6:	65 ea       	ldi	r22, 0xA5	; 165
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	0e 94 18 44 	call	0x8830	; 0x8830 <memset>
    32ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f0:	98 89       	ldd	r25, Y+16	; 0x10
    32f2:	fc 01       	movw	r30, r24
    32f4:	23 8d       	ldd	r18, Z+27	; 0x1b
    32f6:	34 8d       	ldd	r19, Z+28	; 0x1c
    32f8:	88 85       	ldd	r24, Y+8	; 0x08
    32fa:	99 85       	ldd	r25, Y+9	; 0x09
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	82 0f       	add	r24, r18
    3300:	93 1f       	adc	r25, r19
    3302:	9b 83       	std	Y+3, r25	; 0x03
    3304:	8a 83       	std	Y+2, r24	; 0x02
    3306:	8e 81       	ldd	r24, Y+6	; 0x06
    3308:	9f 81       	ldd	r25, Y+7	; 0x07
    330a:	89 2b       	or	r24, r25
    330c:	69 f1       	breq	.+90     	; 0x3368 <prvInitialiseNewTask+0xd4>
    330e:	19 82       	std	Y+1, r1	; 0x01
    3310:	21 c0       	rjmp	.+66     	; 0x3354 <prvInitialiseNewTask+0xc0>
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	88 2f       	mov	r24, r24
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	29 81       	ldd	r18, Y+1	; 0x01
    331a:	22 2f       	mov	r18, r18
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	4e 81       	ldd	r20, Y+6	; 0x06
    3320:	5f 81       	ldd	r21, Y+7	; 0x07
    3322:	24 0f       	add	r18, r20
    3324:	35 1f       	adc	r19, r21
    3326:	f9 01       	movw	r30, r18
    3328:	40 81       	ld	r20, Z
    332a:	2f 85       	ldd	r18, Y+15	; 0x0f
    332c:	38 89       	ldd	r19, Y+16	; 0x10
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	4d 96       	adiw	r24, 0x1d	; 29
    3334:	fc 01       	movw	r30, r24
    3336:	40 83       	st	Z, r20
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	88 2f       	mov	r24, r24
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	2e 81       	ldd	r18, Y+6	; 0x06
    3340:	3f 81       	ldd	r19, Y+7	; 0x07
    3342:	82 0f       	add	r24, r18
    3344:	93 1f       	adc	r25, r19
    3346:	fc 01       	movw	r30, r24
    3348:	80 81       	ld	r24, Z
    334a:	88 23       	and	r24, r24
    334c:	39 f0       	breq	.+14     	; 0x335c <prvInitialiseNewTask+0xc8>
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	8f 5f       	subi	r24, 0xFF	; 255
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	80 31       	cpi	r24, 0x10	; 16
    3358:	e0 f2       	brcs	.-72     	; 0x3312 <prvInitialiseNewTask+0x7e>
    335a:	01 c0       	rjmp	.+2      	; 0x335e <prvInitialiseNewTask+0xca>
    335c:	00 00       	nop
    335e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3360:	98 89       	ldd	r25, Y+16	; 0x10
    3362:	fc 01       	movw	r30, r24
    3364:	14 a6       	std	Z+44, r1	; 0x2c
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <prvInitialiseNewTask+0xdc>
    3368:	8f 85       	ldd	r24, Y+15	; 0x0f
    336a:	98 89       	ldd	r25, Y+16	; 0x10
    336c:	fc 01       	movw	r30, r24
    336e:	15 8e       	std	Z+29, r1	; 0x1d
    3370:	8c 85       	ldd	r24, Y+12	; 0x0c
    3372:	8a 30       	cpi	r24, 0x0A	; 10
    3374:	10 f0       	brcs	.+4      	; 0x337a <prvInitialiseNewTask+0xe6>
    3376:	89 e0       	ldi	r24, 0x09	; 9
    3378:	8c 87       	std	Y+12, r24	; 0x0c
    337a:	8f 85       	ldd	r24, Y+15	; 0x0f
    337c:	98 89       	ldd	r25, Y+16	; 0x10
    337e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3380:	fc 01       	movw	r30, r24
    3382:	22 8f       	std	Z+26, r18	; 0x1a
    3384:	8f 85       	ldd	r24, Y+15	; 0x0f
    3386:	98 89       	ldd	r25, Y+16	; 0x10
    3388:	2c 85       	ldd	r18, Y+12	; 0x0c
    338a:	fc 01       	movw	r30, r24
    338c:	25 a7       	std	Z+45, r18	; 0x2d
    338e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3390:	98 89       	ldd	r25, Y+16	; 0x10
    3392:	fc 01       	movw	r30, r24
    3394:	16 a6       	std	Z+46, r1	; 0x2e
    3396:	8f 85       	ldd	r24, Y+15	; 0x0f
    3398:	98 89       	ldd	r25, Y+16	; 0x10
    339a:	02 96       	adiw	r24, 0x02	; 2
    339c:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInitialiseItem>
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	98 89       	ldd	r25, Y+16	; 0x10
    33a4:	0e 96       	adiw	r24, 0x0e	; 14
    33a6:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInitialiseItem>
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	2f 85       	ldd	r18, Y+15	; 0x0f
    33b0:	38 89       	ldd	r19, Y+16	; 0x10
    33b2:	fc 01       	movw	r30, r24
    33b4:	33 87       	std	Z+11, r19	; 0x0b
    33b6:	22 87       	std	Z+10, r18	; 0x0a
    33b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a0 e0       	ldi	r26, 0x00	; 0
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	2a e0       	ldi	r18, 0x0A	; 10
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	79 01       	movw	r14, r18
    33cc:	8a 01       	movw	r16, r20
    33ce:	e8 1a       	sub	r14, r24
    33d0:	f9 0a       	sbc	r15, r25
    33d2:	0a 0b       	sbc	r16, r26
    33d4:	1b 0b       	sbc	r17, r27
    33d6:	d8 01       	movw	r26, r16
    33d8:	c7 01       	movw	r24, r14
    33da:	2f 85       	ldd	r18, Y+15	; 0x0f
    33dc:	38 89       	ldd	r19, Y+16	; 0x10
    33de:	f9 01       	movw	r30, r18
    33e0:	86 87       	std	Z+14, r24	; 0x0e
    33e2:	97 87       	std	Z+15, r25	; 0x0f
    33e4:	a0 8b       	std	Z+16, r26	; 0x10
    33e6:	b1 8b       	std	Z+17, r27	; 0x11
    33e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ea:	98 89       	ldd	r25, Y+16	; 0x10
    33ec:	2f 85       	ldd	r18, Y+15	; 0x0f
    33ee:	38 89       	ldd	r19, Y+16	; 0x10
    33f0:	fc 01       	movw	r30, r24
    33f2:	37 8b       	std	Z+23, r19	; 0x17
    33f4:	26 8b       	std	Z+22, r18	; 0x16
    33f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f8:	98 89       	ldd	r25, Y+16	; 0x10
    33fa:	8f 96       	adiw	r24, 0x2f	; 47
    33fc:	44 e0       	ldi	r20, 0x04	; 4
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	0e 94 18 44 	call	0x8830	; 0x8830 <memset>
    3408:	8f 85       	ldd	r24, Y+15	; 0x0f
    340a:	98 89       	ldd	r25, Y+16	; 0x10
    340c:	c3 96       	adiw	r24, 0x33	; 51
    340e:	41 e0       	ldi	r20, 0x01	; 1
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	0e 94 18 44 	call	0x8830	; 0x8830 <memset>
    341a:	4a 85       	ldd	r20, Y+10	; 0x0a
    341c:	5b 85       	ldd	r21, Y+11	; 0x0b
    341e:	2c 81       	ldd	r18, Y+4	; 0x04
    3420:	3d 81       	ldd	r19, Y+5	; 0x05
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	b9 01       	movw	r22, r18
    3428:	0e 94 76 0c 	call	0x18ec	; 0x18ec <pxPortInitialiseStack>
    342c:	9c 01       	movw	r18, r24
    342e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3430:	98 89       	ldd	r25, Y+16	; 0x10
    3432:	fc 01       	movw	r30, r24
    3434:	31 83       	std	Z+1, r19	; 0x01
    3436:	20 83       	st	Z, r18
    3438:	8d 85       	ldd	r24, Y+13	; 0x0d
    343a:	9e 85       	ldd	r25, Y+14	; 0x0e
    343c:	89 2b       	or	r24, r25
    343e:	39 f0       	breq	.+14     	; 0x344e <prvInitialiseNewTask+0x1ba>
    3440:	8d 85       	ldd	r24, Y+13	; 0x0d
    3442:	9e 85       	ldd	r25, Y+14	; 0x0e
    3444:	2f 85       	ldd	r18, Y+15	; 0x0f
    3446:	38 89       	ldd	r19, Y+16	; 0x10
    3448:	fc 01       	movw	r30, r24
    344a:	31 83       	std	Z+1, r19	; 0x01
    344c:	20 83       	st	Z, r18
    344e:	00 00       	nop
    3450:	62 96       	adiw	r28, 0x12	; 18
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	cf 90       	pop	r12
    346c:	bf 90       	pop	r11
    346e:	af 90       	pop	r10
    3470:	08 95       	ret

00003472 <prvAddNewTaskToReadyList>:
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	00 d0       	rcall	.+0      	; 0x3478 <prvAddNewTaskToReadyList+0x6>
    3478:	1f 92       	push	r1
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	9c 83       	std	Y+4, r25	; 0x04
    3480:	8b 83       	std	Y+3, r24	; 0x03
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	0f 92       	push	r0
    3488:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <uxCurrentNumberOfTasks>
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	80 93 b9 16 	sts	0x16B9, r24	; 0x8016b9 <uxCurrentNumberOfTasks>
    3492:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    3496:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    349a:	89 2b       	or	r24, r25
    349c:	69 f4       	brne	.+26     	; 0x34b8 <prvAddNewTaskToReadyList+0x46>
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	90 93 19 16 	sts	0x1619, r25	; 0x801619 <pxCurrentTCB+0x1>
    34a6:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <pxCurrentTCB>
    34aa:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <uxCurrentNumberOfTasks>
    34ae:	81 30       	cpi	r24, 0x01	; 1
    34b0:	c9 f4       	brne	.+50     	; 0x34e4 <prvAddNewTaskToReadyList+0x72>
    34b2:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <prvInitialiseTaskLists>
    34b6:	16 c0       	rjmp	.+44     	; 0x34e4 <prvAddNewTaskToReadyList+0x72>
    34b8:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <xSchedulerRunning>
    34bc:	88 23       	and	r24, r24
    34be:	91 f4       	brne	.+36     	; 0x34e4 <prvAddNewTaskToReadyList+0x72>
    34c0:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    34c4:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    34c8:	fc 01       	movw	r30, r24
    34ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
    34d0:	fc 01       	movw	r30, r24
    34d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34d4:	82 17       	cp	r24, r18
    34d6:	30 f0       	brcs	.+12     	; 0x34e4 <prvAddNewTaskToReadyList+0x72>
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	90 93 19 16 	sts	0x1619, r25	; 0x801619 <pxCurrentTCB+0x1>
    34e0:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <pxCurrentTCB>
    34e4:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxTaskNumber>
    34e8:	8f 5f       	subi	r24, 0xFF	; 255
    34ea:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <uxTaskNumber>
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	9c 81       	ldd	r25, Y+4	; 0x04
    34f2:	fc 01       	movw	r30, r24
    34f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    34f6:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    34fa:	89 17       	cp	r24, r25
    34fc:	30 f4       	brcc	.+12     	; 0x350a <prvAddNewTaskToReadyList+0x98>
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	fc 01       	movw	r30, r24
    3504:	82 8d       	ldd	r24, Z+26	; 0x1a
    3506:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	fc 01       	movw	r30, r24
    3510:	82 8d       	ldd	r24, Z+26	; 0x1a
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4b e0       	ldi	r20, 0x0B	; 11
    3518:	42 9f       	mul	r20, r18
    351a:	c0 01       	movw	r24, r0
    351c:	43 9f       	mul	r20, r19
    351e:	90 0d       	add	r25, r0
    3520:	11 24       	eor	r1, r1
    3522:	85 5e       	subi	r24, 0xE5	; 229
    3524:	99 4e       	sbci	r25, 0xE9	; 233
    3526:	fc 01       	movw	r30, r24
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	29 81       	ldd	r18, Y+1	; 0x01
    3536:	3a 81       	ldd	r19, Y+2	; 0x02
    3538:	fc 01       	movw	r30, r24
    353a:	37 83       	std	Z+7, r19	; 0x07
    353c:	26 83       	std	Z+6, r18	; 0x06
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	fc 01       	movw	r30, r24
    3544:	26 81       	ldd	r18, Z+6	; 0x06
    3546:	37 81       	ldd	r19, Z+7	; 0x07
    3548:	8b 81       	ldd	r24, Y+3	; 0x03
    354a:	9c 81       	ldd	r25, Y+4	; 0x04
    354c:	fc 01       	movw	r30, r24
    354e:	31 87       	std	Z+9, r19	; 0x09
    3550:	20 87       	std	Z+8, r18	; 0x08
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	fc 01       	movw	r30, r24
    3558:	86 81       	ldd	r24, Z+6	; 0x06
    355a:	97 81       	ldd	r25, Z+7	; 0x07
    355c:	2b 81       	ldd	r18, Y+3	; 0x03
    355e:	3c 81       	ldd	r19, Y+4	; 0x04
    3560:	2e 5f       	subi	r18, 0xFE	; 254
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	fc 01       	movw	r30, r24
    3566:	35 83       	std	Z+5, r19	; 0x05
    3568:	24 83       	std	Z+4, r18	; 0x04
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	9c 81       	ldd	r25, Y+4	; 0x04
    356e:	9c 01       	movw	r18, r24
    3570:	2e 5f       	subi	r18, 0xFE	; 254
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	fc 01       	movw	r30, r24
    357a:	37 83       	std	Z+7, r19	; 0x07
    357c:	26 83       	std	Z+6, r18	; 0x06
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	9c 81       	ldd	r25, Y+4	; 0x04
    3582:	fc 01       	movw	r30, r24
    3584:	82 8d       	ldd	r24, Z+26	; 0x1a
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4b e0       	ldi	r20, 0x0B	; 11
    358c:	42 9f       	mul	r20, r18
    358e:	c0 01       	movw	r24, r0
    3590:	43 9f       	mul	r20, r19
    3592:	90 0d       	add	r25, r0
    3594:	11 24       	eor	r1, r1
    3596:	9c 01       	movw	r18, r24
    3598:	26 5e       	subi	r18, 0xE6	; 230
    359a:	39 4e       	sbci	r19, 0xE9	; 233
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	fc 01       	movw	r30, r24
    35a2:	35 87       	std	Z+13, r19	; 0x0d
    35a4:	24 87       	std	Z+12, r18	; 0x0c
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    35a8:	9c 81       	ldd	r25, Y+4	; 0x04
    35aa:	fc 01       	movw	r30, r24
    35ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ae:	88 2f       	mov	r24, r24
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	4b e0       	ldi	r20, 0x0B	; 11
    35b4:	48 9f       	mul	r20, r24
    35b6:	90 01       	movw	r18, r0
    35b8:	49 9f       	mul	r20, r25
    35ba:	30 0d       	add	r19, r0
    35bc:	11 24       	eor	r1, r1
    35be:	26 5e       	subi	r18, 0xE6	; 230
    35c0:	39 4e       	sbci	r19, 0xE9	; 233
    35c2:	f9 01       	movw	r30, r18
    35c4:	20 81       	ld	r18, Z
    35c6:	41 e0       	ldi	r20, 0x01	; 1
    35c8:	42 0f       	add	r20, r18
    35ca:	5b e0       	ldi	r21, 0x0B	; 11
    35cc:	58 9f       	mul	r21, r24
    35ce:	90 01       	movw	r18, r0
    35d0:	59 9f       	mul	r21, r25
    35d2:	30 0d       	add	r19, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	c9 01       	movw	r24, r18
    35d8:	86 5e       	subi	r24, 0xE6	; 230
    35da:	99 4e       	sbci	r25, 0xE9	; 233
    35dc:	fc 01       	movw	r30, r24
    35de:	40 83       	st	Z, r20
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <xSchedulerRunning>
    35e8:	88 23       	and	r24, r24
    35ea:	71 f0       	breq	.+28     	; 0x3608 <prvAddNewTaskToReadyList+0x196>
    35ec:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    35f0:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    35f4:	fc 01       	movw	r30, r24
    35f6:	22 8d       	ldd	r18, Z+26	; 0x1a
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	9c 81       	ldd	r25, Y+4	; 0x04
    35fc:	fc 01       	movw	r30, r24
    35fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3600:	28 17       	cp	r18, r24
    3602:	10 f4       	brcc	.+4      	; 0x3608 <prvAddNewTaskToReadyList+0x196>
    3604:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    3608:	00 00       	nop
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	08 95       	ret

00003618 <xTaskDelayUntil>:
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	60 97       	sbiw	r28, 0x10	; 16
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	9c 87       	std	Y+12, r25	; 0x0c
    3636:	8b 87       	std	Y+11, r24	; 0x0b
    3638:	4d 87       	std	Y+13, r20	; 0x0d
    363a:	5e 87       	std	Y+14, r21	; 0x0e
    363c:	6f 87       	std	Y+15, r22	; 0x0f
    363e:	78 8b       	std	Y+16, r23	; 0x10
    3640:	19 82       	std	Y+1, r1	; 0x01
    3642:	19 d1       	rcall	.+562    	; 0x3876 <vTaskSuspendAll>
    3644:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    3648:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    364c:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    3650:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    3654:	8a 83       	std	Y+2, r24	; 0x02
    3656:	9b 83       	std	Y+3, r25	; 0x03
    3658:	ac 83       	std	Y+4, r26	; 0x04
    365a:	bd 83       	std	Y+5, r27	; 0x05
    365c:	8b 85       	ldd	r24, Y+11	; 0x0b
    365e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3660:	fc 01       	movw	r30, r24
    3662:	20 81       	ld	r18, Z
    3664:	31 81       	ldd	r19, Z+1	; 0x01
    3666:	42 81       	ldd	r20, Z+2	; 0x02
    3668:	53 81       	ldd	r21, Z+3	; 0x03
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	af 85       	ldd	r26, Y+15	; 0x0f
    3670:	b8 89       	ldd	r27, Y+16	; 0x10
    3672:	82 0f       	add	r24, r18
    3674:	93 1f       	adc	r25, r19
    3676:	a4 1f       	adc	r26, r20
    3678:	b5 1f       	adc	r27, r21
    367a:	8e 83       	std	Y+6, r24	; 0x06
    367c:	9f 83       	std	Y+7, r25	; 0x07
    367e:	a8 87       	std	Y+8, r26	; 0x08
    3680:	b9 87       	std	Y+9, r27	; 0x09
    3682:	8b 85       	ldd	r24, Y+11	; 0x0b
    3684:	9c 85       	ldd	r25, Y+12	; 0x0c
    3686:	fc 01       	movw	r30, r24
    3688:	20 81       	ld	r18, Z
    368a:	31 81       	ldd	r19, Z+1	; 0x01
    368c:	42 81       	ldd	r20, Z+2	; 0x02
    368e:	53 81       	ldd	r21, Z+3	; 0x03
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	9b 81       	ldd	r25, Y+3	; 0x03
    3694:	ac 81       	ldd	r26, Y+4	; 0x04
    3696:	bd 81       	ldd	r27, Y+5	; 0x05
    3698:	82 17       	cp	r24, r18
    369a:	93 07       	cpc	r25, r19
    369c:	a4 07       	cpc	r26, r20
    369e:	b5 07       	cpc	r27, r21
    36a0:	00 f5       	brcc	.+64     	; 0x36e2 <xTaskDelayUntil+0xca>
    36a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36a6:	fc 01       	movw	r30, r24
    36a8:	20 81       	ld	r18, Z
    36aa:	31 81       	ldd	r19, Z+1	; 0x01
    36ac:	42 81       	ldd	r20, Z+2	; 0x02
    36ae:	53 81       	ldd	r21, Z+3	; 0x03
    36b0:	8e 81       	ldd	r24, Y+6	; 0x06
    36b2:	9f 81       	ldd	r25, Y+7	; 0x07
    36b4:	a8 85       	ldd	r26, Y+8	; 0x08
    36b6:	b9 85       	ldd	r27, Y+9	; 0x09
    36b8:	82 17       	cp	r24, r18
    36ba:	93 07       	cpc	r25, r19
    36bc:	a4 07       	cpc	r26, r20
    36be:	b5 07       	cpc	r27, r21
    36c0:	78 f5       	brcc	.+94     	; 0x3720 <xTaskDelayUntil+0x108>
    36c2:	2e 81       	ldd	r18, Y+6	; 0x06
    36c4:	3f 81       	ldd	r19, Y+7	; 0x07
    36c6:	48 85       	ldd	r20, Y+8	; 0x08
    36c8:	59 85       	ldd	r21, Y+9	; 0x09
    36ca:	8a 81       	ldd	r24, Y+2	; 0x02
    36cc:	9b 81       	ldd	r25, Y+3	; 0x03
    36ce:	ac 81       	ldd	r26, Y+4	; 0x04
    36d0:	bd 81       	ldd	r27, Y+5	; 0x05
    36d2:	82 17       	cp	r24, r18
    36d4:	93 07       	cpc	r25, r19
    36d6:	a4 07       	cpc	r26, r20
    36d8:	b5 07       	cpc	r27, r21
    36da:	10 f5       	brcc	.+68     	; 0x3720 <xTaskDelayUntil+0x108>
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	1f c0       	rjmp	.+62     	; 0x3720 <xTaskDelayUntil+0x108>
    36e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36e6:	fc 01       	movw	r30, r24
    36e8:	20 81       	ld	r18, Z
    36ea:	31 81       	ldd	r19, Z+1	; 0x01
    36ec:	42 81       	ldd	r20, Z+2	; 0x02
    36ee:	53 81       	ldd	r21, Z+3	; 0x03
    36f0:	8e 81       	ldd	r24, Y+6	; 0x06
    36f2:	9f 81       	ldd	r25, Y+7	; 0x07
    36f4:	a8 85       	ldd	r26, Y+8	; 0x08
    36f6:	b9 85       	ldd	r27, Y+9	; 0x09
    36f8:	82 17       	cp	r24, r18
    36fa:	93 07       	cpc	r25, r19
    36fc:	a4 07       	cpc	r26, r20
    36fe:	b5 07       	cpc	r27, r21
    3700:	68 f0       	brcs	.+26     	; 0x371c <xTaskDelayUntil+0x104>
    3702:	2e 81       	ldd	r18, Y+6	; 0x06
    3704:	3f 81       	ldd	r19, Y+7	; 0x07
    3706:	48 85       	ldd	r20, Y+8	; 0x08
    3708:	59 85       	ldd	r21, Y+9	; 0x09
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	9b 81       	ldd	r25, Y+3	; 0x03
    370e:	ac 81       	ldd	r26, Y+4	; 0x04
    3710:	bd 81       	ldd	r27, Y+5	; 0x05
    3712:	82 17       	cp	r24, r18
    3714:	93 07       	cpc	r25, r19
    3716:	a4 07       	cpc	r26, r20
    3718:	b5 07       	cpc	r27, r21
    371a:	10 f4       	brcc	.+4      	; 0x3720 <xTaskDelayUntil+0x108>
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	2b 85       	ldd	r18, Y+11	; 0x0b
    3722:	3c 85       	ldd	r19, Y+12	; 0x0c
    3724:	8e 81       	ldd	r24, Y+6	; 0x06
    3726:	9f 81       	ldd	r25, Y+7	; 0x07
    3728:	a8 85       	ldd	r26, Y+8	; 0x08
    372a:	b9 85       	ldd	r27, Y+9	; 0x09
    372c:	f9 01       	movw	r30, r18
    372e:	80 83       	st	Z, r24
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	a2 83       	std	Z+2, r26	; 0x02
    3734:	b3 83       	std	Z+3, r27	; 0x03
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	88 23       	and	r24, r24
    373a:	a9 f0       	breq	.+42     	; 0x3766 <xTaskDelayUntil+0x14e>
    373c:	2e 81       	ldd	r18, Y+6	; 0x06
    373e:	3f 81       	ldd	r19, Y+7	; 0x07
    3740:	48 85       	ldd	r20, Y+8	; 0x08
    3742:	59 85       	ldd	r21, Y+9	; 0x09
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	9b 81       	ldd	r25, Y+3	; 0x03
    3748:	ac 81       	ldd	r26, Y+4	; 0x04
    374a:	bd 81       	ldd	r27, Y+5	; 0x05
    374c:	79 01       	movw	r14, r18
    374e:	8a 01       	movw	r16, r20
    3750:	e8 1a       	sub	r14, r24
    3752:	f9 0a       	sbc	r15, r25
    3754:	0a 0b       	sbc	r16, r26
    3756:	1b 0b       	sbc	r17, r27
    3758:	d8 01       	movw	r26, r16
    375a:	c7 01       	movw	r24, r14
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 91 2c 	call	0x5922	; 0x5922 <prvAddCurrentTaskToDelayedList>
    3766:	94 d0       	rcall	.+296    	; 0x3890 <xTaskResumeAll>
    3768:	8a 87       	std	Y+10, r24	; 0x0a
    376a:	8a 85       	ldd	r24, Y+10	; 0x0a
    376c:	88 23       	and	r24, r24
    376e:	11 f4       	brne	.+4      	; 0x3774 <xTaskDelayUntil+0x15c>
    3770:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	60 96       	adiw	r28, 0x10	; 16
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	08 95       	ret

00003790 <vTaskDelay>:
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	00 d0       	rcall	.+0      	; 0x3796 <vTaskDelay+0x6>
    3796:	1f 92       	push	r1
    3798:	1f 92       	push	r1
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	6a 83       	std	Y+2, r22	; 0x02
    37a0:	7b 83       	std	Y+3, r23	; 0x03
    37a2:	8c 83       	std	Y+4, r24	; 0x04
    37a4:	9d 83       	std	Y+5, r25	; 0x05
    37a6:	19 82       	std	Y+1, r1	; 0x01
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	9b 81       	ldd	r25, Y+3	; 0x03
    37ac:	ac 81       	ldd	r26, Y+4	; 0x04
    37ae:	bd 81       	ldd	r27, Y+5	; 0x05
    37b0:	89 2b       	or	r24, r25
    37b2:	8a 2b       	or	r24, r26
    37b4:	8b 2b       	or	r24, r27
    37b6:	61 f0       	breq	.+24     	; 0x37d0 <vTaskDelay+0x40>
    37b8:	5e d0       	rcall	.+188    	; 0x3876 <vTaskSuspendAll>
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	9b 81       	ldd	r25, Y+3	; 0x03
    37be:	ac 81       	ldd	r26, Y+4	; 0x04
    37c0:	bd 81       	ldd	r27, Y+5	; 0x05
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 91 2c 	call	0x5922	; 0x5922 <prvAddCurrentTaskToDelayedList>
    37cc:	61 d0       	rcall	.+194    	; 0x3890 <xTaskResumeAll>
    37ce:	89 83       	std	Y+1, r24	; 0x01
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	88 23       	and	r24, r24
    37d4:	11 f4       	brne	.+4      	; 0x37da <vTaskDelay+0x4a>
    37d6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    37da:	00 00       	nop
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <vTaskStartScheduler>:
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	1f 92       	push	r1
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	0f 2e       	mov	r0, r31
    37fe:	fb ec       	ldi	r31, 0xCB	; 203
    3800:	ef 2e       	mov	r14, r31
    3802:	f6 e1       	ldi	r31, 0x16	; 22
    3804:	ff 2e       	mov	r15, r31
    3806:	f0 2d       	mov	r31, r0
    3808:	00 e0       	ldi	r16, 0x00	; 0
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 ec       	ldi	r20, 0xC0	; 192
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	65 e1       	ldi	r22, 0x15	; 21
    3814:	75 e0       	ldi	r23, 0x05	; 5
    3816:	8d ec       	ldi	r24, 0xCD	; 205
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	ce dc       	rcall	.-1636   	; 0x31b8 <xTaskCreate>
    381c:	89 83       	std	Y+1, r24	; 0x01
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	81 30       	cpi	r24, 0x01	; 1
    3822:	19 f4       	brne	.+6      	; 0x382a <vTaskStartScheduler+0x3e>
    3824:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <xTimerCreateTimerTask>
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	81 30       	cpi	r24, 0x01	; 1
    382e:	c9 f4       	brne	.+50     	; 0x3862 <vTaskStartScheduler+0x76>
    3830:	f8 94       	cli
    3832:	8f ef       	ldi	r24, 0xFF	; 255
    3834:	9f ef       	ldi	r25, 0xFF	; 255
    3836:	dc 01       	movw	r26, r24
    3838:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    383c:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    3840:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    3844:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <xSchedulerRunning>
    384e:	10 92 ba 16 	sts	0x16BA, r1	; 0x8016ba <xTickCount>
    3852:	10 92 bb 16 	sts	0x16BB, r1	; 0x8016bb <xTickCount+0x1>
    3856:	10 92 bc 16 	sts	0x16BC, r1	; 0x8016bc <xTickCount+0x2>
    385a:	10 92 bd 16 	sts	0x16BD, r1	; 0x8016bd <xTickCount+0x3>
    385e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <xPortStartScheduler>
    3862:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    3866:	00 00       	nop
    3868:	0f 90       	pop	r0
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	08 95       	ret

00003876 <vTaskSuspendAll>:
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    3882:	8f 5f       	subi	r24, 0xFF	; 255
    3884:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <uxSchedulerSuspended>
    3888:	00 00       	nop
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <xTaskResumeAll>:
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	2d 97       	sbiw	r28, 0x0d	; 13
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	cd bf       	out	0x3d, r28	; 61
    38a4:	1a 82       	std	Y+2, r1	; 0x02
    38a6:	19 82       	std	Y+1, r1	; 0x01
    38a8:	1b 82       	std	Y+3, r1	; 0x03
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	0f 92       	push	r0
    38b0:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    38b4:	81 50       	subi	r24, 0x01	; 1
    38b6:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <uxSchedulerSuspended>
    38ba:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    38be:	88 23       	and	r24, r24
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <xTaskResumeAll+0x34>
    38c2:	69 c1       	rjmp	.+722    	; 0x3b96 <xTaskResumeAll+0x306>
    38c4:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <uxCurrentNumberOfTasks>
    38c8:	88 23       	and	r24, r24
    38ca:	09 f4       	brne	.+2      	; 0x38ce <xTaskResumeAll+0x3e>
    38cc:	64 c1       	rjmp	.+712    	; 0x3b96 <xTaskResumeAll+0x306>
    38ce:	1b c1       	rjmp	.+566    	; 0x3b06 <xTaskResumeAll+0x276>
    38d0:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xPendingReadyList+0x7>
    38d4:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xPendingReadyList+0x8>
    38d8:	fc 01       	movw	r30, r24
    38da:	80 85       	ldd	r24, Z+8	; 0x08
    38dc:	91 85       	ldd	r25, Z+9	; 0x09
    38de:	9a 83       	std	Y+2, r25	; 0x02
    38e0:	89 83       	std	Y+1, r24	; 0x01
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	fc 01       	movw	r30, r24
    38e8:	80 8d       	ldd	r24, Z+24	; 0x18
    38ea:	91 8d       	ldd	r25, Z+25	; 0x19
    38ec:	99 87       	std	Y+9, r25	; 0x09
    38ee:	88 87       	std	Y+8, r24	; 0x08
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	fc 01       	movw	r30, r24
    38f6:	82 89       	ldd	r24, Z+18	; 0x12
    38f8:	93 89       	ldd	r25, Z+19	; 0x13
    38fa:	29 81       	ldd	r18, Y+1	; 0x01
    38fc:	3a 81       	ldd	r19, Y+2	; 0x02
    38fe:	f9 01       	movw	r30, r18
    3900:	24 89       	ldd	r18, Z+20	; 0x14
    3902:	35 89       	ldd	r19, Z+21	; 0x15
    3904:	fc 01       	movw	r30, r24
    3906:	37 83       	std	Z+7, r19	; 0x07
    3908:	26 83       	std	Z+6, r18	; 0x06
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	fc 01       	movw	r30, r24
    3910:	84 89       	ldd	r24, Z+20	; 0x14
    3912:	95 89       	ldd	r25, Z+21	; 0x15
    3914:	29 81       	ldd	r18, Y+1	; 0x01
    3916:	3a 81       	ldd	r19, Y+2	; 0x02
    3918:	f9 01       	movw	r30, r18
    391a:	22 89       	ldd	r18, Z+18	; 0x12
    391c:	33 89       	ldd	r19, Z+19	; 0x13
    391e:	fc 01       	movw	r30, r24
    3920:	35 83       	std	Z+5, r19	; 0x05
    3922:	24 83       	std	Z+4, r18	; 0x04
    3924:	88 85       	ldd	r24, Y+8	; 0x08
    3926:	99 85       	ldd	r25, Y+9	; 0x09
    3928:	fc 01       	movw	r30, r24
    392a:	21 81       	ldd	r18, Z+1	; 0x01
    392c:	32 81       	ldd	r19, Z+2	; 0x02
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	9a 81       	ldd	r25, Y+2	; 0x02
    3932:	0e 96       	adiw	r24, 0x0e	; 14
    3934:	28 17       	cp	r18, r24
    3936:	39 07       	cpc	r19, r25
    3938:	51 f4       	brne	.+20     	; 0x394e <xTaskResumeAll+0xbe>
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	9a 81       	ldd	r25, Y+2	; 0x02
    393e:	fc 01       	movw	r30, r24
    3940:	24 89       	ldd	r18, Z+20	; 0x14
    3942:	35 89       	ldd	r19, Z+21	; 0x15
    3944:	88 85       	ldd	r24, Y+8	; 0x08
    3946:	99 85       	ldd	r25, Y+9	; 0x09
    3948:	fc 01       	movw	r30, r24
    394a:	32 83       	std	Z+2, r19	; 0x02
    394c:	21 83       	std	Z+1, r18	; 0x01
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	9a 81       	ldd	r25, Y+2	; 0x02
    3952:	fc 01       	movw	r30, r24
    3954:	11 8e       	std	Z+25, r1	; 0x19
    3956:	10 8e       	std	Z+24, r1	; 0x18
    3958:	88 85       	ldd	r24, Y+8	; 0x08
    395a:	99 85       	ldd	r25, Y+9	; 0x09
    395c:	fc 01       	movw	r30, r24
    395e:	80 81       	ld	r24, Z
    3960:	2f ef       	ldi	r18, 0xFF	; 255
    3962:	28 0f       	add	r18, r24
    3964:	88 85       	ldd	r24, Y+8	; 0x08
    3966:	99 85       	ldd	r25, Y+9	; 0x09
    3968:	fc 01       	movw	r30, r24
    396a:	20 83       	st	Z, r18
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	fc 01       	movw	r30, r24
    3972:	84 85       	ldd	r24, Z+12	; 0x0c
    3974:	95 85       	ldd	r25, Z+13	; 0x0d
    3976:	9b 87       	std	Y+11, r25	; 0x0b
    3978:	8a 87       	std	Y+10, r24	; 0x0a
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	fc 01       	movw	r30, r24
    3980:	86 81       	ldd	r24, Z+6	; 0x06
    3982:	97 81       	ldd	r25, Z+7	; 0x07
    3984:	29 81       	ldd	r18, Y+1	; 0x01
    3986:	3a 81       	ldd	r19, Y+2	; 0x02
    3988:	f9 01       	movw	r30, r18
    398a:	20 85       	ldd	r18, Z+8	; 0x08
    398c:	31 85       	ldd	r19, Z+9	; 0x09
    398e:	fc 01       	movw	r30, r24
    3990:	37 83       	std	Z+7, r19	; 0x07
    3992:	26 83       	std	Z+6, r18	; 0x06
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	fc 01       	movw	r30, r24
    399a:	80 85       	ldd	r24, Z+8	; 0x08
    399c:	91 85       	ldd	r25, Z+9	; 0x09
    399e:	29 81       	ldd	r18, Y+1	; 0x01
    39a0:	3a 81       	ldd	r19, Y+2	; 0x02
    39a2:	f9 01       	movw	r30, r18
    39a4:	26 81       	ldd	r18, Z+6	; 0x06
    39a6:	37 81       	ldd	r19, Z+7	; 0x07
    39a8:	fc 01       	movw	r30, r24
    39aa:	35 83       	std	Z+5, r19	; 0x05
    39ac:	24 83       	std	Z+4, r18	; 0x04
    39ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b2:	fc 01       	movw	r30, r24
    39b4:	21 81       	ldd	r18, Z+1	; 0x01
    39b6:	32 81       	ldd	r19, Z+2	; 0x02
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	9a 81       	ldd	r25, Y+2	; 0x02
    39bc:	02 96       	adiw	r24, 0x02	; 2
    39be:	28 17       	cp	r18, r24
    39c0:	39 07       	cpc	r19, r25
    39c2:	51 f4       	brne	.+20     	; 0x39d8 <xTaskResumeAll+0x148>
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	fc 01       	movw	r30, r24
    39ca:	20 85       	ldd	r18, Z+8	; 0x08
    39cc:	31 85       	ldd	r19, Z+9	; 0x09
    39ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d2:	fc 01       	movw	r30, r24
    39d4:	32 83       	std	Z+2, r19	; 0x02
    39d6:	21 83       	std	Z+1, r18	; 0x01
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	fc 01       	movw	r30, r24
    39de:	15 86       	std	Z+13, r1	; 0x0d
    39e0:	14 86       	std	Z+12, r1	; 0x0c
    39e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39e6:	fc 01       	movw	r30, r24
    39e8:	80 81       	ld	r24, Z
    39ea:	2f ef       	ldi	r18, 0xFF	; 255
    39ec:	28 0f       	add	r18, r24
    39ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    39f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39f2:	fc 01       	movw	r30, r24
    39f4:	20 83       	st	Z, r18
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	fc 01       	movw	r30, r24
    39fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    39fe:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    3a02:	89 17       	cp	r24, r25
    3a04:	30 f4       	brcc	.+12     	; 0x3a12 <xTaskResumeAll+0x182>
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a0e:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	9a 81       	ldd	r25, Y+2	; 0x02
    3a16:	fc 01       	movw	r30, r24
    3a18:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a1a:	28 2f       	mov	r18, r24
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	4b e0       	ldi	r20, 0x0B	; 11
    3a20:	42 9f       	mul	r20, r18
    3a22:	c0 01       	movw	r24, r0
    3a24:	43 9f       	mul	r20, r19
    3a26:	90 0d       	add	r25, r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	85 5e       	subi	r24, 0xE5	; 229
    3a2c:	99 4e       	sbci	r25, 0xE9	; 233
    3a2e:	fc 01       	movw	r30, r24
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	9d 87       	std	Y+13, r25	; 0x0d
    3a36:	8c 87       	std	Y+12, r24	; 0x0c
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a3e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a40:	fc 01       	movw	r30, r24
    3a42:	37 83       	std	Z+7, r19	; 0x07
    3a44:	26 83       	std	Z+6, r18	; 0x06
    3a46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a48:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	26 81       	ldd	r18, Z+6	; 0x06
    3a4e:	37 81       	ldd	r19, Z+7	; 0x07
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	fc 01       	movw	r30, r24
    3a56:	31 87       	std	Z+9, r19	; 0x09
    3a58:	20 87       	std	Z+8, r18	; 0x08
    3a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a5e:	fc 01       	movw	r30, r24
    3a60:	86 81       	ldd	r24, Z+6	; 0x06
    3a62:	97 81       	ldd	r25, Z+7	; 0x07
    3a64:	29 81       	ldd	r18, Y+1	; 0x01
    3a66:	3a 81       	ldd	r19, Y+2	; 0x02
    3a68:	2e 5f       	subi	r18, 0xFE	; 254
    3a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	35 83       	std	Z+5, r19	; 0x05
    3a70:	24 83       	std	Z+4, r18	; 0x04
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	9c 01       	movw	r18, r24
    3a78:	2e 5f       	subi	r18, 0xFE	; 254
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a80:	fc 01       	movw	r30, r24
    3a82:	37 83       	std	Z+7, r19	; 0x07
    3a84:	26 83       	std	Z+6, r18	; 0x06
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a8e:	28 2f       	mov	r18, r24
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	4b e0       	ldi	r20, 0x0B	; 11
    3a94:	42 9f       	mul	r20, r18
    3a96:	c0 01       	movw	r24, r0
    3a98:	43 9f       	mul	r20, r19
    3a9a:	90 0d       	add	r25, r0
    3a9c:	11 24       	eor	r1, r1
    3a9e:	9c 01       	movw	r18, r24
    3aa0:	26 5e       	subi	r18, 0xE6	; 230
    3aa2:	39 4e       	sbci	r19, 0xE9	; 233
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	35 87       	std	Z+13, r19	; 0x0d
    3aac:	24 87       	std	Z+12, r18	; 0x0c
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	4b e0       	ldi	r20, 0x0B	; 11
    3abc:	48 9f       	mul	r20, r24
    3abe:	90 01       	movw	r18, r0
    3ac0:	49 9f       	mul	r20, r25
    3ac2:	30 0d       	add	r19, r0
    3ac4:	11 24       	eor	r1, r1
    3ac6:	26 5e       	subi	r18, 0xE6	; 230
    3ac8:	39 4e       	sbci	r19, 0xE9	; 233
    3aca:	f9 01       	movw	r30, r18
    3acc:	20 81       	ld	r18, Z
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	42 0f       	add	r20, r18
    3ad2:	5b e0       	ldi	r21, 0x0B	; 11
    3ad4:	58 9f       	mul	r21, r24
    3ad6:	90 01       	movw	r18, r0
    3ad8:	59 9f       	mul	r21, r25
    3ada:	30 0d       	add	r19, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	c9 01       	movw	r24, r18
    3ae0:	86 5e       	subi	r24, 0xE6	; 230
    3ae2:	99 4e       	sbci	r25, 0xE9	; 233
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	40 83       	st	Z, r20
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	fc 01       	movw	r30, r24
    3aee:	22 8d       	ldd	r18, Z+26	; 0x1a
    3af0:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    3af4:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    3af8:	fc 01       	movw	r30, r24
    3afa:	82 8d       	ldd	r24, Z+26	; 0x1a
    3afc:	28 17       	cp	r18, r24
    3afe:	18 f0       	brcs	.+6      	; 0x3b06 <xTaskResumeAll+0x276>
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    3b06:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xPendingReadyList>
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f0       	breq	.+2      	; 0x3b10 <xTaskResumeAll+0x280>
    3b0e:	e0 ce       	rjmp	.-576    	; 0x38d0 <xTaskResumeAll+0x40>
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	89 2b       	or	r24, r25
    3b16:	11 f0       	breq	.+4      	; 0x3b1c <xTaskResumeAll+0x28c>
    3b18:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <prvResetNextTaskUnblockTime>
    3b1c:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <xPendedTicks>
    3b20:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <xPendedTicks+0x1>
    3b24:	a0 91 c2 16 	lds	r26, 0x16C2	; 0x8016c2 <xPendedTicks+0x2>
    3b28:	b0 91 c3 16 	lds	r27, 0x16C3	; 0x8016c3 <xPendedTicks+0x3>
    3b2c:	8c 83       	std	Y+4, r24	; 0x04
    3b2e:	9d 83       	std	Y+5, r25	; 0x05
    3b30:	ae 83       	std	Y+6, r26	; 0x06
    3b32:	bf 83       	std	Y+7, r27	; 0x07
    3b34:	8c 81       	ldd	r24, Y+4	; 0x04
    3b36:	9d 81       	ldd	r25, Y+5	; 0x05
    3b38:	ae 81       	ldd	r26, Y+6	; 0x06
    3b3a:	bf 81       	ldd	r27, Y+7	; 0x07
    3b3c:	89 2b       	or	r24, r25
    3b3e:	8a 2b       	or	r24, r26
    3b40:	8b 2b       	or	r24, r27
    3b42:	09 f1       	breq	.+66     	; 0x3b86 <xTaskResumeAll+0x2f6>
    3b44:	58 d0       	rcall	.+176    	; 0x3bf6 <xTaskIncrementTick>
    3b46:	88 23       	and	r24, r24
    3b48:	19 f0       	breq	.+6      	; 0x3b50 <xTaskResumeAll+0x2c0>
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    3b50:	8c 81       	ldd	r24, Y+4	; 0x04
    3b52:	9d 81       	ldd	r25, Y+5	; 0x05
    3b54:	ae 81       	ldd	r26, Y+6	; 0x06
    3b56:	bf 81       	ldd	r27, Y+7	; 0x07
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	a1 09       	sbc	r26, r1
    3b5c:	b1 09       	sbc	r27, r1
    3b5e:	8c 83       	std	Y+4, r24	; 0x04
    3b60:	9d 83       	std	Y+5, r25	; 0x05
    3b62:	ae 83       	std	Y+6, r26	; 0x06
    3b64:	bf 83       	std	Y+7, r27	; 0x07
    3b66:	8c 81       	ldd	r24, Y+4	; 0x04
    3b68:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6a:	ae 81       	ldd	r26, Y+6	; 0x06
    3b6c:	bf 81       	ldd	r27, Y+7	; 0x07
    3b6e:	89 2b       	or	r24, r25
    3b70:	8a 2b       	or	r24, r26
    3b72:	8b 2b       	or	r24, r27
    3b74:	39 f7       	brne	.-50     	; 0x3b44 <xTaskResumeAll+0x2b4>
    3b76:	10 92 c0 16 	sts	0x16C0, r1	; 0x8016c0 <xPendedTicks>
    3b7a:	10 92 c1 16 	sts	0x16C1, r1	; 0x8016c1 <xPendedTicks+0x1>
    3b7e:	10 92 c2 16 	sts	0x16C2, r1	; 0x8016c2 <xPendedTicks+0x2>
    3b82:	10 92 c3 16 	sts	0x16C3, r1	; 0x8016c3 <xPendedTicks+0x3>
    3b86:	80 91 c4 16 	lds	r24, 0x16C4	; 0x8016c4 <xYieldPending>
    3b8a:	88 23       	and	r24, r24
    3b8c:	21 f0       	breq	.+8      	; 0x3b96 <xTaskResumeAll+0x306>
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	8b 83       	std	Y+3, r24	; 0x03
    3b92:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	2d 96       	adiw	r28, 0x0d	; 13
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	08 95       	ret

00003bae <xTaskGetTickCount>:
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <xTaskGetTickCount+0x6>
    3bb4:	1f 92       	push	r1
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	0f 92       	push	r0
    3bc0:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    3bc4:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    3bc8:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    3bcc:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    3bd0:	89 83       	std	Y+1, r24	; 0x01
    3bd2:	9a 83       	std	Y+2, r25	; 0x02
    3bd4:	ab 83       	std	Y+3, r26	; 0x03
    3bd6:	bc 83       	std	Y+4, r27	; 0x04
    3bd8:	0f 90       	pop	r0
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	9a 81       	ldd	r25, Y+2	; 0x02
    3be0:	ab 81       	ldd	r26, Y+3	; 0x03
    3be2:	bc 81       	ldd	r27, Y+4	; 0x04
    3be4:	bc 01       	movw	r22, r24
    3be6:	cd 01       	movw	r24, r26
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <xTaskIncrementTick>:
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	63 97       	sbiw	r28, 0x13	; 19
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	19 82       	std	Y+1, r1	; 0x01
    3c0c:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    3c10:	88 23       	and	r24, r24
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <xTaskIncrementTick+0x20>
    3c14:	cc c1       	rjmp	.+920    	; 0x3fae <xTaskIncrementTick+0x3b8>
    3c16:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    3c1a:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    3c1e:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    3c22:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	a1 1d       	adc	r26, r1
    3c2a:	b1 1d       	adc	r27, r1
    3c2c:	8a 83       	std	Y+2, r24	; 0x02
    3c2e:	9b 83       	std	Y+3, r25	; 0x03
    3c30:	ac 83       	std	Y+4, r26	; 0x04
    3c32:	bd 83       	std	Y+5, r27	; 0x05
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	ac 81       	ldd	r26, Y+4	; 0x04
    3c3a:	bd 81       	ldd	r27, Y+5	; 0x05
    3c3c:	80 93 ba 16 	sts	0x16BA, r24	; 0x8016ba <xTickCount>
    3c40:	90 93 bb 16 	sts	0x16BB, r25	; 0x8016bb <xTickCount+0x1>
    3c44:	a0 93 bc 16 	sts	0x16BC, r26	; 0x8016bc <xTickCount+0x2>
    3c48:	b0 93 bd 16 	sts	0x16BD, r27	; 0x8016bd <xTickCount+0x3>
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c50:	ac 81       	ldd	r26, Y+4	; 0x04
    3c52:	bd 81       	ldd	r27, Y+5	; 0x05
    3c54:	89 2b       	or	r24, r25
    3c56:	8a 2b       	or	r24, r26
    3c58:	8b 2b       	or	r24, r27
    3c5a:	d1 f4       	brne	.+52     	; 0x3c90 <xTaskIncrementTick+0x9a>
    3c5c:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    3c60:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    3c64:	9f 83       	std	Y+7, r25	; 0x07
    3c66:	8e 83       	std	Y+6, r24	; 0x06
    3c68:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <pxOverflowDelayedTaskList>
    3c6c:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <pxOverflowDelayedTaskList+0x1>
    3c70:	90 93 9f 16 	sts	0x169F, r25	; 0x80169f <pxDelayedTaskList+0x1>
    3c74:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <pxDelayedTaskList>
    3c78:	8e 81       	ldd	r24, Y+6	; 0x06
    3c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c7c:	90 93 a1 16 	sts	0x16A1, r25	; 0x8016a1 <pxOverflowDelayedTaskList+0x1>
    3c80:	80 93 a0 16 	sts	0x16A0, r24	; 0x8016a0 <pxOverflowDelayedTaskList>
    3c84:	80 91 c5 16 	lds	r24, 0x16C5	; 0x8016c5 <xNumOfOverflows>
    3c88:	8f 5f       	subi	r24, 0xFF	; 255
    3c8a:	80 93 c5 16 	sts	0x16C5, r24	; 0x8016c5 <xNumOfOverflows>
    3c8e:	8c d7       	rcall	.+3864   	; 0x4ba8 <prvResetNextTaskUnblockTime>
    3c90:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <xNextTaskUnblockTime>
    3c94:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    3c98:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    3c9c:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <xNextTaskUnblockTime+0x3>
    3ca0:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca2:	3b 81       	ldd	r19, Y+3	; 0x03
    3ca4:	4c 81       	ldd	r20, Y+4	; 0x04
    3ca6:	5d 81       	ldd	r21, Y+5	; 0x05
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	4a 07       	cpc	r20, r26
    3cae:	5b 07       	cpc	r21, r27
    3cb0:	08 f4       	brcc	.+2      	; 0x3cb4 <xTaskIncrementTick+0xbe>
    3cb2:	60 c1       	rjmp	.+704    	; 0x3f74 <xTaskIncrementTick+0x37e>
    3cb4:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    3cb8:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	88 23       	and	r24, r24
    3cc2:	61 f4       	brne	.+24     	; 0x3cdc <xTaskIncrementTick+0xe6>
    3cc4:	8f ef       	ldi	r24, 0xFF	; 255
    3cc6:	9f ef       	ldi	r25, 0xFF	; 255
    3cc8:	dc 01       	movw	r26, r24
    3cca:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    3cce:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    3cd2:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    3cd6:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>
    3cda:	4c c1       	rjmp	.+664    	; 0x3f74 <xTaskIncrementTick+0x37e>
    3cdc:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    3ce0:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	87 81       	ldd	r24, Z+7	; 0x07
    3ce8:	90 85       	ldd	r25, Z+8	; 0x08
    3cea:	fc 01       	movw	r30, r24
    3cec:	80 85       	ldd	r24, Z+8	; 0x08
    3cee:	91 85       	ldd	r25, Z+9	; 0x09
    3cf0:	99 87       	std	Y+9, r25	; 0x09
    3cf2:	88 87       	std	Y+8, r24	; 0x08
    3cf4:	88 85       	ldd	r24, Y+8	; 0x08
    3cf6:	99 85       	ldd	r25, Y+9	; 0x09
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	a4 81       	ldd	r26, Z+4	; 0x04
    3d00:	b5 81       	ldd	r27, Z+5	; 0x05
    3d02:	8a 87       	std	Y+10, r24	; 0x0a
    3d04:	9b 87       	std	Y+11, r25	; 0x0b
    3d06:	ac 87       	std	Y+12, r26	; 0x0c
    3d08:	bd 87       	std	Y+13, r27	; 0x0d
    3d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    3d0e:	4c 81       	ldd	r20, Y+4	; 0x04
    3d10:	5d 81       	ldd	r21, Y+5	; 0x05
    3d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d14:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d16:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d18:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d1a:	28 17       	cp	r18, r24
    3d1c:	39 07       	cpc	r19, r25
    3d1e:	4a 07       	cpc	r20, r26
    3d20:	5b 07       	cpc	r21, r27
    3d22:	68 f4       	brcc	.+26     	; 0x3d3e <xTaskIncrementTick+0x148>
    3d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d28:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d2a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d2c:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    3d30:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    3d34:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    3d38:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>
    3d3c:	1b c1       	rjmp	.+566    	; 0x3f74 <xTaskIncrementTick+0x37e>
    3d3e:	88 85       	ldd	r24, Y+8	; 0x08
    3d40:	99 85       	ldd	r25, Y+9	; 0x09
    3d42:	fc 01       	movw	r30, r24
    3d44:	84 85       	ldd	r24, Z+12	; 0x0c
    3d46:	95 85       	ldd	r25, Z+13	; 0x0d
    3d48:	9f 87       	std	Y+15, r25	; 0x0f
    3d4a:	8e 87       	std	Y+14, r24	; 0x0e
    3d4c:	88 85       	ldd	r24, Y+8	; 0x08
    3d4e:	99 85       	ldd	r25, Y+9	; 0x09
    3d50:	fc 01       	movw	r30, r24
    3d52:	86 81       	ldd	r24, Z+6	; 0x06
    3d54:	97 81       	ldd	r25, Z+7	; 0x07
    3d56:	28 85       	ldd	r18, Y+8	; 0x08
    3d58:	39 85       	ldd	r19, Y+9	; 0x09
    3d5a:	f9 01       	movw	r30, r18
    3d5c:	20 85       	ldd	r18, Z+8	; 0x08
    3d5e:	31 85       	ldd	r19, Z+9	; 0x09
    3d60:	fc 01       	movw	r30, r24
    3d62:	37 83       	std	Z+7, r19	; 0x07
    3d64:	26 83       	std	Z+6, r18	; 0x06
    3d66:	88 85       	ldd	r24, Y+8	; 0x08
    3d68:	99 85       	ldd	r25, Y+9	; 0x09
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	80 85       	ldd	r24, Z+8	; 0x08
    3d6e:	91 85       	ldd	r25, Z+9	; 0x09
    3d70:	28 85       	ldd	r18, Y+8	; 0x08
    3d72:	39 85       	ldd	r19, Y+9	; 0x09
    3d74:	f9 01       	movw	r30, r18
    3d76:	26 81       	ldd	r18, Z+6	; 0x06
    3d78:	37 81       	ldd	r19, Z+7	; 0x07
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	35 83       	std	Z+5, r19	; 0x05
    3d7e:	24 83       	std	Z+4, r18	; 0x04
    3d80:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d82:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d84:	fc 01       	movw	r30, r24
    3d86:	21 81       	ldd	r18, Z+1	; 0x01
    3d88:	32 81       	ldd	r19, Z+2	; 0x02
    3d8a:	88 85       	ldd	r24, Y+8	; 0x08
    3d8c:	99 85       	ldd	r25, Y+9	; 0x09
    3d8e:	02 96       	adiw	r24, 0x02	; 2
    3d90:	28 17       	cp	r18, r24
    3d92:	39 07       	cpc	r19, r25
    3d94:	51 f4       	brne	.+20     	; 0x3daa <xTaskIncrementTick+0x1b4>
    3d96:	88 85       	ldd	r24, Y+8	; 0x08
    3d98:	99 85       	ldd	r25, Y+9	; 0x09
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	20 85       	ldd	r18, Z+8	; 0x08
    3d9e:	31 85       	ldd	r19, Z+9	; 0x09
    3da0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3da2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3da4:	fc 01       	movw	r30, r24
    3da6:	32 83       	std	Z+2, r19	; 0x02
    3da8:	21 83       	std	Z+1, r18	; 0x01
    3daa:	88 85       	ldd	r24, Y+8	; 0x08
    3dac:	99 85       	ldd	r25, Y+9	; 0x09
    3dae:	fc 01       	movw	r30, r24
    3db0:	15 86       	std	Z+13, r1	; 0x0d
    3db2:	14 86       	std	Z+12, r1	; 0x0c
    3db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3db6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3db8:	fc 01       	movw	r30, r24
    3dba:	80 81       	ld	r24, Z
    3dbc:	2f ef       	ldi	r18, 0xFF	; 255
    3dbe:	28 0f       	add	r18, r24
    3dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	20 83       	st	Z, r18
    3dc8:	88 85       	ldd	r24, Y+8	; 0x08
    3dca:	99 85       	ldd	r25, Y+9	; 0x09
    3dcc:	fc 01       	movw	r30, r24
    3dce:	80 8d       	ldd	r24, Z+24	; 0x18
    3dd0:	91 8d       	ldd	r25, Z+25	; 0x19
    3dd2:	89 2b       	or	r24, r25
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <xTaskIncrementTick+0x1e2>
    3dd6:	45 c0       	rjmp	.+138    	; 0x3e62 <xTaskIncrementTick+0x26c>
    3dd8:	88 85       	ldd	r24, Y+8	; 0x08
    3dda:	99 85       	ldd	r25, Y+9	; 0x09
    3ddc:	fc 01       	movw	r30, r24
    3dde:	80 8d       	ldd	r24, Z+24	; 0x18
    3de0:	91 8d       	ldd	r25, Z+25	; 0x19
    3de2:	99 8b       	std	Y+17, r25	; 0x11
    3de4:	88 8b       	std	Y+16, r24	; 0x10
    3de6:	88 85       	ldd	r24, Y+8	; 0x08
    3de8:	99 85       	ldd	r25, Y+9	; 0x09
    3dea:	fc 01       	movw	r30, r24
    3dec:	82 89       	ldd	r24, Z+18	; 0x12
    3dee:	93 89       	ldd	r25, Z+19	; 0x13
    3df0:	28 85       	ldd	r18, Y+8	; 0x08
    3df2:	39 85       	ldd	r19, Y+9	; 0x09
    3df4:	f9 01       	movw	r30, r18
    3df6:	24 89       	ldd	r18, Z+20	; 0x14
    3df8:	35 89       	ldd	r19, Z+21	; 0x15
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	37 83       	std	Z+7, r19	; 0x07
    3dfe:	26 83       	std	Z+6, r18	; 0x06
    3e00:	88 85       	ldd	r24, Y+8	; 0x08
    3e02:	99 85       	ldd	r25, Y+9	; 0x09
    3e04:	fc 01       	movw	r30, r24
    3e06:	84 89       	ldd	r24, Z+20	; 0x14
    3e08:	95 89       	ldd	r25, Z+21	; 0x15
    3e0a:	28 85       	ldd	r18, Y+8	; 0x08
    3e0c:	39 85       	ldd	r19, Y+9	; 0x09
    3e0e:	f9 01       	movw	r30, r18
    3e10:	22 89       	ldd	r18, Z+18	; 0x12
    3e12:	33 89       	ldd	r19, Z+19	; 0x13
    3e14:	fc 01       	movw	r30, r24
    3e16:	35 83       	std	Z+5, r19	; 0x05
    3e18:	24 83       	std	Z+4, r18	; 0x04
    3e1a:	88 89       	ldd	r24, Y+16	; 0x10
    3e1c:	99 89       	ldd	r25, Y+17	; 0x11
    3e1e:	fc 01       	movw	r30, r24
    3e20:	21 81       	ldd	r18, Z+1	; 0x01
    3e22:	32 81       	ldd	r19, Z+2	; 0x02
    3e24:	88 85       	ldd	r24, Y+8	; 0x08
    3e26:	99 85       	ldd	r25, Y+9	; 0x09
    3e28:	0e 96       	adiw	r24, 0x0e	; 14
    3e2a:	28 17       	cp	r18, r24
    3e2c:	39 07       	cpc	r19, r25
    3e2e:	51 f4       	brne	.+20     	; 0x3e44 <xTaskIncrementTick+0x24e>
    3e30:	88 85       	ldd	r24, Y+8	; 0x08
    3e32:	99 85       	ldd	r25, Y+9	; 0x09
    3e34:	fc 01       	movw	r30, r24
    3e36:	24 89       	ldd	r18, Z+20	; 0x14
    3e38:	35 89       	ldd	r19, Z+21	; 0x15
    3e3a:	88 89       	ldd	r24, Y+16	; 0x10
    3e3c:	99 89       	ldd	r25, Y+17	; 0x11
    3e3e:	fc 01       	movw	r30, r24
    3e40:	32 83       	std	Z+2, r19	; 0x02
    3e42:	21 83       	std	Z+1, r18	; 0x01
    3e44:	88 85       	ldd	r24, Y+8	; 0x08
    3e46:	99 85       	ldd	r25, Y+9	; 0x09
    3e48:	fc 01       	movw	r30, r24
    3e4a:	11 8e       	std	Z+25, r1	; 0x19
    3e4c:	10 8e       	std	Z+24, r1	; 0x18
    3e4e:	88 89       	ldd	r24, Y+16	; 0x10
    3e50:	99 89       	ldd	r25, Y+17	; 0x11
    3e52:	fc 01       	movw	r30, r24
    3e54:	80 81       	ld	r24, Z
    3e56:	2f ef       	ldi	r18, 0xFF	; 255
    3e58:	28 0f       	add	r18, r24
    3e5a:	88 89       	ldd	r24, Y+16	; 0x10
    3e5c:	99 89       	ldd	r25, Y+17	; 0x11
    3e5e:	fc 01       	movw	r30, r24
    3e60:	20 83       	st	Z, r18
    3e62:	88 85       	ldd	r24, Y+8	; 0x08
    3e64:	99 85       	ldd	r25, Y+9	; 0x09
    3e66:	fc 01       	movw	r30, r24
    3e68:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e6a:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    3e6e:	89 17       	cp	r24, r25
    3e70:	30 f4       	brcc	.+12     	; 0x3e7e <xTaskIncrementTick+0x288>
    3e72:	88 85       	ldd	r24, Y+8	; 0x08
    3e74:	99 85       	ldd	r25, Y+9	; 0x09
    3e76:	fc 01       	movw	r30, r24
    3e78:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e7a:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    3e7e:	88 85       	ldd	r24, Y+8	; 0x08
    3e80:	99 85       	ldd	r25, Y+9	; 0x09
    3e82:	fc 01       	movw	r30, r24
    3e84:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e86:	28 2f       	mov	r18, r24
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	4b e0       	ldi	r20, 0x0B	; 11
    3e8c:	42 9f       	mul	r20, r18
    3e8e:	c0 01       	movw	r24, r0
    3e90:	43 9f       	mul	r20, r19
    3e92:	90 0d       	add	r25, r0
    3e94:	11 24       	eor	r1, r1
    3e96:	85 5e       	subi	r24, 0xE5	; 229
    3e98:	99 4e       	sbci	r25, 0xE9	; 233
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	80 81       	ld	r24, Z
    3e9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ea0:	9b 8b       	std	Y+19, r25	; 0x13
    3ea2:	8a 8b       	std	Y+18, r24	; 0x12
    3ea4:	88 85       	ldd	r24, Y+8	; 0x08
    3ea6:	99 85       	ldd	r25, Y+9	; 0x09
    3ea8:	2a 89       	ldd	r18, Y+18	; 0x12
    3eaa:	3b 89       	ldd	r19, Y+19	; 0x13
    3eac:	fc 01       	movw	r30, r24
    3eae:	37 83       	std	Z+7, r19	; 0x07
    3eb0:	26 83       	std	Z+6, r18	; 0x06
    3eb2:	8a 89       	ldd	r24, Y+18	; 0x12
    3eb4:	9b 89       	ldd	r25, Y+19	; 0x13
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	26 81       	ldd	r18, Z+6	; 0x06
    3eba:	37 81       	ldd	r19, Z+7	; 0x07
    3ebc:	88 85       	ldd	r24, Y+8	; 0x08
    3ebe:	99 85       	ldd	r25, Y+9	; 0x09
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	31 87       	std	Z+9, r19	; 0x09
    3ec4:	20 87       	std	Z+8, r18	; 0x08
    3ec6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ec8:	9b 89       	ldd	r25, Y+19	; 0x13
    3eca:	fc 01       	movw	r30, r24
    3ecc:	86 81       	ldd	r24, Z+6	; 0x06
    3ece:	97 81       	ldd	r25, Z+7	; 0x07
    3ed0:	28 85       	ldd	r18, Y+8	; 0x08
    3ed2:	39 85       	ldd	r19, Y+9	; 0x09
    3ed4:	2e 5f       	subi	r18, 0xFE	; 254
    3ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed8:	fc 01       	movw	r30, r24
    3eda:	35 83       	std	Z+5, r19	; 0x05
    3edc:	24 83       	std	Z+4, r18	; 0x04
    3ede:	88 85       	ldd	r24, Y+8	; 0x08
    3ee0:	99 85       	ldd	r25, Y+9	; 0x09
    3ee2:	9c 01       	movw	r18, r24
    3ee4:	2e 5f       	subi	r18, 0xFE	; 254
    3ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee8:	8a 89       	ldd	r24, Y+18	; 0x12
    3eea:	9b 89       	ldd	r25, Y+19	; 0x13
    3eec:	fc 01       	movw	r30, r24
    3eee:	37 83       	std	Z+7, r19	; 0x07
    3ef0:	26 83       	std	Z+6, r18	; 0x06
    3ef2:	88 85       	ldd	r24, Y+8	; 0x08
    3ef4:	99 85       	ldd	r25, Y+9	; 0x09
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3efa:	28 2f       	mov	r18, r24
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	4b e0       	ldi	r20, 0x0B	; 11
    3f00:	42 9f       	mul	r20, r18
    3f02:	c0 01       	movw	r24, r0
    3f04:	43 9f       	mul	r20, r19
    3f06:	90 0d       	add	r25, r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	9c 01       	movw	r18, r24
    3f0c:	26 5e       	subi	r18, 0xE6	; 230
    3f0e:	39 4e       	sbci	r19, 0xE9	; 233
    3f10:	88 85       	ldd	r24, Y+8	; 0x08
    3f12:	99 85       	ldd	r25, Y+9	; 0x09
    3f14:	fc 01       	movw	r30, r24
    3f16:	35 87       	std	Z+13, r19	; 0x0d
    3f18:	24 87       	std	Z+12, r18	; 0x0c
    3f1a:	88 85       	ldd	r24, Y+8	; 0x08
    3f1c:	99 85       	ldd	r25, Y+9	; 0x09
    3f1e:	fc 01       	movw	r30, r24
    3f20:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f22:	88 2f       	mov	r24, r24
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	4b e0       	ldi	r20, 0x0B	; 11
    3f28:	48 9f       	mul	r20, r24
    3f2a:	90 01       	movw	r18, r0
    3f2c:	49 9f       	mul	r20, r25
    3f2e:	30 0d       	add	r19, r0
    3f30:	11 24       	eor	r1, r1
    3f32:	26 5e       	subi	r18, 0xE6	; 230
    3f34:	39 4e       	sbci	r19, 0xE9	; 233
    3f36:	f9 01       	movw	r30, r18
    3f38:	20 81       	ld	r18, Z
    3f3a:	41 e0       	ldi	r20, 0x01	; 1
    3f3c:	42 0f       	add	r20, r18
    3f3e:	5b e0       	ldi	r21, 0x0B	; 11
    3f40:	58 9f       	mul	r21, r24
    3f42:	90 01       	movw	r18, r0
    3f44:	59 9f       	mul	r21, r25
    3f46:	30 0d       	add	r19, r0
    3f48:	11 24       	eor	r1, r1
    3f4a:	c9 01       	movw	r24, r18
    3f4c:	86 5e       	subi	r24, 0xE6	; 230
    3f4e:	99 4e       	sbci	r25, 0xE9	; 233
    3f50:	fc 01       	movw	r30, r24
    3f52:	40 83       	st	Z, r20
    3f54:	88 85       	ldd	r24, Y+8	; 0x08
    3f56:	99 85       	ldd	r25, Y+9	; 0x09
    3f58:	fc 01       	movw	r30, r24
    3f5a:	22 8d       	ldd	r18, Z+26	; 0x1a
    3f5c:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    3f60:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    3f64:	fc 01       	movw	r30, r24
    3f66:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f68:	28 17       	cp	r18, r24
    3f6a:	08 f4       	brcc	.+2      	; 0x3f6e <xTaskIncrementTick+0x378>
    3f6c:	a3 ce       	rjmp	.-698    	; 0x3cb4 <xTaskIncrementTick+0xbe>
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	89 83       	std	Y+1, r24	; 0x01
    3f72:	a0 ce       	rjmp	.-704    	; 0x3cb4 <xTaskIncrementTick+0xbe>
    3f74:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    3f78:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f80:	28 2f       	mov	r18, r24
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	4b e0       	ldi	r20, 0x0B	; 11
    3f86:	42 9f       	mul	r20, r18
    3f88:	c0 01       	movw	r24, r0
    3f8a:	43 9f       	mul	r20, r19
    3f8c:	90 0d       	add	r25, r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	86 5e       	subi	r24, 0xE6	; 230
    3f92:	99 4e       	sbci	r25, 0xE9	; 233
    3f94:	fc 01       	movw	r30, r24
    3f96:	80 81       	ld	r24, Z
    3f98:	82 30       	cpi	r24, 0x02	; 2
    3f9a:	10 f0       	brcs	.+4      	; 0x3fa0 <xTaskIncrementTick+0x3aa>
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    3fa0:	80 91 c4 16 	lds	r24, 0x16C4	; 0x8016c4 <xYieldPending>
    3fa4:	88 23       	and	r24, r24
    3fa6:	b1 f0       	breq	.+44     	; 0x3fd4 <xTaskIncrementTick+0x3de>
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	89 83       	std	Y+1, r24	; 0x01
    3fac:	13 c0       	rjmp	.+38     	; 0x3fd4 <xTaskIncrementTick+0x3de>
    3fae:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <xPendedTicks>
    3fb2:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <xPendedTicks+0x1>
    3fb6:	a0 91 c2 16 	lds	r26, 0x16C2	; 0x8016c2 <xPendedTicks+0x2>
    3fba:	b0 91 c3 16 	lds	r27, 0x16C3	; 0x8016c3 <xPendedTicks+0x3>
    3fbe:	01 96       	adiw	r24, 0x01	; 1
    3fc0:	a1 1d       	adc	r26, r1
    3fc2:	b1 1d       	adc	r27, r1
    3fc4:	80 93 c0 16 	sts	0x16C0, r24	; 0x8016c0 <xPendedTicks>
    3fc8:	90 93 c1 16 	sts	0x16C1, r25	; 0x8016c1 <xPendedTicks+0x1>
    3fcc:	a0 93 c2 16 	sts	0x16C2, r26	; 0x8016c2 <xPendedTicks+0x2>
    3fd0:	b0 93 c3 16 	sts	0x16C3, r27	; 0x8016c3 <xPendedTicks+0x3>
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	63 96       	adiw	r28, 0x13	; 19
    3fd8:	0f b6       	in	r0, 0x3f	; 63
    3fda:	f8 94       	cli
    3fdc:	de bf       	out	0x3e, r29	; 62
    3fde:	0f be       	out	0x3f, r0	; 63
    3fe0:	cd bf       	out	0x3d, r28	; 61
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <vTaskSwitchContext>:
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	00 d0       	rcall	.+0      	; 0x3fee <vTaskSwitchContext+0x6>
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    3ff6:	88 23       	and	r24, r24
    3ff8:	21 f0       	breq	.+8      	; 0x4002 <vTaskSwitchContext+0x1a>
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    4000:	78 c0       	rjmp	.+240    	; 0x40f2 <vTaskSwitchContext+0x10a>
    4002:	10 92 c4 16 	sts	0x16C4, r1	; 0x8016c4 <xYieldPending>
    4006:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    400a:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    400e:	fc 01       	movw	r30, r24
    4010:	20 81       	ld	r18, Z
    4012:	31 81       	ldd	r19, Z+1	; 0x01
    4014:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4018:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    401c:	fc 01       	movw	r30, r24
    401e:	83 8d       	ldd	r24, Z+27	; 0x1b
    4020:	94 8d       	ldd	r25, Z+28	; 0x1c
    4022:	82 17       	cp	r24, r18
    4024:	93 07       	cpc	r25, r19
    4026:	70 f0       	brcs	.+28     	; 0x4044 <vTaskSwitchContext+0x5c>
    4028:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    402c:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4030:	9c 01       	movw	r18, r24
    4032:	23 5e       	subi	r18, 0xE3	; 227
    4034:	3f 4f       	sbci	r19, 0xFF	; 255
    4036:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    403a:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    403e:	b9 01       	movw	r22, r18
    4040:	0e 94 b5 32 	call	0x656a	; 0x656a <vApplicationStackOverflowHook>
    4044:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    4048:	89 83       	std	Y+1, r24	; 0x01
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <vTaskSwitchContext+0x6a>
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	81 50       	subi	r24, 0x01	; 1
    4050:	89 83       	std	Y+1, r24	; 0x01
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	28 2f       	mov	r18, r24
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	4b e0       	ldi	r20, 0x0B	; 11
    405a:	42 9f       	mul	r20, r18
    405c:	c0 01       	movw	r24, r0
    405e:	43 9f       	mul	r20, r19
    4060:	90 0d       	add	r25, r0
    4062:	11 24       	eor	r1, r1
    4064:	86 5e       	subi	r24, 0xE6	; 230
    4066:	99 4e       	sbci	r25, 0xE9	; 233
    4068:	fc 01       	movw	r30, r24
    406a:	80 81       	ld	r24, Z
    406c:	88 23       	and	r24, r24
    406e:	71 f3       	breq	.-36     	; 0x404c <vTaskSwitchContext+0x64>
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	28 2f       	mov	r18, r24
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	4b e0       	ldi	r20, 0x0B	; 11
    4078:	42 9f       	mul	r20, r18
    407a:	c0 01       	movw	r24, r0
    407c:	43 9f       	mul	r20, r19
    407e:	90 0d       	add	r25, r0
    4080:	11 24       	eor	r1, r1
    4082:	86 5e       	subi	r24, 0xE6	; 230
    4084:	99 4e       	sbci	r25, 0xE9	; 233
    4086:	9b 83       	std	Y+3, r25	; 0x03
    4088:	8a 83       	std	Y+2, r24	; 0x02
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	9b 81       	ldd	r25, Y+3	; 0x03
    408e:	fc 01       	movw	r30, r24
    4090:	81 81       	ldd	r24, Z+1	; 0x01
    4092:	92 81       	ldd	r25, Z+2	; 0x02
    4094:	fc 01       	movw	r30, r24
    4096:	24 81       	ldd	r18, Z+4	; 0x04
    4098:	35 81       	ldd	r19, Z+5	; 0x05
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	9b 81       	ldd	r25, Y+3	; 0x03
    409e:	fc 01       	movw	r30, r24
    40a0:	32 83       	std	Z+2, r19	; 0x02
    40a2:	21 83       	std	Z+1, r18	; 0x01
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	9b 81       	ldd	r25, Y+3	; 0x03
    40a8:	fc 01       	movw	r30, r24
    40aa:	21 81       	ldd	r18, Z+1	; 0x01
    40ac:	32 81       	ldd	r19, Z+2	; 0x02
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	9b 81       	ldd	r25, Y+3	; 0x03
    40b2:	03 96       	adiw	r24, 0x03	; 3
    40b4:	28 17       	cp	r18, r24
    40b6:	39 07       	cpc	r19, r25
    40b8:	69 f4       	brne	.+26     	; 0x40d4 <vTaskSwitchContext+0xec>
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	fc 01       	movw	r30, r24
    40c0:	81 81       	ldd	r24, Z+1	; 0x01
    40c2:	92 81       	ldd	r25, Z+2	; 0x02
    40c4:	fc 01       	movw	r30, r24
    40c6:	24 81       	ldd	r18, Z+4	; 0x04
    40c8:	35 81       	ldd	r19, Z+5	; 0x05
    40ca:	8a 81       	ldd	r24, Y+2	; 0x02
    40cc:	9b 81       	ldd	r25, Y+3	; 0x03
    40ce:	fc 01       	movw	r30, r24
    40d0:	32 83       	std	Z+2, r19	; 0x02
    40d2:	21 83       	std	Z+1, r18	; 0x01
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	9b 81       	ldd	r25, Y+3	; 0x03
    40d8:	fc 01       	movw	r30, r24
    40da:	81 81       	ldd	r24, Z+1	; 0x01
    40dc:	92 81       	ldd	r25, Z+2	; 0x02
    40de:	fc 01       	movw	r30, r24
    40e0:	80 85       	ldd	r24, Z+8	; 0x08
    40e2:	91 85       	ldd	r25, Z+9	; 0x09
    40e4:	90 93 19 16 	sts	0x1619, r25	; 0x801619 <pxCurrentTCB+0x1>
    40e8:	80 93 18 16 	sts	0x1618, r24	; 0x801618 <pxCurrentTCB>
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    40f2:	00 00       	nop
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	08 95       	ret

00004100 <vTaskPlaceOnEventList>:
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	00 d0       	rcall	.+0      	; 0x4106 <vTaskPlaceOnEventList+0x6>
    4106:	00 d0       	rcall	.+0      	; 0x4108 <vTaskPlaceOnEventList+0x8>
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
    410c:	9a 83       	std	Y+2, r25	; 0x02
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	4b 83       	std	Y+3, r20	; 0x03
    4112:	5c 83       	std	Y+4, r21	; 0x04
    4114:	6d 83       	std	Y+5, r22	; 0x05
    4116:	7e 83       	std	Y+6, r23	; 0x06
    4118:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    411c:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4120:	9c 01       	movw	r18, r24
    4122:	22 5f       	subi	r18, 0xF2	; 242
    4124:	3f 4f       	sbci	r19, 0xFF	; 255
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	b9 01       	movw	r22, r18
    412c:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>
    4130:	8b 81       	ldd	r24, Y+3	; 0x03
    4132:	9c 81       	ldd	r25, Y+4	; 0x04
    4134:	ad 81       	ldd	r26, Y+5	; 0x05
    4136:	be 81       	ldd	r27, Y+6	; 0x06
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 91 2c 	call	0x5922	; 0x5922 <prvAddCurrentTaskToDelayedList>
    4142:	00 00       	nop
    4144:	26 96       	adiw	r28, 0x06	; 6
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	08 95       	ret

00004156 <vTaskPlaceOnUnorderedEventList>:
    4156:	0f 93       	push	r16
    4158:	1f 93       	push	r17
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
    415e:	cd b7       	in	r28, 0x3d	; 61
    4160:	de b7       	in	r29, 0x3e	; 62
    4162:	2c 97       	sbiw	r28, 0x0c	; 12
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	9c 83       	std	Y+4, r25	; 0x04
    4170:	8b 83       	std	Y+3, r24	; 0x03
    4172:	4d 83       	std	Y+5, r20	; 0x05
    4174:	5e 83       	std	Y+6, r21	; 0x06
    4176:	6f 83       	std	Y+7, r22	; 0x07
    4178:	78 87       	std	Y+8, r23	; 0x08
    417a:	09 87       	std	Y+9, r16	; 0x09
    417c:	1a 87       	std	Y+10, r17	; 0x0a
    417e:	2b 87       	std	Y+11, r18	; 0x0b
    4180:	3c 87       	std	Y+12, r19	; 0x0c
    4182:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    4186:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	af 81       	ldd	r26, Y+7	; 0x07
    4190:	b8 85       	ldd	r27, Y+8	; 0x08
    4192:	b0 68       	ori	r27, 0x80	; 128
    4194:	f9 01       	movw	r30, r18
    4196:	86 87       	std	Z+14, r24	; 0x0e
    4198:	97 87       	std	Z+15, r25	; 0x0f
    419a:	a0 8b       	std	Z+16, r26	; 0x10
    419c:	b1 8b       	std	Z+17, r27	; 0x11
    419e:	8b 81       	ldd	r24, Y+3	; 0x03
    41a0:	9c 81       	ldd	r25, Y+4	; 0x04
    41a2:	fc 01       	movw	r30, r24
    41a4:	81 81       	ldd	r24, Z+1	; 0x01
    41a6:	92 81       	ldd	r25, Z+2	; 0x02
    41a8:	9a 83       	std	Y+2, r25	; 0x02
    41aa:	89 83       	std	Y+1, r24	; 0x01
    41ac:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    41b0:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    41b4:	29 81       	ldd	r18, Y+1	; 0x01
    41b6:	3a 81       	ldd	r19, Y+2	; 0x02
    41b8:	fc 01       	movw	r30, r24
    41ba:	33 8b       	std	Z+19, r19	; 0x13
    41bc:	22 8b       	std	Z+18, r18	; 0x12
    41be:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    41c2:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    41c6:	29 81       	ldd	r18, Y+1	; 0x01
    41c8:	3a 81       	ldd	r19, Y+2	; 0x02
    41ca:	f9 01       	movw	r30, r18
    41cc:	26 81       	ldd	r18, Z+6	; 0x06
    41ce:	37 81       	ldd	r19, Z+7	; 0x07
    41d0:	fc 01       	movw	r30, r24
    41d2:	35 8b       	std	Z+21, r19	; 0x15
    41d4:	24 8b       	std	Z+20, r18	; 0x14
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	9a 81       	ldd	r25, Y+2	; 0x02
    41da:	fc 01       	movw	r30, r24
    41dc:	86 81       	ldd	r24, Z+6	; 0x06
    41de:	97 81       	ldd	r25, Z+7	; 0x07
    41e0:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    41e4:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    41e8:	22 5f       	subi	r18, 0xF2	; 242
    41ea:	3f 4f       	sbci	r19, 0xFF	; 255
    41ec:	fc 01       	movw	r30, r24
    41ee:	35 83       	std	Z+5, r19	; 0x05
    41f0:	24 83       	std	Z+4, r18	; 0x04
    41f2:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    41f6:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    41fa:	9c 01       	movw	r18, r24
    41fc:	22 5f       	subi	r18, 0xF2	; 242
    41fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	fc 01       	movw	r30, r24
    4206:	37 83       	std	Z+7, r19	; 0x07
    4208:	26 83       	std	Z+6, r18	; 0x06
    420a:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    420e:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4212:	2b 81       	ldd	r18, Y+3	; 0x03
    4214:	3c 81       	ldd	r19, Y+4	; 0x04
    4216:	fc 01       	movw	r30, r24
    4218:	31 8f       	std	Z+25, r19	; 0x19
    421a:	20 8f       	std	Z+24, r18	; 0x18
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	9c 81       	ldd	r25, Y+4	; 0x04
    4220:	fc 01       	movw	r30, r24
    4222:	80 81       	ld	r24, Z
    4224:	21 e0       	ldi	r18, 0x01	; 1
    4226:	28 0f       	add	r18, r24
    4228:	8b 81       	ldd	r24, Y+3	; 0x03
    422a:	9c 81       	ldd	r25, Y+4	; 0x04
    422c:	fc 01       	movw	r30, r24
    422e:	20 83       	st	Z, r18
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	9a 85       	ldd	r25, Y+10	; 0x0a
    4234:	ab 85       	ldd	r26, Y+11	; 0x0b
    4236:	bc 85       	ldd	r27, Y+12	; 0x0c
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	bc 01       	movw	r22, r24
    423c:	cd 01       	movw	r24, r26
    423e:	0e 94 91 2c 	call	0x5922	; 0x5922 <prvAddCurrentTaskToDelayedList>
    4242:	00 00       	nop
    4244:	2c 96       	adiw	r28, 0x0c	; 12
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	df 91       	pop	r29
    4252:	cf 91       	pop	r28
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	08 95       	ret

0000425a <vTaskPlaceOnEventListRestricted>:
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	29 97       	sbiw	r28, 0x09	; 9
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	9c 83       	std	Y+4, r25	; 0x04
    4270:	8b 83       	std	Y+3, r24	; 0x03
    4272:	4d 83       	std	Y+5, r20	; 0x05
    4274:	5e 83       	std	Y+6, r21	; 0x06
    4276:	6f 83       	std	Y+7, r22	; 0x07
    4278:	78 87       	std	Y+8, r23	; 0x08
    427a:	29 87       	std	Y+9, r18	; 0x09
    427c:	8b 81       	ldd	r24, Y+3	; 0x03
    427e:	9c 81       	ldd	r25, Y+4	; 0x04
    4280:	fc 01       	movw	r30, r24
    4282:	81 81       	ldd	r24, Z+1	; 0x01
    4284:	92 81       	ldd	r25, Z+2	; 0x02
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
    428a:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    428e:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4292:	29 81       	ldd	r18, Y+1	; 0x01
    4294:	3a 81       	ldd	r19, Y+2	; 0x02
    4296:	fc 01       	movw	r30, r24
    4298:	33 8b       	std	Z+19, r19	; 0x13
    429a:	22 8b       	std	Z+18, r18	; 0x12
    429c:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    42a0:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    42a4:	29 81       	ldd	r18, Y+1	; 0x01
    42a6:	3a 81       	ldd	r19, Y+2	; 0x02
    42a8:	f9 01       	movw	r30, r18
    42aa:	26 81       	ldd	r18, Z+6	; 0x06
    42ac:	37 81       	ldd	r19, Z+7	; 0x07
    42ae:	fc 01       	movw	r30, r24
    42b0:	35 8b       	std	Z+21, r19	; 0x15
    42b2:	24 8b       	std	Z+20, r18	; 0x14
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	9a 81       	ldd	r25, Y+2	; 0x02
    42b8:	fc 01       	movw	r30, r24
    42ba:	86 81       	ldd	r24, Z+6	; 0x06
    42bc:	97 81       	ldd	r25, Z+7	; 0x07
    42be:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    42c2:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    42c6:	22 5f       	subi	r18, 0xF2	; 242
    42c8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ca:	fc 01       	movw	r30, r24
    42cc:	35 83       	std	Z+5, r19	; 0x05
    42ce:	24 83       	std	Z+4, r18	; 0x04
    42d0:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    42d4:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    42d8:	9c 01       	movw	r18, r24
    42da:	22 5f       	subi	r18, 0xF2	; 242
    42dc:	3f 4f       	sbci	r19, 0xFF	; 255
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	fc 01       	movw	r30, r24
    42e4:	37 83       	std	Z+7, r19	; 0x07
    42e6:	26 83       	std	Z+6, r18	; 0x06
    42e8:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    42ec:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    42f0:	2b 81       	ldd	r18, Y+3	; 0x03
    42f2:	3c 81       	ldd	r19, Y+4	; 0x04
    42f4:	fc 01       	movw	r30, r24
    42f6:	31 8f       	std	Z+25, r19	; 0x19
    42f8:	20 8f       	std	Z+24, r18	; 0x18
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	9c 81       	ldd	r25, Y+4	; 0x04
    42fe:	fc 01       	movw	r30, r24
    4300:	80 81       	ld	r24, Z
    4302:	21 e0       	ldi	r18, 0x01	; 1
    4304:	28 0f       	add	r18, r24
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	9c 81       	ldd	r25, Y+4	; 0x04
    430a:	fc 01       	movw	r30, r24
    430c:	20 83       	st	Z, r18
    430e:	89 85       	ldd	r24, Y+9	; 0x09
    4310:	88 23       	and	r24, r24
    4312:	39 f0       	breq	.+14     	; 0x4322 <vTaskPlaceOnEventListRestricted+0xc8>
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	9f ef       	ldi	r25, 0xFF	; 255
    4318:	dc 01       	movw	r26, r24
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	9e 83       	std	Y+6, r25	; 0x06
    431e:	af 83       	std	Y+7, r26	; 0x07
    4320:	b8 87       	std	Y+8, r27	; 0x08
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	af 81       	ldd	r26, Y+7	; 0x07
    4328:	b8 85       	ldd	r27, Y+8	; 0x08
    432a:	49 85       	ldd	r20, Y+9	; 0x09
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 91 2c 	call	0x5922	; 0x5922 <prvAddCurrentTaskToDelayedList>
    4334:	00 00       	nop
    4336:	29 96       	adiw	r28, 0x09	; 9
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	df 91       	pop	r29
    4344:	cf 91       	pop	r28
    4346:	08 95       	ret

00004348 <xTaskRemoveFromEventList>:
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	2d 97       	sbiw	r28, 0x0d	; 13
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	9d 87       	std	Y+13, r25	; 0x0d
    435e:	8c 87       	std	Y+12, r24	; 0x0c
    4360:	8c 85       	ldd	r24, Y+12	; 0x0c
    4362:	9d 85       	ldd	r25, Y+13	; 0x0d
    4364:	fc 01       	movw	r30, r24
    4366:	87 81       	ldd	r24, Z+7	; 0x07
    4368:	90 85       	ldd	r25, Z+8	; 0x08
    436a:	fc 01       	movw	r30, r24
    436c:	80 85       	ldd	r24, Z+8	; 0x08
    436e:	91 85       	ldd	r25, Z+9	; 0x09
    4370:	9b 83       	std	Y+3, r25	; 0x03
    4372:	8a 83       	std	Y+2, r24	; 0x02
    4374:	8a 81       	ldd	r24, Y+2	; 0x02
    4376:	9b 81       	ldd	r25, Y+3	; 0x03
    4378:	fc 01       	movw	r30, r24
    437a:	80 8d       	ldd	r24, Z+24	; 0x18
    437c:	91 8d       	ldd	r25, Z+25	; 0x19
    437e:	9d 83       	std	Y+5, r25	; 0x05
    4380:	8c 83       	std	Y+4, r24	; 0x04
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	9b 81       	ldd	r25, Y+3	; 0x03
    4386:	fc 01       	movw	r30, r24
    4388:	82 89       	ldd	r24, Z+18	; 0x12
    438a:	93 89       	ldd	r25, Z+19	; 0x13
    438c:	2a 81       	ldd	r18, Y+2	; 0x02
    438e:	3b 81       	ldd	r19, Y+3	; 0x03
    4390:	f9 01       	movw	r30, r18
    4392:	24 89       	ldd	r18, Z+20	; 0x14
    4394:	35 89       	ldd	r19, Z+21	; 0x15
    4396:	fc 01       	movw	r30, r24
    4398:	37 83       	std	Z+7, r19	; 0x07
    439a:	26 83       	std	Z+6, r18	; 0x06
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	9b 81       	ldd	r25, Y+3	; 0x03
    43a0:	fc 01       	movw	r30, r24
    43a2:	84 89       	ldd	r24, Z+20	; 0x14
    43a4:	95 89       	ldd	r25, Z+21	; 0x15
    43a6:	2a 81       	ldd	r18, Y+2	; 0x02
    43a8:	3b 81       	ldd	r19, Y+3	; 0x03
    43aa:	f9 01       	movw	r30, r18
    43ac:	22 89       	ldd	r18, Z+18	; 0x12
    43ae:	33 89       	ldd	r19, Z+19	; 0x13
    43b0:	fc 01       	movw	r30, r24
    43b2:	35 83       	std	Z+5, r19	; 0x05
    43b4:	24 83       	std	Z+4, r18	; 0x04
    43b6:	8c 81       	ldd	r24, Y+4	; 0x04
    43b8:	9d 81       	ldd	r25, Y+5	; 0x05
    43ba:	fc 01       	movw	r30, r24
    43bc:	21 81       	ldd	r18, Z+1	; 0x01
    43be:	32 81       	ldd	r19, Z+2	; 0x02
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	0e 96       	adiw	r24, 0x0e	; 14
    43c6:	28 17       	cp	r18, r24
    43c8:	39 07       	cpc	r19, r25
    43ca:	51 f4       	brne	.+20     	; 0x43e0 <xTaskRemoveFromEventList+0x98>
    43cc:	8a 81       	ldd	r24, Y+2	; 0x02
    43ce:	9b 81       	ldd	r25, Y+3	; 0x03
    43d0:	fc 01       	movw	r30, r24
    43d2:	24 89       	ldd	r18, Z+20	; 0x14
    43d4:	35 89       	ldd	r19, Z+21	; 0x15
    43d6:	8c 81       	ldd	r24, Y+4	; 0x04
    43d8:	9d 81       	ldd	r25, Y+5	; 0x05
    43da:	fc 01       	movw	r30, r24
    43dc:	32 83       	std	Z+2, r19	; 0x02
    43de:	21 83       	std	Z+1, r18	; 0x01
    43e0:	8a 81       	ldd	r24, Y+2	; 0x02
    43e2:	9b 81       	ldd	r25, Y+3	; 0x03
    43e4:	fc 01       	movw	r30, r24
    43e6:	11 8e       	std	Z+25, r1	; 0x19
    43e8:	10 8e       	std	Z+24, r1	; 0x18
    43ea:	8c 81       	ldd	r24, Y+4	; 0x04
    43ec:	9d 81       	ldd	r25, Y+5	; 0x05
    43ee:	fc 01       	movw	r30, r24
    43f0:	80 81       	ld	r24, Z
    43f2:	2f ef       	ldi	r18, 0xFF	; 255
    43f4:	28 0f       	add	r18, r24
    43f6:	8c 81       	ldd	r24, Y+4	; 0x04
    43f8:	9d 81       	ldd	r25, Y+5	; 0x05
    43fa:	fc 01       	movw	r30, r24
    43fc:	20 83       	st	Z, r18
    43fe:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    4402:	88 23       	and	r24, r24
    4404:	09 f0       	breq	.+2      	; 0x4408 <xTaskRemoveFromEventList+0xc0>
    4406:	bf c0       	rjmp	.+382    	; 0x4586 <xTaskRemoveFromEventList+0x23e>
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	9b 81       	ldd	r25, Y+3	; 0x03
    440c:	fc 01       	movw	r30, r24
    440e:	84 85       	ldd	r24, Z+12	; 0x0c
    4410:	95 85       	ldd	r25, Z+13	; 0x0d
    4412:	9f 83       	std	Y+7, r25	; 0x07
    4414:	8e 83       	std	Y+6, r24	; 0x06
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	9b 81       	ldd	r25, Y+3	; 0x03
    441a:	fc 01       	movw	r30, r24
    441c:	86 81       	ldd	r24, Z+6	; 0x06
    441e:	97 81       	ldd	r25, Z+7	; 0x07
    4420:	2a 81       	ldd	r18, Y+2	; 0x02
    4422:	3b 81       	ldd	r19, Y+3	; 0x03
    4424:	f9 01       	movw	r30, r18
    4426:	20 85       	ldd	r18, Z+8	; 0x08
    4428:	31 85       	ldd	r19, Z+9	; 0x09
    442a:	fc 01       	movw	r30, r24
    442c:	37 83       	std	Z+7, r19	; 0x07
    442e:	26 83       	std	Z+6, r18	; 0x06
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	9b 81       	ldd	r25, Y+3	; 0x03
    4434:	fc 01       	movw	r30, r24
    4436:	80 85       	ldd	r24, Z+8	; 0x08
    4438:	91 85       	ldd	r25, Z+9	; 0x09
    443a:	2a 81       	ldd	r18, Y+2	; 0x02
    443c:	3b 81       	ldd	r19, Y+3	; 0x03
    443e:	f9 01       	movw	r30, r18
    4440:	26 81       	ldd	r18, Z+6	; 0x06
    4442:	37 81       	ldd	r19, Z+7	; 0x07
    4444:	fc 01       	movw	r30, r24
    4446:	35 83       	std	Z+5, r19	; 0x05
    4448:	24 83       	std	Z+4, r18	; 0x04
    444a:	8e 81       	ldd	r24, Y+6	; 0x06
    444c:	9f 81       	ldd	r25, Y+7	; 0x07
    444e:	fc 01       	movw	r30, r24
    4450:	21 81       	ldd	r18, Z+1	; 0x01
    4452:	32 81       	ldd	r19, Z+2	; 0x02
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	9b 81       	ldd	r25, Y+3	; 0x03
    4458:	02 96       	adiw	r24, 0x02	; 2
    445a:	28 17       	cp	r18, r24
    445c:	39 07       	cpc	r19, r25
    445e:	51 f4       	brne	.+20     	; 0x4474 <xTaskRemoveFromEventList+0x12c>
    4460:	8a 81       	ldd	r24, Y+2	; 0x02
    4462:	9b 81       	ldd	r25, Y+3	; 0x03
    4464:	fc 01       	movw	r30, r24
    4466:	20 85       	ldd	r18, Z+8	; 0x08
    4468:	31 85       	ldd	r19, Z+9	; 0x09
    446a:	8e 81       	ldd	r24, Y+6	; 0x06
    446c:	9f 81       	ldd	r25, Y+7	; 0x07
    446e:	fc 01       	movw	r30, r24
    4470:	32 83       	std	Z+2, r19	; 0x02
    4472:	21 83       	std	Z+1, r18	; 0x01
    4474:	8a 81       	ldd	r24, Y+2	; 0x02
    4476:	9b 81       	ldd	r25, Y+3	; 0x03
    4478:	fc 01       	movw	r30, r24
    447a:	15 86       	std	Z+13, r1	; 0x0d
    447c:	14 86       	std	Z+12, r1	; 0x0c
    447e:	8e 81       	ldd	r24, Y+6	; 0x06
    4480:	9f 81       	ldd	r25, Y+7	; 0x07
    4482:	fc 01       	movw	r30, r24
    4484:	80 81       	ld	r24, Z
    4486:	2f ef       	ldi	r18, 0xFF	; 255
    4488:	28 0f       	add	r18, r24
    448a:	8e 81       	ldd	r24, Y+6	; 0x06
    448c:	9f 81       	ldd	r25, Y+7	; 0x07
    448e:	fc 01       	movw	r30, r24
    4490:	20 83       	st	Z, r18
    4492:	8a 81       	ldd	r24, Y+2	; 0x02
    4494:	9b 81       	ldd	r25, Y+3	; 0x03
    4496:	fc 01       	movw	r30, r24
    4498:	92 8d       	ldd	r25, Z+26	; 0x1a
    449a:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    449e:	89 17       	cp	r24, r25
    44a0:	30 f4       	brcc	.+12     	; 0x44ae <xTaskRemoveFromEventList+0x166>
    44a2:	8a 81       	ldd	r24, Y+2	; 0x02
    44a4:	9b 81       	ldd	r25, Y+3	; 0x03
    44a6:	fc 01       	movw	r30, r24
    44a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    44aa:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	9b 81       	ldd	r25, Y+3	; 0x03
    44b2:	fc 01       	movw	r30, r24
    44b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    44b6:	28 2f       	mov	r18, r24
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	4b e0       	ldi	r20, 0x0B	; 11
    44bc:	42 9f       	mul	r20, r18
    44be:	c0 01       	movw	r24, r0
    44c0:	43 9f       	mul	r20, r19
    44c2:	90 0d       	add	r25, r0
    44c4:	11 24       	eor	r1, r1
    44c6:	85 5e       	subi	r24, 0xE5	; 229
    44c8:	99 4e       	sbci	r25, 0xE9	; 233
    44ca:	fc 01       	movw	r30, r24
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	99 87       	std	Y+9, r25	; 0x09
    44d2:	88 87       	std	Y+8, r24	; 0x08
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	9b 81       	ldd	r25, Y+3	; 0x03
    44d8:	28 85       	ldd	r18, Y+8	; 0x08
    44da:	39 85       	ldd	r19, Y+9	; 0x09
    44dc:	fc 01       	movw	r30, r24
    44de:	37 83       	std	Z+7, r19	; 0x07
    44e0:	26 83       	std	Z+6, r18	; 0x06
    44e2:	88 85       	ldd	r24, Y+8	; 0x08
    44e4:	99 85       	ldd	r25, Y+9	; 0x09
    44e6:	fc 01       	movw	r30, r24
    44e8:	26 81       	ldd	r18, Z+6	; 0x06
    44ea:	37 81       	ldd	r19, Z+7	; 0x07
    44ec:	8a 81       	ldd	r24, Y+2	; 0x02
    44ee:	9b 81       	ldd	r25, Y+3	; 0x03
    44f0:	fc 01       	movw	r30, r24
    44f2:	31 87       	std	Z+9, r19	; 0x09
    44f4:	20 87       	std	Z+8, r18	; 0x08
    44f6:	88 85       	ldd	r24, Y+8	; 0x08
    44f8:	99 85       	ldd	r25, Y+9	; 0x09
    44fa:	fc 01       	movw	r30, r24
    44fc:	86 81       	ldd	r24, Z+6	; 0x06
    44fe:	97 81       	ldd	r25, Z+7	; 0x07
    4500:	2a 81       	ldd	r18, Y+2	; 0x02
    4502:	3b 81       	ldd	r19, Y+3	; 0x03
    4504:	2e 5f       	subi	r18, 0xFE	; 254
    4506:	3f 4f       	sbci	r19, 0xFF	; 255
    4508:	fc 01       	movw	r30, r24
    450a:	35 83       	std	Z+5, r19	; 0x05
    450c:	24 83       	std	Z+4, r18	; 0x04
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	9b 81       	ldd	r25, Y+3	; 0x03
    4512:	9c 01       	movw	r18, r24
    4514:	2e 5f       	subi	r18, 0xFE	; 254
    4516:	3f 4f       	sbci	r19, 0xFF	; 255
    4518:	88 85       	ldd	r24, Y+8	; 0x08
    451a:	99 85       	ldd	r25, Y+9	; 0x09
    451c:	fc 01       	movw	r30, r24
    451e:	37 83       	std	Z+7, r19	; 0x07
    4520:	26 83       	std	Z+6, r18	; 0x06
    4522:	8a 81       	ldd	r24, Y+2	; 0x02
    4524:	9b 81       	ldd	r25, Y+3	; 0x03
    4526:	fc 01       	movw	r30, r24
    4528:	82 8d       	ldd	r24, Z+26	; 0x1a
    452a:	28 2f       	mov	r18, r24
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4b e0       	ldi	r20, 0x0B	; 11
    4530:	42 9f       	mul	r20, r18
    4532:	c0 01       	movw	r24, r0
    4534:	43 9f       	mul	r20, r19
    4536:	90 0d       	add	r25, r0
    4538:	11 24       	eor	r1, r1
    453a:	9c 01       	movw	r18, r24
    453c:	26 5e       	subi	r18, 0xE6	; 230
    453e:	39 4e       	sbci	r19, 0xE9	; 233
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	9b 81       	ldd	r25, Y+3	; 0x03
    4544:	fc 01       	movw	r30, r24
    4546:	35 87       	std	Z+13, r19	; 0x0d
    4548:	24 87       	std	Z+12, r18	; 0x0c
    454a:	8a 81       	ldd	r24, Y+2	; 0x02
    454c:	9b 81       	ldd	r25, Y+3	; 0x03
    454e:	fc 01       	movw	r30, r24
    4550:	82 8d       	ldd	r24, Z+26	; 0x1a
    4552:	88 2f       	mov	r24, r24
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	4b e0       	ldi	r20, 0x0B	; 11
    4558:	48 9f       	mul	r20, r24
    455a:	90 01       	movw	r18, r0
    455c:	49 9f       	mul	r20, r25
    455e:	30 0d       	add	r19, r0
    4560:	11 24       	eor	r1, r1
    4562:	26 5e       	subi	r18, 0xE6	; 230
    4564:	39 4e       	sbci	r19, 0xE9	; 233
    4566:	f9 01       	movw	r30, r18
    4568:	20 81       	ld	r18, Z
    456a:	41 e0       	ldi	r20, 0x01	; 1
    456c:	42 0f       	add	r20, r18
    456e:	5b e0       	ldi	r21, 0x0B	; 11
    4570:	58 9f       	mul	r21, r24
    4572:	90 01       	movw	r18, r0
    4574:	59 9f       	mul	r21, r25
    4576:	30 0d       	add	r19, r0
    4578:	11 24       	eor	r1, r1
    457a:	c9 01       	movw	r24, r18
    457c:	86 5e       	subi	r24, 0xE6	; 230
    457e:	99 4e       	sbci	r25, 0xE9	; 233
    4580:	fc 01       	movw	r30, r24
    4582:	40 83       	st	Z, r20
    4584:	39 c0       	rjmp	.+114    	; 0x45f8 <xTaskRemoveFromEventList+0x2b0>
    4586:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <xPendingReadyList+0x1>
    458a:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <xPendingReadyList+0x2>
    458e:	9b 87       	std	Y+11, r25	; 0x0b
    4590:	8a 87       	std	Y+10, r24	; 0x0a
    4592:	8a 81       	ldd	r24, Y+2	; 0x02
    4594:	9b 81       	ldd	r25, Y+3	; 0x03
    4596:	2a 85       	ldd	r18, Y+10	; 0x0a
    4598:	3b 85       	ldd	r19, Y+11	; 0x0b
    459a:	fc 01       	movw	r30, r24
    459c:	33 8b       	std	Z+19, r19	; 0x13
    459e:	22 8b       	std	Z+18, r18	; 0x12
    45a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    45a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    45a4:	fc 01       	movw	r30, r24
    45a6:	26 81       	ldd	r18, Z+6	; 0x06
    45a8:	37 81       	ldd	r19, Z+7	; 0x07
    45aa:	8a 81       	ldd	r24, Y+2	; 0x02
    45ac:	9b 81       	ldd	r25, Y+3	; 0x03
    45ae:	fc 01       	movw	r30, r24
    45b0:	35 8b       	std	Z+21, r19	; 0x15
    45b2:	24 8b       	std	Z+20, r18	; 0x14
    45b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    45b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    45b8:	fc 01       	movw	r30, r24
    45ba:	86 81       	ldd	r24, Z+6	; 0x06
    45bc:	97 81       	ldd	r25, Z+7	; 0x07
    45be:	2a 81       	ldd	r18, Y+2	; 0x02
    45c0:	3b 81       	ldd	r19, Y+3	; 0x03
    45c2:	22 5f       	subi	r18, 0xF2	; 242
    45c4:	3f 4f       	sbci	r19, 0xFF	; 255
    45c6:	fc 01       	movw	r30, r24
    45c8:	35 83       	std	Z+5, r19	; 0x05
    45ca:	24 83       	std	Z+4, r18	; 0x04
    45cc:	8a 81       	ldd	r24, Y+2	; 0x02
    45ce:	9b 81       	ldd	r25, Y+3	; 0x03
    45d0:	9c 01       	movw	r18, r24
    45d2:	22 5f       	subi	r18, 0xF2	; 242
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    45d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    45da:	fc 01       	movw	r30, r24
    45dc:	37 83       	std	Z+7, r19	; 0x07
    45de:	26 83       	std	Z+6, r18	; 0x06
    45e0:	8a 81       	ldd	r24, Y+2	; 0x02
    45e2:	9b 81       	ldd	r25, Y+3	; 0x03
    45e4:	22 ea       	ldi	r18, 0xA2	; 162
    45e6:	36 e1       	ldi	r19, 0x16	; 22
    45e8:	fc 01       	movw	r30, r24
    45ea:	31 8f       	std	Z+25, r19	; 0x19
    45ec:	20 8f       	std	Z+24, r18	; 0x18
    45ee:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xPendingReadyList>
    45f2:	8f 5f       	subi	r24, 0xFF	; 255
    45f4:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <xPendingReadyList>
    45f8:	8a 81       	ldd	r24, Y+2	; 0x02
    45fa:	9b 81       	ldd	r25, Y+3	; 0x03
    45fc:	fc 01       	movw	r30, r24
    45fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    4600:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4604:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4608:	fc 01       	movw	r30, r24
    460a:	82 8d       	ldd	r24, Z+26	; 0x1a
    460c:	82 17       	cp	r24, r18
    460e:	30 f4       	brcc	.+12     	; 0x461c <xTaskRemoveFromEventList+0x2d4>
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    461a:	01 c0       	rjmp	.+2      	; 0x461e <xTaskRemoveFromEventList+0x2d6>
    461c:	19 82       	std	Y+1, r1	; 0x01
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	2d 96       	adiw	r28, 0x0d	; 13
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	08 95       	ret

00004632 <vTaskRemoveFromUnorderedEventList>:
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
    463a:	2e 97       	sbiw	r28, 0x0e	; 14
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	f8 94       	cli
    4640:	de bf       	out	0x3e, r29	; 62
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	cd bf       	out	0x3d, r28	; 61
    4646:	9a 87       	std	Y+10, r25	; 0x0a
    4648:	89 87       	std	Y+9, r24	; 0x09
    464a:	4b 87       	std	Y+11, r20	; 0x0b
    464c:	5c 87       	std	Y+12, r21	; 0x0c
    464e:	6d 87       	std	Y+13, r22	; 0x0d
    4650:	7e 87       	std	Y+14, r23	; 0x0e
    4652:	8b 85       	ldd	r24, Y+11	; 0x0b
    4654:	9c 85       	ldd	r25, Y+12	; 0x0c
    4656:	ad 85       	ldd	r26, Y+13	; 0x0d
    4658:	be 85       	ldd	r27, Y+14	; 0x0e
    465a:	b0 68       	ori	r27, 0x80	; 128
    465c:	29 85       	ldd	r18, Y+9	; 0x09
    465e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4660:	f9 01       	movw	r30, r18
    4662:	80 83       	st	Z, r24
    4664:	91 83       	std	Z+1, r25	; 0x01
    4666:	a2 83       	std	Z+2, r26	; 0x02
    4668:	b3 83       	std	Z+3, r27	; 0x03
    466a:	89 85       	ldd	r24, Y+9	; 0x09
    466c:	9a 85       	ldd	r25, Y+10	; 0x0a
    466e:	fc 01       	movw	r30, r24
    4670:	80 85       	ldd	r24, Z+8	; 0x08
    4672:	91 85       	ldd	r25, Z+9	; 0x09
    4674:	9a 83       	std	Y+2, r25	; 0x02
    4676:	89 83       	std	Y+1, r24	; 0x01
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	9a 85       	ldd	r25, Y+10	; 0x0a
    467c:	fc 01       	movw	r30, r24
    467e:	82 85       	ldd	r24, Z+10	; 0x0a
    4680:	93 85       	ldd	r25, Z+11	; 0x0b
    4682:	9c 83       	std	Y+4, r25	; 0x04
    4684:	8b 83       	std	Y+3, r24	; 0x03
    4686:	89 85       	ldd	r24, Y+9	; 0x09
    4688:	9a 85       	ldd	r25, Y+10	; 0x0a
    468a:	fc 01       	movw	r30, r24
    468c:	84 81       	ldd	r24, Z+4	; 0x04
    468e:	95 81       	ldd	r25, Z+5	; 0x05
    4690:	29 85       	ldd	r18, Y+9	; 0x09
    4692:	3a 85       	ldd	r19, Y+10	; 0x0a
    4694:	f9 01       	movw	r30, r18
    4696:	26 81       	ldd	r18, Z+6	; 0x06
    4698:	37 81       	ldd	r19, Z+7	; 0x07
    469a:	fc 01       	movw	r30, r24
    469c:	37 83       	std	Z+7, r19	; 0x07
    469e:	26 83       	std	Z+6, r18	; 0x06
    46a0:	89 85       	ldd	r24, Y+9	; 0x09
    46a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a4:	fc 01       	movw	r30, r24
    46a6:	86 81       	ldd	r24, Z+6	; 0x06
    46a8:	97 81       	ldd	r25, Z+7	; 0x07
    46aa:	29 85       	ldd	r18, Y+9	; 0x09
    46ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    46ae:	f9 01       	movw	r30, r18
    46b0:	24 81       	ldd	r18, Z+4	; 0x04
    46b2:	35 81       	ldd	r19, Z+5	; 0x05
    46b4:	fc 01       	movw	r30, r24
    46b6:	35 83       	std	Z+5, r19	; 0x05
    46b8:	24 83       	std	Z+4, r18	; 0x04
    46ba:	8b 81       	ldd	r24, Y+3	; 0x03
    46bc:	9c 81       	ldd	r25, Y+4	; 0x04
    46be:	fc 01       	movw	r30, r24
    46c0:	21 81       	ldd	r18, Z+1	; 0x01
    46c2:	32 81       	ldd	r19, Z+2	; 0x02
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	28 17       	cp	r18, r24
    46ca:	39 07       	cpc	r19, r25
    46cc:	51 f4       	brne	.+20     	; 0x46e2 <vTaskRemoveFromUnorderedEventList+0xb0>
    46ce:	89 85       	ldd	r24, Y+9	; 0x09
    46d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d2:	fc 01       	movw	r30, r24
    46d4:	26 81       	ldd	r18, Z+6	; 0x06
    46d6:	37 81       	ldd	r19, Z+7	; 0x07
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	9c 81       	ldd	r25, Y+4	; 0x04
    46dc:	fc 01       	movw	r30, r24
    46de:	32 83       	std	Z+2, r19	; 0x02
    46e0:	21 83       	std	Z+1, r18	; 0x01
    46e2:	89 85       	ldd	r24, Y+9	; 0x09
    46e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e6:	fc 01       	movw	r30, r24
    46e8:	13 86       	std	Z+11, r1	; 0x0b
    46ea:	12 86       	std	Z+10, r1	; 0x0a
    46ec:	8b 81       	ldd	r24, Y+3	; 0x03
    46ee:	9c 81       	ldd	r25, Y+4	; 0x04
    46f0:	fc 01       	movw	r30, r24
    46f2:	80 81       	ld	r24, Z
    46f4:	2f ef       	ldi	r18, 0xFF	; 255
    46f6:	28 0f       	add	r18, r24
    46f8:	8b 81       	ldd	r24, Y+3	; 0x03
    46fa:	9c 81       	ldd	r25, Y+4	; 0x04
    46fc:	fc 01       	movw	r30, r24
    46fe:	20 83       	st	Z, r18
    4700:	89 81       	ldd	r24, Y+1	; 0x01
    4702:	9a 81       	ldd	r25, Y+2	; 0x02
    4704:	fc 01       	movw	r30, r24
    4706:	84 85       	ldd	r24, Z+12	; 0x0c
    4708:	95 85       	ldd	r25, Z+13	; 0x0d
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	9a 81       	ldd	r25, Y+2	; 0x02
    4712:	fc 01       	movw	r30, r24
    4714:	86 81       	ldd	r24, Z+6	; 0x06
    4716:	97 81       	ldd	r25, Z+7	; 0x07
    4718:	29 81       	ldd	r18, Y+1	; 0x01
    471a:	3a 81       	ldd	r19, Y+2	; 0x02
    471c:	f9 01       	movw	r30, r18
    471e:	20 85       	ldd	r18, Z+8	; 0x08
    4720:	31 85       	ldd	r19, Z+9	; 0x09
    4722:	fc 01       	movw	r30, r24
    4724:	37 83       	std	Z+7, r19	; 0x07
    4726:	26 83       	std	Z+6, r18	; 0x06
    4728:	89 81       	ldd	r24, Y+1	; 0x01
    472a:	9a 81       	ldd	r25, Y+2	; 0x02
    472c:	fc 01       	movw	r30, r24
    472e:	80 85       	ldd	r24, Z+8	; 0x08
    4730:	91 85       	ldd	r25, Z+9	; 0x09
    4732:	29 81       	ldd	r18, Y+1	; 0x01
    4734:	3a 81       	ldd	r19, Y+2	; 0x02
    4736:	f9 01       	movw	r30, r18
    4738:	26 81       	ldd	r18, Z+6	; 0x06
    473a:	37 81       	ldd	r19, Z+7	; 0x07
    473c:	fc 01       	movw	r30, r24
    473e:	35 83       	std	Z+5, r19	; 0x05
    4740:	24 83       	std	Z+4, r18	; 0x04
    4742:	8d 81       	ldd	r24, Y+5	; 0x05
    4744:	9e 81       	ldd	r25, Y+6	; 0x06
    4746:	fc 01       	movw	r30, r24
    4748:	21 81       	ldd	r18, Z+1	; 0x01
    474a:	32 81       	ldd	r19, Z+2	; 0x02
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	9a 81       	ldd	r25, Y+2	; 0x02
    4750:	02 96       	adiw	r24, 0x02	; 2
    4752:	28 17       	cp	r18, r24
    4754:	39 07       	cpc	r19, r25
    4756:	51 f4       	brne	.+20     	; 0x476c <vTaskRemoveFromUnorderedEventList+0x13a>
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	9a 81       	ldd	r25, Y+2	; 0x02
    475c:	fc 01       	movw	r30, r24
    475e:	20 85       	ldd	r18, Z+8	; 0x08
    4760:	31 85       	ldd	r19, Z+9	; 0x09
    4762:	8d 81       	ldd	r24, Y+5	; 0x05
    4764:	9e 81       	ldd	r25, Y+6	; 0x06
    4766:	fc 01       	movw	r30, r24
    4768:	32 83       	std	Z+2, r19	; 0x02
    476a:	21 83       	std	Z+1, r18	; 0x01
    476c:	89 81       	ldd	r24, Y+1	; 0x01
    476e:	9a 81       	ldd	r25, Y+2	; 0x02
    4770:	fc 01       	movw	r30, r24
    4772:	15 86       	std	Z+13, r1	; 0x0d
    4774:	14 86       	std	Z+12, r1	; 0x0c
    4776:	8d 81       	ldd	r24, Y+5	; 0x05
    4778:	9e 81       	ldd	r25, Y+6	; 0x06
    477a:	fc 01       	movw	r30, r24
    477c:	80 81       	ld	r24, Z
    477e:	2f ef       	ldi	r18, 0xFF	; 255
    4780:	28 0f       	add	r18, r24
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	fc 01       	movw	r30, r24
    4788:	20 83       	st	Z, r18
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	fc 01       	movw	r30, r24
    4790:	92 8d       	ldd	r25, Z+26	; 0x1a
    4792:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    4796:	89 17       	cp	r24, r25
    4798:	30 f4       	brcc	.+12     	; 0x47a6 <vTaskRemoveFromUnorderedEventList+0x174>
    479a:	89 81       	ldd	r24, Y+1	; 0x01
    479c:	9a 81       	ldd	r25, Y+2	; 0x02
    479e:	fc 01       	movw	r30, r24
    47a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    47a2:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	9a 81       	ldd	r25, Y+2	; 0x02
    47aa:	fc 01       	movw	r30, r24
    47ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    47ae:	28 2f       	mov	r18, r24
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4b e0       	ldi	r20, 0x0B	; 11
    47b4:	42 9f       	mul	r20, r18
    47b6:	c0 01       	movw	r24, r0
    47b8:	43 9f       	mul	r20, r19
    47ba:	90 0d       	add	r25, r0
    47bc:	11 24       	eor	r1, r1
    47be:	85 5e       	subi	r24, 0xE5	; 229
    47c0:	99 4e       	sbci	r25, 0xE9	; 233
    47c2:	fc 01       	movw	r30, r24
    47c4:	80 81       	ld	r24, Z
    47c6:	91 81       	ldd	r25, Z+1	; 0x01
    47c8:	98 87       	std	Y+8, r25	; 0x08
    47ca:	8f 83       	std	Y+7, r24	; 0x07
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	9a 81       	ldd	r25, Y+2	; 0x02
    47d0:	2f 81       	ldd	r18, Y+7	; 0x07
    47d2:	38 85       	ldd	r19, Y+8	; 0x08
    47d4:	fc 01       	movw	r30, r24
    47d6:	37 83       	std	Z+7, r19	; 0x07
    47d8:	26 83       	std	Z+6, r18	; 0x06
    47da:	8f 81       	ldd	r24, Y+7	; 0x07
    47dc:	98 85       	ldd	r25, Y+8	; 0x08
    47de:	fc 01       	movw	r30, r24
    47e0:	26 81       	ldd	r18, Z+6	; 0x06
    47e2:	37 81       	ldd	r19, Z+7	; 0x07
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	fc 01       	movw	r30, r24
    47ea:	31 87       	std	Z+9, r19	; 0x09
    47ec:	20 87       	std	Z+8, r18	; 0x08
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	98 85       	ldd	r25, Y+8	; 0x08
    47f2:	fc 01       	movw	r30, r24
    47f4:	86 81       	ldd	r24, Z+6	; 0x06
    47f6:	97 81       	ldd	r25, Z+7	; 0x07
    47f8:	29 81       	ldd	r18, Y+1	; 0x01
    47fa:	3a 81       	ldd	r19, Y+2	; 0x02
    47fc:	2e 5f       	subi	r18, 0xFE	; 254
    47fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4800:	fc 01       	movw	r30, r24
    4802:	35 83       	std	Z+5, r19	; 0x05
    4804:	24 83       	std	Z+4, r18	; 0x04
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	9a 81       	ldd	r25, Y+2	; 0x02
    480a:	9c 01       	movw	r18, r24
    480c:	2e 5f       	subi	r18, 0xFE	; 254
    480e:	3f 4f       	sbci	r19, 0xFF	; 255
    4810:	8f 81       	ldd	r24, Y+7	; 0x07
    4812:	98 85       	ldd	r25, Y+8	; 0x08
    4814:	fc 01       	movw	r30, r24
    4816:	37 83       	std	Z+7, r19	; 0x07
    4818:	26 83       	std	Z+6, r18	; 0x06
    481a:	89 81       	ldd	r24, Y+1	; 0x01
    481c:	9a 81       	ldd	r25, Y+2	; 0x02
    481e:	fc 01       	movw	r30, r24
    4820:	82 8d       	ldd	r24, Z+26	; 0x1a
    4822:	28 2f       	mov	r18, r24
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	4b e0       	ldi	r20, 0x0B	; 11
    4828:	42 9f       	mul	r20, r18
    482a:	c0 01       	movw	r24, r0
    482c:	43 9f       	mul	r20, r19
    482e:	90 0d       	add	r25, r0
    4830:	11 24       	eor	r1, r1
    4832:	9c 01       	movw	r18, r24
    4834:	26 5e       	subi	r18, 0xE6	; 230
    4836:	39 4e       	sbci	r19, 0xE9	; 233
    4838:	89 81       	ldd	r24, Y+1	; 0x01
    483a:	9a 81       	ldd	r25, Y+2	; 0x02
    483c:	fc 01       	movw	r30, r24
    483e:	35 87       	std	Z+13, r19	; 0x0d
    4840:	24 87       	std	Z+12, r18	; 0x0c
    4842:	89 81       	ldd	r24, Y+1	; 0x01
    4844:	9a 81       	ldd	r25, Y+2	; 0x02
    4846:	fc 01       	movw	r30, r24
    4848:	82 8d       	ldd	r24, Z+26	; 0x1a
    484a:	88 2f       	mov	r24, r24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	4b e0       	ldi	r20, 0x0B	; 11
    4850:	48 9f       	mul	r20, r24
    4852:	90 01       	movw	r18, r0
    4854:	49 9f       	mul	r20, r25
    4856:	30 0d       	add	r19, r0
    4858:	11 24       	eor	r1, r1
    485a:	26 5e       	subi	r18, 0xE6	; 230
    485c:	39 4e       	sbci	r19, 0xE9	; 233
    485e:	f9 01       	movw	r30, r18
    4860:	20 81       	ld	r18, Z
    4862:	41 e0       	ldi	r20, 0x01	; 1
    4864:	42 0f       	add	r20, r18
    4866:	5b e0       	ldi	r21, 0x0B	; 11
    4868:	58 9f       	mul	r21, r24
    486a:	90 01       	movw	r18, r0
    486c:	59 9f       	mul	r21, r25
    486e:	30 0d       	add	r19, r0
    4870:	11 24       	eor	r1, r1
    4872:	c9 01       	movw	r24, r18
    4874:	86 5e       	subi	r24, 0xE6	; 230
    4876:	99 4e       	sbci	r25, 0xE9	; 233
    4878:	fc 01       	movw	r30, r24
    487a:	40 83       	st	Z, r20
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	9a 81       	ldd	r25, Y+2	; 0x02
    4880:	fc 01       	movw	r30, r24
    4882:	22 8d       	ldd	r18, Z+26	; 0x1a
    4884:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4888:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    488c:	fc 01       	movw	r30, r24
    488e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4890:	82 17       	cp	r24, r18
    4892:	18 f4       	brcc	.+6      	; 0x489a <vTaskRemoveFromUnorderedEventList+0x268>
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    489a:	00 00       	nop
    489c:	2e 96       	adiw	r28, 0x0e	; 14
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	de bf       	out	0x3e, r29	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <vTaskSetTimeOutState>:
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	1f 92       	push	r1
    48b4:	1f 92       	push	r1
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
    48ba:	9a 83       	std	Y+2, r25	; 0x02
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	0f 92       	push	r0
    48c4:	20 91 c5 16 	lds	r18, 0x16C5	; 0x8016c5 <xNumOfOverflows>
    48c8:	89 81       	ldd	r24, Y+1	; 0x01
    48ca:	9a 81       	ldd	r25, Y+2	; 0x02
    48cc:	fc 01       	movw	r30, r24
    48ce:	20 83       	st	Z, r18
    48d0:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    48d4:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    48d8:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    48dc:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    48e0:	29 81       	ldd	r18, Y+1	; 0x01
    48e2:	3a 81       	ldd	r19, Y+2	; 0x02
    48e4:	f9 01       	movw	r30, r18
    48e6:	81 83       	std	Z+1, r24	; 0x01
    48e8:	92 83       	std	Z+2, r25	; 0x02
    48ea:	a3 83       	std	Z+3, r26	; 0x03
    48ec:	b4 83       	std	Z+4, r27	; 0x04
    48ee:	0f 90       	pop	r0
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	00 00       	nop
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	08 95       	ret

000048fe <vTaskInternalSetTimeOutState>:
    48fe:	cf 93       	push	r28
    4900:	df 93       	push	r29
    4902:	1f 92       	push	r1
    4904:	1f 92       	push	r1
    4906:	cd b7       	in	r28, 0x3d	; 61
    4908:	de b7       	in	r29, 0x3e	; 62
    490a:	9a 83       	std	Y+2, r25	; 0x02
    490c:	89 83       	std	Y+1, r24	; 0x01
    490e:	20 91 c5 16 	lds	r18, 0x16C5	; 0x8016c5 <xNumOfOverflows>
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	9a 81       	ldd	r25, Y+2	; 0x02
    4916:	fc 01       	movw	r30, r24
    4918:	20 83       	st	Z, r18
    491a:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    491e:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    4922:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    4926:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    492a:	29 81       	ldd	r18, Y+1	; 0x01
    492c:	3a 81       	ldd	r19, Y+2	; 0x02
    492e:	f9 01       	movw	r30, r18
    4930:	81 83       	std	Z+1, r24	; 0x01
    4932:	92 83       	std	Z+2, r25	; 0x02
    4934:	a3 83       	std	Z+3, r26	; 0x03
    4936:	b4 83       	std	Z+4, r27	; 0x04
    4938:	00 00       	nop
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	08 95       	ret

00004944 <xTaskCheckForTimeOut>:
    4944:	ef 92       	push	r14
    4946:	ff 92       	push	r15
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    4954:	2d 97       	sbiw	r28, 0x0d	; 13
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	9b 87       	std	Y+11, r25	; 0x0b
    4962:	8a 87       	std	Y+10, r24	; 0x0a
    4964:	7d 87       	std	Y+13, r23	; 0x0d
    4966:	6c 87       	std	Y+12, r22	; 0x0c
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	0f 92       	push	r0
    496e:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    4972:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    4976:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    497a:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    497e:	8a 83       	std	Y+2, r24	; 0x02
    4980:	9b 83       	std	Y+3, r25	; 0x03
    4982:	ac 83       	std	Y+4, r26	; 0x04
    4984:	bd 83       	std	Y+5, r27	; 0x05
    4986:	8a 85       	ldd	r24, Y+10	; 0x0a
    4988:	9b 85       	ldd	r25, Y+11	; 0x0b
    498a:	fc 01       	movw	r30, r24
    498c:	81 81       	ldd	r24, Z+1	; 0x01
    498e:	92 81       	ldd	r25, Z+2	; 0x02
    4990:	a3 81       	ldd	r26, Z+3	; 0x03
    4992:	b4 81       	ldd	r27, Z+4	; 0x04
    4994:	2a 81       	ldd	r18, Y+2	; 0x02
    4996:	3b 81       	ldd	r19, Y+3	; 0x03
    4998:	4c 81       	ldd	r20, Y+4	; 0x04
    499a:	5d 81       	ldd	r21, Y+5	; 0x05
    499c:	79 01       	movw	r14, r18
    499e:	8a 01       	movw	r16, r20
    49a0:	e8 1a       	sub	r14, r24
    49a2:	f9 0a       	sbc	r15, r25
    49a4:	0a 0b       	sbc	r16, r26
    49a6:	1b 0b       	sbc	r17, r27
    49a8:	d8 01       	movw	r26, r16
    49aa:	c7 01       	movw	r24, r14
    49ac:	8e 83       	std	Y+6, r24	; 0x06
    49ae:	9f 83       	std	Y+7, r25	; 0x07
    49b0:	a8 87       	std	Y+8, r26	; 0x08
    49b2:	b9 87       	std	Y+9, r27	; 0x09
    49b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    49b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    49b8:	fc 01       	movw	r30, r24
    49ba:	90 81       	ld	r25, Z
    49bc:	80 91 c5 16 	lds	r24, 0x16C5	; 0x8016c5 <xNumOfOverflows>
    49c0:	98 17       	cp	r25, r24
    49c2:	d1 f0       	breq	.+52     	; 0x49f8 <xTaskCheckForTimeOut+0xb4>
    49c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    49c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    49c8:	fc 01       	movw	r30, r24
    49ca:	21 81       	ldd	r18, Z+1	; 0x01
    49cc:	32 81       	ldd	r19, Z+2	; 0x02
    49ce:	43 81       	ldd	r20, Z+3	; 0x03
    49d0:	54 81       	ldd	r21, Z+4	; 0x04
    49d2:	8a 81       	ldd	r24, Y+2	; 0x02
    49d4:	9b 81       	ldd	r25, Y+3	; 0x03
    49d6:	ac 81       	ldd	r26, Y+4	; 0x04
    49d8:	bd 81       	ldd	r27, Y+5	; 0x05
    49da:	82 17       	cp	r24, r18
    49dc:	93 07       	cpc	r25, r19
    49de:	a4 07       	cpc	r26, r20
    49e0:	b5 07       	cpc	r27, r21
    49e2:	50 f0       	brcs	.+20     	; 0x49f8 <xTaskCheckForTimeOut+0xb4>
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	89 83       	std	Y+1, r24	; 0x01
    49e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    49ec:	fc 01       	movw	r30, r24
    49ee:	10 82       	st	Z, r1
    49f0:	11 82       	std	Z+1, r1	; 0x01
    49f2:	12 82       	std	Z+2, r1	; 0x02
    49f4:	13 82       	std	Z+3, r1	; 0x03
    49f6:	38 c0       	rjmp	.+112    	; 0x4a68 <xTaskCheckForTimeOut+0x124>
    49f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    49fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    49fc:	fc 01       	movw	r30, r24
    49fe:	20 81       	ld	r18, Z
    4a00:	31 81       	ldd	r19, Z+1	; 0x01
    4a02:	42 81       	ldd	r20, Z+2	; 0x02
    4a04:	53 81       	ldd	r21, Z+3	; 0x03
    4a06:	8e 81       	ldd	r24, Y+6	; 0x06
    4a08:	9f 81       	ldd	r25, Y+7	; 0x07
    4a0a:	a8 85       	ldd	r26, Y+8	; 0x08
    4a0c:	b9 85       	ldd	r27, Y+9	; 0x09
    4a0e:	82 17       	cp	r24, r18
    4a10:	93 07       	cpc	r25, r19
    4a12:	a4 07       	cpc	r26, r20
    4a14:	b5 07       	cpc	r27, r21
    4a16:	f8 f4       	brcc	.+62     	; 0x4a56 <xTaskCheckForTimeOut+0x112>
    4a18:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	20 81       	ld	r18, Z
    4a20:	31 81       	ldd	r19, Z+1	; 0x01
    4a22:	42 81       	ldd	r20, Z+2	; 0x02
    4a24:	53 81       	ldd	r21, Z+3	; 0x03
    4a26:	8e 81       	ldd	r24, Y+6	; 0x06
    4a28:	9f 81       	ldd	r25, Y+7	; 0x07
    4a2a:	a8 85       	ldd	r26, Y+8	; 0x08
    4a2c:	b9 85       	ldd	r27, Y+9	; 0x09
    4a2e:	79 01       	movw	r14, r18
    4a30:	8a 01       	movw	r16, r20
    4a32:	e8 1a       	sub	r14, r24
    4a34:	f9 0a       	sbc	r15, r25
    4a36:	0a 0b       	sbc	r16, r26
    4a38:	1b 0b       	sbc	r17, r27
    4a3a:	d8 01       	movw	r26, r16
    4a3c:	c7 01       	movw	r24, r14
    4a3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a40:	3d 85       	ldd	r19, Y+13	; 0x0d
    4a42:	f9 01       	movw	r30, r18
    4a44:	80 83       	st	Z, r24
    4a46:	91 83       	std	Z+1, r25	; 0x01
    4a48:	a2 83       	std	Z+2, r26	; 0x02
    4a4a:	b3 83       	std	Z+3, r27	; 0x03
    4a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a50:	56 df       	rcall	.-340    	; 0x48fe <vTaskInternalSetTimeOutState>
    4a52:	19 82       	std	Y+1, r1	; 0x01
    4a54:	09 c0       	rjmp	.+18     	; 0x4a68 <xTaskCheckForTimeOut+0x124>
    4a56:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a58:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	10 82       	st	Z, r1
    4a5e:	11 82       	std	Z+1, r1	; 0x01
    4a60:	12 82       	std	Z+2, r1	; 0x02
    4a62:	13 82       	std	Z+3, r1	; 0x03
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	89 83       	std	Y+1, r24	; 0x01
    4a68:	0f 90       	pop	r0
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	2d 96       	adiw	r28, 0x0d	; 13
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	df 91       	pop	r29
    4a7c:	cf 91       	pop	r28
    4a7e:	1f 91       	pop	r17
    4a80:	0f 91       	pop	r16
    4a82:	ff 90       	pop	r15
    4a84:	ef 90       	pop	r14
    4a86:	08 95       	ret

00004a88 <vTaskMissedYield>:
    4a88:	cf 93       	push	r28
    4a8a:	df 93       	push	r29
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    4a96:	00 00       	nop
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	08 95       	ret

00004a9e <prvInitialiseTaskLists>:
    4a9e:	cf 93       	push	r28
    4aa0:	df 93       	push	r29
    4aa2:	1f 92       	push	r1
    4aa4:	cd b7       	in	r28, 0x3d	; 61
    4aa6:	de b7       	in	r29, 0x3e	; 62
    4aa8:	19 82       	std	Y+1, r1	; 0x01
    4aaa:	10 c0       	rjmp	.+32     	; 0x4acc <prvInitialiseTaskLists+0x2e>
    4aac:	89 81       	ldd	r24, Y+1	; 0x01
    4aae:	28 2f       	mov	r18, r24
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	4b e0       	ldi	r20, 0x0B	; 11
    4ab4:	42 9f       	mul	r20, r18
    4ab6:	c0 01       	movw	r24, r0
    4ab8:	43 9f       	mul	r20, r19
    4aba:	90 0d       	add	r25, r0
    4abc:	11 24       	eor	r1, r1
    4abe:	86 5e       	subi	r24, 0xE6	; 230
    4ac0:	99 4e       	sbci	r25, 0xE9	; 233
    4ac2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
    4ac8:	8f 5f       	subi	r24, 0xFF	; 255
    4aca:	89 83       	std	Y+1, r24	; 0x01
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	8a 30       	cpi	r24, 0x0A	; 10
    4ad0:	68 f3       	brcs	.-38     	; 0x4aac <prvInitialiseTaskLists+0xe>
    4ad2:	88 e8       	ldi	r24, 0x88	; 136
    4ad4:	96 e1       	ldi	r25, 0x16	; 22
    4ad6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
    4ada:	83 e9       	ldi	r24, 0x93	; 147
    4adc:	96 e1       	ldi	r25, 0x16	; 22
    4ade:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
    4ae2:	82 ea       	ldi	r24, 0xA2	; 162
    4ae4:	96 e1       	ldi	r25, 0x16	; 22
    4ae6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
    4aea:	8d ea       	ldi	r24, 0xAD	; 173
    4aec:	96 e1       	ldi	r25, 0x16	; 22
    4aee:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
    4af2:	88 e8       	ldi	r24, 0x88	; 136
    4af4:	96 e1       	ldi	r25, 0x16	; 22
    4af6:	90 93 9f 16 	sts	0x169F, r25	; 0x80169f <pxDelayedTaskList+0x1>
    4afa:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <pxDelayedTaskList>
    4afe:	83 e9       	ldi	r24, 0x93	; 147
    4b00:	96 e1       	ldi	r25, 0x16	; 22
    4b02:	90 93 a1 16 	sts	0x16A1, r25	; 0x8016a1 <pxOverflowDelayedTaskList+0x1>
    4b06:	80 93 a0 16 	sts	0x16A0, r24	; 0x8016a0 <pxOverflowDelayedTaskList>
    4b0a:	00 00       	nop
    4b0c:	0f 90       	pop	r0
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	08 95       	ret

00004b14 <prvCheckTasksWaitingTermination>:
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	1f 92       	push	r1
    4b1a:	1f 92       	push	r1
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	20 c0       	rjmp	.+64     	; 0x4b62 <prvCheckTasksWaitingTermination+0x4e>
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	0f 92       	push	r0
    4b28:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <xTasksWaitingTermination+0x7>
    4b2c:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <xTasksWaitingTermination+0x8>
    4b30:	fc 01       	movw	r30, r24
    4b32:	80 85       	ldd	r24, Z+8	; 0x08
    4b34:	91 85       	ldd	r25, Z+9	; 0x09
    4b36:	9a 83       	std	Y+2, r25	; 0x02
    4b38:	89 83       	std	Y+1, r24	; 0x01
    4b3a:	89 81       	ldd	r24, Y+1	; 0x01
    4b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3e:	02 96       	adiw	r24, 0x02	; 2
    4b40:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
    4b44:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <uxCurrentNumberOfTasks>
    4b48:	81 50       	subi	r24, 0x01	; 1
    4b4a:	80 93 b9 16 	sts	0x16B9, r24	; 0x8016b9 <uxCurrentNumberOfTasks>
    4b4e:	80 91 b8 16 	lds	r24, 0x16B8	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    4b52:	81 50       	subi	r24, 0x01	; 1
    4b54:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    4b58:	0f 90       	pop	r0
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b60:	0a d0       	rcall	.+20     	; 0x4b76 <prvDeleteTCB>
    4b62:	80 91 b8 16 	lds	r24, 0x16B8	; 0x8016b8 <uxDeletedTasksWaitingCleanUp>
    4b66:	88 23       	and	r24, r24
    4b68:	e1 f6       	brne	.-72     	; 0x4b22 <prvCheckTasksWaitingTermination+0xe>
    4b6a:	00 00       	nop
    4b6c:	0f 90       	pop	r0
    4b6e:	0f 90       	pop	r0
    4b70:	df 91       	pop	r29
    4b72:	cf 91       	pop	r28
    4b74:	08 95       	ret

00004b76 <prvDeleteTCB>:
    4b76:	cf 93       	push	r28
    4b78:	df 93       	push	r29
    4b7a:	1f 92       	push	r1
    4b7c:	1f 92       	push	r1
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	9a 83       	std	Y+2, r25	; 0x02
    4b84:	89 83       	std	Y+1, r24	; 0x01
    4b86:	89 81       	ldd	r24, Y+1	; 0x01
    4b88:	9a 81       	ldd	r25, Y+2	; 0x02
    4b8a:	fc 01       	movw	r30, r24
    4b8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    4b8e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4b90:	0e 94 a8 09 	call	0x1350	; 0x1350 <vPortFree>
    4b94:	89 81       	ldd	r24, Y+1	; 0x01
    4b96:	9a 81       	ldd	r25, Y+2	; 0x02
    4b98:	0e 94 a8 09 	call	0x1350	; 0x1350 <vPortFree>
    4b9c:	00 00       	nop
    4b9e:	0f 90       	pop	r0
    4ba0:	0f 90       	pop	r0
    4ba2:	df 91       	pop	r29
    4ba4:	cf 91       	pop	r28
    4ba6:	08 95       	ret

00004ba8 <prvResetNextTaskUnblockTime>:
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    4bb4:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    4bb8:	fc 01       	movw	r30, r24
    4bba:	80 81       	ld	r24, Z
    4bbc:	88 23       	and	r24, r24
    4bbe:	61 f4       	brne	.+24     	; 0x4bd8 <prvResetNextTaskUnblockTime+0x30>
    4bc0:	8f ef       	ldi	r24, 0xFF	; 255
    4bc2:	9f ef       	ldi	r25, 0xFF	; 255
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    4bca:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    4bce:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    4bd2:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>
    4bd6:	14 c0       	rjmp	.+40     	; 0x4c00 <prvResetNextTaskUnblockTime+0x58>
    4bd8:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    4bdc:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    4be0:	fc 01       	movw	r30, r24
    4be2:	87 81       	ldd	r24, Z+7	; 0x07
    4be4:	90 85       	ldd	r25, Z+8	; 0x08
    4be6:	fc 01       	movw	r30, r24
    4be8:	80 81       	ld	r24, Z
    4bea:	91 81       	ldd	r25, Z+1	; 0x01
    4bec:	a2 81       	ldd	r26, Z+2	; 0x02
    4bee:	b3 81       	ldd	r27, Z+3	; 0x03
    4bf0:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    4bf4:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    4bf8:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    4bfc:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>
    4c00:	00 00       	nop
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	08 95       	ret

00004c08 <xTaskGetCurrentTaskHandle>:
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	1f 92       	push	r1
    4c0e:	1f 92       	push	r1
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4c18:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4c1c:	9a 83       	std	Y+2, r25	; 0x02
    4c1e:	89 83       	std	Y+1, r24	; 0x01
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	0f 90       	pop	r0
    4c26:	0f 90       	pop	r0
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	08 95       	ret

00004c2e <xTaskGetSchedulerState>:
    4c2e:	cf 93       	push	r28
    4c30:	df 93       	push	r29
    4c32:	1f 92       	push	r1
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <xSchedulerRunning>
    4c3c:	88 23       	and	r24, r24
    4c3e:	19 f4       	brne	.+6      	; 0x4c46 <xTaskGetSchedulerState+0x18>
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	89 83       	std	Y+1, r24	; 0x01
    4c44:	08 c0       	rjmp	.+16     	; 0x4c56 <xTaskGetSchedulerState+0x28>
    4c46:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    4c4a:	88 23       	and	r24, r24
    4c4c:	19 f4       	brne	.+6      	; 0x4c54 <xTaskGetSchedulerState+0x26>
    4c4e:	82 e0       	ldi	r24, 0x02	; 2
    4c50:	89 83       	std	Y+1, r24	; 0x01
    4c52:	01 c0       	rjmp	.+2      	; 0x4c56 <xTaskGetSchedulerState+0x28>
    4c54:	19 82       	std	Y+1, r1	; 0x01
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	0f 90       	pop	r0
    4c5a:	df 91       	pop	r29
    4c5c:	cf 91       	pop	r28
    4c5e:	08 95       	ret

00004c60 <xTaskPriorityDisinherit>:
    4c60:	ef 92       	push	r14
    4c62:	ff 92       	push	r15
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	27 97       	sbiw	r28, 0x07	; 7
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61
    4c7c:	9f 83       	std	Y+7, r25	; 0x07
    4c7e:	8e 83       	std	Y+6, r24	; 0x06
    4c80:	8e 81       	ldd	r24, Y+6	; 0x06
    4c82:	9f 81       	ldd	r25, Y+7	; 0x07
    4c84:	9b 83       	std	Y+3, r25	; 0x03
    4c86:	8a 83       	std	Y+2, r24	; 0x02
    4c88:	19 82       	std	Y+1, r1	; 0x01
    4c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c8e:	89 2b       	or	r24, r25
    4c90:	09 f4       	brne	.+2      	; 0x4c94 <xTaskPriorityDisinherit+0x34>
    4c92:	bf c0       	rjmp	.+382    	; 0x4e12 <xTaskPriorityDisinherit+0x1b2>
    4c94:	8a 81       	ldd	r24, Y+2	; 0x02
    4c96:	9b 81       	ldd	r25, Y+3	; 0x03
    4c98:	fc 01       	movw	r30, r24
    4c9a:	86 a5       	ldd	r24, Z+46	; 0x2e
    4c9c:	2f ef       	ldi	r18, 0xFF	; 255
    4c9e:	28 0f       	add	r18, r24
    4ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	26 a7       	std	Z+46, r18	; 0x2e
    4ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    4caa:	9b 81       	ldd	r25, Y+3	; 0x03
    4cac:	fc 01       	movw	r30, r24
    4cae:	22 8d       	ldd	r18, Z+26	; 0x1a
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	85 a5       	ldd	r24, Z+45	; 0x2d
    4cb8:	28 17       	cp	r18, r24
    4cba:	09 f4       	brne	.+2      	; 0x4cbe <xTaskPriorityDisinherit+0x5e>
    4cbc:	aa c0       	rjmp	.+340    	; 0x4e12 <xTaskPriorityDisinherit+0x1b2>
    4cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	86 a5       	ldd	r24, Z+46	; 0x2e
    4cc6:	88 23       	and	r24, r24
    4cc8:	09 f0       	breq	.+2      	; 0x4ccc <xTaskPriorityDisinherit+0x6c>
    4cca:	a3 c0       	rjmp	.+326    	; 0x4e12 <xTaskPriorityDisinherit+0x1b2>
    4ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cce:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd0:	02 96       	adiw	r24, 0x02	; 2
    4cd2:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
    4cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cda:	fc 01       	movw	r30, r24
    4cdc:	25 a5       	ldd	r18, Z+45	; 0x2d
    4cde:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	22 8f       	std	Z+26, r18	; 0x1a
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cea:	fc 01       	movw	r30, r24
    4cec:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cee:	88 2f       	mov	r24, r24
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	a0 e0       	ldi	r26, 0x00	; 0
    4cf4:	b0 e0       	ldi	r27, 0x00	; 0
    4cf6:	2a e0       	ldi	r18, 0x0A	; 10
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	40 e0       	ldi	r20, 0x00	; 0
    4cfc:	50 e0       	ldi	r21, 0x00	; 0
    4cfe:	79 01       	movw	r14, r18
    4d00:	8a 01       	movw	r16, r20
    4d02:	e8 1a       	sub	r14, r24
    4d04:	f9 0a       	sbc	r15, r25
    4d06:	0a 0b       	sbc	r16, r26
    4d08:	1b 0b       	sbc	r17, r27
    4d0a:	d8 01       	movw	r26, r16
    4d0c:	c7 01       	movw	r24, r14
    4d0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d10:	3b 81       	ldd	r19, Y+3	; 0x03
    4d12:	f9 01       	movw	r30, r18
    4d14:	86 87       	std	Z+14, r24	; 0x0e
    4d16:	97 87       	std	Z+15, r25	; 0x0f
    4d18:	a0 8b       	std	Z+16, r26	; 0x10
    4d1a:	b1 8b       	std	Z+17, r27	; 0x11
    4d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d20:	fc 01       	movw	r30, r24
    4d22:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d24:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    4d28:	89 17       	cp	r24, r25
    4d2a:	30 f4       	brcc	.+12     	; 0x4d38 <xTaskPriorityDisinherit+0xd8>
    4d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d30:	fc 01       	movw	r30, r24
    4d32:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d34:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d40:	28 2f       	mov	r18, r24
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	4b e0       	ldi	r20, 0x0B	; 11
    4d46:	42 9f       	mul	r20, r18
    4d48:	c0 01       	movw	r24, r0
    4d4a:	43 9f       	mul	r20, r19
    4d4c:	90 0d       	add	r25, r0
    4d4e:	11 24       	eor	r1, r1
    4d50:	85 5e       	subi	r24, 0xE5	; 229
    4d52:	99 4e       	sbci	r25, 0xE9	; 233
    4d54:	fc 01       	movw	r30, r24
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	9d 83       	std	Y+5, r25	; 0x05
    4d5c:	8c 83       	std	Y+4, r24	; 0x04
    4d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d60:	9b 81       	ldd	r25, Y+3	; 0x03
    4d62:	2c 81       	ldd	r18, Y+4	; 0x04
    4d64:	3d 81       	ldd	r19, Y+5	; 0x05
    4d66:	fc 01       	movw	r30, r24
    4d68:	37 83       	std	Z+7, r19	; 0x07
    4d6a:	26 83       	std	Z+6, r18	; 0x06
    4d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d70:	fc 01       	movw	r30, r24
    4d72:	26 81       	ldd	r18, Z+6	; 0x06
    4d74:	37 81       	ldd	r19, Z+7	; 0x07
    4d76:	8a 81       	ldd	r24, Y+2	; 0x02
    4d78:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	31 87       	std	Z+9, r19	; 0x09
    4d7e:	20 87       	std	Z+8, r18	; 0x08
    4d80:	8c 81       	ldd	r24, Y+4	; 0x04
    4d82:	9d 81       	ldd	r25, Y+5	; 0x05
    4d84:	fc 01       	movw	r30, r24
    4d86:	86 81       	ldd	r24, Z+6	; 0x06
    4d88:	97 81       	ldd	r25, Z+7	; 0x07
    4d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    4d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    4d8e:	2e 5f       	subi	r18, 0xFE	; 254
    4d90:	3f 4f       	sbci	r19, 0xFF	; 255
    4d92:	fc 01       	movw	r30, r24
    4d94:	35 83       	std	Z+5, r19	; 0x05
    4d96:	24 83       	std	Z+4, r18	; 0x04
    4d98:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d9c:	9c 01       	movw	r18, r24
    4d9e:	2e 5f       	subi	r18, 0xFE	; 254
    4da0:	3f 4f       	sbci	r19, 0xFF	; 255
    4da2:	8c 81       	ldd	r24, Y+4	; 0x04
    4da4:	9d 81       	ldd	r25, Y+5	; 0x05
    4da6:	fc 01       	movw	r30, r24
    4da8:	37 83       	std	Z+7, r19	; 0x07
    4daa:	26 83       	std	Z+6, r18	; 0x06
    4dac:	8a 81       	ldd	r24, Y+2	; 0x02
    4dae:	9b 81       	ldd	r25, Y+3	; 0x03
    4db0:	fc 01       	movw	r30, r24
    4db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4db4:	28 2f       	mov	r18, r24
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	4b e0       	ldi	r20, 0x0B	; 11
    4dba:	42 9f       	mul	r20, r18
    4dbc:	c0 01       	movw	r24, r0
    4dbe:	43 9f       	mul	r20, r19
    4dc0:	90 0d       	add	r25, r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	9c 01       	movw	r18, r24
    4dc6:	26 5e       	subi	r18, 0xE6	; 230
    4dc8:	39 4e       	sbci	r19, 0xE9	; 233
    4dca:	8a 81       	ldd	r24, Y+2	; 0x02
    4dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4dce:	fc 01       	movw	r30, r24
    4dd0:	35 87       	std	Z+13, r19	; 0x0d
    4dd2:	24 87       	std	Z+12, r18	; 0x0c
    4dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd8:	fc 01       	movw	r30, r24
    4dda:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ddc:	88 2f       	mov	r24, r24
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	4b e0       	ldi	r20, 0x0B	; 11
    4de2:	48 9f       	mul	r20, r24
    4de4:	90 01       	movw	r18, r0
    4de6:	49 9f       	mul	r20, r25
    4de8:	30 0d       	add	r19, r0
    4dea:	11 24       	eor	r1, r1
    4dec:	26 5e       	subi	r18, 0xE6	; 230
    4dee:	39 4e       	sbci	r19, 0xE9	; 233
    4df0:	f9 01       	movw	r30, r18
    4df2:	20 81       	ld	r18, Z
    4df4:	41 e0       	ldi	r20, 0x01	; 1
    4df6:	42 0f       	add	r20, r18
    4df8:	5b e0       	ldi	r21, 0x0B	; 11
    4dfa:	58 9f       	mul	r21, r24
    4dfc:	90 01       	movw	r18, r0
    4dfe:	59 9f       	mul	r21, r25
    4e00:	30 0d       	add	r19, r0
    4e02:	11 24       	eor	r1, r1
    4e04:	c9 01       	movw	r24, r18
    4e06:	86 5e       	subi	r24, 0xE6	; 230
    4e08:	99 4e       	sbci	r25, 0xE9	; 233
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	40 83       	st	Z, r20
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	89 83       	std	Y+1, r24	; 0x01
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	27 96       	adiw	r28, 0x07	; 7
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	08 95       	ret

00004e2e <uxTaskResetEventItemValue>:
    4e2e:	ef 92       	push	r14
    4e30:	ff 92       	push	r15
    4e32:	0f 93       	push	r16
    4e34:	1f 93       	push	r17
    4e36:	cf 93       	push	r28
    4e38:	df 93       	push	r29
    4e3a:	00 d0       	rcall	.+0      	; 0x4e3c <uxTaskResetEventItemValue+0xe>
    4e3c:	1f 92       	push	r1
    4e3e:	cd b7       	in	r28, 0x3d	; 61
    4e40:	de b7       	in	r29, 0x3e	; 62
    4e42:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4e46:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	86 85       	ldd	r24, Z+14	; 0x0e
    4e4e:	97 85       	ldd	r25, Z+15	; 0x0f
    4e50:	a0 89       	ldd	r26, Z+16	; 0x10
    4e52:	b1 89       	ldd	r27, Z+17	; 0x11
    4e54:	89 83       	std	Y+1, r24	; 0x01
    4e56:	9a 83       	std	Y+2, r25	; 0x02
    4e58:	ab 83       	std	Y+3, r26	; 0x03
    4e5a:	bc 83       	std	Y+4, r27	; 0x04
    4e5c:	60 91 18 16 	lds	r22, 0x1618	; 0x801618 <pxCurrentTCB>
    4e60:	70 91 19 16 	lds	r23, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4e64:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    4e68:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e70:	88 2f       	mov	r24, r24
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	a0 e0       	ldi	r26, 0x00	; 0
    4e76:	b0 e0       	ldi	r27, 0x00	; 0
    4e78:	2a e0       	ldi	r18, 0x0A	; 10
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e0       	ldi	r20, 0x00	; 0
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	79 01       	movw	r14, r18
    4e82:	8a 01       	movw	r16, r20
    4e84:	e8 1a       	sub	r14, r24
    4e86:	f9 0a       	sbc	r15, r25
    4e88:	0a 0b       	sbc	r16, r26
    4e8a:	1b 0b       	sbc	r17, r27
    4e8c:	d8 01       	movw	r26, r16
    4e8e:	c7 01       	movw	r24, r14
    4e90:	fb 01       	movw	r30, r22
    4e92:	86 87       	std	Z+14, r24	; 0x0e
    4e94:	97 87       	std	Z+15, r25	; 0x0f
    4e96:	a0 8b       	std	Z+16, r26	; 0x10
    4e98:	b1 8b       	std	Z+17, r27	; 0x11
    4e9a:	89 81       	ldd	r24, Y+1	; 0x01
    4e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9e:	ab 81       	ldd	r26, Y+3	; 0x03
    4ea0:	bc 81       	ldd	r27, Y+4	; 0x04
    4ea2:	bc 01       	movw	r22, r24
    4ea4:	cd 01       	movw	r24, r26
    4ea6:	0f 90       	pop	r0
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	1f 91       	pop	r17
    4eb4:	0f 91       	pop	r16
    4eb6:	ff 90       	pop	r15
    4eb8:	ef 90       	pop	r14
    4eba:	08 95       	ret

00004ebc <xTaskGenericNotifyWait>:
    4ebc:	af 92       	push	r10
    4ebe:	bf 92       	push	r11
    4ec0:	cf 92       	push	r12
    4ec2:	df 92       	push	r13
    4ec4:	ef 92       	push	r14
    4ec6:	ff 92       	push	r15
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    4ed4:	60 97       	sbiw	r28, 0x10	; 16
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	f8 94       	cli
    4eda:	de bf       	out	0x3e, r29	; 62
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	cd bf       	out	0x3d, r28	; 61
    4ee0:	8a 83       	std	Y+2, r24	; 0x02
    4ee2:	4b 83       	std	Y+3, r20	; 0x03
    4ee4:	5c 83       	std	Y+4, r21	; 0x04
    4ee6:	6d 83       	std	Y+5, r22	; 0x05
    4ee8:	7e 83       	std	Y+6, r23	; 0x06
    4eea:	0f 83       	std	Y+7, r16	; 0x07
    4eec:	18 87       	std	Y+8, r17	; 0x08
    4eee:	29 87       	std	Y+9, r18	; 0x09
    4ef0:	3a 87       	std	Y+10, r19	; 0x0a
    4ef2:	fc 86       	std	Y+12, r15	; 0x0c
    4ef4:	eb 86       	std	Y+11, r14	; 0x0b
    4ef6:	ad 86       	std	Y+13, r10	; 0x0d
    4ef8:	be 86       	std	Y+14, r11	; 0x0e
    4efa:	cf 86       	std	Y+15, r12	; 0x0f
    4efc:	d8 8a       	std	Y+16, r13	; 0x10
    4efe:	0f b6       	in	r0, 0x3f	; 63
    4f00:	f8 94       	cli
    4f02:	0f 92       	push	r0
    4f04:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    4f08:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0e:	88 2f       	mov	r24, r24
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	82 0f       	add	r24, r18
    4f14:	93 1f       	adc	r25, r19
    4f16:	c3 96       	adiw	r24, 0x33	; 51
    4f18:	dc 01       	movw	r26, r24
    4f1a:	8c 91       	ld	r24, X
    4f1c:	82 30       	cpi	r24, 0x02	; 2
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <xTaskGenericNotifyWait+0x66>
    4f20:	4f c0       	rjmp	.+158    	; 0x4fc0 <xTaskGenericNotifyWait+0x104>
    4f22:	60 91 18 16 	lds	r22, 0x1618	; 0x801618 <pxCurrentTCB>
    4f26:	70 91 19 16 	lds	r23, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2c:	e8 2f       	mov	r30, r24
    4f2e:	f0 e0       	ldi	r31, 0x00	; 0
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
    4f32:	88 2f       	mov	r24, r24
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	88 0f       	add	r24, r24
    4f38:	99 1f       	adc	r25, r25
    4f3a:	88 0f       	add	r24, r24
    4f3c:	99 1f       	adc	r25, r25
    4f3e:	86 0f       	add	r24, r22
    4f40:	97 1f       	adc	r25, r23
    4f42:	8f 96       	adiw	r24, 0x2f	; 47
    4f44:	dc 01       	movw	r26, r24
    4f46:	2d 91       	ld	r18, X+
    4f48:	3d 91       	ld	r19, X+
    4f4a:	4d 91       	ld	r20, X+
    4f4c:	5c 91       	ld	r21, X
    4f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f50:	9c 81       	ldd	r25, Y+4	; 0x04
    4f52:	ad 81       	ldd	r26, Y+5	; 0x05
    4f54:	be 81       	ldd	r27, Y+6	; 0x06
    4f56:	80 95       	com	r24
    4f58:	90 95       	com	r25
    4f5a:	a0 95       	com	r26
    4f5c:	b0 95       	com	r27
    4f5e:	82 23       	and	r24, r18
    4f60:	93 23       	and	r25, r19
    4f62:	a4 23       	and	r26, r20
    4f64:	b5 23       	and	r27, r21
    4f66:	9f 01       	movw	r18, r30
    4f68:	22 0f       	add	r18, r18
    4f6a:	33 1f       	adc	r19, r19
    4f6c:	22 0f       	add	r18, r18
    4f6e:	33 1f       	adc	r19, r19
    4f70:	26 0f       	add	r18, r22
    4f72:	37 1f       	adc	r19, r23
    4f74:	21 5d       	subi	r18, 0xD1	; 209
    4f76:	3f 4f       	sbci	r19, 0xFF	; 255
    4f78:	f9 01       	movw	r30, r18
    4f7a:	80 83       	st	Z, r24
    4f7c:	91 83       	std	Z+1, r25	; 0x01
    4f7e:	a2 83       	std	Z+2, r26	; 0x02
    4f80:	b3 83       	std	Z+3, r27	; 0x03
    4f82:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    4f86:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8c:	88 2f       	mov	r24, r24
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	82 0f       	add	r24, r18
    4f92:	93 1f       	adc	r25, r19
    4f94:	c3 96       	adiw	r24, 0x33	; 51
    4f96:	21 e0       	ldi	r18, 0x01	; 1
    4f98:	dc 01       	movw	r26, r24
    4f9a:	2c 93       	st	X, r18
    4f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa0:	af 85       	ldd	r26, Y+15	; 0x0f
    4fa2:	b8 89       	ldd	r27, Y+16	; 0x10
    4fa4:	89 2b       	or	r24, r25
    4fa6:	8a 2b       	or	r24, r26
    4fa8:	8b 2b       	or	r24, r27
    4faa:	51 f0       	breq	.+20     	; 0x4fc0 <xTaskGenericNotifyWait+0x104>
    4fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fb0:	af 85       	ldd	r26, Y+15	; 0x0f
    4fb2:	b8 89       	ldd	r27, Y+16	; 0x10
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	bc 01       	movw	r22, r24
    4fb8:	cd 01       	movw	r24, r26
    4fba:	b3 d4       	rcall	.+2406   	; 0x5922 <prvAddCurrentTaskToDelayedList>
    4fbc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    4fc0:	0f 90       	pop	r0
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	0f b6       	in	r0, 0x3f	; 63
    4fc6:	f8 94       	cli
    4fc8:	0f 92       	push	r0
    4fca:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fce:	89 2b       	or	r24, r25
    4fd0:	d1 f0       	breq	.+52     	; 0x5006 <xTaskGenericNotifyWait+0x14a>
    4fd2:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    4fd6:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    4fda:	8a 81       	ldd	r24, Y+2	; 0x02
    4fdc:	88 2f       	mov	r24, r24
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	88 0f       	add	r24, r24
    4fe2:	99 1f       	adc	r25, r25
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	82 0f       	add	r24, r18
    4fea:	93 1f       	adc	r25, r19
    4fec:	8f 96       	adiw	r24, 0x2f	; 47
    4fee:	fc 01       	movw	r30, r24
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	a2 81       	ldd	r26, Z+2	; 0x02
    4ff6:	b3 81       	ldd	r27, Z+3	; 0x03
    4ff8:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ffa:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ffc:	f9 01       	movw	r30, r18
    4ffe:	80 83       	st	Z, r24
    5000:	91 83       	std	Z+1, r25	; 0x01
    5002:	a2 83       	std	Z+2, r26	; 0x02
    5004:	b3 83       	std	Z+3, r27	; 0x03
    5006:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    500a:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    500e:	8a 81       	ldd	r24, Y+2	; 0x02
    5010:	88 2f       	mov	r24, r24
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	82 0f       	add	r24, r18
    5016:	93 1f       	adc	r25, r19
    5018:	c3 96       	adiw	r24, 0x33	; 51
    501a:	dc 01       	movw	r26, r24
    501c:	8c 91       	ld	r24, X
    501e:	82 30       	cpi	r24, 0x02	; 2
    5020:	11 f0       	breq	.+4      	; 0x5026 <xTaskGenericNotifyWait+0x16a>
    5022:	19 82       	std	Y+1, r1	; 0x01
    5024:	32 c0       	rjmp	.+100    	; 0x508a <xTaskGenericNotifyWait+0x1ce>
    5026:	60 91 18 16 	lds	r22, 0x1618	; 0x801618 <pxCurrentTCB>
    502a:	70 91 19 16 	lds	r23, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    502e:	8a 81       	ldd	r24, Y+2	; 0x02
    5030:	e8 2f       	mov	r30, r24
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	8a 81       	ldd	r24, Y+2	; 0x02
    5036:	88 2f       	mov	r24, r24
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	88 0f       	add	r24, r24
    503c:	99 1f       	adc	r25, r25
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	86 0f       	add	r24, r22
    5044:	97 1f       	adc	r25, r23
    5046:	8f 96       	adiw	r24, 0x2f	; 47
    5048:	dc 01       	movw	r26, r24
    504a:	2d 91       	ld	r18, X+
    504c:	3d 91       	ld	r19, X+
    504e:	4d 91       	ld	r20, X+
    5050:	5c 91       	ld	r21, X
    5052:	8f 81       	ldd	r24, Y+7	; 0x07
    5054:	98 85       	ldd	r25, Y+8	; 0x08
    5056:	a9 85       	ldd	r26, Y+9	; 0x09
    5058:	ba 85       	ldd	r27, Y+10	; 0x0a
    505a:	80 95       	com	r24
    505c:	90 95       	com	r25
    505e:	a0 95       	com	r26
    5060:	b0 95       	com	r27
    5062:	82 23       	and	r24, r18
    5064:	93 23       	and	r25, r19
    5066:	a4 23       	and	r26, r20
    5068:	b5 23       	and	r27, r21
    506a:	9f 01       	movw	r18, r30
    506c:	22 0f       	add	r18, r18
    506e:	33 1f       	adc	r19, r19
    5070:	22 0f       	add	r18, r18
    5072:	33 1f       	adc	r19, r19
    5074:	26 0f       	add	r18, r22
    5076:	37 1f       	adc	r19, r23
    5078:	21 5d       	subi	r18, 0xD1	; 209
    507a:	3f 4f       	sbci	r19, 0xFF	; 255
    507c:	f9 01       	movw	r30, r18
    507e:	80 83       	st	Z, r24
    5080:	91 83       	std	Z+1, r25	; 0x01
    5082:	a2 83       	std	Z+2, r26	; 0x02
    5084:	b3 83       	std	Z+3, r27	; 0x03
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	89 83       	std	Y+1, r24	; 0x01
    508a:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    508e:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    5092:	8a 81       	ldd	r24, Y+2	; 0x02
    5094:	88 2f       	mov	r24, r24
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	82 0f       	add	r24, r18
    509a:	93 1f       	adc	r25, r19
    509c:	c3 96       	adiw	r24, 0x33	; 51
    509e:	dc 01       	movw	r26, r24
    50a0:	1c 92       	st	X, r1
    50a2:	0f 90       	pop	r0
    50a4:	0f be       	out	0x3f, r0	; 63
    50a6:	89 81       	ldd	r24, Y+1	; 0x01
    50a8:	60 96       	adiw	r28, 0x10	; 16
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	f8 94       	cli
    50ae:	de bf       	out	0x3e, r29	; 62
    50b0:	0f be       	out	0x3f, r0	; 63
    50b2:	cd bf       	out	0x3d, r28	; 61
    50b4:	df 91       	pop	r29
    50b6:	cf 91       	pop	r28
    50b8:	1f 91       	pop	r17
    50ba:	0f 91       	pop	r16
    50bc:	ff 90       	pop	r15
    50be:	ef 90       	pop	r14
    50c0:	df 90       	pop	r13
    50c2:	cf 90       	pop	r12
    50c4:	bf 90       	pop	r11
    50c6:	af 90       	pop	r10
    50c8:	08 95       	ret

000050ca <xTaskGenericNotify>:
    50ca:	ef 92       	push	r14
    50cc:	ff 92       	push	r15
    50ce:	0f 93       	push	r16
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	cd b7       	in	r28, 0x3d	; 61
    50d6:	de b7       	in	r29, 0x3e	; 62
    50d8:	62 97       	sbiw	r28, 0x12	; 18
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	de bf       	out	0x3e, r29	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	cd bf       	out	0x3d, r28	; 61
    50e4:	9a 87       	std	Y+10, r25	; 0x0a
    50e6:	89 87       	std	Y+9, r24	; 0x09
    50e8:	6b 87       	std	Y+11, r22	; 0x0b
    50ea:	2c 87       	std	Y+12, r18	; 0x0c
    50ec:	3d 87       	std	Y+13, r19	; 0x0d
    50ee:	4e 87       	std	Y+14, r20	; 0x0e
    50f0:	5f 87       	std	Y+15, r21	; 0x0f
    50f2:	08 8b       	std	Y+16, r16	; 0x10
    50f4:	fa 8a       	std	Y+18, r15	; 0x12
    50f6:	e9 8a       	std	Y+17, r14	; 0x11
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	89 85       	ldd	r24, Y+9	; 0x09
    50fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5100:	9b 83       	std	Y+3, r25	; 0x03
    5102:	8a 83       	std	Y+2, r24	; 0x02
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	f8 94       	cli
    5108:	0f 92       	push	r0
    510a:	89 89       	ldd	r24, Y+17	; 0x11
    510c:	9a 89       	ldd	r25, Y+18	; 0x12
    510e:	89 2b       	or	r24, r25
    5110:	c1 f0       	breq	.+48     	; 0x5142 <xTaskGenericNotify+0x78>
    5112:	8b 85       	ldd	r24, Y+11	; 0x0b
    5114:	88 2f       	mov	r24, r24
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	2a 81       	ldd	r18, Y+2	; 0x02
    511a:	3b 81       	ldd	r19, Y+3	; 0x03
    511c:	88 0f       	add	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	88 0f       	add	r24, r24
    5122:	99 1f       	adc	r25, r25
    5124:	82 0f       	add	r24, r18
    5126:	93 1f       	adc	r25, r19
    5128:	8f 96       	adiw	r24, 0x2f	; 47
    512a:	fc 01       	movw	r30, r24
    512c:	80 81       	ld	r24, Z
    512e:	91 81       	ldd	r25, Z+1	; 0x01
    5130:	a2 81       	ldd	r26, Z+2	; 0x02
    5132:	b3 81       	ldd	r27, Z+3	; 0x03
    5134:	29 89       	ldd	r18, Y+17	; 0x11
    5136:	3a 89       	ldd	r19, Y+18	; 0x12
    5138:	f9 01       	movw	r30, r18
    513a:	80 83       	st	Z, r24
    513c:	91 83       	std	Z+1, r25	; 0x01
    513e:	a2 83       	std	Z+2, r26	; 0x02
    5140:	b3 83       	std	Z+3, r27	; 0x03
    5142:	8b 85       	ldd	r24, Y+11	; 0x0b
    5144:	88 2f       	mov	r24, r24
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	2a 81       	ldd	r18, Y+2	; 0x02
    514a:	3b 81       	ldd	r19, Y+3	; 0x03
    514c:	82 0f       	add	r24, r18
    514e:	93 1f       	adc	r25, r19
    5150:	c3 96       	adiw	r24, 0x33	; 51
    5152:	fc 01       	movw	r30, r24
    5154:	80 81       	ld	r24, Z
    5156:	8c 83       	std	Y+4, r24	; 0x04
    5158:	8b 85       	ldd	r24, Y+11	; 0x0b
    515a:	88 2f       	mov	r24, r24
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	2a 81       	ldd	r18, Y+2	; 0x02
    5160:	3b 81       	ldd	r19, Y+3	; 0x03
    5162:	82 0f       	add	r24, r18
    5164:	93 1f       	adc	r25, r19
    5166:	c3 96       	adiw	r24, 0x33	; 51
    5168:	22 e0       	ldi	r18, 0x02	; 2
    516a:	fc 01       	movw	r30, r24
    516c:	20 83       	st	Z, r18
    516e:	88 89       	ldd	r24, Y+16	; 0x10
    5170:	88 2f       	mov	r24, r24
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	82 30       	cpi	r24, 0x02	; 2
    5176:	91 05       	cpc	r25, r1
    5178:	09 f4       	brne	.+2      	; 0x517c <xTaskGenericNotify+0xb2>
    517a:	3e c0       	rjmp	.+124    	; 0x51f8 <xTaskGenericNotify+0x12e>
    517c:	83 30       	cpi	r24, 0x03	; 3
    517e:	91 05       	cpc	r25, r1
    5180:	34 f4       	brge	.+12     	; 0x518e <xTaskGenericNotify+0xc4>
    5182:	00 97       	sbiw	r24, 0x00	; 0
    5184:	09 f4       	brne	.+2      	; 0x5188 <xTaskGenericNotify+0xbe>
    5186:	92 c0       	rjmp	.+292    	; 0x52ac <xTaskGenericNotify+0x1e2>
    5188:	01 97       	sbiw	r24, 0x01	; 1
    518a:	49 f0       	breq	.+18     	; 0x519e <xTaskGenericNotify+0xd4>
    518c:	90 c0       	rjmp	.+288    	; 0x52ae <xTaskGenericNotify+0x1e4>
    518e:	83 30       	cpi	r24, 0x03	; 3
    5190:	91 05       	cpc	r25, r1
    5192:	09 f4       	brne	.+2      	; 0x5196 <xTaskGenericNotify+0xcc>
    5194:	56 c0       	rjmp	.+172    	; 0x5242 <xTaskGenericNotify+0x178>
    5196:	04 97       	sbiw	r24, 0x04	; 4
    5198:	09 f4       	brne	.+2      	; 0x519c <xTaskGenericNotify+0xd2>
    519a:	6b c0       	rjmp	.+214    	; 0x5272 <xTaskGenericNotify+0x1a8>
    519c:	88 c0       	rjmp	.+272    	; 0x52ae <xTaskGenericNotify+0x1e4>
    519e:	8b 85       	ldd	r24, Y+11	; 0x0b
    51a0:	68 2f       	mov	r22, r24
    51a2:	70 e0       	ldi	r23, 0x00	; 0
    51a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    51a6:	88 2f       	mov	r24, r24
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	2a 81       	ldd	r18, Y+2	; 0x02
    51ac:	3b 81       	ldd	r19, Y+3	; 0x03
    51ae:	88 0f       	add	r24, r24
    51b0:	99 1f       	adc	r25, r25
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	82 0f       	add	r24, r18
    51b8:	93 1f       	adc	r25, r19
    51ba:	8f 96       	adiw	r24, 0x2f	; 47
    51bc:	fc 01       	movw	r30, r24
    51be:	20 81       	ld	r18, Z
    51c0:	31 81       	ldd	r19, Z+1	; 0x01
    51c2:	42 81       	ldd	r20, Z+2	; 0x02
    51c4:	53 81       	ldd	r21, Z+3	; 0x03
    51c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    51c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    51ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    51cc:	bf 85       	ldd	r27, Y+15	; 0x0f
    51ce:	82 2b       	or	r24, r18
    51d0:	93 2b       	or	r25, r19
    51d2:	a4 2b       	or	r26, r20
    51d4:	b5 2b       	or	r27, r21
    51d6:	4a 81       	ldd	r20, Y+2	; 0x02
    51d8:	5b 81       	ldd	r21, Y+3	; 0x03
    51da:	9b 01       	movw	r18, r22
    51dc:	22 0f       	add	r18, r18
    51de:	33 1f       	adc	r19, r19
    51e0:	22 0f       	add	r18, r18
    51e2:	33 1f       	adc	r19, r19
    51e4:	24 0f       	add	r18, r20
    51e6:	35 1f       	adc	r19, r21
    51e8:	21 5d       	subi	r18, 0xD1	; 209
    51ea:	3f 4f       	sbci	r19, 0xFF	; 255
    51ec:	f9 01       	movw	r30, r18
    51ee:	80 83       	st	Z, r24
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	a2 83       	std	Z+2, r26	; 0x02
    51f4:	b3 83       	std	Z+3, r27	; 0x03
    51f6:	5b c0       	rjmp	.+182    	; 0x52ae <xTaskGenericNotify+0x1e4>
    51f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51fa:	28 2f       	mov	r18, r24
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	4a 81       	ldd	r20, Y+2	; 0x02
    5200:	5b 81       	ldd	r21, Y+3	; 0x03
    5202:	c9 01       	movw	r24, r18
    5204:	88 0f       	add	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	88 0f       	add	r24, r24
    520a:	99 1f       	adc	r25, r25
    520c:	84 0f       	add	r24, r20
    520e:	95 1f       	adc	r25, r21
    5210:	8f 96       	adiw	r24, 0x2f	; 47
    5212:	fc 01       	movw	r30, r24
    5214:	80 81       	ld	r24, Z
    5216:	91 81       	ldd	r25, Z+1	; 0x01
    5218:	a2 81       	ldd	r26, Z+2	; 0x02
    521a:	b3 81       	ldd	r27, Z+3	; 0x03
    521c:	01 96       	adiw	r24, 0x01	; 1
    521e:	a1 1d       	adc	r26, r1
    5220:	b1 1d       	adc	r27, r1
    5222:	4a 81       	ldd	r20, Y+2	; 0x02
    5224:	5b 81       	ldd	r21, Y+3	; 0x03
    5226:	22 0f       	add	r18, r18
    5228:	33 1f       	adc	r19, r19
    522a:	22 0f       	add	r18, r18
    522c:	33 1f       	adc	r19, r19
    522e:	24 0f       	add	r18, r20
    5230:	35 1f       	adc	r19, r21
    5232:	21 5d       	subi	r18, 0xD1	; 209
    5234:	3f 4f       	sbci	r19, 0xFF	; 255
    5236:	f9 01       	movw	r30, r18
    5238:	80 83       	st	Z, r24
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	a2 83       	std	Z+2, r26	; 0x02
    523e:	b3 83       	std	Z+3, r27	; 0x03
    5240:	36 c0       	rjmp	.+108    	; 0x52ae <xTaskGenericNotify+0x1e4>
    5242:	8b 85       	ldd	r24, Y+11	; 0x0b
    5244:	88 2f       	mov	r24, r24
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	2a 81       	ldd	r18, Y+2	; 0x02
    524a:	3b 81       	ldd	r19, Y+3	; 0x03
    524c:	88 0f       	add	r24, r24
    524e:	99 1f       	adc	r25, r25
    5250:	88 0f       	add	r24, r24
    5252:	99 1f       	adc	r25, r25
    5254:	82 0f       	add	r24, r18
    5256:	93 1f       	adc	r25, r19
    5258:	9c 01       	movw	r18, r24
    525a:	21 5d       	subi	r18, 0xD1	; 209
    525c:	3f 4f       	sbci	r19, 0xFF	; 255
    525e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5260:	9d 85       	ldd	r25, Y+13	; 0x0d
    5262:	ae 85       	ldd	r26, Y+14	; 0x0e
    5264:	bf 85       	ldd	r27, Y+15	; 0x0f
    5266:	f9 01       	movw	r30, r18
    5268:	80 83       	st	Z, r24
    526a:	91 83       	std	Z+1, r25	; 0x01
    526c:	a2 83       	std	Z+2, r26	; 0x02
    526e:	b3 83       	std	Z+3, r27	; 0x03
    5270:	1e c0       	rjmp	.+60     	; 0x52ae <xTaskGenericNotify+0x1e4>
    5272:	8c 81       	ldd	r24, Y+4	; 0x04
    5274:	82 30       	cpi	r24, 0x02	; 2
    5276:	c1 f0       	breq	.+48     	; 0x52a8 <xTaskGenericNotify+0x1de>
    5278:	8b 85       	ldd	r24, Y+11	; 0x0b
    527a:	88 2f       	mov	r24, r24
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	2a 81       	ldd	r18, Y+2	; 0x02
    5280:	3b 81       	ldd	r19, Y+3	; 0x03
    5282:	88 0f       	add	r24, r24
    5284:	99 1f       	adc	r25, r25
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	82 0f       	add	r24, r18
    528c:	93 1f       	adc	r25, r19
    528e:	9c 01       	movw	r18, r24
    5290:	21 5d       	subi	r18, 0xD1	; 209
    5292:	3f 4f       	sbci	r19, 0xFF	; 255
    5294:	8c 85       	ldd	r24, Y+12	; 0x0c
    5296:	9d 85       	ldd	r25, Y+13	; 0x0d
    5298:	ae 85       	ldd	r26, Y+14	; 0x0e
    529a:	bf 85       	ldd	r27, Y+15	; 0x0f
    529c:	f9 01       	movw	r30, r18
    529e:	80 83       	st	Z, r24
    52a0:	91 83       	std	Z+1, r25	; 0x01
    52a2:	a2 83       	std	Z+2, r26	; 0x02
    52a4:	b3 83       	std	Z+3, r27	; 0x03
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <xTaskGenericNotify+0x1e4>
    52a8:	19 82       	std	Y+1, r1	; 0x01
    52aa:	01 c0       	rjmp	.+2      	; 0x52ae <xTaskGenericNotify+0x1e4>
    52ac:	00 00       	nop
    52ae:	8c 81       	ldd	r24, Y+4	; 0x04
    52b0:	81 30       	cpi	r24, 0x01	; 1
    52b2:	09 f0       	breq	.+2      	; 0x52b6 <xTaskGenericNotify+0x1ec>
    52b4:	cc c0       	rjmp	.+408    	; 0x544e <xTaskGenericNotify+0x384>
    52b6:	8a 81       	ldd	r24, Y+2	; 0x02
    52b8:	9b 81       	ldd	r25, Y+3	; 0x03
    52ba:	fc 01       	movw	r30, r24
    52bc:	84 85       	ldd	r24, Z+12	; 0x0c
    52be:	95 85       	ldd	r25, Z+13	; 0x0d
    52c0:	9e 83       	std	Y+6, r25	; 0x06
    52c2:	8d 83       	std	Y+5, r24	; 0x05
    52c4:	8a 81       	ldd	r24, Y+2	; 0x02
    52c6:	9b 81       	ldd	r25, Y+3	; 0x03
    52c8:	fc 01       	movw	r30, r24
    52ca:	86 81       	ldd	r24, Z+6	; 0x06
    52cc:	97 81       	ldd	r25, Z+7	; 0x07
    52ce:	2a 81       	ldd	r18, Y+2	; 0x02
    52d0:	3b 81       	ldd	r19, Y+3	; 0x03
    52d2:	f9 01       	movw	r30, r18
    52d4:	20 85       	ldd	r18, Z+8	; 0x08
    52d6:	31 85       	ldd	r19, Z+9	; 0x09
    52d8:	fc 01       	movw	r30, r24
    52da:	37 83       	std	Z+7, r19	; 0x07
    52dc:	26 83       	std	Z+6, r18	; 0x06
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	9b 81       	ldd	r25, Y+3	; 0x03
    52e2:	fc 01       	movw	r30, r24
    52e4:	80 85       	ldd	r24, Z+8	; 0x08
    52e6:	91 85       	ldd	r25, Z+9	; 0x09
    52e8:	2a 81       	ldd	r18, Y+2	; 0x02
    52ea:	3b 81       	ldd	r19, Y+3	; 0x03
    52ec:	f9 01       	movw	r30, r18
    52ee:	26 81       	ldd	r18, Z+6	; 0x06
    52f0:	37 81       	ldd	r19, Z+7	; 0x07
    52f2:	fc 01       	movw	r30, r24
    52f4:	35 83       	std	Z+5, r19	; 0x05
    52f6:	24 83       	std	Z+4, r18	; 0x04
    52f8:	8d 81       	ldd	r24, Y+5	; 0x05
    52fa:	9e 81       	ldd	r25, Y+6	; 0x06
    52fc:	fc 01       	movw	r30, r24
    52fe:	21 81       	ldd	r18, Z+1	; 0x01
    5300:	32 81       	ldd	r19, Z+2	; 0x02
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	9b 81       	ldd	r25, Y+3	; 0x03
    5306:	02 96       	adiw	r24, 0x02	; 2
    5308:	28 17       	cp	r18, r24
    530a:	39 07       	cpc	r19, r25
    530c:	51 f4       	brne	.+20     	; 0x5322 <xTaskGenericNotify+0x258>
    530e:	8a 81       	ldd	r24, Y+2	; 0x02
    5310:	9b 81       	ldd	r25, Y+3	; 0x03
    5312:	fc 01       	movw	r30, r24
    5314:	20 85       	ldd	r18, Z+8	; 0x08
    5316:	31 85       	ldd	r19, Z+9	; 0x09
    5318:	8d 81       	ldd	r24, Y+5	; 0x05
    531a:	9e 81       	ldd	r25, Y+6	; 0x06
    531c:	fc 01       	movw	r30, r24
    531e:	32 83       	std	Z+2, r19	; 0x02
    5320:	21 83       	std	Z+1, r18	; 0x01
    5322:	8a 81       	ldd	r24, Y+2	; 0x02
    5324:	9b 81       	ldd	r25, Y+3	; 0x03
    5326:	fc 01       	movw	r30, r24
    5328:	15 86       	std	Z+13, r1	; 0x0d
    532a:	14 86       	std	Z+12, r1	; 0x0c
    532c:	8d 81       	ldd	r24, Y+5	; 0x05
    532e:	9e 81       	ldd	r25, Y+6	; 0x06
    5330:	fc 01       	movw	r30, r24
    5332:	80 81       	ld	r24, Z
    5334:	2f ef       	ldi	r18, 0xFF	; 255
    5336:	28 0f       	add	r18, r24
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	fc 01       	movw	r30, r24
    533e:	20 83       	st	Z, r18
    5340:	8a 81       	ldd	r24, Y+2	; 0x02
    5342:	9b 81       	ldd	r25, Y+3	; 0x03
    5344:	fc 01       	movw	r30, r24
    5346:	92 8d       	ldd	r25, Z+26	; 0x1a
    5348:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    534c:	89 17       	cp	r24, r25
    534e:	30 f4       	brcc	.+12     	; 0x535c <xTaskGenericNotify+0x292>
    5350:	8a 81       	ldd	r24, Y+2	; 0x02
    5352:	9b 81       	ldd	r25, Y+3	; 0x03
    5354:	fc 01       	movw	r30, r24
    5356:	82 8d       	ldd	r24, Z+26	; 0x1a
    5358:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    535c:	8a 81       	ldd	r24, Y+2	; 0x02
    535e:	9b 81       	ldd	r25, Y+3	; 0x03
    5360:	fc 01       	movw	r30, r24
    5362:	82 8d       	ldd	r24, Z+26	; 0x1a
    5364:	28 2f       	mov	r18, r24
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	4b e0       	ldi	r20, 0x0B	; 11
    536a:	42 9f       	mul	r20, r18
    536c:	c0 01       	movw	r24, r0
    536e:	43 9f       	mul	r20, r19
    5370:	90 0d       	add	r25, r0
    5372:	11 24       	eor	r1, r1
    5374:	85 5e       	subi	r24, 0xE5	; 229
    5376:	99 4e       	sbci	r25, 0xE9	; 233
    5378:	fc 01       	movw	r30, r24
    537a:	80 81       	ld	r24, Z
    537c:	91 81       	ldd	r25, Z+1	; 0x01
    537e:	98 87       	std	Y+8, r25	; 0x08
    5380:	8f 83       	std	Y+7, r24	; 0x07
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	9b 81       	ldd	r25, Y+3	; 0x03
    5386:	2f 81       	ldd	r18, Y+7	; 0x07
    5388:	38 85       	ldd	r19, Y+8	; 0x08
    538a:	fc 01       	movw	r30, r24
    538c:	37 83       	std	Z+7, r19	; 0x07
    538e:	26 83       	std	Z+6, r18	; 0x06
    5390:	8f 81       	ldd	r24, Y+7	; 0x07
    5392:	98 85       	ldd	r25, Y+8	; 0x08
    5394:	fc 01       	movw	r30, r24
    5396:	26 81       	ldd	r18, Z+6	; 0x06
    5398:	37 81       	ldd	r19, Z+7	; 0x07
    539a:	8a 81       	ldd	r24, Y+2	; 0x02
    539c:	9b 81       	ldd	r25, Y+3	; 0x03
    539e:	fc 01       	movw	r30, r24
    53a0:	31 87       	std	Z+9, r19	; 0x09
    53a2:	20 87       	std	Z+8, r18	; 0x08
    53a4:	8f 81       	ldd	r24, Y+7	; 0x07
    53a6:	98 85       	ldd	r25, Y+8	; 0x08
    53a8:	fc 01       	movw	r30, r24
    53aa:	86 81       	ldd	r24, Z+6	; 0x06
    53ac:	97 81       	ldd	r25, Z+7	; 0x07
    53ae:	2a 81       	ldd	r18, Y+2	; 0x02
    53b0:	3b 81       	ldd	r19, Y+3	; 0x03
    53b2:	2e 5f       	subi	r18, 0xFE	; 254
    53b4:	3f 4f       	sbci	r19, 0xFF	; 255
    53b6:	fc 01       	movw	r30, r24
    53b8:	35 83       	std	Z+5, r19	; 0x05
    53ba:	24 83       	std	Z+4, r18	; 0x04
    53bc:	8a 81       	ldd	r24, Y+2	; 0x02
    53be:	9b 81       	ldd	r25, Y+3	; 0x03
    53c0:	9c 01       	movw	r18, r24
    53c2:	2e 5f       	subi	r18, 0xFE	; 254
    53c4:	3f 4f       	sbci	r19, 0xFF	; 255
    53c6:	8f 81       	ldd	r24, Y+7	; 0x07
    53c8:	98 85       	ldd	r25, Y+8	; 0x08
    53ca:	fc 01       	movw	r30, r24
    53cc:	37 83       	std	Z+7, r19	; 0x07
    53ce:	26 83       	std	Z+6, r18	; 0x06
    53d0:	8a 81       	ldd	r24, Y+2	; 0x02
    53d2:	9b 81       	ldd	r25, Y+3	; 0x03
    53d4:	fc 01       	movw	r30, r24
    53d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    53d8:	28 2f       	mov	r18, r24
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	4b e0       	ldi	r20, 0x0B	; 11
    53de:	42 9f       	mul	r20, r18
    53e0:	c0 01       	movw	r24, r0
    53e2:	43 9f       	mul	r20, r19
    53e4:	90 0d       	add	r25, r0
    53e6:	11 24       	eor	r1, r1
    53e8:	9c 01       	movw	r18, r24
    53ea:	26 5e       	subi	r18, 0xE6	; 230
    53ec:	39 4e       	sbci	r19, 0xE9	; 233
    53ee:	8a 81       	ldd	r24, Y+2	; 0x02
    53f0:	9b 81       	ldd	r25, Y+3	; 0x03
    53f2:	fc 01       	movw	r30, r24
    53f4:	35 87       	std	Z+13, r19	; 0x0d
    53f6:	24 87       	std	Z+12, r18	; 0x0c
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	9b 81       	ldd	r25, Y+3	; 0x03
    53fc:	fc 01       	movw	r30, r24
    53fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    5400:	88 2f       	mov	r24, r24
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	4b e0       	ldi	r20, 0x0B	; 11
    5406:	48 9f       	mul	r20, r24
    5408:	90 01       	movw	r18, r0
    540a:	49 9f       	mul	r20, r25
    540c:	30 0d       	add	r19, r0
    540e:	11 24       	eor	r1, r1
    5410:	26 5e       	subi	r18, 0xE6	; 230
    5412:	39 4e       	sbci	r19, 0xE9	; 233
    5414:	f9 01       	movw	r30, r18
    5416:	20 81       	ld	r18, Z
    5418:	41 e0       	ldi	r20, 0x01	; 1
    541a:	42 0f       	add	r20, r18
    541c:	5b e0       	ldi	r21, 0x0B	; 11
    541e:	58 9f       	mul	r21, r24
    5420:	90 01       	movw	r18, r0
    5422:	59 9f       	mul	r21, r25
    5424:	30 0d       	add	r19, r0
    5426:	11 24       	eor	r1, r1
    5428:	c9 01       	movw	r24, r18
    542a:	86 5e       	subi	r24, 0xE6	; 230
    542c:	99 4e       	sbci	r25, 0xE9	; 233
    542e:	fc 01       	movw	r30, r24
    5430:	40 83       	st	Z, r20
    5432:	8a 81       	ldd	r24, Y+2	; 0x02
    5434:	9b 81       	ldd	r25, Y+3	; 0x03
    5436:	fc 01       	movw	r30, r24
    5438:	22 8d       	ldd	r18, Z+26	; 0x1a
    543a:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    543e:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    5442:	fc 01       	movw	r30, r24
    5444:	82 8d       	ldd	r24, Z+26	; 0x1a
    5446:	82 17       	cp	r24, r18
    5448:	10 f4       	brcc	.+4      	; 0x544e <xTaskGenericNotify+0x384>
    544a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    544e:	0f 90       	pop	r0
    5450:	0f be       	out	0x3f, r0	; 63
    5452:	89 81       	ldd	r24, Y+1	; 0x01
    5454:	62 96       	adiw	r28, 0x12	; 18
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	f8 94       	cli
    545a:	de bf       	out	0x3e, r29	; 62
    545c:	0f be       	out	0x3f, r0	; 63
    545e:	cd bf       	out	0x3d, r28	; 61
    5460:	df 91       	pop	r29
    5462:	cf 91       	pop	r28
    5464:	0f 91       	pop	r16
    5466:	ff 90       	pop	r15
    5468:	ef 90       	pop	r14
    546a:	08 95       	ret

0000546c <xTaskGenericNotifyFromISR>:
    546c:	cf 92       	push	r12
    546e:	df 92       	push	r13
    5470:	ef 92       	push	r14
    5472:	ff 92       	push	r15
    5474:	0f 93       	push	r16
    5476:	cf 93       	push	r28
    5478:	df 93       	push	r29
    547a:	cd b7       	in	r28, 0x3d	; 61
    547c:	de b7       	in	r29, 0x3e	; 62
    547e:	67 97       	sbiw	r28, 0x17	; 23
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	f8 94       	cli
    5484:	de bf       	out	0x3e, r29	; 62
    5486:	0f be       	out	0x3f, r0	; 63
    5488:	cd bf       	out	0x3d, r28	; 61
    548a:	9d 87       	std	Y+13, r25	; 0x0d
    548c:	8c 87       	std	Y+12, r24	; 0x0c
    548e:	6e 87       	std	Y+14, r22	; 0x0e
    5490:	2f 87       	std	Y+15, r18	; 0x0f
    5492:	38 8b       	std	Y+16, r19	; 0x10
    5494:	49 8b       	std	Y+17, r20	; 0x11
    5496:	5a 8b       	std	Y+18, r21	; 0x12
    5498:	0b 8b       	std	Y+19, r16	; 0x13
    549a:	fd 8a       	std	Y+21, r15	; 0x15
    549c:	ec 8a       	std	Y+20, r14	; 0x14
    549e:	df 8a       	std	Y+23, r13	; 0x17
    54a0:	ce 8a       	std	Y+22, r12	; 0x16
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	89 83       	std	Y+1, r24	; 0x01
    54a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    54a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    54aa:	9b 83       	std	Y+3, r25	; 0x03
    54ac:	8a 83       	std	Y+2, r24	; 0x02
    54ae:	1c 82       	std	Y+4, r1	; 0x04
    54b0:	8c 89       	ldd	r24, Y+20	; 0x14
    54b2:	9d 89       	ldd	r25, Y+21	; 0x15
    54b4:	89 2b       	or	r24, r25
    54b6:	c1 f0       	breq	.+48     	; 0x54e8 <xTaskGenericNotifyFromISR+0x7c>
    54b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ba:	88 2f       	mov	r24, r24
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	2a 81       	ldd	r18, Y+2	; 0x02
    54c0:	3b 81       	ldd	r19, Y+3	; 0x03
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	88 0f       	add	r24, r24
    54c8:	99 1f       	adc	r25, r25
    54ca:	82 0f       	add	r24, r18
    54cc:	93 1f       	adc	r25, r19
    54ce:	8f 96       	adiw	r24, 0x2f	; 47
    54d0:	fc 01       	movw	r30, r24
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	a2 81       	ldd	r26, Z+2	; 0x02
    54d8:	b3 81       	ldd	r27, Z+3	; 0x03
    54da:	2c 89       	ldd	r18, Y+20	; 0x14
    54dc:	3d 89       	ldd	r19, Y+21	; 0x15
    54de:	f9 01       	movw	r30, r18
    54e0:	80 83       	st	Z, r24
    54e2:	91 83       	std	Z+1, r25	; 0x01
    54e4:	a2 83       	std	Z+2, r26	; 0x02
    54e6:	b3 83       	std	Z+3, r27	; 0x03
    54e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ea:	88 2f       	mov	r24, r24
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	2a 81       	ldd	r18, Y+2	; 0x02
    54f0:	3b 81       	ldd	r19, Y+3	; 0x03
    54f2:	82 0f       	add	r24, r18
    54f4:	93 1f       	adc	r25, r19
    54f6:	c3 96       	adiw	r24, 0x33	; 51
    54f8:	fc 01       	movw	r30, r24
    54fa:	80 81       	ld	r24, Z
    54fc:	8d 83       	std	Y+5, r24	; 0x05
    54fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	2a 81       	ldd	r18, Y+2	; 0x02
    5506:	3b 81       	ldd	r19, Y+3	; 0x03
    5508:	82 0f       	add	r24, r18
    550a:	93 1f       	adc	r25, r19
    550c:	c3 96       	adiw	r24, 0x33	; 51
    550e:	22 e0       	ldi	r18, 0x02	; 2
    5510:	fc 01       	movw	r30, r24
    5512:	20 83       	st	Z, r18
    5514:	8b 89       	ldd	r24, Y+19	; 0x13
    5516:	88 2f       	mov	r24, r24
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	82 30       	cpi	r24, 0x02	; 2
    551c:	91 05       	cpc	r25, r1
    551e:	09 f4       	brne	.+2      	; 0x5522 <xTaskGenericNotifyFromISR+0xb6>
    5520:	3e c0       	rjmp	.+124    	; 0x559e <xTaskGenericNotifyFromISR+0x132>
    5522:	83 30       	cpi	r24, 0x03	; 3
    5524:	91 05       	cpc	r25, r1
    5526:	34 f4       	brge	.+12     	; 0x5534 <xTaskGenericNotifyFromISR+0xc8>
    5528:	00 97       	sbiw	r24, 0x00	; 0
    552a:	09 f4       	brne	.+2      	; 0x552e <xTaskGenericNotifyFromISR+0xc2>
    552c:	92 c0       	rjmp	.+292    	; 0x5652 <xTaskGenericNotifyFromISR+0x1e6>
    552e:	01 97       	sbiw	r24, 0x01	; 1
    5530:	49 f0       	breq	.+18     	; 0x5544 <xTaskGenericNotifyFromISR+0xd8>
    5532:	90 c0       	rjmp	.+288    	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    5534:	83 30       	cpi	r24, 0x03	; 3
    5536:	91 05       	cpc	r25, r1
    5538:	09 f4       	brne	.+2      	; 0x553c <xTaskGenericNotifyFromISR+0xd0>
    553a:	56 c0       	rjmp	.+172    	; 0x55e8 <xTaskGenericNotifyFromISR+0x17c>
    553c:	04 97       	sbiw	r24, 0x04	; 4
    553e:	09 f4       	brne	.+2      	; 0x5542 <xTaskGenericNotifyFromISR+0xd6>
    5540:	6b c0       	rjmp	.+214    	; 0x5618 <xTaskGenericNotifyFromISR+0x1ac>
    5542:	88 c0       	rjmp	.+272    	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    5544:	8e 85       	ldd	r24, Y+14	; 0x0e
    5546:	68 2f       	mov	r22, r24
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	8e 85       	ldd	r24, Y+14	; 0x0e
    554c:	88 2f       	mov	r24, r24
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	2a 81       	ldd	r18, Y+2	; 0x02
    5552:	3b 81       	ldd	r19, Y+3	; 0x03
    5554:	88 0f       	add	r24, r24
    5556:	99 1f       	adc	r25, r25
    5558:	88 0f       	add	r24, r24
    555a:	99 1f       	adc	r25, r25
    555c:	82 0f       	add	r24, r18
    555e:	93 1f       	adc	r25, r19
    5560:	8f 96       	adiw	r24, 0x2f	; 47
    5562:	fc 01       	movw	r30, r24
    5564:	20 81       	ld	r18, Z
    5566:	31 81       	ldd	r19, Z+1	; 0x01
    5568:	42 81       	ldd	r20, Z+2	; 0x02
    556a:	53 81       	ldd	r21, Z+3	; 0x03
    556c:	8f 85       	ldd	r24, Y+15	; 0x0f
    556e:	98 89       	ldd	r25, Y+16	; 0x10
    5570:	a9 89       	ldd	r26, Y+17	; 0x11
    5572:	ba 89       	ldd	r27, Y+18	; 0x12
    5574:	82 2b       	or	r24, r18
    5576:	93 2b       	or	r25, r19
    5578:	a4 2b       	or	r26, r20
    557a:	b5 2b       	or	r27, r21
    557c:	4a 81       	ldd	r20, Y+2	; 0x02
    557e:	5b 81       	ldd	r21, Y+3	; 0x03
    5580:	9b 01       	movw	r18, r22
    5582:	22 0f       	add	r18, r18
    5584:	33 1f       	adc	r19, r19
    5586:	22 0f       	add	r18, r18
    5588:	33 1f       	adc	r19, r19
    558a:	24 0f       	add	r18, r20
    558c:	35 1f       	adc	r19, r21
    558e:	21 5d       	subi	r18, 0xD1	; 209
    5590:	3f 4f       	sbci	r19, 0xFF	; 255
    5592:	f9 01       	movw	r30, r18
    5594:	80 83       	st	Z, r24
    5596:	91 83       	std	Z+1, r25	; 0x01
    5598:	a2 83       	std	Z+2, r26	; 0x02
    559a:	b3 83       	std	Z+3, r27	; 0x03
    559c:	5b c0       	rjmp	.+182    	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    559e:	8e 85       	ldd	r24, Y+14	; 0x0e
    55a0:	28 2f       	mov	r18, r24
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	4a 81       	ldd	r20, Y+2	; 0x02
    55a6:	5b 81       	ldd	r21, Y+3	; 0x03
    55a8:	c9 01       	movw	r24, r18
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	88 0f       	add	r24, r24
    55b0:	99 1f       	adc	r25, r25
    55b2:	84 0f       	add	r24, r20
    55b4:	95 1f       	adc	r25, r21
    55b6:	8f 96       	adiw	r24, 0x2f	; 47
    55b8:	fc 01       	movw	r30, r24
    55ba:	80 81       	ld	r24, Z
    55bc:	91 81       	ldd	r25, Z+1	; 0x01
    55be:	a2 81       	ldd	r26, Z+2	; 0x02
    55c0:	b3 81       	ldd	r27, Z+3	; 0x03
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	a1 1d       	adc	r26, r1
    55c6:	b1 1d       	adc	r27, r1
    55c8:	4a 81       	ldd	r20, Y+2	; 0x02
    55ca:	5b 81       	ldd	r21, Y+3	; 0x03
    55cc:	22 0f       	add	r18, r18
    55ce:	33 1f       	adc	r19, r19
    55d0:	22 0f       	add	r18, r18
    55d2:	33 1f       	adc	r19, r19
    55d4:	24 0f       	add	r18, r20
    55d6:	35 1f       	adc	r19, r21
    55d8:	21 5d       	subi	r18, 0xD1	; 209
    55da:	3f 4f       	sbci	r19, 0xFF	; 255
    55dc:	f9 01       	movw	r30, r18
    55de:	80 83       	st	Z, r24
    55e0:	91 83       	std	Z+1, r25	; 0x01
    55e2:	a2 83       	std	Z+2, r26	; 0x02
    55e4:	b3 83       	std	Z+3, r27	; 0x03
    55e6:	36 c0       	rjmp	.+108    	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    55e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    55ea:	88 2f       	mov	r24, r24
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	2a 81       	ldd	r18, Y+2	; 0x02
    55f0:	3b 81       	ldd	r19, Y+3	; 0x03
    55f2:	88 0f       	add	r24, r24
    55f4:	99 1f       	adc	r25, r25
    55f6:	88 0f       	add	r24, r24
    55f8:	99 1f       	adc	r25, r25
    55fa:	82 0f       	add	r24, r18
    55fc:	93 1f       	adc	r25, r19
    55fe:	9c 01       	movw	r18, r24
    5600:	21 5d       	subi	r18, 0xD1	; 209
    5602:	3f 4f       	sbci	r19, 0xFF	; 255
    5604:	8f 85       	ldd	r24, Y+15	; 0x0f
    5606:	98 89       	ldd	r25, Y+16	; 0x10
    5608:	a9 89       	ldd	r26, Y+17	; 0x11
    560a:	ba 89       	ldd	r27, Y+18	; 0x12
    560c:	f9 01       	movw	r30, r18
    560e:	80 83       	st	Z, r24
    5610:	91 83       	std	Z+1, r25	; 0x01
    5612:	a2 83       	std	Z+2, r26	; 0x02
    5614:	b3 83       	std	Z+3, r27	; 0x03
    5616:	1e c0       	rjmp	.+60     	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    5618:	8d 81       	ldd	r24, Y+5	; 0x05
    561a:	82 30       	cpi	r24, 0x02	; 2
    561c:	c1 f0       	breq	.+48     	; 0x564e <xTaskGenericNotifyFromISR+0x1e2>
    561e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5620:	88 2f       	mov	r24, r24
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	2a 81       	ldd	r18, Y+2	; 0x02
    5626:	3b 81       	ldd	r19, Y+3	; 0x03
    5628:	88 0f       	add	r24, r24
    562a:	99 1f       	adc	r25, r25
    562c:	88 0f       	add	r24, r24
    562e:	99 1f       	adc	r25, r25
    5630:	82 0f       	add	r24, r18
    5632:	93 1f       	adc	r25, r19
    5634:	9c 01       	movw	r18, r24
    5636:	21 5d       	subi	r18, 0xD1	; 209
    5638:	3f 4f       	sbci	r19, 0xFF	; 255
    563a:	8f 85       	ldd	r24, Y+15	; 0x0f
    563c:	98 89       	ldd	r25, Y+16	; 0x10
    563e:	a9 89       	ldd	r26, Y+17	; 0x11
    5640:	ba 89       	ldd	r27, Y+18	; 0x12
    5642:	f9 01       	movw	r30, r18
    5644:	80 83       	st	Z, r24
    5646:	91 83       	std	Z+1, r25	; 0x01
    5648:	a2 83       	std	Z+2, r26	; 0x02
    564a:	b3 83       	std	Z+3, r27	; 0x03
    564c:	03 c0       	rjmp	.+6      	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    564e:	19 82       	std	Y+1, r1	; 0x01
    5650:	01 c0       	rjmp	.+2      	; 0x5654 <xTaskGenericNotifyFromISR+0x1e8>
    5652:	00 00       	nop
    5654:	8d 81       	ldd	r24, Y+5	; 0x05
    5656:	81 30       	cpi	r24, 0x01	; 1
    5658:	09 f0       	breq	.+2      	; 0x565c <xTaskGenericNotifyFromISR+0x1f0>
    565a:	15 c1       	rjmp	.+554    	; 0x5886 <xTaskGenericNotifyFromISR+0x41a>
    565c:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxSchedulerSuspended>
    5660:	88 23       	and	r24, r24
    5662:	09 f0       	breq	.+2      	; 0x5666 <xTaskGenericNotifyFromISR+0x1fa>
    5664:	bf c0       	rjmp	.+382    	; 0x57e4 <xTaskGenericNotifyFromISR+0x378>
    5666:	8a 81       	ldd	r24, Y+2	; 0x02
    5668:	9b 81       	ldd	r25, Y+3	; 0x03
    566a:	fc 01       	movw	r30, r24
    566c:	84 85       	ldd	r24, Z+12	; 0x0c
    566e:	95 85       	ldd	r25, Z+13	; 0x0d
    5670:	9f 83       	std	Y+7, r25	; 0x07
    5672:	8e 83       	std	Y+6, r24	; 0x06
    5674:	8a 81       	ldd	r24, Y+2	; 0x02
    5676:	9b 81       	ldd	r25, Y+3	; 0x03
    5678:	fc 01       	movw	r30, r24
    567a:	86 81       	ldd	r24, Z+6	; 0x06
    567c:	97 81       	ldd	r25, Z+7	; 0x07
    567e:	2a 81       	ldd	r18, Y+2	; 0x02
    5680:	3b 81       	ldd	r19, Y+3	; 0x03
    5682:	f9 01       	movw	r30, r18
    5684:	20 85       	ldd	r18, Z+8	; 0x08
    5686:	31 85       	ldd	r19, Z+9	; 0x09
    5688:	fc 01       	movw	r30, r24
    568a:	37 83       	std	Z+7, r19	; 0x07
    568c:	26 83       	std	Z+6, r18	; 0x06
    568e:	8a 81       	ldd	r24, Y+2	; 0x02
    5690:	9b 81       	ldd	r25, Y+3	; 0x03
    5692:	fc 01       	movw	r30, r24
    5694:	80 85       	ldd	r24, Z+8	; 0x08
    5696:	91 85       	ldd	r25, Z+9	; 0x09
    5698:	2a 81       	ldd	r18, Y+2	; 0x02
    569a:	3b 81       	ldd	r19, Y+3	; 0x03
    569c:	f9 01       	movw	r30, r18
    569e:	26 81       	ldd	r18, Z+6	; 0x06
    56a0:	37 81       	ldd	r19, Z+7	; 0x07
    56a2:	fc 01       	movw	r30, r24
    56a4:	35 83       	std	Z+5, r19	; 0x05
    56a6:	24 83       	std	Z+4, r18	; 0x04
    56a8:	8e 81       	ldd	r24, Y+6	; 0x06
    56aa:	9f 81       	ldd	r25, Y+7	; 0x07
    56ac:	fc 01       	movw	r30, r24
    56ae:	21 81       	ldd	r18, Z+1	; 0x01
    56b0:	32 81       	ldd	r19, Z+2	; 0x02
    56b2:	8a 81       	ldd	r24, Y+2	; 0x02
    56b4:	9b 81       	ldd	r25, Y+3	; 0x03
    56b6:	02 96       	adiw	r24, 0x02	; 2
    56b8:	28 17       	cp	r18, r24
    56ba:	39 07       	cpc	r19, r25
    56bc:	51 f4       	brne	.+20     	; 0x56d2 <xTaskGenericNotifyFromISR+0x266>
    56be:	8a 81       	ldd	r24, Y+2	; 0x02
    56c0:	9b 81       	ldd	r25, Y+3	; 0x03
    56c2:	fc 01       	movw	r30, r24
    56c4:	20 85       	ldd	r18, Z+8	; 0x08
    56c6:	31 85       	ldd	r19, Z+9	; 0x09
    56c8:	8e 81       	ldd	r24, Y+6	; 0x06
    56ca:	9f 81       	ldd	r25, Y+7	; 0x07
    56cc:	fc 01       	movw	r30, r24
    56ce:	32 83       	std	Z+2, r19	; 0x02
    56d0:	21 83       	std	Z+1, r18	; 0x01
    56d2:	8a 81       	ldd	r24, Y+2	; 0x02
    56d4:	9b 81       	ldd	r25, Y+3	; 0x03
    56d6:	fc 01       	movw	r30, r24
    56d8:	15 86       	std	Z+13, r1	; 0x0d
    56da:	14 86       	std	Z+12, r1	; 0x0c
    56dc:	8e 81       	ldd	r24, Y+6	; 0x06
    56de:	9f 81       	ldd	r25, Y+7	; 0x07
    56e0:	fc 01       	movw	r30, r24
    56e2:	80 81       	ld	r24, Z
    56e4:	2f ef       	ldi	r18, 0xFF	; 255
    56e6:	28 0f       	add	r18, r24
    56e8:	8e 81       	ldd	r24, Y+6	; 0x06
    56ea:	9f 81       	ldd	r25, Y+7	; 0x07
    56ec:	fc 01       	movw	r30, r24
    56ee:	20 83       	st	Z, r18
    56f0:	8a 81       	ldd	r24, Y+2	; 0x02
    56f2:	9b 81       	ldd	r25, Y+3	; 0x03
    56f4:	fc 01       	movw	r30, r24
    56f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    56f8:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <uxTopReadyPriority>
    56fc:	89 17       	cp	r24, r25
    56fe:	30 f4       	brcc	.+12     	; 0x570c <xTaskGenericNotifyFromISR+0x2a0>
    5700:	8a 81       	ldd	r24, Y+2	; 0x02
    5702:	9b 81       	ldd	r25, Y+3	; 0x03
    5704:	fc 01       	movw	r30, r24
    5706:	82 8d       	ldd	r24, Z+26	; 0x1a
    5708:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <uxTopReadyPriority>
    570c:	8a 81       	ldd	r24, Y+2	; 0x02
    570e:	9b 81       	ldd	r25, Y+3	; 0x03
    5710:	fc 01       	movw	r30, r24
    5712:	82 8d       	ldd	r24, Z+26	; 0x1a
    5714:	28 2f       	mov	r18, r24
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	4b e0       	ldi	r20, 0x0B	; 11
    571a:	42 9f       	mul	r20, r18
    571c:	c0 01       	movw	r24, r0
    571e:	43 9f       	mul	r20, r19
    5720:	90 0d       	add	r25, r0
    5722:	11 24       	eor	r1, r1
    5724:	85 5e       	subi	r24, 0xE5	; 229
    5726:	99 4e       	sbci	r25, 0xE9	; 233
    5728:	fc 01       	movw	r30, r24
    572a:	80 81       	ld	r24, Z
    572c:	91 81       	ldd	r25, Z+1	; 0x01
    572e:	99 87       	std	Y+9, r25	; 0x09
    5730:	88 87       	std	Y+8, r24	; 0x08
    5732:	8a 81       	ldd	r24, Y+2	; 0x02
    5734:	9b 81       	ldd	r25, Y+3	; 0x03
    5736:	28 85       	ldd	r18, Y+8	; 0x08
    5738:	39 85       	ldd	r19, Y+9	; 0x09
    573a:	fc 01       	movw	r30, r24
    573c:	37 83       	std	Z+7, r19	; 0x07
    573e:	26 83       	std	Z+6, r18	; 0x06
    5740:	88 85       	ldd	r24, Y+8	; 0x08
    5742:	99 85       	ldd	r25, Y+9	; 0x09
    5744:	fc 01       	movw	r30, r24
    5746:	26 81       	ldd	r18, Z+6	; 0x06
    5748:	37 81       	ldd	r19, Z+7	; 0x07
    574a:	8a 81       	ldd	r24, Y+2	; 0x02
    574c:	9b 81       	ldd	r25, Y+3	; 0x03
    574e:	fc 01       	movw	r30, r24
    5750:	31 87       	std	Z+9, r19	; 0x09
    5752:	20 87       	std	Z+8, r18	; 0x08
    5754:	88 85       	ldd	r24, Y+8	; 0x08
    5756:	99 85       	ldd	r25, Y+9	; 0x09
    5758:	fc 01       	movw	r30, r24
    575a:	86 81       	ldd	r24, Z+6	; 0x06
    575c:	97 81       	ldd	r25, Z+7	; 0x07
    575e:	2a 81       	ldd	r18, Y+2	; 0x02
    5760:	3b 81       	ldd	r19, Y+3	; 0x03
    5762:	2e 5f       	subi	r18, 0xFE	; 254
    5764:	3f 4f       	sbci	r19, 0xFF	; 255
    5766:	fc 01       	movw	r30, r24
    5768:	35 83       	std	Z+5, r19	; 0x05
    576a:	24 83       	std	Z+4, r18	; 0x04
    576c:	8a 81       	ldd	r24, Y+2	; 0x02
    576e:	9b 81       	ldd	r25, Y+3	; 0x03
    5770:	9c 01       	movw	r18, r24
    5772:	2e 5f       	subi	r18, 0xFE	; 254
    5774:	3f 4f       	sbci	r19, 0xFF	; 255
    5776:	88 85       	ldd	r24, Y+8	; 0x08
    5778:	99 85       	ldd	r25, Y+9	; 0x09
    577a:	fc 01       	movw	r30, r24
    577c:	37 83       	std	Z+7, r19	; 0x07
    577e:	26 83       	std	Z+6, r18	; 0x06
    5780:	8a 81       	ldd	r24, Y+2	; 0x02
    5782:	9b 81       	ldd	r25, Y+3	; 0x03
    5784:	fc 01       	movw	r30, r24
    5786:	82 8d       	ldd	r24, Z+26	; 0x1a
    5788:	28 2f       	mov	r18, r24
    578a:	30 e0       	ldi	r19, 0x00	; 0
    578c:	4b e0       	ldi	r20, 0x0B	; 11
    578e:	42 9f       	mul	r20, r18
    5790:	c0 01       	movw	r24, r0
    5792:	43 9f       	mul	r20, r19
    5794:	90 0d       	add	r25, r0
    5796:	11 24       	eor	r1, r1
    5798:	9c 01       	movw	r18, r24
    579a:	26 5e       	subi	r18, 0xE6	; 230
    579c:	39 4e       	sbci	r19, 0xE9	; 233
    579e:	8a 81       	ldd	r24, Y+2	; 0x02
    57a0:	9b 81       	ldd	r25, Y+3	; 0x03
    57a2:	fc 01       	movw	r30, r24
    57a4:	35 87       	std	Z+13, r19	; 0x0d
    57a6:	24 87       	std	Z+12, r18	; 0x0c
    57a8:	8a 81       	ldd	r24, Y+2	; 0x02
    57aa:	9b 81       	ldd	r25, Y+3	; 0x03
    57ac:	fc 01       	movw	r30, r24
    57ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    57b0:	88 2f       	mov	r24, r24
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	4b e0       	ldi	r20, 0x0B	; 11
    57b6:	48 9f       	mul	r20, r24
    57b8:	90 01       	movw	r18, r0
    57ba:	49 9f       	mul	r20, r25
    57bc:	30 0d       	add	r19, r0
    57be:	11 24       	eor	r1, r1
    57c0:	26 5e       	subi	r18, 0xE6	; 230
    57c2:	39 4e       	sbci	r19, 0xE9	; 233
    57c4:	f9 01       	movw	r30, r18
    57c6:	20 81       	ld	r18, Z
    57c8:	41 e0       	ldi	r20, 0x01	; 1
    57ca:	42 0f       	add	r20, r18
    57cc:	5b e0       	ldi	r21, 0x0B	; 11
    57ce:	58 9f       	mul	r21, r24
    57d0:	90 01       	movw	r18, r0
    57d2:	59 9f       	mul	r21, r25
    57d4:	30 0d       	add	r19, r0
    57d6:	11 24       	eor	r1, r1
    57d8:	c9 01       	movw	r24, r18
    57da:	86 5e       	subi	r24, 0xE6	; 230
    57dc:	99 4e       	sbci	r25, 0xE9	; 233
    57de:	fc 01       	movw	r30, r24
    57e0:	40 83       	st	Z, r20
    57e2:	39 c0       	rjmp	.+114    	; 0x5856 <xTaskGenericNotifyFromISR+0x3ea>
    57e4:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <xPendingReadyList+0x1>
    57e8:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <xPendingReadyList+0x2>
    57ec:	9b 87       	std	Y+11, r25	; 0x0b
    57ee:	8a 87       	std	Y+10, r24	; 0x0a
    57f0:	8a 81       	ldd	r24, Y+2	; 0x02
    57f2:	9b 81       	ldd	r25, Y+3	; 0x03
    57f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    57f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    57f8:	fc 01       	movw	r30, r24
    57fa:	33 8b       	std	Z+19, r19	; 0x13
    57fc:	22 8b       	std	Z+18, r18	; 0x12
    57fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5800:	9b 85       	ldd	r25, Y+11	; 0x0b
    5802:	fc 01       	movw	r30, r24
    5804:	26 81       	ldd	r18, Z+6	; 0x06
    5806:	37 81       	ldd	r19, Z+7	; 0x07
    5808:	8a 81       	ldd	r24, Y+2	; 0x02
    580a:	9b 81       	ldd	r25, Y+3	; 0x03
    580c:	fc 01       	movw	r30, r24
    580e:	35 8b       	std	Z+21, r19	; 0x15
    5810:	24 8b       	std	Z+20, r18	; 0x14
    5812:	8a 85       	ldd	r24, Y+10	; 0x0a
    5814:	9b 85       	ldd	r25, Y+11	; 0x0b
    5816:	fc 01       	movw	r30, r24
    5818:	86 81       	ldd	r24, Z+6	; 0x06
    581a:	97 81       	ldd	r25, Z+7	; 0x07
    581c:	2a 81       	ldd	r18, Y+2	; 0x02
    581e:	3b 81       	ldd	r19, Y+3	; 0x03
    5820:	22 5f       	subi	r18, 0xF2	; 242
    5822:	3f 4f       	sbci	r19, 0xFF	; 255
    5824:	fc 01       	movw	r30, r24
    5826:	35 83       	std	Z+5, r19	; 0x05
    5828:	24 83       	std	Z+4, r18	; 0x04
    582a:	8a 81       	ldd	r24, Y+2	; 0x02
    582c:	9b 81       	ldd	r25, Y+3	; 0x03
    582e:	9c 01       	movw	r18, r24
    5830:	22 5f       	subi	r18, 0xF2	; 242
    5832:	3f 4f       	sbci	r19, 0xFF	; 255
    5834:	8a 85       	ldd	r24, Y+10	; 0x0a
    5836:	9b 85       	ldd	r25, Y+11	; 0x0b
    5838:	fc 01       	movw	r30, r24
    583a:	37 83       	std	Z+7, r19	; 0x07
    583c:	26 83       	std	Z+6, r18	; 0x06
    583e:	8a 81       	ldd	r24, Y+2	; 0x02
    5840:	9b 81       	ldd	r25, Y+3	; 0x03
    5842:	22 ea       	ldi	r18, 0xA2	; 162
    5844:	36 e1       	ldi	r19, 0x16	; 22
    5846:	fc 01       	movw	r30, r24
    5848:	31 8f       	std	Z+25, r19	; 0x19
    584a:	20 8f       	std	Z+24, r18	; 0x18
    584c:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xPendingReadyList>
    5850:	8f 5f       	subi	r24, 0xFF	; 255
    5852:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <xPendingReadyList>
    5856:	8a 81       	ldd	r24, Y+2	; 0x02
    5858:	9b 81       	ldd	r25, Y+3	; 0x03
    585a:	fc 01       	movw	r30, r24
    585c:	22 8d       	ldd	r18, Z+26	; 0x1a
    585e:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    5862:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    5866:	fc 01       	movw	r30, r24
    5868:	82 8d       	ldd	r24, Z+26	; 0x1a
    586a:	82 17       	cp	r24, r18
    586c:	60 f4       	brcc	.+24     	; 0x5886 <xTaskGenericNotifyFromISR+0x41a>
    586e:	8e 89       	ldd	r24, Y+22	; 0x16
    5870:	9f 89       	ldd	r25, Y+23	; 0x17
    5872:	89 2b       	or	r24, r25
    5874:	29 f0       	breq	.+10     	; 0x5880 <xTaskGenericNotifyFromISR+0x414>
    5876:	8e 89       	ldd	r24, Y+22	; 0x16
    5878:	9f 89       	ldd	r25, Y+23	; 0x17
    587a:	21 e0       	ldi	r18, 0x01	; 1
    587c:	fc 01       	movw	r30, r24
    587e:	20 83       	st	Z, r18
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	80 93 c4 16 	sts	0x16C4, r24	; 0x8016c4 <xYieldPending>
    5886:	89 81       	ldd	r24, Y+1	; 0x01
    5888:	67 96       	adiw	r28, 0x17	; 23
    588a:	0f b6       	in	r0, 0x3f	; 63
    588c:	f8 94       	cli
    588e:	de bf       	out	0x3e, r29	; 62
    5890:	0f be       	out	0x3f, r0	; 63
    5892:	cd bf       	out	0x3d, r28	; 61
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	0f 91       	pop	r16
    589a:	ff 90       	pop	r15
    589c:	ef 90       	pop	r14
    589e:	df 90       	pop	r13
    58a0:	cf 90       	pop	r12
    58a2:	08 95       	ret

000058a4 <xTaskGenericNotifyStateClear>:
    58a4:	cf 93       	push	r28
    58a6:	df 93       	push	r29
    58a8:	00 d0       	rcall	.+0      	; 0x58aa <xTaskGenericNotifyStateClear+0x6>
    58aa:	00 d0       	rcall	.+0      	; 0x58ac <xTaskGenericNotifyStateClear+0x8>
    58ac:	cd b7       	in	r28, 0x3d	; 61
    58ae:	de b7       	in	r29, 0x3e	; 62
    58b0:	9d 83       	std	Y+5, r25	; 0x05
    58b2:	8c 83       	std	Y+4, r24	; 0x04
    58b4:	6e 83       	std	Y+6, r22	; 0x06
    58b6:	8c 81       	ldd	r24, Y+4	; 0x04
    58b8:	9d 81       	ldd	r25, Y+5	; 0x05
    58ba:	89 2b       	or	r24, r25
    58bc:	29 f4       	brne	.+10     	; 0x58c8 <xTaskGenericNotifyStateClear+0x24>
    58be:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    58c2:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    58c6:	02 c0       	rjmp	.+4      	; 0x58cc <xTaskGenericNotifyStateClear+0x28>
    58c8:	8c 81       	ldd	r24, Y+4	; 0x04
    58ca:	9d 81       	ldd	r25, Y+5	; 0x05
    58cc:	9b 83       	std	Y+3, r25	; 0x03
    58ce:	8a 83       	std	Y+2, r24	; 0x02
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	0f 92       	push	r0
    58d6:	8e 81       	ldd	r24, Y+6	; 0x06
    58d8:	88 2f       	mov	r24, r24
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	2a 81       	ldd	r18, Y+2	; 0x02
    58de:	3b 81       	ldd	r19, Y+3	; 0x03
    58e0:	82 0f       	add	r24, r18
    58e2:	93 1f       	adc	r25, r19
    58e4:	c3 96       	adiw	r24, 0x33	; 51
    58e6:	fc 01       	movw	r30, r24
    58e8:	80 81       	ld	r24, Z
    58ea:	82 30       	cpi	r24, 0x02	; 2
    58ec:	69 f4       	brne	.+26     	; 0x5908 <xTaskGenericNotifyStateClear+0x64>
    58ee:	8e 81       	ldd	r24, Y+6	; 0x06
    58f0:	88 2f       	mov	r24, r24
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	2a 81       	ldd	r18, Y+2	; 0x02
    58f6:	3b 81       	ldd	r19, Y+3	; 0x03
    58f8:	82 0f       	add	r24, r18
    58fa:	93 1f       	adc	r25, r19
    58fc:	c3 96       	adiw	r24, 0x33	; 51
    58fe:	fc 01       	movw	r30, r24
    5900:	10 82       	st	Z, r1
    5902:	81 e0       	ldi	r24, 0x01	; 1
    5904:	89 83       	std	Y+1, r24	; 0x01
    5906:	01 c0       	rjmp	.+2      	; 0x590a <xTaskGenericNotifyStateClear+0x66>
    5908:	19 82       	std	Y+1, r1	; 0x01
    590a:	0f 90       	pop	r0
    590c:	0f be       	out	0x3f, r0	; 63
    590e:	89 81       	ldd	r24, Y+1	; 0x01
    5910:	26 96       	adiw	r28, 0x06	; 6
    5912:	0f b6       	in	r0, 0x3f	; 63
    5914:	f8 94       	cli
    5916:	de bf       	out	0x3e, r29	; 62
    5918:	0f be       	out	0x3f, r0	; 63
    591a:	cd bf       	out	0x3d, r28	; 61
    591c:	df 91       	pop	r29
    591e:	cf 91       	pop	r28
    5920:	08 95       	ret

00005922 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    5922:	cf 93       	push	r28
    5924:	df 93       	push	r29
    5926:	cd b7       	in	r28, 0x3d	; 61
    5928:	de b7       	in	r29, 0x3e	; 62
    592a:	2d 97       	sbiw	r28, 0x0d	; 13
    592c:	0f b6       	in	r0, 0x3f	; 63
    592e:	f8 94       	cli
    5930:	de bf       	out	0x3e, r29	; 62
    5932:	0f be       	out	0x3f, r0	; 63
    5934:	cd bf       	out	0x3d, r28	; 61
    5936:	69 87       	std	Y+9, r22	; 0x09
    5938:	7a 87       	std	Y+10, r23	; 0x0a
    593a:	8b 87       	std	Y+11, r24	; 0x0b
    593c:	9c 87       	std	Y+12, r25	; 0x0c
    593e:	4d 87       	std	Y+13, r20	; 0x0d
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    5940:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xTickCount>
    5944:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <xTickCount+0x1>
    5948:	a0 91 bc 16 	lds	r26, 0x16BC	; 0x8016bc <xTickCount+0x2>
    594c:	b0 91 bd 16 	lds	r27, 0x16BD	; 0x8016bd <xTickCount+0x3>
    5950:	89 83       	std	Y+1, r24	; 0x01
    5952:	9a 83       	std	Y+2, r25	; 0x02
    5954:	ab 83       	std	Y+3, r26	; 0x03
    5956:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5958:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    595c:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    5960:	02 96       	adiw	r24, 0x02	; 2
    5962:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the kernel
             * will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    5966:	29 81       	ldd	r18, Y+1	; 0x01
    5968:	3a 81       	ldd	r19, Y+2	; 0x02
    596a:	4b 81       	ldd	r20, Y+3	; 0x03
    596c:	5c 81       	ldd	r21, Y+4	; 0x04
    596e:	89 85       	ldd	r24, Y+9	; 0x09
    5970:	9a 85       	ldd	r25, Y+10	; 0x0a
    5972:	ab 85       	ldd	r26, Y+11	; 0x0b
    5974:	bc 85       	ldd	r27, Y+12	; 0x0c
    5976:	82 0f       	add	r24, r18
    5978:	93 1f       	adc	r25, r19
    597a:	a4 1f       	adc	r26, r20
    597c:	b5 1f       	adc	r27, r21
    597e:	8d 83       	std	Y+5, r24	; 0x05
    5980:	9e 83       	std	Y+6, r25	; 0x06
    5982:	af 83       	std	Y+7, r26	; 0x07
    5984:	b8 87       	std	Y+8, r27	; 0x08

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5986:	20 91 18 16 	lds	r18, 0x1618	; 0x801618 <pxCurrentTCB>
    598a:	30 91 19 16 	lds	r19, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    598e:	8d 81       	ldd	r24, Y+5	; 0x05
    5990:	9e 81       	ldd	r25, Y+6	; 0x06
    5992:	af 81       	ldd	r26, Y+7	; 0x07
    5994:	b8 85       	ldd	r27, Y+8	; 0x08
    5996:	f9 01       	movw	r30, r18
    5998:	82 83       	std	Z+2, r24	; 0x02
    599a:	93 83       	std	Z+3, r25	; 0x03
    599c:	a4 83       	std	Z+4, r26	; 0x04
    599e:	b5 83       	std	Z+5, r27	; 0x05

            if( xTimeToWake < xConstTickCount )
    59a0:	2d 81       	ldd	r18, Y+5	; 0x05
    59a2:	3e 81       	ldd	r19, Y+6	; 0x06
    59a4:	4f 81       	ldd	r20, Y+7	; 0x07
    59a6:	58 85       	ldd	r21, Y+8	; 0x08
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	9a 81       	ldd	r25, Y+2	; 0x02
    59ac:	ab 81       	ldd	r26, Y+3	; 0x03
    59ae:	bc 81       	ldd	r27, Y+4	; 0x04
    59b0:	28 17       	cp	r18, r24
    59b2:	39 07       	cpc	r19, r25
    59b4:	4a 07       	cpc	r20, r26
    59b6:	5b 07       	cpc	r21, r27
    59b8:	78 f4       	brcc	.+30     	; 0x59d8 <prvAddCurrentTaskToDelayedList+0xb6>
            {
                /* Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    59ba:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    59be:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    59c2:	9c 01       	movw	r18, r24
    59c4:	2e 5f       	subi	r18, 0xFE	; 254
    59c6:	3f 4f       	sbci	r19, 0xFF	; 255
    59c8:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <pxOverflowDelayedTaskList>
    59cc:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <pxOverflowDelayedTaskList+0x1>
    59d0:	b9 01       	movw	r22, r18
    59d2:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    59d6:	2b c0       	rjmp	.+86     	; 0x5a2e <prvAddCurrentTaskToDelayedList+0x10c>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
            }
            else
            {
                /* The wake time has not overflowed, so the current block list is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    59d8:	80 91 18 16 	lds	r24, 0x1618	; 0x801618 <pxCurrentTCB>
    59dc:	90 91 19 16 	lds	r25, 0x1619	; 0x801619 <pxCurrentTCB+0x1>
    59e0:	9c 01       	movw	r18, r24
    59e2:	2e 5f       	subi	r18, 0xFE	; 254
    59e4:	3f 4f       	sbci	r19, 0xFF	; 255
    59e6:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <pxDelayedTaskList>
    59ea:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <pxDelayedTaskList+0x1>
    59ee:	b9 01       	movw	r22, r18
    59f0:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>

                /* If the task entering the blocked state was placed at the head of the
                 * list of blocked tasks then xNextTaskUnblockTime needs to be updated
                 * too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    59f4:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <xNextTaskUnblockTime>
    59f8:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    59fc:	a0 91 c9 16 	lds	r26, 0x16C9	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    5a00:	b0 91 ca 16 	lds	r27, 0x16CA	; 0x8016ca <xNextTaskUnblockTime+0x3>
    5a04:	2d 81       	ldd	r18, Y+5	; 0x05
    5a06:	3e 81       	ldd	r19, Y+6	; 0x06
    5a08:	4f 81       	ldd	r20, Y+7	; 0x07
    5a0a:	58 85       	ldd	r21, Y+8	; 0x08
    5a0c:	28 17       	cp	r18, r24
    5a0e:	39 07       	cpc	r19, r25
    5a10:	4a 07       	cpc	r20, r26
    5a12:	5b 07       	cpc	r21, r27
    5a14:	60 f4       	brcc	.+24     	; 0x5a2e <prvAddCurrentTaskToDelayedList+0x10c>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    5a16:	8d 81       	ldd	r24, Y+5	; 0x05
    5a18:	9e 81       	ldd	r25, Y+6	; 0x06
    5a1a:	af 81       	ldd	r26, Y+7	; 0x07
    5a1c:	b8 85       	ldd	r27, Y+8	; 0x08
    5a1e:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <xNextTaskUnblockTime>
    5a22:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <xNextTaskUnblockTime+0x1>
    5a26:	a0 93 c9 16 	sts	0x16C9, r26	; 0x8016c9 <xNextTaskUnblockTime+0x2>
    5a2a:	b0 93 ca 16 	sts	0x16CA, r27	; 0x8016ca <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5a2e:	00 00       	nop
    5a30:	2d 96       	adiw	r28, 0x0d	; 13
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	08 95       	ret

00005a42 <xTimerCreateTimerTask>:
    5a42:	ef 92       	push	r14
    5a44:	ff 92       	push	r15
    5a46:	0f 93       	push	r16
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	1f 92       	push	r1
    5a4e:	cd b7       	in	r28, 0x3d	; 61
    5a50:	de b7       	in	r29, 0x3e	; 62
    5a52:	19 82       	std	Y+1, r1	; 0x01
    5a54:	ae d4       	rcall	.+2396   	; 0x63b2 <prvCheckForValidListAndQueue>
    5a56:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    5a5a:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5a5e:	89 2b       	or	r24, r25
    5a60:	91 f0       	breq	.+36     	; 0x5a86 <xTimerCreateTimerTask+0x44>
    5a62:	0f 2e       	mov	r0, r31
    5a64:	fa ee       	ldi	r31, 0xEA	; 234
    5a66:	ef 2e       	mov	r14, r31
    5a68:	f6 e1       	ldi	r31, 0x16	; 22
    5a6a:	ff 2e       	mov	r15, r31
    5a6c:	f0 2d       	mov	r31, r0
    5a6e:	03 e0       	ldi	r16, 0x03	; 3
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	40 ec       	ldi	r20, 0xC0	; 192
    5a76:	50 e0       	ldi	r21, 0x00	; 0
    5a78:	6a e1       	ldi	r22, 0x1A	; 26
    5a7a:	75 e0       	ldi	r23, 0x05	; 5
    5a7c:	80 ee       	ldi	r24, 0xE0	; 224
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
    5a84:	89 83       	std	Y+1, r24	; 0x01
    5a86:	89 81       	ldd	r24, Y+1	; 0x01
    5a88:	0f 90       	pop	r0
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	0f 91       	pop	r16
    5a90:	ff 90       	pop	r15
    5a92:	ef 90       	pop	r14
    5a94:	08 95       	ret

00005a96 <xTimerGenericCommand>:
    5a96:	cf 92       	push	r12
    5a98:	df 92       	push	r13
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	cd b7       	in	r28, 0x3d	; 61
    5aa8:	de b7       	in	r29, 0x3e	; 62
    5aaa:	65 97       	sbiw	r28, 0x15	; 21
    5aac:	0f b6       	in	r0, 0x3f	; 63
    5aae:	f8 94       	cli
    5ab0:	de bf       	out	0x3e, r29	; 62
    5ab2:	0f be       	out	0x3f, r0	; 63
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	9a 87       	std	Y+10, r25	; 0x0a
    5ab8:	89 87       	std	Y+9, r24	; 0x09
    5aba:	6b 87       	std	Y+11, r22	; 0x0b
    5abc:	2c 87       	std	Y+12, r18	; 0x0c
    5abe:	3d 87       	std	Y+13, r19	; 0x0d
    5ac0:	4e 87       	std	Y+14, r20	; 0x0e
    5ac2:	5f 87       	std	Y+15, r21	; 0x0f
    5ac4:	19 8b       	std	Y+17, r17	; 0x11
    5ac6:	08 8b       	std	Y+16, r16	; 0x10
    5ac8:	ca 8a       	std	Y+18, r12	; 0x12
    5aca:	db 8a       	std	Y+19, r13	; 0x13
    5acc:	ec 8a       	std	Y+20, r14	; 0x14
    5ace:	fd 8a       	std	Y+21, r15	; 0x15
    5ad0:	19 82       	std	Y+1, r1	; 0x01
    5ad2:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    5ad6:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5ada:	89 2b       	or	r24, r25
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <xTimerGenericCommand+0x4a>
    5ade:	43 c0       	rjmp	.+134    	; 0x5b66 <xTimerGenericCommand+0xd0>
    5ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae2:	8a 83       	std	Y+2, r24	; 0x02
    5ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ae8:	ae 85       	ldd	r26, Y+14	; 0x0e
    5aea:	bf 85       	ldd	r27, Y+15	; 0x0f
    5aec:	8b 83       	std	Y+3, r24	; 0x03
    5aee:	9c 83       	std	Y+4, r25	; 0x04
    5af0:	ad 83       	std	Y+5, r26	; 0x05
    5af2:	be 83       	std	Y+6, r27	; 0x06
    5af4:	89 85       	ldd	r24, Y+9	; 0x09
    5af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5af8:	98 87       	std	Y+8, r25	; 0x08
    5afa:	8f 83       	std	Y+7, r24	; 0x07
    5afc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5afe:	86 30       	cpi	r24, 0x06	; 6
    5b00:	2c f5       	brge	.+74     	; 0x5b4c <xTimerGenericCommand+0xb6>
    5b02:	95 d8       	rcall	.-3798   	; 0x4c2e <xTaskGetSchedulerState>
    5b04:	82 30       	cpi	r24, 0x02	; 2
    5b06:	99 f4       	brne	.+38     	; 0x5b2e <xTimerGenericCommand+0x98>
    5b08:	e0 91 e8 16 	lds	r30, 0x16E8	; 0x8016e8 <xTimerQueue>
    5b0c:	f0 91 e9 16 	lds	r31, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5b10:	8a 89       	ldd	r24, Y+18	; 0x12
    5b12:	9b 89       	ldd	r25, Y+19	; 0x13
    5b14:	ac 89       	ldd	r26, Y+20	; 0x14
    5b16:	bd 89       	ldd	r27, Y+21	; 0x15
    5b18:	be 01       	movw	r22, r28
    5b1a:	6e 5f       	subi	r22, 0xFE	; 254
    5b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b1e:	00 e0       	ldi	r16, 0x00	; 0
    5b20:	9c 01       	movw	r18, r24
    5b22:	ad 01       	movw	r20, r26
    5b24:	cf 01       	movw	r24, r30
    5b26:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <xQueueGenericSend>
    5b2a:	89 83       	std	Y+1, r24	; 0x01
    5b2c:	1c c0       	rjmp	.+56     	; 0x5b66 <xTimerGenericCommand+0xd0>
    5b2e:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    5b32:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5b36:	be 01       	movw	r22, r28
    5b38:	6e 5f       	subi	r22, 0xFE	; 254
    5b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b3c:	00 e0       	ldi	r16, 0x00	; 0
    5b3e:	20 e0       	ldi	r18, 0x00	; 0
    5b40:	30 e0       	ldi	r19, 0x00	; 0
    5b42:	a9 01       	movw	r20, r18
    5b44:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <xQueueGenericSend>
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	0d c0       	rjmp	.+26     	; 0x5b66 <xTimerGenericCommand+0xd0>
    5b4c:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    5b50:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5b54:	48 89       	ldd	r20, Y+16	; 0x10
    5b56:	59 89       	ldd	r21, Y+17	; 0x11
    5b58:	be 01       	movw	r22, r28
    5b5a:	6e 5f       	subi	r22, 0xFE	; 254
    5b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5e:	20 e0       	ldi	r18, 0x00	; 0
    5b60:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xQueueGenericSendFromISR>
    5b64:	89 83       	std	Y+1, r24	; 0x01
    5b66:	89 81       	ldd	r24, Y+1	; 0x01
    5b68:	65 96       	adiw	r28, 0x15	; 21
    5b6a:	0f b6       	in	r0, 0x3f	; 63
    5b6c:	f8 94       	cli
    5b6e:	de bf       	out	0x3e, r29	; 62
    5b70:	0f be       	out	0x3f, r0	; 63
    5b72:	cd bf       	out	0x3d, r28	; 61
    5b74:	df 91       	pop	r29
    5b76:	cf 91       	pop	r28
    5b78:	1f 91       	pop	r17
    5b7a:	0f 91       	pop	r16
    5b7c:	ff 90       	pop	r15
    5b7e:	ef 90       	pop	r14
    5b80:	df 90       	pop	r13
    5b82:	cf 90       	pop	r12
    5b84:	08 95       	ret

00005b86 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    5b86:	cf 92       	push	r12
    5b88:	df 92       	push	r13
    5b8a:	ef 92       	push	r14
    5b8c:	ff 92       	push	r15
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	cd b7       	in	r28, 0x3d	; 61
    5b98:	de b7       	in	r29, 0x3e	; 62
    5b9a:	2b 97       	sbiw	r28, 0x0b	; 11
    5b9c:	0f b6       	in	r0, 0x3f	; 63
    5b9e:	f8 94       	cli
    5ba0:	de bf       	out	0x3e, r29	; 62
    5ba2:	0f be       	out	0x3f, r0	; 63
    5ba4:	cd bf       	out	0x3d, r28	; 61
    5ba6:	6c 83       	std	Y+4, r22	; 0x04
    5ba8:	7d 83       	std	Y+5, r23	; 0x05
    5baa:	8e 83       	std	Y+6, r24	; 0x06
    5bac:	9f 83       	std	Y+7, r25	; 0x07
    5bae:	28 87       	std	Y+8, r18	; 0x08
    5bb0:	39 87       	std	Y+9, r19	; 0x09
    5bb2:	4a 87       	std	Y+10, r20	; 0x0a
    5bb4:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5bb6:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    5bba:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	87 81       	ldd	r24, Z+7	; 0x07
    5bc2:	90 85       	ldd	r25, Z+8	; 0x08
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	80 85       	ldd	r24, Z+8	; 0x08
    5bc8:	91 85       	ldd	r25, Z+9	; 0x09
    5bca:	9a 83       	std	Y+2, r25	; 0x02
    5bcc:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5bce:	89 81       	ldd	r24, Y+1	; 0x01
    5bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd2:	02 96       	adiw	r24, 0x02	; 2
    5bd4:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	fc 01       	movw	r30, r24
    5bde:	86 89       	ldd	r24, Z+22	; 0x16
    5be0:	88 2f       	mov	r24, r24
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	84 70       	andi	r24, 0x04	; 4
    5be6:	99 27       	eor	r25, r25
    5be8:	89 2b       	or	r24, r25
    5bea:	a9 f1       	breq	.+106    	; 0x5c56 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5bec:	89 81       	ldd	r24, Y+1	; 0x01
    5bee:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf0:	fc 01       	movw	r30, r24
    5bf2:	26 85       	ldd	r18, Z+14	; 0x0e
    5bf4:	37 85       	ldd	r19, Z+15	; 0x0f
    5bf6:	40 89       	ldd	r20, Z+16	; 0x10
    5bf8:	51 89       	ldd	r21, Z+17	; 0x11
    5bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    5bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    5bfe:	ae 81       	ldd	r26, Y+6	; 0x06
    5c00:	bf 81       	ldd	r27, Y+7	; 0x07
    5c02:	82 0f       	add	r24, r18
    5c04:	93 1f       	adc	r25, r19
    5c06:	a4 1f       	adc	r26, r20
    5c08:	b5 1f       	adc	r27, r21
    5c0a:	ec 80       	ldd	r14, Y+4	; 0x04
    5c0c:	fd 80       	ldd	r15, Y+5	; 0x05
    5c0e:	0e 81       	ldd	r16, Y+6	; 0x06
    5c10:	1f 81       	ldd	r17, Y+7	; 0x07
    5c12:	28 85       	ldd	r18, Y+8	; 0x08
    5c14:	39 85       	ldd	r19, Y+9	; 0x09
    5c16:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c18:	5b 85       	ldd	r21, Y+11	; 0x0b
    5c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c1e:	67 01       	movw	r12, r14
    5c20:	78 01       	movw	r14, r16
    5c22:	89 01       	movw	r16, r18
    5c24:	9a 01       	movw	r18, r20
    5c26:	ac 01       	movw	r20, r24
    5c28:	bd 01       	movw	r22, r26
    5c2a:	cf 01       	movw	r24, r30
    5c2c:	3e d1       	rcall	.+636    	; 0x5eaa <prvInsertTimerInActiveList>
    5c2e:	88 23       	and	r24, r24
    5c30:	e1 f0       	breq	.+56     	; 0x5c6a <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5c32:	8c 81       	ldd	r24, Y+4	; 0x04
    5c34:	9d 81       	ldd	r25, Y+5	; 0x05
    5c36:	ae 81       	ldd	r26, Y+6	; 0x06
    5c38:	bf 81       	ldd	r27, Y+7	; 0x07
    5c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c3e:	c1 2c       	mov	r12, r1
    5c40:	d1 2c       	mov	r13, r1
    5c42:	76 01       	movw	r14, r12
    5c44:	00 e0       	ldi	r16, 0x00	; 0
    5c46:	10 e0       	ldi	r17, 0x00	; 0
    5c48:	9c 01       	movw	r18, r24
    5c4a:	ad 01       	movw	r20, r26
    5c4c:	60 e0       	ldi	r22, 0x00	; 0
    5c4e:	cf 01       	movw	r24, r30
    5c50:	22 df       	rcall	.-444    	; 0x5a96 <xTimerGenericCommand>
    5c52:	8b 83       	std	Y+3, r24	; 0x03
    5c54:	0a c0       	rjmp	.+20     	; 0x5c6a <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	9a 81       	ldd	r25, Y+2	; 0x02
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	86 89       	ldd	r24, Z+22	; 0x16
    5c5e:	28 2f       	mov	r18, r24
    5c60:	2e 7f       	andi	r18, 0xFE	; 254
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	9a 81       	ldd	r25, Y+2	; 0x02
    5c66:	fc 01       	movw	r30, r24
    5c68:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5c6a:	89 81       	ldd	r24, Y+1	; 0x01
    5c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6e:	fc 01       	movw	r30, r24
    5c70:	24 89       	ldd	r18, Z+20	; 0x14
    5c72:	35 89       	ldd	r19, Z+21	; 0x15
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	9a 81       	ldd	r25, Y+2	; 0x02
    5c78:	f9 01       	movw	r30, r18
    5c7a:	19 95       	eicall
    }
    5c7c:	00 00       	nop
    5c7e:	2b 96       	adiw	r28, 0x0b	; 11
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	1f 91       	pop	r17
    5c90:	0f 91       	pop	r16
    5c92:	ff 90       	pop	r15
    5c94:	ef 90       	pop	r14
    5c96:	df 90       	pop	r13
    5c98:	cf 90       	pop	r12
    5c9a:	08 95       	ret

00005c9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    5c9c:	ef 92       	push	r14
    5c9e:	ff 92       	push	r15
    5ca0:	0f 93       	push	r16
    5ca2:	1f 93       	push	r17
    5ca4:	cf 93       	push	r28
    5ca6:	df 93       	push	r29
    5ca8:	cd b7       	in	r28, 0x3d	; 61
    5caa:	de b7       	in	r29, 0x3e	; 62
    5cac:	2a 97       	sbiw	r28, 0x0a	; 10
    5cae:	0f b6       	in	r0, 0x3f	; 63
    5cb0:	f8 94       	cli
    5cb2:	de bf       	out	0x3e, r29	; 62
    5cb4:	0f be       	out	0x3f, r0	; 63
    5cb6:	cd bf       	out	0x3d, r28	; 61
    5cb8:	6e 83       	std	Y+6, r22	; 0x06
    5cba:	7f 83       	std	Y+7, r23	; 0x07
    5cbc:	88 87       	std	Y+8, r24	; 0x08
    5cbe:	99 87       	std	Y+9, r25	; 0x09
    5cc0:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    5cc2:	0e 94 3b 1c 	call	0x3876	; 0x3876 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5cc6:	ce 01       	movw	r24, r28
    5cc8:	05 96       	adiw	r24, 0x05	; 5
    5cca:	a8 d0       	rcall	.+336    	; 0x5e1c <prvSampleTimeNow>
    5ccc:	dc 01       	movw	r26, r24
    5cce:	cb 01       	movw	r24, r22
    5cd0:	89 83       	std	Y+1, r24	; 0x01
    5cd2:	9a 83       	std	Y+2, r25	; 0x02
    5cd4:	ab 83       	std	Y+3, r26	; 0x03
    5cd6:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    5cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cda:	88 23       	and	r24, r24
    5cdc:	09 f0       	breq	.+2      	; 0x5ce0 <prvProcessTimerOrBlockTask+0x44>
    5cde:	4d c0       	rjmp	.+154    	; 0x5d7a <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ce2:	88 23       	and	r24, r24
    5ce4:	d9 f4       	brne	.+54     	; 0x5d1c <prvProcessTimerOrBlockTask+0x80>
    5ce6:	2e 81       	ldd	r18, Y+6	; 0x06
    5ce8:	3f 81       	ldd	r19, Y+7	; 0x07
    5cea:	48 85       	ldd	r20, Y+8	; 0x08
    5cec:	59 85       	ldd	r21, Y+9	; 0x09
    5cee:	89 81       	ldd	r24, Y+1	; 0x01
    5cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf2:	ab 81       	ldd	r26, Y+3	; 0x03
    5cf4:	bc 81       	ldd	r27, Y+4	; 0x04
    5cf6:	82 17       	cp	r24, r18
    5cf8:	93 07       	cpc	r25, r19
    5cfa:	a4 07       	cpc	r26, r20
    5cfc:	b5 07       	cpc	r27, r21
    5cfe:	70 f0       	brcs	.+28     	; 0x5d1c <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    5d00:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5d04:	29 81       	ldd	r18, Y+1	; 0x01
    5d06:	3a 81       	ldd	r19, Y+2	; 0x02
    5d08:	4b 81       	ldd	r20, Y+3	; 0x03
    5d0a:	5c 81       	ldd	r21, Y+4	; 0x04
    5d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    5d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    5d10:	a8 85       	ldd	r26, Y+8	; 0x08
    5d12:	b9 85       	ldd	r27, Y+9	; 0x09
    5d14:	bc 01       	movw	r22, r24
    5d16:	cd 01       	movw	r24, r26
    5d18:	36 df       	rcall	.-404    	; 0x5b86 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5d1a:	31 c0       	rjmp	.+98     	; 0x5d7e <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    5d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d1e:	88 23       	and	r24, r24
    5d20:	59 f0       	breq	.+22     	; 0x5d38 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5d22:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <pxOverflowTimerList>
    5d26:	90 91 e7 16 	lds	r25, 0x16E7	; 0x8016e7 <pxOverflowTimerList+0x1>
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	90 81       	ld	r25, Z
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	99 23       	and	r25, r25
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <prvProcessTimerOrBlockTask+0x9a>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5d38:	2e 81       	ldd	r18, Y+6	; 0x06
    5d3a:	3f 81       	ldd	r19, Y+7	; 0x07
    5d3c:	48 85       	ldd	r20, Y+8	; 0x08
    5d3e:	59 85       	ldd	r21, Y+9	; 0x09
    5d40:	89 81       	ldd	r24, Y+1	; 0x01
    5d42:	9a 81       	ldd	r25, Y+2	; 0x02
    5d44:	ab 81       	ldd	r26, Y+3	; 0x03
    5d46:	bc 81       	ldd	r27, Y+4	; 0x04
    5d48:	79 01       	movw	r14, r18
    5d4a:	8a 01       	movw	r16, r20
    5d4c:	e8 1a       	sub	r14, r24
    5d4e:	f9 0a       	sbc	r15, r25
    5d50:	0a 0b       	sbc	r16, r26
    5d52:	1b 0b       	sbc	r17, r27
    5d54:	d8 01       	movw	r26, r16
    5d56:	c7 01       	movw	r24, r14
    5d58:	e0 91 e8 16 	lds	r30, 0x16E8	; 0x8016e8 <xTimerQueue>
    5d5c:	f0 91 e9 16 	lds	r31, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    5d60:	2a 85       	ldd	r18, Y+10	; 0x0a
    5d62:	ac 01       	movw	r20, r24
    5d64:	bd 01       	movw	r22, r26
    5d66:	cf 01       	movw	r24, r30
    5d68:	0e 94 cb 12 	call	0x2596	; 0x2596 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    5d6c:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
    5d70:	88 23       	and	r24, r24
    5d72:	29 f4       	brne	.+10     	; 0x5d7e <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    5d74:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    5d7a:	0e 94 48 1c 	call	0x3890	; 0x3890 <xTaskResumeAll>
            }
        }
    }
    5d7e:	00 00       	nop
    5d80:	2a 96       	adiw	r28, 0x0a	; 10
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	df 91       	pop	r29
    5d8e:	cf 91       	pop	r28
    5d90:	1f 91       	pop	r17
    5d92:	0f 91       	pop	r16
    5d94:	ff 90       	pop	r15
    5d96:	ef 90       	pop	r14
    5d98:	08 95       	ret

00005d9a <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    5d9a:	cf 93       	push	r28
    5d9c:	df 93       	push	r29
    5d9e:	00 d0       	rcall	.+0      	; 0x5da0 <prvGetNextExpireTime+0x6>
    5da0:	00 d0       	rcall	.+0      	; 0x5da2 <prvGetNextExpireTime+0x8>
    5da2:	cd b7       	in	r28, 0x3d	; 61
    5da4:	de b7       	in	r29, 0x3e	; 62
    5da6:	9e 83       	std	Y+6, r25	; 0x06
    5da8:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5daa:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    5dae:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    5db2:	fc 01       	movw	r30, r24
    5db4:	90 81       	ld	r25, Z
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	99 23       	and	r25, r25
    5dba:	09 f0       	breq	.+2      	; 0x5dbe <prvGetNextExpireTime+0x24>
    5dbc:	80 e0       	ldi	r24, 0x00	; 0
    5dbe:	28 2f       	mov	r18, r24
    5dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    5dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dca:	9e 81       	ldd	r25, Y+6	; 0x06
    5dcc:	fc 01       	movw	r30, r24
    5dce:	80 81       	ld	r24, Z
    5dd0:	88 23       	and	r24, r24
    5dd2:	89 f4       	brne	.+34     	; 0x5df6 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5dd4:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    5dd8:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    5ddc:	fc 01       	movw	r30, r24
    5dde:	87 81       	ldd	r24, Z+7	; 0x07
    5de0:	90 85       	ldd	r25, Z+8	; 0x08
    5de2:	fc 01       	movw	r30, r24
    5de4:	80 81       	ld	r24, Z
    5de6:	91 81       	ldd	r25, Z+1	; 0x01
    5de8:	a2 81       	ldd	r26, Z+2	; 0x02
    5dea:	b3 81       	ldd	r27, Z+3	; 0x03
    5dec:	89 83       	std	Y+1, r24	; 0x01
    5dee:	9a 83       	std	Y+2, r25	; 0x02
    5df0:	ab 83       	std	Y+3, r26	; 0x03
    5df2:	bc 83       	std	Y+4, r27	; 0x04
    5df4:	04 c0       	rjmp	.+8      	; 0x5dfe <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    5df6:	19 82       	std	Y+1, r1	; 0x01
    5df8:	1a 82       	std	Y+2, r1	; 0x02
    5dfa:	1b 82       	std	Y+3, r1	; 0x03
    5dfc:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	9a 81       	ldd	r25, Y+2	; 0x02
    5e02:	ab 81       	ldd	r26, Y+3	; 0x03
    5e04:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5e06:	bc 01       	movw	r22, r24
    5e08:	cd 01       	movw	r24, r26
    5e0a:	26 96       	adiw	r28, 0x06	; 6
    5e0c:	0f b6       	in	r0, 0x3f	; 63
    5e0e:	f8 94       	cli
    5e10:	de bf       	out	0x3e, r29	; 62
    5e12:	0f be       	out	0x3f, r0	; 63
    5e14:	cd bf       	out	0x3d, r28	; 61
    5e16:	df 91       	pop	r29
    5e18:	cf 91       	pop	r28
    5e1a:	08 95       	ret

00005e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    5e1c:	cf 93       	push	r28
    5e1e:	df 93       	push	r29
    5e20:	00 d0       	rcall	.+0      	; 0x5e22 <prvSampleTimeNow+0x6>
    5e22:	00 d0       	rcall	.+0      	; 0x5e24 <prvSampleTimeNow+0x8>
    5e24:	cd b7       	in	r28, 0x3d	; 61
    5e26:	de b7       	in	r29, 0x3e	; 62
    5e28:	9e 83       	std	Y+6, r25	; 0x06
    5e2a:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    5e2c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <xTaskGetTickCount>
    5e30:	dc 01       	movw	r26, r24
    5e32:	cb 01       	movw	r24, r22
    5e34:	89 83       	std	Y+1, r24	; 0x01
    5e36:	9a 83       	std	Y+2, r25	; 0x02
    5e38:	ab 83       	std	Y+3, r26	; 0x03
    5e3a:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    5e3c:	80 91 ec 16 	lds	r24, 0x16EC	; 0x8016ec <xLastTime.2436>
    5e40:	90 91 ed 16 	lds	r25, 0x16ED	; 0x8016ed <xLastTime.2436+0x1>
    5e44:	a0 91 ee 16 	lds	r26, 0x16EE	; 0x8016ee <xLastTime.2436+0x2>
    5e48:	b0 91 ef 16 	lds	r27, 0x16EF	; 0x8016ef <xLastTime.2436+0x3>
    5e4c:	29 81       	ldd	r18, Y+1	; 0x01
    5e4e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e50:	4b 81       	ldd	r20, Y+3	; 0x03
    5e52:	5c 81       	ldd	r21, Y+4	; 0x04
    5e54:	28 17       	cp	r18, r24
    5e56:	39 07       	cpc	r19, r25
    5e58:	4a 07       	cpc	r20, r26
    5e5a:	5b 07       	cpc	r21, r27
    5e5c:	38 f4       	brcc	.+14     	; 0x5e6c <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    5e5e:	e6 d1       	rcall	.+972    	; 0x622c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    5e60:	8d 81       	ldd	r24, Y+5	; 0x05
    5e62:	9e 81       	ldd	r25, Y+6	; 0x06
    5e64:	21 e0       	ldi	r18, 0x01	; 1
    5e66:	fc 01       	movw	r30, r24
    5e68:	20 83       	st	Z, r18
    5e6a:	04 c0       	rjmp	.+8      	; 0x5e74 <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    5e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e70:	fc 01       	movw	r30, r24
    5e72:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    5e74:	89 81       	ldd	r24, Y+1	; 0x01
    5e76:	9a 81       	ldd	r25, Y+2	; 0x02
    5e78:	ab 81       	ldd	r26, Y+3	; 0x03
    5e7a:	bc 81       	ldd	r27, Y+4	; 0x04
    5e7c:	80 93 ec 16 	sts	0x16EC, r24	; 0x8016ec <xLastTime.2436>
    5e80:	90 93 ed 16 	sts	0x16ED, r25	; 0x8016ed <xLastTime.2436+0x1>
    5e84:	a0 93 ee 16 	sts	0x16EE, r26	; 0x8016ee <xLastTime.2436+0x2>
    5e88:	b0 93 ef 16 	sts	0x16EF, r27	; 0x8016ef <xLastTime.2436+0x3>

        return xTimeNow;
    5e8c:	89 81       	ldd	r24, Y+1	; 0x01
    5e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e90:	ab 81       	ldd	r26, Y+3	; 0x03
    5e92:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5e94:	bc 01       	movw	r22, r24
    5e96:	cd 01       	movw	r24, r26
    5e98:	26 96       	adiw	r28, 0x06	; 6
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	08 95       	ret

00005eaa <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    5eaa:	cf 92       	push	r12
    5eac:	df 92       	push	r13
    5eae:	ef 92       	push	r14
    5eb0:	ff 92       	push	r15
    5eb2:	0f 93       	push	r16
    5eb4:	1f 93       	push	r17
    5eb6:	cf 93       	push	r28
    5eb8:	df 93       	push	r29
    5eba:	cd b7       	in	r28, 0x3d	; 61
    5ebc:	de b7       	in	r29, 0x3e	; 62
    5ebe:	2f 97       	sbiw	r28, 0x0f	; 15
    5ec0:	0f b6       	in	r0, 0x3f	; 63
    5ec2:	f8 94       	cli
    5ec4:	de bf       	out	0x3e, r29	; 62
    5ec6:	0f be       	out	0x3f, r0	; 63
    5ec8:	cd bf       	out	0x3d, r28	; 61
    5eca:	9b 83       	std	Y+3, r25	; 0x03
    5ecc:	8a 83       	std	Y+2, r24	; 0x02
    5ece:	4c 83       	std	Y+4, r20	; 0x04
    5ed0:	5d 83       	std	Y+5, r21	; 0x05
    5ed2:	6e 83       	std	Y+6, r22	; 0x06
    5ed4:	7f 83       	std	Y+7, r23	; 0x07
    5ed6:	08 87       	std	Y+8, r16	; 0x08
    5ed8:	19 87       	std	Y+9, r17	; 0x09
    5eda:	2a 87       	std	Y+10, r18	; 0x0a
    5edc:	3b 87       	std	Y+11, r19	; 0x0b
    5ede:	cc 86       	std	Y+12, r12	; 0x0c
    5ee0:	dd 86       	std	Y+13, r13	; 0x0d
    5ee2:	ee 86       	std	Y+14, r14	; 0x0e
    5ee4:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    5ee6:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5ee8:	2a 81       	ldd	r18, Y+2	; 0x02
    5eea:	3b 81       	ldd	r19, Y+3	; 0x03
    5eec:	8c 81       	ldd	r24, Y+4	; 0x04
    5eee:	9d 81       	ldd	r25, Y+5	; 0x05
    5ef0:	ae 81       	ldd	r26, Y+6	; 0x06
    5ef2:	bf 81       	ldd	r27, Y+7	; 0x07
    5ef4:	f9 01       	movw	r30, r18
    5ef6:	82 83       	std	Z+2, r24	; 0x02
    5ef8:	93 83       	std	Z+3, r25	; 0x03
    5efa:	a4 83       	std	Z+4, r26	; 0x04
    5efc:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5efe:	8a 81       	ldd	r24, Y+2	; 0x02
    5f00:	9b 81       	ldd	r25, Y+3	; 0x03
    5f02:	2a 81       	ldd	r18, Y+2	; 0x02
    5f04:	3b 81       	ldd	r19, Y+3	; 0x03
    5f06:	fc 01       	movw	r30, r24
    5f08:	33 87       	std	Z+11, r19	; 0x0b
    5f0a:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    5f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    5f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    5f10:	4e 81       	ldd	r20, Y+6	; 0x06
    5f12:	5f 81       	ldd	r21, Y+7	; 0x07
    5f14:	88 85       	ldd	r24, Y+8	; 0x08
    5f16:	99 85       	ldd	r25, Y+9	; 0x09
    5f18:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f1c:	82 17       	cp	r24, r18
    5f1e:	93 07       	cpc	r25, r19
    5f20:	a4 07       	cpc	r26, r20
    5f22:	b5 07       	cpc	r27, r21
    5f24:	40 f1       	brcs	.+80     	; 0x5f76 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f26:	28 85       	ldd	r18, Y+8	; 0x08
    5f28:	39 85       	ldd	r19, Y+9	; 0x09
    5f2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f2c:	5b 85       	ldd	r21, Y+11	; 0x0b
    5f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f30:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f32:	ae 85       	ldd	r26, Y+14	; 0x0e
    5f34:	bf 85       	ldd	r27, Y+15	; 0x0f
    5f36:	28 1b       	sub	r18, r24
    5f38:	39 0b       	sbc	r19, r25
    5f3a:	4a 0b       	sbc	r20, r26
    5f3c:	5b 0b       	sbc	r21, r27
    5f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f40:	9b 81       	ldd	r25, Y+3	; 0x03
    5f42:	fc 01       	movw	r30, r24
    5f44:	86 85       	ldd	r24, Z+14	; 0x0e
    5f46:	97 85       	ldd	r25, Z+15	; 0x0f
    5f48:	a0 89       	ldd	r26, Z+16	; 0x10
    5f4a:	b1 89       	ldd	r27, Z+17	; 0x11
    5f4c:	28 17       	cp	r18, r24
    5f4e:	39 07       	cpc	r19, r25
    5f50:	4a 07       	cpc	r20, r26
    5f52:	5b 07       	cpc	r21, r27
    5f54:	18 f0       	brcs	.+6      	; 0x5f5c <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	89 83       	std	Y+1, r24	; 0x01
    5f5a:	36 c0       	rjmp	.+108    	; 0x5fc8 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f60:	9c 01       	movw	r18, r24
    5f62:	2e 5f       	subi	r18, 0xFE	; 254
    5f64:	3f 4f       	sbci	r19, 0xFF	; 255
    5f66:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <pxOverflowTimerList>
    5f6a:	90 91 e7 16 	lds	r25, 0x16E7	; 0x8016e7 <pxOverflowTimerList+0x1>
    5f6e:	b9 01       	movw	r22, r18
    5f70:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>
    5f74:	29 c0       	rjmp	.+82     	; 0x5fc8 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5f76:	28 85       	ldd	r18, Y+8	; 0x08
    5f78:	39 85       	ldd	r19, Y+9	; 0x09
    5f7a:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f7c:	5b 85       	ldd	r21, Y+11	; 0x0b
    5f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f80:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f82:	ae 85       	ldd	r26, Y+14	; 0x0e
    5f84:	bf 85       	ldd	r27, Y+15	; 0x0f
    5f86:	28 17       	cp	r18, r24
    5f88:	39 07       	cpc	r19, r25
    5f8a:	4a 07       	cpc	r20, r26
    5f8c:	5b 07       	cpc	r21, r27
    5f8e:	80 f4       	brcc	.+32     	; 0x5fb0 <prvInsertTimerInActiveList+0x106>
    5f90:	2c 81       	ldd	r18, Y+4	; 0x04
    5f92:	3d 81       	ldd	r19, Y+5	; 0x05
    5f94:	4e 81       	ldd	r20, Y+6	; 0x06
    5f96:	5f 81       	ldd	r21, Y+7	; 0x07
    5f98:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f9c:	ae 85       	ldd	r26, Y+14	; 0x0e
    5f9e:	bf 85       	ldd	r27, Y+15	; 0x0f
    5fa0:	28 17       	cp	r18, r24
    5fa2:	39 07       	cpc	r19, r25
    5fa4:	4a 07       	cpc	r20, r26
    5fa6:	5b 07       	cpc	r21, r27
    5fa8:	18 f0       	brcs	.+6      	; 0x5fb0 <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	89 83       	std	Y+1, r24	; 0x01
    5fae:	0c c0       	rjmp	.+24     	; 0x5fc8 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5fb4:	9c 01       	movw	r18, r24
    5fb6:	2e 5f       	subi	r18, 0xFE	; 254
    5fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fba:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    5fbe:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    5fc2:	b9 01       	movw	r22, r18
    5fc4:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>
            }
        }

        return xProcessTimerNow;
    5fc8:	89 81       	ldd	r24, Y+1	; 0x01
    }
    5fca:	2f 96       	adiw	r28, 0x0f	; 15
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	1f 91       	pop	r17
    5fdc:	0f 91       	pop	r16
    5fde:	ff 90       	pop	r15
    5fe0:	ef 90       	pop	r14
    5fe2:	df 90       	pop	r13
    5fe4:	cf 90       	pop	r12
    5fe6:	08 95       	ret

00005fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    5fe8:	cf 92       	push	r12
    5fea:	df 92       	push	r13
    5fec:	ef 92       	push	r14
    5fee:	ff 92       	push	r15
    5ff0:	0f 93       	push	r16
    5ff2:	1f 93       	push	r17
    5ff4:	cf 93       	push	r28
    5ff6:	df 93       	push	r29
    5ff8:	cd b7       	in	r28, 0x3d	; 61
    5ffa:	de b7       	in	r29, 0x3e	; 62
    5ffc:	2f 97       	sbiw	r28, 0x0f	; 15
    5ffe:	0f b6       	in	r0, 0x3f	; 63
    6000:	f8 94       	cli
    6002:	de bf       	out	0x3e, r29	; 62
    6004:	0f be       	out	0x3f, r0	; 63
    6006:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6008:	f2 c0       	rjmp	.+484    	; 0x61ee <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    600a:	88 85       	ldd	r24, Y+8	; 0x08
    600c:	88 23       	and	r24, r24
    600e:	0c f4       	brge	.+2      	; 0x6012 <prvProcessReceivedCommands+0x2a>
    6010:	ee c0       	rjmp	.+476    	; 0x61ee <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6012:	8d 85       	ldd	r24, Y+13	; 0x0d
    6014:	9e 85       	ldd	r25, Y+14	; 0x0e
    6016:	9a 83       	std	Y+2, r25	; 0x02
    6018:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    601a:	89 81       	ldd	r24, Y+1	; 0x01
    601c:	9a 81       	ldd	r25, Y+2	; 0x02
    601e:	fc 01       	movw	r30, r24
    6020:	84 85       	ldd	r24, Z+12	; 0x0c
    6022:	95 85       	ldd	r25, Z+13	; 0x0d
    6024:	89 2b       	or	r24, r25
    6026:	29 f0       	breq	.+10     	; 0x6032 <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6028:	89 81       	ldd	r24, Y+1	; 0x01
    602a:	9a 81       	ldd	r25, Y+2	; 0x02
    602c:	02 96       	adiw	r24, 0x02	; 2
    602e:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    6032:	ce 01       	movw	r24, r28
    6034:	0f 96       	adiw	r24, 0x0f	; 15
    6036:	f2 de       	rcall	.-540    	; 0x5e1c <prvSampleTimeNow>
    6038:	dc 01       	movw	r26, r24
    603a:	cb 01       	movw	r24, r22
    603c:	8b 83       	std	Y+3, r24	; 0x03
    603e:	9c 83       	std	Y+4, r25	; 0x04
    6040:	ad 83       	std	Y+5, r26	; 0x05
    6042:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    6044:	88 85       	ldd	r24, Y+8	; 0x08
    6046:	08 2e       	mov	r0, r24
    6048:	00 0c       	add	r0, r0
    604a:	99 0b       	sbc	r25, r25
    604c:	09 2e       	mov	r0, r25
    604e:	00 0c       	add	r0, r0
    6050:	aa 0b       	sbc	r26, r26
    6052:	bb 0b       	sbc	r27, r27
    6054:	40 e0       	ldi	r20, 0x00	; 0
    6056:	50 e0       	ldi	r21, 0x00	; 0
    6058:	29 e0       	ldi	r18, 0x09	; 9
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	84 1b       	sub	r24, r20
    605e:	95 0b       	sbc	r25, r21
    6060:	28 17       	cp	r18, r24
    6062:	39 07       	cpc	r19, r25
    6064:	08 f4       	brcc	.+2      	; 0x6068 <prvProcessReceivedCommands+0x80>
    6066:	c2 c0       	rjmp	.+388    	; 0x61ec <prvProcessReceivedCommands+0x204>
    6068:	fc 01       	movw	r30, r24
    606a:	88 27       	eor	r24, r24
    606c:	ee 58       	subi	r30, 0x8E	; 142
    606e:	ff 4f       	sbci	r31, 0xFF	; 255
    6070:	8f 4f       	sbci	r24, 0xFF	; 255
    6072:	0c 94 e2 42 	jmp	0x85c4	; 0x85c4 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    6076:	89 81       	ldd	r24, Y+1	; 0x01
    6078:	9a 81       	ldd	r25, Y+2	; 0x02
    607a:	fc 01       	movw	r30, r24
    607c:	86 89       	ldd	r24, Z+22	; 0x16
    607e:	28 2f       	mov	r18, r24
    6080:	21 60       	ori	r18, 0x01	; 1
    6082:	89 81       	ldd	r24, Y+1	; 0x01
    6084:	9a 81       	ldd	r25, Y+2	; 0x02
    6086:	fc 01       	movw	r30, r24
    6088:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    608a:	e9 84       	ldd	r14, Y+9	; 0x09
    608c:	fa 84       	ldd	r15, Y+10	; 0x0a
    608e:	0b 85       	ldd	r16, Y+11	; 0x0b
    6090:	1c 85       	ldd	r17, Y+12	; 0x0c
    6092:	29 85       	ldd	r18, Y+9	; 0x09
    6094:	3a 85       	ldd	r19, Y+10	; 0x0a
    6096:	4b 85       	ldd	r20, Y+11	; 0x0b
    6098:	5c 85       	ldd	r21, Y+12	; 0x0c
    609a:	89 81       	ldd	r24, Y+1	; 0x01
    609c:	9a 81       	ldd	r25, Y+2	; 0x02
    609e:	fc 01       	movw	r30, r24
    60a0:	86 85       	ldd	r24, Z+14	; 0x0e
    60a2:	97 85       	ldd	r25, Z+15	; 0x0f
    60a4:	a0 89       	ldd	r26, Z+16	; 0x10
    60a6:	b1 89       	ldd	r27, Z+17	; 0x11
    60a8:	82 0f       	add	r24, r18
    60aa:	93 1f       	adc	r25, r19
    60ac:	a4 1f       	adc	r26, r20
    60ae:	b5 1f       	adc	r27, r21
    60b0:	2b 81       	ldd	r18, Y+3	; 0x03
    60b2:	3c 81       	ldd	r19, Y+4	; 0x04
    60b4:	4d 81       	ldd	r20, Y+5	; 0x05
    60b6:	5e 81       	ldd	r21, Y+6	; 0x06
    60b8:	e9 81       	ldd	r30, Y+1	; 0x01
    60ba:	fa 81       	ldd	r31, Y+2	; 0x02
    60bc:	67 01       	movw	r12, r14
    60be:	78 01       	movw	r14, r16
    60c0:	89 01       	movw	r16, r18
    60c2:	9a 01       	movw	r18, r20
    60c4:	ac 01       	movw	r20, r24
    60c6:	bd 01       	movw	r22, r26
    60c8:	cf 01       	movw	r24, r30
    60ca:	ef de       	rcall	.-546    	; 0x5eaa <prvInsertTimerInActiveList>
    60cc:	88 23       	and	r24, r24
    60ce:	09 f4       	brne	.+2      	; 0x60d2 <prvProcessReceivedCommands+0xea>
    60d0:	8e c0       	rjmp	.+284    	; 0x61ee <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    60d2:	89 81       	ldd	r24, Y+1	; 0x01
    60d4:	9a 81       	ldd	r25, Y+2	; 0x02
    60d6:	fc 01       	movw	r30, r24
    60d8:	24 89       	ldd	r18, Z+20	; 0x14
    60da:	35 89       	ldd	r19, Z+21	; 0x15
    60dc:	89 81       	ldd	r24, Y+1	; 0x01
    60de:	9a 81       	ldd	r25, Y+2	; 0x02
    60e0:	f9 01       	movw	r30, r18
    60e2:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    60e4:	89 81       	ldd	r24, Y+1	; 0x01
    60e6:	9a 81       	ldd	r25, Y+2	; 0x02
    60e8:	fc 01       	movw	r30, r24
    60ea:	86 89       	ldd	r24, Z+22	; 0x16
    60ec:	88 2f       	mov	r24, r24
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	84 70       	andi	r24, 0x04	; 4
    60f2:	99 27       	eor	r25, r25
    60f4:	89 2b       	or	r24, r25
    60f6:	09 f4       	brne	.+2      	; 0x60fa <prvProcessReceivedCommands+0x112>
    60f8:	7a c0       	rjmp	.+244    	; 0x61ee <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    60fa:	29 85       	ldd	r18, Y+9	; 0x09
    60fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    60fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    6100:	5c 85       	ldd	r21, Y+12	; 0x0c
    6102:	89 81       	ldd	r24, Y+1	; 0x01
    6104:	9a 81       	ldd	r25, Y+2	; 0x02
    6106:	fc 01       	movw	r30, r24
    6108:	86 85       	ldd	r24, Z+14	; 0x0e
    610a:	97 85       	ldd	r25, Z+15	; 0x0f
    610c:	a0 89       	ldd	r26, Z+16	; 0x10
    610e:	b1 89       	ldd	r27, Z+17	; 0x11
    6110:	82 0f       	add	r24, r18
    6112:	93 1f       	adc	r25, r19
    6114:	a4 1f       	adc	r26, r20
    6116:	b5 1f       	adc	r27, r21
    6118:	e9 81       	ldd	r30, Y+1	; 0x01
    611a:	fa 81       	ldd	r31, Y+2	; 0x02
    611c:	c1 2c       	mov	r12, r1
    611e:	d1 2c       	mov	r13, r1
    6120:	76 01       	movw	r14, r12
    6122:	00 e0       	ldi	r16, 0x00	; 0
    6124:	10 e0       	ldi	r17, 0x00	; 0
    6126:	9c 01       	movw	r18, r24
    6128:	ad 01       	movw	r20, r26
    612a:	60 e0       	ldi	r22, 0x00	; 0
    612c:	cf 01       	movw	r24, r30
    612e:	b3 dc       	rcall	.-1690   	; 0x5a96 <xTimerGenericCommand>
    6130:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    6132:	5d c0       	rjmp	.+186    	; 0x61ee <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	9a 81       	ldd	r25, Y+2	; 0x02
    6138:	fc 01       	movw	r30, r24
    613a:	86 89       	ldd	r24, Z+22	; 0x16
    613c:	28 2f       	mov	r18, r24
    613e:	2e 7f       	andi	r18, 0xFE	; 254
    6140:	89 81       	ldd	r24, Y+1	; 0x01
    6142:	9a 81       	ldd	r25, Y+2	; 0x02
    6144:	fc 01       	movw	r30, r24
    6146:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    6148:	52 c0       	rjmp	.+164    	; 0x61ee <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    614a:	89 81       	ldd	r24, Y+1	; 0x01
    614c:	9a 81       	ldd	r25, Y+2	; 0x02
    614e:	fc 01       	movw	r30, r24
    6150:	86 89       	ldd	r24, Z+22	; 0x16
    6152:	28 2f       	mov	r18, r24
    6154:	21 60       	ori	r18, 0x01	; 1
    6156:	89 81       	ldd	r24, Y+1	; 0x01
    6158:	9a 81       	ldd	r25, Y+2	; 0x02
    615a:	fc 01       	movw	r30, r24
    615c:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    615e:	89 85       	ldd	r24, Y+9	; 0x09
    6160:	9a 85       	ldd	r25, Y+10	; 0x0a
    6162:	ab 85       	ldd	r26, Y+11	; 0x0b
    6164:	bc 85       	ldd	r27, Y+12	; 0x0c
    6166:	29 81       	ldd	r18, Y+1	; 0x01
    6168:	3a 81       	ldd	r19, Y+2	; 0x02
    616a:	f9 01       	movw	r30, r18
    616c:	86 87       	std	Z+14, r24	; 0x0e
    616e:	97 87       	std	Z+15, r25	; 0x0f
    6170:	a0 8b       	std	Z+16, r26	; 0x10
    6172:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    6174:	89 81       	ldd	r24, Y+1	; 0x01
    6176:	9a 81       	ldd	r25, Y+2	; 0x02
    6178:	fc 01       	movw	r30, r24
    617a:	26 85       	ldd	r18, Z+14	; 0x0e
    617c:	37 85       	ldd	r19, Z+15	; 0x0f
    617e:	40 89       	ldd	r20, Z+16	; 0x10
    6180:	51 89       	ldd	r21, Z+17	; 0x11
    6182:	8b 81       	ldd	r24, Y+3	; 0x03
    6184:	9c 81       	ldd	r25, Y+4	; 0x04
    6186:	ad 81       	ldd	r26, Y+5	; 0x05
    6188:	be 81       	ldd	r27, Y+6	; 0x06
    618a:	82 0f       	add	r24, r18
    618c:	93 1f       	adc	r25, r19
    618e:	a4 1f       	adc	r26, r20
    6190:	b5 1f       	adc	r27, r21
    6192:	eb 80       	ldd	r14, Y+3	; 0x03
    6194:	fc 80       	ldd	r15, Y+4	; 0x04
    6196:	0d 81       	ldd	r16, Y+5	; 0x05
    6198:	1e 81       	ldd	r17, Y+6	; 0x06
    619a:	2b 81       	ldd	r18, Y+3	; 0x03
    619c:	3c 81       	ldd	r19, Y+4	; 0x04
    619e:	4d 81       	ldd	r20, Y+5	; 0x05
    61a0:	5e 81       	ldd	r21, Y+6	; 0x06
    61a2:	e9 81       	ldd	r30, Y+1	; 0x01
    61a4:	fa 81       	ldd	r31, Y+2	; 0x02
    61a6:	67 01       	movw	r12, r14
    61a8:	78 01       	movw	r14, r16
    61aa:	89 01       	movw	r16, r18
    61ac:	9a 01       	movw	r18, r20
    61ae:	ac 01       	movw	r20, r24
    61b0:	bd 01       	movw	r22, r26
    61b2:	cf 01       	movw	r24, r30
    61b4:	7a de       	rcall	.-780    	; 0x5eaa <prvInsertTimerInActiveList>
                        break;
    61b6:	1b c0       	rjmp	.+54     	; 0x61ee <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    61b8:	89 81       	ldd	r24, Y+1	; 0x01
    61ba:	9a 81       	ldd	r25, Y+2	; 0x02
    61bc:	fc 01       	movw	r30, r24
    61be:	86 89       	ldd	r24, Z+22	; 0x16
    61c0:	88 2f       	mov	r24, r24
    61c2:	90 e0       	ldi	r25, 0x00	; 0
    61c4:	82 70       	andi	r24, 0x02	; 2
    61c6:	99 27       	eor	r25, r25
    61c8:	89 2b       	or	r24, r25
    61ca:	29 f4       	brne	.+10     	; 0x61d6 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	9a 81       	ldd	r25, Y+2	; 0x02
    61d0:	0e 94 a8 09 	call	0x1350	; 0x1350 <vPortFree>
    61d4:	0c c0       	rjmp	.+24     	; 0x61ee <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    61d6:	89 81       	ldd	r24, Y+1	; 0x01
    61d8:	9a 81       	ldd	r25, Y+2	; 0x02
    61da:	fc 01       	movw	r30, r24
    61dc:	86 89       	ldd	r24, Z+22	; 0x16
    61de:	28 2f       	mov	r18, r24
    61e0:	2e 7f       	andi	r18, 0xFE	; 254
    61e2:	89 81       	ldd	r24, Y+1	; 0x01
    61e4:	9a 81       	ldd	r25, Y+2	; 0x02
    61e6:	fc 01       	movw	r30, r24
    61e8:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    61ea:	01 c0       	rjmp	.+2      	; 0x61ee <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    61ec:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    61ee:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    61f2:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    61f6:	be 01       	movw	r22, r28
    61f8:	68 5f       	subi	r22, 0xF8	; 248
    61fa:	7f 4f       	sbci	r23, 0xFF	; 255
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	30 e0       	ldi	r19, 0x00	; 0
    6200:	a9 01       	movw	r20, r18
    6202:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <xQueueReceive>
    6206:	88 23       	and	r24, r24
    6208:	09 f0       	breq	.+2      	; 0x620c <prvProcessReceivedCommands+0x224>
    620a:	ff ce       	rjmp	.-514    	; 0x600a <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    620c:	00 00       	nop
    620e:	2f 96       	adiw	r28, 0x0f	; 15
    6210:	0f b6       	in	r0, 0x3f	; 63
    6212:	f8 94       	cli
    6214:	de bf       	out	0x3e, r29	; 62
    6216:	0f be       	out	0x3f, r0	; 63
    6218:	cd bf       	out	0x3d, r28	; 61
    621a:	df 91       	pop	r29
    621c:	cf 91       	pop	r28
    621e:	1f 91       	pop	r17
    6220:	0f 91       	pop	r16
    6222:	ff 90       	pop	r15
    6224:	ef 90       	pop	r14
    6226:	df 90       	pop	r13
    6228:	cf 90       	pop	r12
    622a:	08 95       	ret

0000622c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    622c:	cf 92       	push	r12
    622e:	df 92       	push	r13
    6230:	ef 92       	push	r14
    6232:	ff 92       	push	r15
    6234:	0f 93       	push	r16
    6236:	1f 93       	push	r17
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
    623c:	cd b7       	in	r28, 0x3d	; 61
    623e:	de b7       	in	r29, 0x3e	; 62
    6240:	2d 97       	sbiw	r28, 0x0d	; 13
    6242:	0f b6       	in	r0, 0x3f	; 63
    6244:	f8 94       	cli
    6246:	de bf       	out	0x3e, r29	; 62
    6248:	0f be       	out	0x3f, r0	; 63
    624a:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    624c:	85 c0       	rjmp	.+266    	; 0x6358 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    624e:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    6252:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    6256:	fc 01       	movw	r30, r24
    6258:	87 81       	ldd	r24, Z+7	; 0x07
    625a:	90 85       	ldd	r25, Z+8	; 0x08
    625c:	fc 01       	movw	r30, r24
    625e:	80 81       	ld	r24, Z
    6260:	91 81       	ldd	r25, Z+1	; 0x01
    6262:	a2 81       	ldd	r26, Z+2	; 0x02
    6264:	b3 81       	ldd	r27, Z+3	; 0x03
    6266:	89 83       	std	Y+1, r24	; 0x01
    6268:	9a 83       	std	Y+2, r25	; 0x02
    626a:	ab 83       	std	Y+3, r26	; 0x03
    626c:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    626e:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    6272:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    6276:	fc 01       	movw	r30, r24
    6278:	87 81       	ldd	r24, Z+7	; 0x07
    627a:	90 85       	ldd	r25, Z+8	; 0x08
    627c:	fc 01       	movw	r30, r24
    627e:	80 85       	ldd	r24, Z+8	; 0x08
    6280:	91 85       	ldd	r25, Z+9	; 0x09
    6282:	9e 83       	std	Y+6, r25	; 0x06
    6284:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6286:	8d 81       	ldd	r24, Y+5	; 0x05
    6288:	9e 81       	ldd	r25, Y+6	; 0x06
    628a:	02 96       	adiw	r24, 0x02	; 2
    628c:	0e 94 1f 0c 	call	0x183e	; 0x183e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6290:	8d 81       	ldd	r24, Y+5	; 0x05
    6292:	9e 81       	ldd	r25, Y+6	; 0x06
    6294:	fc 01       	movw	r30, r24
    6296:	24 89       	ldd	r18, Z+20	; 0x14
    6298:	35 89       	ldd	r19, Z+21	; 0x15
    629a:	8d 81       	ldd	r24, Y+5	; 0x05
    629c:	9e 81       	ldd	r25, Y+6	; 0x06
    629e:	f9 01       	movw	r30, r18
    62a0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    62a2:	8d 81       	ldd	r24, Y+5	; 0x05
    62a4:	9e 81       	ldd	r25, Y+6	; 0x06
    62a6:	fc 01       	movw	r30, r24
    62a8:	86 89       	ldd	r24, Z+22	; 0x16
    62aa:	88 2f       	mov	r24, r24
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	84 70       	andi	r24, 0x04	; 4
    62b0:	99 27       	eor	r25, r25
    62b2:	89 2b       	or	r24, r25
    62b4:	09 f4       	brne	.+2      	; 0x62b8 <prvSwitchTimerLists+0x8c>
    62b6:	50 c0       	rjmp	.+160    	; 0x6358 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    62b8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ba:	9e 81       	ldd	r25, Y+6	; 0x06
    62bc:	fc 01       	movw	r30, r24
    62be:	26 85       	ldd	r18, Z+14	; 0x0e
    62c0:	37 85       	ldd	r19, Z+15	; 0x0f
    62c2:	40 89       	ldd	r20, Z+16	; 0x10
    62c4:	51 89       	ldd	r21, Z+17	; 0x11
    62c6:	89 81       	ldd	r24, Y+1	; 0x01
    62c8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ca:	ab 81       	ldd	r26, Y+3	; 0x03
    62cc:	bc 81       	ldd	r27, Y+4	; 0x04
    62ce:	82 0f       	add	r24, r18
    62d0:	93 1f       	adc	r25, r19
    62d2:	a4 1f       	adc	r26, r20
    62d4:	b5 1f       	adc	r27, r21
    62d6:	8f 83       	std	Y+7, r24	; 0x07
    62d8:	98 87       	std	Y+8, r25	; 0x08
    62da:	a9 87       	std	Y+9, r26	; 0x09
    62dc:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    62de:	2f 81       	ldd	r18, Y+7	; 0x07
    62e0:	38 85       	ldd	r19, Y+8	; 0x08
    62e2:	49 85       	ldd	r20, Y+9	; 0x09
    62e4:	5a 85       	ldd	r21, Y+10	; 0x0a
    62e6:	89 81       	ldd	r24, Y+1	; 0x01
    62e8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ea:	ab 81       	ldd	r26, Y+3	; 0x03
    62ec:	bc 81       	ldd	r27, Y+4	; 0x04
    62ee:	82 17       	cp	r24, r18
    62f0:	93 07       	cpc	r25, r19
    62f2:	a4 07       	cpc	r26, r20
    62f4:	b5 07       	cpc	r27, r21
    62f6:	f8 f4       	brcc	.+62     	; 0x6336 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    62f8:	2d 81       	ldd	r18, Y+5	; 0x05
    62fa:	3e 81       	ldd	r19, Y+6	; 0x06
    62fc:	8f 81       	ldd	r24, Y+7	; 0x07
    62fe:	98 85       	ldd	r25, Y+8	; 0x08
    6300:	a9 85       	ldd	r26, Y+9	; 0x09
    6302:	ba 85       	ldd	r27, Y+10	; 0x0a
    6304:	f9 01       	movw	r30, r18
    6306:	82 83       	std	Z+2, r24	; 0x02
    6308:	93 83       	std	Z+3, r25	; 0x03
    630a:	a4 83       	std	Z+4, r26	; 0x04
    630c:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    630e:	8d 81       	ldd	r24, Y+5	; 0x05
    6310:	9e 81       	ldd	r25, Y+6	; 0x06
    6312:	2d 81       	ldd	r18, Y+5	; 0x05
    6314:	3e 81       	ldd	r19, Y+6	; 0x06
    6316:	fc 01       	movw	r30, r24
    6318:	33 87       	std	Z+11, r19	; 0x0b
    631a:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    631c:	8d 81       	ldd	r24, Y+5	; 0x05
    631e:	9e 81       	ldd	r25, Y+6	; 0x06
    6320:	9c 01       	movw	r18, r24
    6322:	2e 5f       	subi	r18, 0xFE	; 254
    6324:	3f 4f       	sbci	r19, 0xFF	; 255
    6326:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    632a:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    632e:	b9 01       	movw	r22, r18
    6330:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInsert>
    6334:	11 c0       	rjmp	.+34     	; 0x6358 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6336:	89 81       	ldd	r24, Y+1	; 0x01
    6338:	9a 81       	ldd	r25, Y+2	; 0x02
    633a:	ab 81       	ldd	r26, Y+3	; 0x03
    633c:	bc 81       	ldd	r27, Y+4	; 0x04
    633e:	ed 81       	ldd	r30, Y+5	; 0x05
    6340:	fe 81       	ldd	r31, Y+6	; 0x06
    6342:	c1 2c       	mov	r12, r1
    6344:	d1 2c       	mov	r13, r1
    6346:	76 01       	movw	r14, r12
    6348:	00 e0       	ldi	r16, 0x00	; 0
    634a:	10 e0       	ldi	r17, 0x00	; 0
    634c:	9c 01       	movw	r18, r24
    634e:	ad 01       	movw	r20, r26
    6350:	60 e0       	ldi	r22, 0x00	; 0
    6352:	cf 01       	movw	r24, r30
    6354:	a0 db       	rcall	.-2240   	; 0x5a96 <xTimerGenericCommand>
    6356:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6358:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    635c:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    6360:	fc 01       	movw	r30, r24
    6362:	80 81       	ld	r24, Z
    6364:	88 23       	and	r24, r24
    6366:	09 f0       	breq	.+2      	; 0x636a <prvSwitchTimerLists+0x13e>
    6368:	72 cf       	rjmp	.-284    	; 0x624e <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    636a:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <pxCurrentTimerList>
    636e:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <pxCurrentTimerList+0x1>
    6372:	9d 87       	std	Y+13, r25	; 0x0d
    6374:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    6376:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <pxOverflowTimerList>
    637a:	90 91 e7 16 	lds	r25, 0x16E7	; 0x8016e7 <pxOverflowTimerList+0x1>
    637e:	90 93 e5 16 	sts	0x16E5, r25	; 0x8016e5 <pxCurrentTimerList+0x1>
    6382:	80 93 e4 16 	sts	0x16E4, r24	; 0x8016e4 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    6386:	8c 85       	ldd	r24, Y+12	; 0x0c
    6388:	9d 85       	ldd	r25, Y+13	; 0x0d
    638a:	90 93 e7 16 	sts	0x16E7, r25	; 0x8016e7 <pxOverflowTimerList+0x1>
    638e:	80 93 e6 16 	sts	0x16E6, r24	; 0x8016e6 <pxOverflowTimerList>
    }
    6392:	00 00       	nop
    6394:	2d 96       	adiw	r28, 0x0d	; 13
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	f8 94       	cli
    639a:	de bf       	out	0x3e, r29	; 62
    639c:	0f be       	out	0x3f, r0	; 63
    639e:	cd bf       	out	0x3d, r28	; 61
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	1f 91       	pop	r17
    63a6:	0f 91       	pop	r16
    63a8:	ff 90       	pop	r15
    63aa:	ef 90       	pop	r14
    63ac:	df 90       	pop	r13
    63ae:	cf 90       	pop	r12
    63b0:	08 95       	ret

000063b2 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    63b2:	cf 93       	push	r28
    63b4:	df 93       	push	r29
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    63ba:	0f b6       	in	r0, 0x3f	; 63
    63bc:	f8 94       	cli
    63be:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    63c0:	80 91 e8 16 	lds	r24, 0x16E8	; 0x8016e8 <xTimerQueue>
    63c4:	90 91 e9 16 	lds	r25, 0x16E9	; 0x8016e9 <xTimerQueue+0x1>
    63c8:	89 2b       	or	r24, r25
    63ca:	e9 f4       	brne	.+58     	; 0x6406 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    63cc:	8e ec       	ldi	r24, 0xCE	; 206
    63ce:	96 e1       	ldi	r25, 0x16	; 22
    63d0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    63d4:	89 ed       	ldi	r24, 0xD9	; 217
    63d6:	96 e1       	ldi	r25, 0x16	; 22
    63d8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    63dc:	8e ec       	ldi	r24, 0xCE	; 206
    63de:	96 e1       	ldi	r25, 0x16	; 22
    63e0:	90 93 e5 16 	sts	0x16E5, r25	; 0x8016e5 <pxCurrentTimerList+0x1>
    63e4:	80 93 e4 16 	sts	0x16E4, r24	; 0x8016e4 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    63e8:	89 ed       	ldi	r24, 0xD9	; 217
    63ea:	96 e1       	ldi	r25, 0x16	; 22
    63ec:	90 93 e7 16 	sts	0x16E7, r25	; 0x8016e7 <pxOverflowTimerList+0x1>
    63f0:	80 93 e6 16 	sts	0x16E6, r24	; 0x8016e6 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    63f4:	40 e0       	ldi	r20, 0x00	; 0
    63f6:	67 e0       	ldi	r22, 0x07	; 7
    63f8:	8a e0       	ldi	r24, 0x0A	; 10
    63fa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xQueueGenericCreate>
    63fe:	90 93 e9 16 	sts	0x16E9, r25	; 0x8016e9 <xTimerQueue+0x1>
    6402:	80 93 e8 16 	sts	0x16E8, r24	; 0x8016e8 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    6406:	0f 90       	pop	r0
    6408:	0f be       	out	0x3f, r0	; 63
    }
    640a:	00 00       	nop
    640c:	df 91       	pop	r29
    640e:	cf 91       	pop	r28
    6410:	08 95       	ret

00006412 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    6412:	cf 93       	push	r28
    6414:	df 93       	push	r29
    6416:	cd b7       	in	r28, 0x3d	; 61
    6418:	de b7       	in	r29, 0x3e	; 62
}
    641a:	00 00       	nop
    641c:	df 91       	pop	r29
    641e:	cf 91       	pop	r28
    6420:	08 95       	ret

00006422 <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    6422:	cf 93       	push	r28
    6424:	df 93       	push	r29
    6426:	cd b7       	in	r28, 0x3d	; 61
    6428:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    642a:	84 e2       	ldi	r24, 0x24	; 36
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	24 e2       	ldi	r18, 0x24	; 36
    6430:	30 e0       	ldi	r19, 0x00	; 0
    6432:	f9 01       	movw	r30, r18
    6434:	20 81       	ld	r18, Z
    6436:	20 68       	ori	r18, 0x80	; 128
    6438:	fc 01       	movw	r30, r24
    643a:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    643c:	85 e2       	ldi	r24, 0x25	; 37
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	25 e2       	ldi	r18, 0x25	; 37
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	f9 01       	movw	r30, r18
    6446:	20 81       	ld	r18, Z
    6448:	20 68       	ori	r18, 0x80	; 128
    644a:	fc 01       	movw	r30, r24
    644c:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    644e:	00 00       	nop
    6450:	df 91       	pop	r29
    6452:	cf 91       	pop	r28
    6454:	08 95       	ret

00006456 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	cd b7       	in	r28, 0x3d	; 61
    645c:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    645e:	83 e2       	ldi	r24, 0x23	; 35
    6460:	90 e0       	ldi	r25, 0x00	; 0
    6462:	23 e2       	ldi	r18, 0x23	; 35
    6464:	30 e0       	ldi	r19, 0x00	; 0
    6466:	f9 01       	movw	r30, r18
    6468:	20 81       	ld	r18, Z
    646a:	20 68       	ori	r18, 0x80	; 128
    646c:	fc 01       	movw	r30, r24
    646e:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    6470:	00 00       	nop
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	08 95       	ret

00006478 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    6478:	cf 93       	push	r28
    647a:	df 93       	push	r29
    647c:	cd b7       	in	r28, 0x3d	; 61
    647e:	de b7       	in	r29, 0x3e	; 62
    6480:	2e 97       	sbiw	r28, 0x0e	; 14
    6482:	0f b6       	in	r0, 0x3f	; 63
    6484:	f8 94       	cli
    6486:	de bf       	out	0x3e, r29	; 62
    6488:	0f be       	out	0x3f, r0	; 63
    648a:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    648c:	ca df       	rcall	.-108    	; 0x6422 <prvSetMainLedOn>
    648e:	80 e0       	ldi	r24, 0x00	; 0
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	a8 e4       	ldi	r26, 0x48	; 72
    6494:	b2 e4       	ldi	r27, 0x42	; 66
    6496:	89 83       	std	Y+1, r24	; 0x01
    6498:	9a 83       	std	Y+2, r25	; 0x02
    649a:	ab 83       	std	Y+3, r26	; 0x03
    649c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    649e:	20 e0       	ldi	r18, 0x00	; 0
    64a0:	30 e0       	ldi	r19, 0x00	; 0
    64a2:	4a e7       	ldi	r20, 0x7A	; 122
    64a4:	55 e4       	ldi	r21, 0x45	; 69
    64a6:	69 81       	ldd	r22, Y+1	; 0x01
    64a8:	7a 81       	ldd	r23, Y+2	; 0x02
    64aa:	8b 81       	ldd	r24, Y+3	; 0x03
    64ac:	9c 81       	ldd	r25, Y+4	; 0x04
    64ae:	a4 d1       	rcall	.+840    	; 0x67f8 <__mulsf3>
    64b0:	dc 01       	movw	r26, r24
    64b2:	cb 01       	movw	r24, r22
    64b4:	8d 83       	std	Y+5, r24	; 0x05
    64b6:	9e 83       	std	Y+6, r25	; 0x06
    64b8:	af 83       	std	Y+7, r26	; 0x07
    64ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    64bc:	20 e0       	ldi	r18, 0x00	; 0
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	40 e8       	ldi	r20, 0x80	; 128
    64c2:	5f e3       	ldi	r21, 0x3F	; 63
    64c4:	6d 81       	ldd	r22, Y+5	; 0x05
    64c6:	7e 81       	ldd	r23, Y+6	; 0x06
    64c8:	8f 81       	ldd	r24, Y+7	; 0x07
    64ca:	98 85       	ldd	r25, Y+8	; 0x08
    64cc:	14 d1       	rcall	.+552    	; 0x66f6 <__cmpsf2>
    64ce:	88 23       	and	r24, r24
    64d0:	2c f4       	brge	.+10     	; 0x64dc <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    64d2:	81 e0       	ldi	r24, 0x01	; 1
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	9a 87       	std	Y+10, r25	; 0x0a
    64d8:	89 87       	std	Y+9, r24	; 0x09
    64da:	3b c0       	rjmp	.+118    	; 0x6552 <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    64dc:	20 e0       	ldi	r18, 0x00	; 0
    64de:	3f ef       	ldi	r19, 0xFF	; 255
    64e0:	4f e7       	ldi	r20, 0x7F	; 127
    64e2:	57 e4       	ldi	r21, 0x47	; 71
    64e4:	6d 81       	ldd	r22, Y+5	; 0x05
    64e6:	7e 81       	ldd	r23, Y+6	; 0x06
    64e8:	8f 81       	ldd	r24, Y+7	; 0x07
    64ea:	98 85       	ldd	r25, Y+8	; 0x08
    64ec:	81 d1       	rcall	.+770    	; 0x67f0 <__gesf2>
    64ee:	18 16       	cp	r1, r24
    64f0:	3c f5       	brge	.+78     	; 0x6540 <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64f2:	20 e0       	ldi	r18, 0x00	; 0
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	40 e2       	ldi	r20, 0x20	; 32
    64f8:	51 e4       	ldi	r21, 0x41	; 65
    64fa:	69 81       	ldd	r22, Y+1	; 0x01
    64fc:	7a 81       	ldd	r23, Y+2	; 0x02
    64fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6500:	9c 81       	ldd	r25, Y+4	; 0x04
    6502:	7a d1       	rcall	.+756    	; 0x67f8 <__mulsf3>
    6504:	dc 01       	movw	r26, r24
    6506:	cb 01       	movw	r24, r22
    6508:	bc 01       	movw	r22, r24
    650a:	cd 01       	movw	r24, r26
    650c:	f8 d0       	rcall	.+496    	; 0x66fe <__fixunssfsi>
    650e:	dc 01       	movw	r26, r24
    6510:	cb 01       	movw	r24, r22
    6512:	9a 87       	std	Y+10, r25	; 0x0a
    6514:	89 87       	std	Y+9, r24	; 0x09
    6516:	0f c0       	rjmp	.+30     	; 0x6536 <vApplicationMallocFailedHook+0xbe>
    6518:	80 e9       	ldi	r24, 0x90	; 144
    651a:	91 e0       	ldi	r25, 0x01	; 1
    651c:	9c 87       	std	Y+12, r25	; 0x0c
    651e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6520:	8b 85       	ldd	r24, Y+11	; 0x0b
    6522:	9c 85       	ldd	r25, Y+12	; 0x0c
    6524:	01 97       	sbiw	r24, 0x01	; 1
    6526:	f1 f7       	brne	.-4      	; 0x6524 <vApplicationMallocFailedHook+0xac>
    6528:	9c 87       	std	Y+12, r25	; 0x0c
    652a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    652c:	89 85       	ldd	r24, Y+9	; 0x09
    652e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6530:	01 97       	sbiw	r24, 0x01	; 1
    6532:	9a 87       	std	Y+10, r25	; 0x0a
    6534:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6536:	89 85       	ldd	r24, Y+9	; 0x09
    6538:	9a 85       	ldd	r25, Y+10	; 0x0a
    653a:	89 2b       	or	r24, r25
    653c:	69 f7       	brne	.-38     	; 0x6518 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    653e:	13 c0       	rjmp	.+38     	; 0x6566 <vApplicationMallocFailedHook+0xee>
    6540:	6d 81       	ldd	r22, Y+5	; 0x05
    6542:	7e 81       	ldd	r23, Y+6	; 0x06
    6544:	8f 81       	ldd	r24, Y+7	; 0x07
    6546:	98 85       	ldd	r25, Y+8	; 0x08
    6548:	da d0       	rcall	.+436    	; 0x66fe <__fixunssfsi>
    654a:	dc 01       	movw	r26, r24
    654c:	cb 01       	movw	r24, r22
    654e:	9a 87       	std	Y+10, r25	; 0x0a
    6550:	89 87       	std	Y+9, r24	; 0x09
    6552:	89 85       	ldd	r24, Y+9	; 0x09
    6554:	9a 85       	ldd	r25, Y+10	; 0x0a
    6556:	9e 87       	std	Y+14, r25	; 0x0e
    6558:	8d 87       	std	Y+13, r24	; 0x0d
    655a:	8d 85       	ldd	r24, Y+13	; 0x0d
    655c:	9e 85       	ldd	r25, Y+14	; 0x0e
    655e:	01 97       	sbiw	r24, 0x01	; 1
    6560:	f1 f7       	brne	.-4      	; 0x655e <vApplicationMallocFailedHook+0xe6>
    6562:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    6564:	8d 87       	std	Y+13, r24	; 0x0d
    6566:	77 df       	rcall	.-274    	; 0x6456 <prvBlinkMainLed>
    }
    6568:	92 cf       	rjmp	.-220    	; 0x648e <vApplicationMallocFailedHook+0x16>

0000656a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    656a:	cf 93       	push	r28
    656c:	df 93       	push	r29
    656e:	cd b7       	in	r28, 0x3d	; 61
    6570:	de b7       	in	r29, 0x3e	; 62
    6572:	62 97       	sbiw	r28, 0x12	; 18
    6574:	0f b6       	in	r0, 0x3f	; 63
    6576:	f8 94       	cli
    6578:	de bf       	out	0x3e, r29	; 62
    657a:	0f be       	out	0x3f, r0	; 63
    657c:	cd bf       	out	0x3d, r28	; 61
    657e:	98 8b       	std	Y+16, r25	; 0x10
    6580:	8f 87       	std	Y+15, r24	; 0x0f
    6582:	7a 8b       	std	Y+18, r23	; 0x12
    6584:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    6586:	4d df       	rcall	.-358    	; 0x6422 <prvSetMainLedOn>
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	aa ef       	ldi	r26, 0xFA	; 250
    658e:	b4 e4       	ldi	r27, 0x44	; 68
    6590:	89 83       	std	Y+1, r24	; 0x01
    6592:	9a 83       	std	Y+2, r25	; 0x02
    6594:	ab 83       	std	Y+3, r26	; 0x03
    6596:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6598:	20 e0       	ldi	r18, 0x00	; 0
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	4a e7       	ldi	r20, 0x7A	; 122
    659e:	55 e4       	ldi	r21, 0x45	; 69
    65a0:	69 81       	ldd	r22, Y+1	; 0x01
    65a2:	7a 81       	ldd	r23, Y+2	; 0x02
    65a4:	8b 81       	ldd	r24, Y+3	; 0x03
    65a6:	9c 81       	ldd	r25, Y+4	; 0x04
    65a8:	27 d1       	rcall	.+590    	; 0x67f8 <__mulsf3>
    65aa:	dc 01       	movw	r26, r24
    65ac:	cb 01       	movw	r24, r22
    65ae:	8d 83       	std	Y+5, r24	; 0x05
    65b0:	9e 83       	std	Y+6, r25	; 0x06
    65b2:	af 83       	std	Y+7, r26	; 0x07
    65b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    65b6:	20 e0       	ldi	r18, 0x00	; 0
    65b8:	30 e0       	ldi	r19, 0x00	; 0
    65ba:	40 e8       	ldi	r20, 0x80	; 128
    65bc:	5f e3       	ldi	r21, 0x3F	; 63
    65be:	6d 81       	ldd	r22, Y+5	; 0x05
    65c0:	7e 81       	ldd	r23, Y+6	; 0x06
    65c2:	8f 81       	ldd	r24, Y+7	; 0x07
    65c4:	98 85       	ldd	r25, Y+8	; 0x08
    65c6:	97 d0       	rcall	.+302    	; 0x66f6 <__cmpsf2>
    65c8:	88 23       	and	r24, r24
    65ca:	2c f4       	brge	.+10     	; 0x65d6 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    65cc:	81 e0       	ldi	r24, 0x01	; 1
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	9a 87       	std	Y+10, r25	; 0x0a
    65d2:	89 87       	std	Y+9, r24	; 0x09
    65d4:	3b c0       	rjmp	.+118    	; 0x664c <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    65d6:	20 e0       	ldi	r18, 0x00	; 0
    65d8:	3f ef       	ldi	r19, 0xFF	; 255
    65da:	4f e7       	ldi	r20, 0x7F	; 127
    65dc:	57 e4       	ldi	r21, 0x47	; 71
    65de:	6d 81       	ldd	r22, Y+5	; 0x05
    65e0:	7e 81       	ldd	r23, Y+6	; 0x06
    65e2:	8f 81       	ldd	r24, Y+7	; 0x07
    65e4:	98 85       	ldd	r25, Y+8	; 0x08
    65e6:	04 d1       	rcall	.+520    	; 0x67f0 <__gesf2>
    65e8:	18 16       	cp	r1, r24
    65ea:	3c f5       	brge	.+78     	; 0x663a <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65ec:	20 e0       	ldi	r18, 0x00	; 0
    65ee:	30 e0       	ldi	r19, 0x00	; 0
    65f0:	40 e2       	ldi	r20, 0x20	; 32
    65f2:	51 e4       	ldi	r21, 0x41	; 65
    65f4:	69 81       	ldd	r22, Y+1	; 0x01
    65f6:	7a 81       	ldd	r23, Y+2	; 0x02
    65f8:	8b 81       	ldd	r24, Y+3	; 0x03
    65fa:	9c 81       	ldd	r25, Y+4	; 0x04
    65fc:	fd d0       	rcall	.+506    	; 0x67f8 <__mulsf3>
    65fe:	dc 01       	movw	r26, r24
    6600:	cb 01       	movw	r24, r22
    6602:	bc 01       	movw	r22, r24
    6604:	cd 01       	movw	r24, r26
    6606:	7b d0       	rcall	.+246    	; 0x66fe <__fixunssfsi>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	9a 87       	std	Y+10, r25	; 0x0a
    660e:	89 87       	std	Y+9, r24	; 0x09
    6610:	0f c0       	rjmp	.+30     	; 0x6630 <vApplicationStackOverflowHook+0xc6>
    6612:	80 e9       	ldi	r24, 0x90	; 144
    6614:	91 e0       	ldi	r25, 0x01	; 1
    6616:	9c 87       	std	Y+12, r25	; 0x0c
    6618:	8b 87       	std	Y+11, r24	; 0x0b
    661a:	8b 85       	ldd	r24, Y+11	; 0x0b
    661c:	9c 85       	ldd	r25, Y+12	; 0x0c
    661e:	01 97       	sbiw	r24, 0x01	; 1
    6620:	f1 f7       	brne	.-4      	; 0x661e <vApplicationStackOverflowHook+0xb4>
    6622:	9c 87       	std	Y+12, r25	; 0x0c
    6624:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6626:	89 85       	ldd	r24, Y+9	; 0x09
    6628:	9a 85       	ldd	r25, Y+10	; 0x0a
    662a:	01 97       	sbiw	r24, 0x01	; 1
    662c:	9a 87       	std	Y+10, r25	; 0x0a
    662e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6630:	89 85       	ldd	r24, Y+9	; 0x09
    6632:	9a 85       	ldd	r25, Y+10	; 0x0a
    6634:	89 2b       	or	r24, r25
    6636:	69 f7       	brne	.-38     	; 0x6612 <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6638:	13 c0       	rjmp	.+38     	; 0x6660 <vApplicationStackOverflowHook+0xf6>
    663a:	6d 81       	ldd	r22, Y+5	; 0x05
    663c:	7e 81       	ldd	r23, Y+6	; 0x06
    663e:	8f 81       	ldd	r24, Y+7	; 0x07
    6640:	98 85       	ldd	r25, Y+8	; 0x08
    6642:	5d d0       	rcall	.+186    	; 0x66fe <__fixunssfsi>
    6644:	dc 01       	movw	r26, r24
    6646:	cb 01       	movw	r24, r22
    6648:	9a 87       	std	Y+10, r25	; 0x0a
    664a:	89 87       	std	Y+9, r24	; 0x09
    664c:	89 85       	ldd	r24, Y+9	; 0x09
    664e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6650:	9e 87       	std	Y+14, r25	; 0x0e
    6652:	8d 87       	std	Y+13, r24	; 0x0d
    6654:	8d 85       	ldd	r24, Y+13	; 0x0d
    6656:	9e 85       	ldd	r25, Y+14	; 0x0e
    6658:	01 97       	sbiw	r24, 0x01	; 1
    665a:	f1 f7       	brne	.-4      	; 0x6658 <vApplicationStackOverflowHook+0xee>
    665c:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    665e:	8d 87       	std	Y+13, r24	; 0x0d
    6660:	fa de       	rcall	.-524    	; 0x6456 <prvBlinkMainLed>
    }
    6662:	92 cf       	rjmp	.-220    	; 0x6588 <vApplicationStackOverflowHook+0x1e>

00006664 <initializeUsedData>:
#include "Co2Sensor.h"
#include "Setup.h"
#include "UpLinkHandler.h"

void initializeUsedData()
{
    6664:	cf 93       	push	r28
    6666:	df 93       	push	r29
    6668:	cd b7       	in	r28, 0x3d	; 61
    666a:	de b7       	in	r29, 0x3e	; 62
	initializeEventGroup();
    666c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <initializeEventGroup>
	
	createUpLinkMessageBuffer();
    6670:	0e 94 ef 04 	call	0x9de	; 0x9de <createUpLinkMessageBuffer>
	
	lora_driver_initialise(ser_USART1, NULL);
    6674:	60 e0       	ldi	r22, 0x00	; 0
    6676:	70 e0       	ldi	r23, 0x00	; 0
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	14 d3       	rcall	.+1576   	; 0x6ca4 <lora_driver_initialise>
}
    667c:	00 00       	nop
    667e:	df 91       	pop	r29
    6680:	cf 91       	pop	r28
    6682:	08 95       	ret

00006684 <create_tasks>:

void create_tasks(void)
{
    6684:	cf 93       	push	r28
    6686:	df 93       	push	r29
    6688:	cd b7       	in	r28, 0x3d	; 61
    668a:	de b7       	in	r29, 0x3e	; 62
	createTempAndHumTask(1);
    668c:	81 e0       	ldi	r24, 0x01	; 1
    668e:	0e 94 c0 05 	call	0xb80	; 0xb80 <createTempAndHumTask>
	createCo2Task(1);
    6692:	81 e0       	ldi	r24, 0x01	; 1
    6694:	0e 94 55 02 	call	0x4aa	; 0x4aa <createCo2Task>
	createApplicationTask(2);
    6698:	82 e0       	ldi	r24, 0x02	; 2
    669a:	0e 94 ac 01 	call	0x358	; 0x358 <createApplicationTask>
    lora_handler_uplink_payload(3);
    669e:	83 e0       	ldi	r24, 0x03	; 3
    66a0:	0e 94 1f 03 	call	0x63e	; 0x63e <lora_handler_uplink_payload>
}
    66a4:	00 00       	nop
    66a6:	df 91       	pop	r29
    66a8:	cf 91       	pop	r28
    66aa:	08 95       	ret

000066ac <initialiseSystem>:

void initialiseSystem()
{
    66ac:	cf 93       	push	r28
    66ae:	df 93       	push	r29
    66b0:	cd b7       	in	r28, 0x3d	; 61
    66b2:	de b7       	in	r29, 0x3e	; 62
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    66b4:	81 e2       	ldi	r24, 0x21	; 33
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	21 e2       	ldi	r18, 0x21	; 33
    66ba:	30 e0       	ldi	r19, 0x00	; 0
    66bc:	f9 01       	movw	r30, r18
    66be:	20 81       	ld	r18, Z
    66c0:	21 68       	ori	r18, 0x81	; 129
    66c2:	fc 01       	movw	r30, r24
    66c4:	20 83       	st	Z, r18

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	initializeUsedData();
    66c6:	ce df       	rcall	.-100    	; 0x6664 <initializeUsedData>
	stdio_initialise(ser_USART0);
    66c8:	80 e0       	ldi	r24, 0x00	; 0
    66ca:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <stdio_initialise>
	// Let's create some tasks
	create_tasks();
    66ce:	da df       	rcall	.-76     	; 0x6684 <create_tasks>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    66d0:	85 e0       	ldi	r24, 0x05	; 5
    66d2:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	//lora_driver_initialise(1, NULL);
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3); 
	
}
    66d6:	00 00       	nop
    66d8:	df 91       	pop	r29
    66da:	cf 91       	pop	r28
    66dc:	08 95       	ret

000066de <main>:

/*-----------------------------------------------------------*/
int main(void)
{
    66de:	cf 93       	push	r28
    66e0:	df 93       	push	r29
    66e2:	cd b7       	in	r28, 0x3d	; 61
    66e4:	de b7       	in	r29, 0x3e	; 62
	initialiseSystem(); // Must be done as the very first thing!!
    66e6:	e2 df       	rcall	.-60     	; 0x66ac <initialiseSystem>
	printf("Program Started!!\n");
    66e8:	82 e2       	ldi	r24, 0x22	; 34
    66ea:	95 e0       	ldi	r25, 0x05	; 5
    66ec:	0e 94 81 44 	call	0x8902	; 0x8902 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    66f0:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <vTaskStartScheduler>

	/* Replace with your application code */
	while (1)
	{
	}
    66f4:	ff cf       	rjmp	.-2      	; 0x66f4 <main+0x16>

000066f6 <__cmpsf2>:
    66f6:	2f d0       	rcall	.+94     	; 0x6756 <__fp_cmp>
    66f8:	08 f4       	brcc	.+2      	; 0x66fc <__cmpsf2+0x6>
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	08 95       	ret

000066fe <__fixunssfsi>:
    66fe:	57 d0       	rcall	.+174    	; 0x67ae <__fp_splitA>
    6700:	88 f0       	brcs	.+34     	; 0x6724 <__fixunssfsi+0x26>
    6702:	9f 57       	subi	r25, 0x7F	; 127
    6704:	90 f0       	brcs	.+36     	; 0x672a <__fixunssfsi+0x2c>
    6706:	b9 2f       	mov	r27, r25
    6708:	99 27       	eor	r25, r25
    670a:	b7 51       	subi	r27, 0x17	; 23
    670c:	a0 f0       	brcs	.+40     	; 0x6736 <__fixunssfsi+0x38>
    670e:	d1 f0       	breq	.+52     	; 0x6744 <__fixunssfsi+0x46>
    6710:	66 0f       	add	r22, r22
    6712:	77 1f       	adc	r23, r23
    6714:	88 1f       	adc	r24, r24
    6716:	99 1f       	adc	r25, r25
    6718:	1a f0       	brmi	.+6      	; 0x6720 <__fixunssfsi+0x22>
    671a:	ba 95       	dec	r27
    671c:	c9 f7       	brne	.-14     	; 0x6710 <__fixunssfsi+0x12>
    671e:	12 c0       	rjmp	.+36     	; 0x6744 <__fixunssfsi+0x46>
    6720:	b1 30       	cpi	r27, 0x01	; 1
    6722:	81 f0       	breq	.+32     	; 0x6744 <__fixunssfsi+0x46>
    6724:	5e d0       	rcall	.+188    	; 0x67e2 <__fp_zero>
    6726:	b1 e0       	ldi	r27, 0x01	; 1
    6728:	08 95       	ret
    672a:	5b c0       	rjmp	.+182    	; 0x67e2 <__fp_zero>
    672c:	67 2f       	mov	r22, r23
    672e:	78 2f       	mov	r23, r24
    6730:	88 27       	eor	r24, r24
    6732:	b8 5f       	subi	r27, 0xF8	; 248
    6734:	39 f0       	breq	.+14     	; 0x6744 <__fixunssfsi+0x46>
    6736:	b9 3f       	cpi	r27, 0xF9	; 249
    6738:	cc f3       	brlt	.-14     	; 0x672c <__fixunssfsi+0x2e>
    673a:	86 95       	lsr	r24
    673c:	77 95       	ror	r23
    673e:	67 95       	ror	r22
    6740:	b3 95       	inc	r27
    6742:	d9 f7       	brne	.-10     	; 0x673a <__fixunssfsi+0x3c>
    6744:	3e f4       	brtc	.+14     	; 0x6754 <__fixunssfsi+0x56>
    6746:	90 95       	com	r25
    6748:	80 95       	com	r24
    674a:	70 95       	com	r23
    674c:	61 95       	neg	r22
    674e:	7f 4f       	sbci	r23, 0xFF	; 255
    6750:	8f 4f       	sbci	r24, 0xFF	; 255
    6752:	9f 4f       	sbci	r25, 0xFF	; 255
    6754:	08 95       	ret

00006756 <__fp_cmp>:
    6756:	99 0f       	add	r25, r25
    6758:	00 08       	sbc	r0, r0
    675a:	55 0f       	add	r21, r21
    675c:	aa 0b       	sbc	r26, r26
    675e:	e0 e8       	ldi	r30, 0x80	; 128
    6760:	fe ef       	ldi	r31, 0xFE	; 254
    6762:	16 16       	cp	r1, r22
    6764:	17 06       	cpc	r1, r23
    6766:	e8 07       	cpc	r30, r24
    6768:	f9 07       	cpc	r31, r25
    676a:	c0 f0       	brcs	.+48     	; 0x679c <__fp_cmp+0x46>
    676c:	12 16       	cp	r1, r18
    676e:	13 06       	cpc	r1, r19
    6770:	e4 07       	cpc	r30, r20
    6772:	f5 07       	cpc	r31, r21
    6774:	98 f0       	brcs	.+38     	; 0x679c <__fp_cmp+0x46>
    6776:	62 1b       	sub	r22, r18
    6778:	73 0b       	sbc	r23, r19
    677a:	84 0b       	sbc	r24, r20
    677c:	95 0b       	sbc	r25, r21
    677e:	39 f4       	brne	.+14     	; 0x678e <__fp_cmp+0x38>
    6780:	0a 26       	eor	r0, r26
    6782:	61 f0       	breq	.+24     	; 0x679c <__fp_cmp+0x46>
    6784:	23 2b       	or	r18, r19
    6786:	24 2b       	or	r18, r20
    6788:	25 2b       	or	r18, r21
    678a:	21 f4       	brne	.+8      	; 0x6794 <__fp_cmp+0x3e>
    678c:	08 95       	ret
    678e:	0a 26       	eor	r0, r26
    6790:	09 f4       	brne	.+2      	; 0x6794 <__fp_cmp+0x3e>
    6792:	a1 40       	sbci	r26, 0x01	; 1
    6794:	a6 95       	lsr	r26
    6796:	8f ef       	ldi	r24, 0xFF	; 255
    6798:	81 1d       	adc	r24, r1
    679a:	81 1d       	adc	r24, r1
    679c:	08 95       	ret

0000679e <__fp_split3>:
    679e:	57 fd       	sbrc	r21, 7
    67a0:	90 58       	subi	r25, 0x80	; 128
    67a2:	44 0f       	add	r20, r20
    67a4:	55 1f       	adc	r21, r21
    67a6:	59 f0       	breq	.+22     	; 0x67be <__fp_splitA+0x10>
    67a8:	5f 3f       	cpi	r21, 0xFF	; 255
    67aa:	71 f0       	breq	.+28     	; 0x67c8 <__fp_splitA+0x1a>
    67ac:	47 95       	ror	r20

000067ae <__fp_splitA>:
    67ae:	88 0f       	add	r24, r24
    67b0:	97 fb       	bst	r25, 7
    67b2:	99 1f       	adc	r25, r25
    67b4:	61 f0       	breq	.+24     	; 0x67ce <__fp_splitA+0x20>
    67b6:	9f 3f       	cpi	r25, 0xFF	; 255
    67b8:	79 f0       	breq	.+30     	; 0x67d8 <__fp_splitA+0x2a>
    67ba:	87 95       	ror	r24
    67bc:	08 95       	ret
    67be:	12 16       	cp	r1, r18
    67c0:	13 06       	cpc	r1, r19
    67c2:	14 06       	cpc	r1, r20
    67c4:	55 1f       	adc	r21, r21
    67c6:	f2 cf       	rjmp	.-28     	; 0x67ac <__fp_split3+0xe>
    67c8:	46 95       	lsr	r20
    67ca:	f1 df       	rcall	.-30     	; 0x67ae <__fp_splitA>
    67cc:	08 c0       	rjmp	.+16     	; 0x67de <__fp_splitA+0x30>
    67ce:	16 16       	cp	r1, r22
    67d0:	17 06       	cpc	r1, r23
    67d2:	18 06       	cpc	r1, r24
    67d4:	99 1f       	adc	r25, r25
    67d6:	f1 cf       	rjmp	.-30     	; 0x67ba <__fp_splitA+0xc>
    67d8:	86 95       	lsr	r24
    67da:	71 05       	cpc	r23, r1
    67dc:	61 05       	cpc	r22, r1
    67de:	08 94       	sec
    67e0:	08 95       	ret

000067e2 <__fp_zero>:
    67e2:	e8 94       	clt

000067e4 <__fp_szero>:
    67e4:	bb 27       	eor	r27, r27
    67e6:	66 27       	eor	r22, r22
    67e8:	77 27       	eor	r23, r23
    67ea:	cb 01       	movw	r24, r22
    67ec:	97 f9       	bld	r25, 7
    67ee:	08 95       	ret

000067f0 <__gesf2>:
    67f0:	b2 df       	rcall	.-156    	; 0x6756 <__fp_cmp>
    67f2:	08 f4       	brcc	.+2      	; 0x67f6 <__gesf2+0x6>
    67f4:	8f ef       	ldi	r24, 0xFF	; 255
    67f6:	08 95       	ret

000067f8 <__mulsf3>:
    67f8:	0b d0       	rcall	.+22     	; 0x6810 <__mulsf3x>
    67fa:	78 c0       	rjmp	.+240    	; 0x68ec <__fp_round>
    67fc:	69 d0       	rcall	.+210    	; 0x68d0 <__fp_pscA>
    67fe:	28 f0       	brcs	.+10     	; 0x680a <__mulsf3+0x12>
    6800:	6e d0       	rcall	.+220    	; 0x68de <__fp_pscB>
    6802:	18 f0       	brcs	.+6      	; 0x680a <__mulsf3+0x12>
    6804:	95 23       	and	r25, r21
    6806:	09 f0       	breq	.+2      	; 0x680a <__mulsf3+0x12>
    6808:	5a c0       	rjmp	.+180    	; 0x68be <__fp_inf>
    680a:	5f c0       	rjmp	.+190    	; 0x68ca <__fp_nan>
    680c:	11 24       	eor	r1, r1
    680e:	ea cf       	rjmp	.-44     	; 0x67e4 <__fp_szero>

00006810 <__mulsf3x>:
    6810:	c6 df       	rcall	.-116    	; 0x679e <__fp_split3>
    6812:	a0 f3       	brcs	.-24     	; 0x67fc <__mulsf3+0x4>

00006814 <__mulsf3_pse>:
    6814:	95 9f       	mul	r25, r21
    6816:	d1 f3       	breq	.-12     	; 0x680c <__mulsf3+0x14>
    6818:	95 0f       	add	r25, r21
    681a:	50 e0       	ldi	r21, 0x00	; 0
    681c:	55 1f       	adc	r21, r21
    681e:	62 9f       	mul	r22, r18
    6820:	f0 01       	movw	r30, r0
    6822:	72 9f       	mul	r23, r18
    6824:	bb 27       	eor	r27, r27
    6826:	f0 0d       	add	r31, r0
    6828:	b1 1d       	adc	r27, r1
    682a:	63 9f       	mul	r22, r19
    682c:	aa 27       	eor	r26, r26
    682e:	f0 0d       	add	r31, r0
    6830:	b1 1d       	adc	r27, r1
    6832:	aa 1f       	adc	r26, r26
    6834:	64 9f       	mul	r22, r20
    6836:	66 27       	eor	r22, r22
    6838:	b0 0d       	add	r27, r0
    683a:	a1 1d       	adc	r26, r1
    683c:	66 1f       	adc	r22, r22
    683e:	82 9f       	mul	r24, r18
    6840:	22 27       	eor	r18, r18
    6842:	b0 0d       	add	r27, r0
    6844:	a1 1d       	adc	r26, r1
    6846:	62 1f       	adc	r22, r18
    6848:	73 9f       	mul	r23, r19
    684a:	b0 0d       	add	r27, r0
    684c:	a1 1d       	adc	r26, r1
    684e:	62 1f       	adc	r22, r18
    6850:	83 9f       	mul	r24, r19
    6852:	a0 0d       	add	r26, r0
    6854:	61 1d       	adc	r22, r1
    6856:	22 1f       	adc	r18, r18
    6858:	74 9f       	mul	r23, r20
    685a:	33 27       	eor	r19, r19
    685c:	a0 0d       	add	r26, r0
    685e:	61 1d       	adc	r22, r1
    6860:	23 1f       	adc	r18, r19
    6862:	84 9f       	mul	r24, r20
    6864:	60 0d       	add	r22, r0
    6866:	21 1d       	adc	r18, r1
    6868:	82 2f       	mov	r24, r18
    686a:	76 2f       	mov	r23, r22
    686c:	6a 2f       	mov	r22, r26
    686e:	11 24       	eor	r1, r1
    6870:	9f 57       	subi	r25, 0x7F	; 127
    6872:	50 40       	sbci	r21, 0x00	; 0
    6874:	8a f0       	brmi	.+34     	; 0x6898 <__mulsf3_pse+0x84>
    6876:	e1 f0       	breq	.+56     	; 0x68b0 <__mulsf3_pse+0x9c>
    6878:	88 23       	and	r24, r24
    687a:	4a f0       	brmi	.+18     	; 0x688e <__mulsf3_pse+0x7a>
    687c:	ee 0f       	add	r30, r30
    687e:	ff 1f       	adc	r31, r31
    6880:	bb 1f       	adc	r27, r27
    6882:	66 1f       	adc	r22, r22
    6884:	77 1f       	adc	r23, r23
    6886:	88 1f       	adc	r24, r24
    6888:	91 50       	subi	r25, 0x01	; 1
    688a:	50 40       	sbci	r21, 0x00	; 0
    688c:	a9 f7       	brne	.-22     	; 0x6878 <__mulsf3_pse+0x64>
    688e:	9e 3f       	cpi	r25, 0xFE	; 254
    6890:	51 05       	cpc	r21, r1
    6892:	70 f0       	brcs	.+28     	; 0x68b0 <__mulsf3_pse+0x9c>
    6894:	14 c0       	rjmp	.+40     	; 0x68be <__fp_inf>
    6896:	a6 cf       	rjmp	.-180    	; 0x67e4 <__fp_szero>
    6898:	5f 3f       	cpi	r21, 0xFF	; 255
    689a:	ec f3       	brlt	.-6      	; 0x6896 <__mulsf3_pse+0x82>
    689c:	98 3e       	cpi	r25, 0xE8	; 232
    689e:	dc f3       	brlt	.-10     	; 0x6896 <__mulsf3_pse+0x82>
    68a0:	86 95       	lsr	r24
    68a2:	77 95       	ror	r23
    68a4:	67 95       	ror	r22
    68a6:	b7 95       	ror	r27
    68a8:	f7 95       	ror	r31
    68aa:	e7 95       	ror	r30
    68ac:	9f 5f       	subi	r25, 0xFF	; 255
    68ae:	c1 f7       	brne	.-16     	; 0x68a0 <__mulsf3_pse+0x8c>
    68b0:	fe 2b       	or	r31, r30
    68b2:	88 0f       	add	r24, r24
    68b4:	91 1d       	adc	r25, r1
    68b6:	96 95       	lsr	r25
    68b8:	87 95       	ror	r24
    68ba:	97 f9       	bld	r25, 7
    68bc:	08 95       	ret

000068be <__fp_inf>:
    68be:	97 f9       	bld	r25, 7
    68c0:	9f 67       	ori	r25, 0x7F	; 127
    68c2:	80 e8       	ldi	r24, 0x80	; 128
    68c4:	70 e0       	ldi	r23, 0x00	; 0
    68c6:	60 e0       	ldi	r22, 0x00	; 0
    68c8:	08 95       	ret

000068ca <__fp_nan>:
    68ca:	9f ef       	ldi	r25, 0xFF	; 255
    68cc:	80 ec       	ldi	r24, 0xC0	; 192
    68ce:	08 95       	ret

000068d0 <__fp_pscA>:
    68d0:	00 24       	eor	r0, r0
    68d2:	0a 94       	dec	r0
    68d4:	16 16       	cp	r1, r22
    68d6:	17 06       	cpc	r1, r23
    68d8:	18 06       	cpc	r1, r24
    68da:	09 06       	cpc	r0, r25
    68dc:	08 95       	ret

000068de <__fp_pscB>:
    68de:	00 24       	eor	r0, r0
    68e0:	0a 94       	dec	r0
    68e2:	12 16       	cp	r1, r18
    68e4:	13 06       	cpc	r1, r19
    68e6:	14 06       	cpc	r1, r20
    68e8:	05 06       	cpc	r0, r21
    68ea:	08 95       	ret

000068ec <__fp_round>:
    68ec:	09 2e       	mov	r0, r25
    68ee:	03 94       	inc	r0
    68f0:	00 0c       	add	r0, r0
    68f2:	11 f4       	brne	.+4      	; 0x68f8 <__fp_round+0xc>
    68f4:	88 23       	and	r24, r24
    68f6:	52 f0       	brmi	.+20     	; 0x690c <__fp_round+0x20>
    68f8:	bb 0f       	add	r27, r27
    68fa:	40 f4       	brcc	.+16     	; 0x690c <__fp_round+0x20>
    68fc:	bf 2b       	or	r27, r31
    68fe:	11 f4       	brne	.+4      	; 0x6904 <__fp_round+0x18>
    6900:	60 ff       	sbrs	r22, 0
    6902:	04 c0       	rjmp	.+8      	; 0x690c <__fp_round+0x20>
    6904:	6f 5f       	subi	r22, 0xFF	; 255
    6906:	7f 4f       	sbci	r23, 0xFF	; 255
    6908:	8f 4f       	sbci	r24, 0xFF	; 255
    690a:	9f 4f       	sbci	r25, 0xFF	; 255
    690c:	08 95       	ret

0000690e <_hihTwiCallback>:
    690e:	65 30       	cpi	r22, 0x05	; 5
    6910:	f1 f4       	brne	.+60     	; 0x694e <_hihTwiCallback+0x40>
    6912:	fa 01       	movw	r30, r20
    6914:	80 81       	ld	r24, Z
    6916:	8f 73       	andi	r24, 0x3F	; 63
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	98 2f       	mov	r25, r24
    691c:	88 27       	eor	r24, r24
    691e:	21 81       	ldd	r18, Z+1	; 0x01
    6920:	82 2b       	or	r24, r18
    6922:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    6926:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    692a:	82 81       	ldd	r24, Z+2	; 0x02
    692c:	f0 e4       	ldi	r31, 0x40	; 64
    692e:	8f 9f       	mul	r24, r31
    6930:	c0 01       	movw	r24, r0
    6932:	11 24       	eor	r1, r1
    6934:	fa 01       	movw	r30, r20
    6936:	23 81       	ldd	r18, Z+3	; 0x03
    6938:	26 95       	lsr	r18
    693a:	26 95       	lsr	r18
    693c:	82 2b       	or	r24, r18
    693e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    6942:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    6946:	81 e0       	ldi	r24, 0x01	; 1
    6948:	80 93 f0 16 	sts	0x16F0, r24	; 0x8016f0 <_measuringIsReady>
    694c:	08 95       	ret
    694e:	64 30       	cpi	r22, 0x04	; 4
    6950:	51 f0       	breq	.+20     	; 0x6966 <_hihTwiCallback+0x58>
    6952:	80 e0       	ldi	r24, 0x00	; 0
    6954:	90 e4       	ldi	r25, 0x40	; 64
    6956:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    695a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    695e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    6962:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    6966:	08 95       	ret

00006968 <hih8120_initialise>:
    6968:	0f 93       	push	r16
    696a:	1f 93       	push	r17
    696c:	07 e8       	ldi	r16, 0x87	; 135
    696e:	14 e3       	ldi	r17, 0x34	; 52
    6970:	20 e0       	ldi	r18, 0x00	; 0
    6972:	34 e2       	ldi	r19, 0x24	; 36
    6974:	44 ef       	ldi	r20, 0xF4	; 244
    6976:	50 e0       	ldi	r21, 0x00	; 0
    6978:	60 e0       	ldi	r22, 0x00	; 0
    697a:	87 e2       	ldi	r24, 0x27	; 39
    697c:	0e 94 f6 3f 	call	0x7fec	; 0x7fec <twiCreate>
    6980:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <_hih8120Handler+0x1>
    6984:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_hih8120Handler>
    6988:	21 e0       	ldi	r18, 0x01	; 1
    698a:	89 2b       	or	r24, r25
    698c:	09 f0       	breq	.+2      	; 0x6990 <hih8120_initialise+0x28>
    698e:	20 e0       	ldi	r18, 0x00	; 0
    6990:	82 2f       	mov	r24, r18
    6992:	1f 91       	pop	r17
    6994:	0f 91       	pop	r16
    6996:	08 95       	ret

00006998 <hih8120_wakeup>:
    6998:	80 91 f1 16 	lds	r24, 0x16F1	; 0x8016f1 <_hih8120Handler>
    699c:	90 91 f2 16 	lds	r25, 0x16F2	; 0x8016f2 <_hih8120Handler+0x1>
    69a0:	00 97       	sbiw	r24, 0x00	; 0
    69a2:	59 f0       	breq	.+22     	; 0x69ba <hih8120_wakeup+0x22>
    69a4:	40 e0       	ldi	r20, 0x00	; 0
    69a6:	60 e0       	ldi	r22, 0x00	; 0
    69a8:	70 e0       	ldi	r23, 0x00	; 0
    69aa:	0e 94 47 40 	call	0x808e	; 0x808e <twiTransmit>
    69ae:	84 30       	cpi	r24, 0x04	; 4
    69b0:	31 f4       	brne	.+12     	; 0x69be <hih8120_wakeup+0x26>
    69b2:	10 92 f0 16 	sts	0x16F0, r1	; 0x8016f0 <_measuringIsReady>
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	08 95       	ret
    69ba:	82 e0       	ldi	r24, 0x02	; 2
    69bc:	08 95       	ret
    69be:	83 e0       	ldi	r24, 0x03	; 3
    69c0:	08 95       	ret

000069c2 <hih8120_measure>:
    69c2:	80 91 f1 16 	lds	r24, 0x16F1	; 0x8016f1 <_hih8120Handler>
    69c6:	90 91 f2 16 	lds	r25, 0x16F2	; 0x8016f2 <_hih8120Handler+0x1>
    69ca:	00 97       	sbiw	r24, 0x00	; 0
    69cc:	39 f0       	breq	.+14     	; 0x69dc <hih8120_measure+0x1a>
    69ce:	64 e0       	ldi	r22, 0x04	; 4
    69d0:	0e 94 93 40 	call	0x8126	; 0x8126 <twiReceive>
    69d4:	85 30       	cpi	r24, 0x05	; 5
    69d6:	21 f0       	breq	.+8      	; 0x69e0 <hih8120_measure+0x1e>
    69d8:	83 e0       	ldi	r24, 0x03	; 3
    69da:	08 95       	ret
    69dc:	82 e0       	ldi	r24, 0x02	; 2
    69de:	08 95       	ret
    69e0:	80 e0       	ldi	r24, 0x00	; 0
    69e2:	08 95       	ret

000069e4 <hih8120_getHumidity>:
    69e4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    69e8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    69ec:	80 e0       	ldi	r24, 0x00	; 0
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e 94 83 42 	call	0x8506	; 0x8506 <__floatunsisf>
    69f4:	20 e0       	ldi	r18, 0x00	; 0
    69f6:	30 e0       	ldi	r19, 0x00	; 0
    69f8:	48 ec       	ldi	r20, 0xC8	; 200
    69fa:	52 e4       	ldi	r21, 0x42	; 66
    69fc:	fd de       	rcall	.-518    	; 0x67f8 <__mulsf3>
    69fe:	20 e0       	ldi	r18, 0x00	; 0
    6a00:	38 ef       	ldi	r19, 0xF8	; 248
    6a02:	4f e7       	ldi	r20, 0x7F	; 127
    6a04:	56 e4       	ldi	r21, 0x46	; 70
    6a06:	0c 94 0b 42 	jmp	0x8416	; 0x8416 <__divsf3>
    6a0a:	08 95       	ret

00006a0c <hih8120_getHumidityPercent_x10>:
    6a0c:	eb df       	rcall	.-42     	; 0x69e4 <hih8120_getHumidity>
    6a0e:	20 e0       	ldi	r18, 0x00	; 0
    6a10:	30 e0       	ldi	r19, 0x00	; 0
    6a12:	40 e2       	ldi	r20, 0x20	; 32
    6a14:	51 e4       	ldi	r21, 0x41	; 65
    6a16:	f0 de       	rcall	.-544    	; 0x67f8 <__mulsf3>
    6a18:	72 de       	rcall	.-796    	; 0x66fe <__fixunssfsi>
    6a1a:	cb 01       	movw	r24, r22
    6a1c:	08 95       	ret

00006a1e <hih8120_getTemperature>:
    6a1e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    6a22:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    6a26:	80 e0       	ldi	r24, 0x00	; 0
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	0e 94 83 42 	call	0x8506	; 0x8506 <__floatunsisf>
    6a2e:	20 e0       	ldi	r18, 0x00	; 0
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	45 e2       	ldi	r20, 0x25	; 37
    6a34:	53 e4       	ldi	r21, 0x43	; 67
    6a36:	e0 de       	rcall	.-576    	; 0x67f8 <__mulsf3>
    6a38:	20 e0       	ldi	r18, 0x00	; 0
    6a3a:	38 ef       	ldi	r19, 0xF8	; 248
    6a3c:	4f e7       	ldi	r20, 0x7F	; 127
    6a3e:	56 e4       	ldi	r21, 0x46	; 70
    6a40:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divsf3>
    6a44:	20 e0       	ldi	r18, 0x00	; 0
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	40 e2       	ldi	r20, 0x20	; 32
    6a4a:	52 e4       	ldi	r21, 0x42	; 66
    6a4c:	0c 94 9f 41 	jmp	0x833e	; 0x833e <__subsf3>
    6a50:	08 95       	ret

00006a52 <hih8120_getTemperature_x10>:
    6a52:	e5 df       	rcall	.-54     	; 0x6a1e <hih8120_getTemperature>
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	40 e2       	ldi	r20, 0x20	; 32
    6a5a:	51 e4       	ldi	r21, 0x41	; 65
    6a5c:	cd de       	rcall	.-614    	; 0x67f8 <__mulsf3>
    6a5e:	0e 94 7c 42 	call	0x84f8	; 0x84f8 <__fixsfsi>
    6a62:	cb 01       	movw	r24, r22
    6a64:	08 95       	ret

00006a66 <_serialCallBack>:
    6a66:	0f 93       	push	r16
    6a68:	1f 93       	push	r17
    6a6a:	cf 93       	push	r28
    6a6c:	df 93       	push	r29
    6a6e:	1f 92       	push	r1
    6a70:	1f 92       	push	r1
    6a72:	cd b7       	in	r28, 0x3d	; 61
    6a74:	de b7       	in	r29, 0x3e	; 62
    6a76:	8c 01       	movw	r16, r24
    6a78:	19 82       	std	Y+1, r1	; 0x01
    6a7a:	2d c0       	rjmp	.+90     	; 0x6ad6 <_serialCallBack+0x70>
    6a7c:	e0 91 2a 17 	lds	r30, 0x172A	; 0x80172a <rec_buf_inp.2878>
    6a80:	ec 32       	cpi	r30, 0x2C	; 44
    6a82:	50 f4       	brcc	.+20     	; 0x6a98 <_serialCallBack+0x32>
    6a84:	81 e0       	ldi	r24, 0x01	; 1
    6a86:	8e 0f       	add	r24, r30
    6a88:	80 93 2a 17 	sts	0x172A, r24	; 0x80172a <rec_buf_inp.2878>
    6a8c:	f0 e0       	ldi	r31, 0x00	; 0
    6a8e:	e4 5a       	subi	r30, 0xA4	; 164
    6a90:	f8 4e       	sbci	r31, 0xE8	; 232
    6a92:	8a 81       	ldd	r24, Y+2	; 0x02
    6a94:	80 83       	st	Z, r24
    6a96:	02 c0       	rjmp	.+4      	; 0x6a9c <_serialCallBack+0x36>
    6a98:	10 92 2a 17 	sts	0x172A, r1	; 0x80172a <rec_buf_inp.2878>
    6a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a9e:	8a 30       	cpi	r24, 0x0A	; 10
    6aa0:	d1 f4       	brne	.+52     	; 0x6ad6 <_serialCallBack+0x70>
    6aa2:	40 91 2a 17 	lds	r20, 0x172A	; 0x80172a <rec_buf_inp.2878>
    6aa6:	50 e0       	ldi	r21, 0x00	; 0
    6aa8:	fa 01       	movw	r30, r20
    6aaa:	e6 5a       	subi	r30, 0xA6	; 166
    6aac:	f8 4e       	sbci	r31, 0xE8	; 232
    6aae:	10 82       	st	Z, r1
    6ab0:	41 50       	subi	r20, 0x01	; 1
    6ab2:	51 09       	sbc	r21, r1
    6ab4:	9e 01       	movw	r18, r28
    6ab6:	2f 5f       	subi	r18, 0xFF	; 255
    6ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aba:	6c e5       	ldi	r22, 0x5C	; 92
    6abc:	77 e1       	ldi	r23, 0x17	; 23
    6abe:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6ac2:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6ac6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xStreamBufferSendFromISR>
    6aca:	89 81       	ldd	r24, Y+1	; 0x01
    6acc:	81 11       	cpse	r24, r1
    6ace:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <vPortYield>
    6ad2:	10 92 2a 17 	sts	0x172A, r1	; 0x80172a <rec_buf_inp.2878>
    6ad6:	be 01       	movw	r22, r28
    6ad8:	6e 5f       	subi	r22, 0xFE	; 254
    6ada:	7f 4f       	sbci	r23, 0xFF	; 255
    6adc:	c8 01       	movw	r24, r16
    6ade:	03 d6       	rcall	.+3078   	; 0x76e6 <serial_getByte>
    6ae0:	88 23       	and	r24, r24
    6ae2:	61 f2       	breq	.-104    	; 0x6a7c <_serialCallBack+0x16>
    6ae4:	0f 90       	pop	r0
    6ae6:	0f 90       	pop	r0
    6ae8:	df 91       	pop	r29
    6aea:	cf 91       	pop	r28
    6aec:	1f 91       	pop	r17
    6aee:	0f 91       	pop	r16
    6af0:	08 95       	ret

00006af2 <_uploadMessage>:
    6af2:	0f 93       	push	r16
    6af4:	1f 93       	push	r17
    6af6:	cf 93       	push	r28
    6af8:	df 93       	push	r29
    6afa:	8c 01       	movw	r16, r24
    6afc:	eb 01       	movw	r28, r22
    6afe:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6b02:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6b06:	0e 94 6f 13 	call	0x26de	; 0x26de <xStreamBufferReset>
    6b0a:	b8 01       	movw	r22, r16
    6b0c:	83 ef       	ldi	r24, 0xF3	; 243
    6b0e:	96 e1       	ldi	r25, 0x16	; 22
    6b10:	0e 94 4f 44 	call	0x889e	; 0x889e <strcpy>
    6b14:	20 97       	sbiw	r28, 0x00	; 0
    6b16:	79 f0       	breq	.+30     	; 0x6b36 <_uploadMessage+0x44>
    6b18:	e3 ef       	ldi	r30, 0xF3	; 243
    6b1a:	f6 e1       	ldi	r31, 0x16	; 22
    6b1c:	01 90       	ld	r0, Z+
    6b1e:	00 20       	and	r0, r0
    6b20:	e9 f7       	brne	.-6      	; 0x6b1c <_uploadMessage+0x2a>
    6b22:	31 97       	sbiw	r30, 0x01	; 1
    6b24:	80 e2       	ldi	r24, 0x20	; 32
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	91 83       	std	Z+1, r25	; 0x01
    6b2a:	80 83       	st	Z, r24
    6b2c:	be 01       	movw	r22, r28
    6b2e:	83 ef       	ldi	r24, 0xF3	; 243
    6b30:	96 e1       	ldi	r25, 0x16	; 22
    6b32:	0e 94 44 44 	call	0x8888	; 0x8888 <strcat>
    6b36:	e3 ef       	ldi	r30, 0xF3	; 243
    6b38:	f6 e1       	ldi	r31, 0x16	; 22
    6b3a:	df 01       	movw	r26, r30
    6b3c:	0d 90       	ld	r0, X+
    6b3e:	00 20       	and	r0, r0
    6b40:	e9 f7       	brne	.-6      	; 0x6b3c <_uploadMessage+0x4a>
    6b42:	11 97       	sbiw	r26, 0x01	; 1
    6b44:	8d e0       	ldi	r24, 0x0D	; 13
    6b46:	9a e0       	ldi	r25, 0x0A	; 10
    6b48:	11 96       	adiw	r26, 0x01	; 1
    6b4a:	9c 93       	st	X, r25
    6b4c:	8e 93       	st	-X, r24
    6b4e:	12 96       	adiw	r26, 0x02	; 2
    6b50:	1c 92       	st	X, r1
    6b52:	01 90       	ld	r0, Z+
    6b54:	00 20       	and	r0, r0
    6b56:	e9 f7       	brne	.-6      	; 0x6b52 <_uploadMessage+0x60>
    6b58:	31 97       	sbiw	r30, 0x01	; 1
    6b5a:	e3 5f       	subi	r30, 0xF3	; 243
    6b5c:	f6 41       	sbci	r31, 0x16	; 22
    6b5e:	ae 2f       	mov	r26, r30
    6b60:	83 ef       	ldi	r24, 0xF3	; 243
    6b62:	96 e1       	ldi	r25, 0x16	; 22
    6b64:	ac 01       	movw	r20, r24
    6b66:	6a 2f       	mov	r22, r26
    6b68:	80 91 2f 17 	lds	r24, 0x172F	; 0x80172f <_rn2483_serial>
    6b6c:	90 91 30 17 	lds	r25, 0x1730	; 0x801730 <_rn2483_serial+0x1>
    6b70:	65 d5       	rcall	.+2762   	; 0x763c <serial_sendBytes>
    6b72:	81 11       	cpse	r24, r1
    6b74:	11 c0       	rjmp	.+34     	; 0x6b98 <_uploadMessage+0xa6>
    6b76:	08 e2       	ldi	r16, 0x28	; 40
    6b78:	15 e0       	ldi	r17, 0x05	; 5
    6b7a:	20 e0       	ldi	r18, 0x00	; 0
    6b7c:	30 e0       	ldi	r19, 0x00	; 0
    6b7e:	4d e2       	ldi	r20, 0x2D	; 45
    6b80:	50 e0       	ldi	r21, 0x00	; 0
    6b82:	66 eb       	ldi	r22, 0xB6	; 182
    6b84:	77 e1       	ldi	r23, 0x17	; 23
    6b86:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6b8a:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6b8e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xStreamBufferReceive>
    6b92:	86 eb       	ldi	r24, 0xB6	; 182
    6b94:	97 e1       	ldi	r25, 0x17	; 23
    6b96:	02 c0       	rjmp	.+4      	; 0x6b9c <_uploadMessage+0xaa>
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	df 91       	pop	r29
    6b9e:	cf 91       	pop	r28
    6ba0:	1f 91       	pop	r17
    6ba2:	0f 91       	pop	r16
    6ba4:	08 95       	ret

00006ba6 <_reply2ReturnCode>:
    6ba6:	2f 92       	push	r2
    6ba8:	3f 92       	push	r3
    6baa:	4f 92       	push	r4
    6bac:	5f 92       	push	r5
    6bae:	6f 92       	push	r6
    6bb0:	7f 92       	push	r7
    6bb2:	8f 92       	push	r8
    6bb4:	9f 92       	push	r9
    6bb6:	af 92       	push	r10
    6bb8:	bf 92       	push	r11
    6bba:	cf 92       	push	r12
    6bbc:	df 92       	push	r13
    6bbe:	ef 92       	push	r14
    6bc0:	ff 92       	push	r15
    6bc2:	0f 93       	push	r16
    6bc4:	1f 93       	push	r17
    6bc6:	cf 93       	push	r28
    6bc8:	df 93       	push	r29
    6bca:	5c 01       	movw	r10, r24
    6bcc:	fc 01       	movw	r30, r24
    6bce:	01 90       	ld	r0, Z+
    6bd0:	00 20       	and	r0, r0
    6bd2:	e9 f7       	brne	.-6      	; 0x6bce <_reply2ReturnCode+0x28>
    6bd4:	31 97       	sbiw	r30, 0x01	; 1
    6bd6:	6f 01       	movw	r12, r30
    6bd8:	c8 1a       	sub	r12, r24
    6bda:	d9 0a       	sbc	r13, r25
    6bdc:	5c 2c       	mov	r5, r12
    6bde:	0f 2e       	mov	r0, r31
    6be0:	fa e1       	ldi	r31, 0x1A	; 26
    6be2:	8f 2e       	mov	r8, r31
    6be4:	f8 e0       	ldi	r31, 0x08	; 8
    6be6:	9f 2e       	mov	r9, r31
    6be8:	f0 2d       	mov	r31, r0
    6bea:	e1 2c       	mov	r14, r1
    6bec:	f1 2c       	mov	r15, r1
    6bee:	4c 2c       	mov	r4, r12
    6bf0:	37 01       	movw	r6, r14
    6bf2:	f4 01       	movw	r30, r8
    6bf4:	01 81       	ldd	r16, Z+1	; 0x01
    6bf6:	12 81       	ldd	r17, Z+2	; 0x02
    6bf8:	e8 01       	movw	r28, r16
    6bfa:	09 90       	ld	r0, Y+
    6bfc:	00 20       	and	r0, r0
    6bfe:	e9 f7       	brne	.-6      	; 0x6bfa <_reply2ReturnCode+0x54>
    6c00:	21 97       	sbiw	r28, 0x01	; 1
    6c02:	c0 1b       	sub	r28, r16
    6c04:	d1 0b       	sbc	r29, r17
    6c06:	3c 2e       	mov	r3, r28
    6c08:	f9 e0       	ldi	r31, 0x09	; 9
    6c0a:	cf 16       	cp	r12, r31
    6c0c:	d1 04       	cpc	r13, r1
    6c0e:	58 f0       	brcs	.+22     	; 0x6c26 <_reply2ReturnCode+0x80>
    6c10:	f4 01       	movw	r30, r8
    6c12:	20 80       	ld	r2, Z
    6c14:	fe e0       	ldi	r31, 0x0E	; 14
    6c16:	2f 12       	cpse	r2, r31
    6c18:	06 c0       	rjmp	.+12     	; 0x6c26 <_reply2ReturnCode+0x80>
    6c1a:	b8 01       	movw	r22, r16
    6c1c:	c5 01       	movw	r24, r10
    6c1e:	0e 94 1f 44 	call	0x883e	; 0x883e <strcasestr>
    6c22:	89 2b       	or	r24, r25
    6c24:	09 f5       	brne	.+66     	; 0x6c68 <_reply2ReturnCode+0xc2>
    6c26:	44 2d       	mov	r20, r4
    6c28:	35 14       	cp	r3, r5
    6c2a:	08 f4       	brcc	.+2      	; 0x6c2e <_reply2ReturnCode+0x88>
    6c2c:	4c 2f       	mov	r20, r28
    6c2e:	50 e0       	ldi	r21, 0x00	; 0
    6c30:	b8 01       	movw	r22, r16
    6c32:	c5 01       	movw	r24, r10
    6c34:	0e 94 56 44 	call	0x88ac	; 0x88ac <strncasecmp>
    6c38:	89 2b       	or	r24, r25
    6c3a:	49 f4       	brne	.+18     	; 0x6c4e <_reply2ReturnCode+0xa8>
    6c3c:	f3 01       	movw	r30, r6
    6c3e:	ee 0f       	add	r30, r30
    6c40:	ff 1f       	adc	r31, r31
    6c42:	e6 0d       	add	r30, r6
    6c44:	f7 1d       	adc	r31, r7
    6c46:	e6 5e       	subi	r30, 0xE6	; 230
    6c48:	f7 4f       	sbci	r31, 0xF7	; 247
    6c4a:	20 80       	ld	r2, Z
    6c4c:	0d c0       	rjmp	.+26     	; 0x6c68 <_reply2ReturnCode+0xc2>
    6c4e:	8f ef       	ldi	r24, 0xFF	; 255
    6c50:	e8 1a       	sub	r14, r24
    6c52:	f8 0a       	sbc	r15, r24
    6c54:	e3 e0       	ldi	r30, 0x03	; 3
    6c56:	8e 0e       	add	r8, r30
    6c58:	91 1c       	adc	r9, r1
    6c5a:	f1 e1       	ldi	r31, 0x11	; 17
    6c5c:	ef 16       	cp	r14, r31
    6c5e:	f1 04       	cpc	r15, r1
    6c60:	39 f6       	brne	.-114    	; 0x6bf0 <_reply2ReturnCode+0x4a>
    6c62:	68 94       	set
    6c64:	22 24       	eor	r2, r2
    6c66:	24 f8       	bld	r2, 4
    6c68:	82 2d       	mov	r24, r2
    6c6a:	df 91       	pop	r29
    6c6c:	cf 91       	pop	r28
    6c6e:	1f 91       	pop	r17
    6c70:	0f 91       	pop	r16
    6c72:	ff 90       	pop	r15
    6c74:	ef 90       	pop	r14
    6c76:	df 90       	pop	r13
    6c78:	cf 90       	pop	r12
    6c7a:	bf 90       	pop	r11
    6c7c:	af 90       	pop	r10
    6c7e:	9f 90       	pop	r9
    6c80:	8f 90       	pop	r8
    6c82:	7f 90       	pop	r7
    6c84:	6f 90       	pop	r6
    6c86:	5f 90       	pop	r5
    6c88:	4f 90       	pop	r4
    6c8a:	3f 90       	pop	r3
    6c8c:	2f 90       	pop	r2
    6c8e:	08 95       	ret

00006c90 <_uploadMessageRc>:
    6c90:	30 df       	rcall	.-416    	; 0x6af2 <_uploadMessage>
    6c92:	89 cf       	rjmp	.-238    	; 0x6ba6 <_reply2ReturnCode>
    6c94:	08 95       	ret

00006c96 <lora_driver_flushBuffers>:
    6c96:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6c9a:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6c9e:	0c 94 6f 13 	jmp	0x26de	; 0x26de <xStreamBufferReset>
    6ca2:	08 95       	ret

00006ca4 <lora_driver_initialise>:
    6ca4:	8f 92       	push	r8
    6ca6:	9f 92       	push	r9
    6ca8:	af 92       	push	r10
    6caa:	cf 92       	push	r12
    6cac:	ef 92       	push	r14
    6cae:	0f 93       	push	r16
    6cb0:	1f 93       	push	r17
    6cb2:	cf 93       	push	r28
    6cb4:	c8 2f       	mov	r28, r24
    6cb6:	8b 01       	movw	r16, r22
    6cb8:	41 e0       	ldi	r20, 0x01	; 1
    6cba:	60 e0       	ldi	r22, 0x00	; 0
    6cbc:	70 e0       	ldi	r23, 0x00	; 0
    6cbe:	88 ec       	ldi	r24, 0xC8	; 200
    6cc0:	90 e0       	ldi	r25, 0x00	; 0
    6cc2:	0e 94 1a 13 	call	0x2634	; 0x2634 <xStreamBufferGenericCreate>
    6cc6:	90 93 2e 17 	sts	0x172E, r25	; 0x80172e <_serialReplyBufferHandle+0x1>
    6cca:	80 93 2d 17 	sts	0x172D, r24	; 0x80172d <_serialReplyBufferHandle>
    6cce:	10 93 2c 17 	sts	0x172C, r17	; 0x80172c <_downlinkMessageBuffer+0x1>
    6cd2:	00 93 2b 17 	sts	0x172B, r16	; 0x80172b <_downlinkMessageBuffer>
    6cd6:	0f 2e       	mov	r0, r31
    6cd8:	f3 e3       	ldi	r31, 0x33	; 51
    6cda:	8f 2e       	mov	r8, r31
    6cdc:	f5 e3       	ldi	r31, 0x35	; 53
    6cde:	9f 2e       	mov	r9, r31
    6ce0:	f0 2d       	mov	r31, r0
    6ce2:	68 94       	set
    6ce4:	aa 24       	eor	r10, r10
    6ce6:	a6 f8       	bld	r10, 6
    6ce8:	68 94       	set
    6cea:	cc 24       	eor	r12, r12
    6cec:	c6 f8       	bld	r12, 6
    6cee:	e1 2c       	mov	r14, r1
    6cf0:	00 e0       	ldi	r16, 0x00	; 0
    6cf2:	23 e0       	ldi	r18, 0x03	; 3
    6cf4:	40 e0       	ldi	r20, 0x00	; 0
    6cf6:	51 ee       	ldi	r21, 0xE1	; 225
    6cf8:	60 e0       	ldi	r22, 0x00	; 0
    6cfa:	70 e0       	ldi	r23, 0x00	; 0
    6cfc:	8c 2f       	mov	r24, r28
    6cfe:	d2 d3       	rcall	.+1956   	; 0x74a4 <serial_create>
    6d00:	90 93 30 17 	sts	0x1730, r25	; 0x801730 <_rn2483_serial+0x1>
    6d04:	80 93 2f 17 	sts	0x172F, r24	; 0x80172f <_rn2483_serial>
    6d08:	e7 e0       	ldi	r30, 0x07	; 7
    6d0a:	f1 e0       	ldi	r31, 0x01	; 1
    6d0c:	80 81       	ld	r24, Z
    6d0e:	80 61       	ori	r24, 0x10	; 16
    6d10:	80 83       	st	Z, r24
    6d12:	cf 91       	pop	r28
    6d14:	1f 91       	pop	r17
    6d16:	0f 91       	pop	r16
    6d18:	ef 90       	pop	r14
    6d1a:	cf 90       	pop	r12
    6d1c:	af 90       	pop	r10
    6d1e:	9f 90       	pop	r9
    6d20:	8f 90       	pop	r8
    6d22:	08 95       	ret

00006d24 <lora_driver_resetRn2483>:
    6d24:	88 23       	and	r24, r24
    6d26:	31 f0       	breq	.+12     	; 0x6d34 <lora_driver_resetRn2483+0x10>
    6d28:	e8 e0       	ldi	r30, 0x08	; 8
    6d2a:	f1 e0       	ldi	r31, 0x01	; 1
    6d2c:	80 81       	ld	r24, Z
    6d2e:	8f 7e       	andi	r24, 0xEF	; 239
    6d30:	80 83       	st	Z, r24
    6d32:	08 95       	ret
    6d34:	e8 e0       	ldi	r30, 0x08	; 8
    6d36:	f1 e0       	ldi	r31, 0x01	; 1
    6d38:	80 81       	ld	r24, Z
    6d3a:	80 61       	ori	r24, 0x10	; 16
    6d3c:	80 83       	st	Z, r24
    6d3e:	08 95       	ret

00006d40 <lora_driver_rn2483FactoryReset>:
    6d40:	60 e0       	ldi	r22, 0x00	; 0
    6d42:	70 e0       	ldi	r23, 0x00	; 0
    6d44:	80 ea       	ldi	r24, 0xA0	; 160
    6d46:	95 e0       	ldi	r25, 0x05	; 5
    6d48:	d4 de       	rcall	.-600    	; 0x6af2 <_uploadMessage>
    6d4a:	e6 eb       	ldi	r30, 0xB6	; 182
    6d4c:	f7 e1       	ldi	r31, 0x17	; 23
    6d4e:	01 90       	ld	r0, Z+
    6d50:	00 20       	and	r0, r0
    6d52:	e9 f7       	brne	.-6      	; 0x6d4e <lora_driver_rn2483FactoryReset+0xe>
    6d54:	31 97       	sbiw	r30, 0x01	; 1
    6d56:	e6 5b       	subi	r30, 0xB6	; 182
    6d58:	f7 41       	sbci	r31, 0x17	; 23
    6d5a:	81 e0       	ldi	r24, 0x01	; 1
    6d5c:	75 97       	sbiw	r30, 0x15	; 21
    6d5e:	08 f0       	brcs	.+2      	; 0x6d62 <lora_driver_rn2483FactoryReset+0x22>
    6d60:	80 e0       	ldi	r24, 0x00	; 0
    6d62:	08 95       	ret

00006d64 <lora_driver_getRn2483Hweui>:
    6d64:	cf 93       	push	r28
    6d66:	df 93       	push	r29
    6d68:	ec 01       	movw	r28, r24
    6d6a:	60 e0       	ldi	r22, 0x00	; 0
    6d6c:	70 e0       	ldi	r23, 0x00	; 0
    6d6e:	81 eb       	ldi	r24, 0xB1	; 177
    6d70:	95 e0       	ldi	r25, 0x05	; 5
    6d72:	bf de       	rcall	.-642    	; 0x6af2 <_uploadMessage>
    6d74:	e6 eb       	ldi	r30, 0xB6	; 182
    6d76:	f7 e1       	ldi	r31, 0x17	; 23
    6d78:	01 90       	ld	r0, Z+
    6d7a:	00 20       	and	r0, r0
    6d7c:	e9 f7       	brne	.-6      	; 0x6d78 <lora_driver_getRn2483Hweui+0x14>
    6d7e:	e7 5c       	subi	r30, 0xC7	; 199
    6d80:	f7 41       	sbci	r31, 0x17	; 23
    6d82:	39 f4       	brne	.+14     	; 0x6d92 <lora_driver_getRn2483Hweui+0x2e>
    6d84:	66 eb       	ldi	r22, 0xB6	; 182
    6d86:	77 e1       	ldi	r23, 0x17	; 23
    6d88:	ce 01       	movw	r24, r28
    6d8a:	0e 94 4f 44 	call	0x889e	; 0x889e <strcpy>
    6d8e:	80 e0       	ldi	r24, 0x00	; 0
    6d90:	02 c0       	rjmp	.+4      	; 0x6d96 <lora_driver_getRn2483Hweui+0x32>
    6d92:	18 82       	st	Y, r1
    6d94:	81 e0       	ldi	r24, 0x01	; 1
    6d96:	df 91       	pop	r29
    6d98:	cf 91       	pop	r28
    6d9a:	08 95       	ret

00006d9c <lora_driver_setDeviceIdentifier>:
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	01 90       	ld	r0, Z+
    6da0:	00 20       	and	r0, r0
    6da2:	e9 f7       	brne	.-6      	; 0x6d9e <lora_driver_setDeviceIdentifier+0x2>
    6da4:	9f 01       	movw	r18, r30
    6da6:	21 51       	subi	r18, 0x11	; 17
    6da8:	31 09       	sbc	r19, r1
    6daa:	28 17       	cp	r18, r24
    6dac:	39 07       	cpc	r19, r25
    6dae:	29 f4       	brne	.+10     	; 0x6dba <lora_driver_setDeviceIdentifier+0x1e>
    6db0:	bc 01       	movw	r22, r24
    6db2:	8f ed       	ldi	r24, 0xDF	; 223
    6db4:	95 e0       	ldi	r25, 0x05	; 5
    6db6:	6c cf       	rjmp	.-296    	; 0x6c90 <_uploadMessageRc>
    6db8:	08 95       	ret
    6dba:	89 e0       	ldi	r24, 0x09	; 9
    6dbc:	08 95       	ret

00006dbe <lora_driver_setApplicationIdentifier>:
    6dbe:	fc 01       	movw	r30, r24
    6dc0:	01 90       	ld	r0, Z+
    6dc2:	00 20       	and	r0, r0
    6dc4:	e9 f7       	brne	.-6      	; 0x6dc0 <lora_driver_setApplicationIdentifier+0x2>
    6dc6:	9f 01       	movw	r18, r30
    6dc8:	21 51       	subi	r18, 0x11	; 17
    6dca:	31 09       	sbc	r19, r1
    6dcc:	28 17       	cp	r18, r24
    6dce:	39 07       	cpc	r19, r25
    6dd0:	29 f4       	brne	.+10     	; 0x6ddc <lora_driver_setApplicationIdentifier+0x1e>
    6dd2:	bc 01       	movw	r22, r24
    6dd4:	8e ee       	ldi	r24, 0xEE	; 238
    6dd6:	95 e0       	ldi	r25, 0x05	; 5
    6dd8:	5b cf       	rjmp	.-330    	; 0x6c90 <_uploadMessageRc>
    6dda:	08 95       	ret
    6ddc:	89 e0       	ldi	r24, 0x09	; 9
    6dde:	08 95       	ret

00006de0 <lora_driver_setApplicationKey>:
    6de0:	fc 01       	movw	r30, r24
    6de2:	01 90       	ld	r0, Z+
    6de4:	00 20       	and	r0, r0
    6de6:	e9 f7       	brne	.-6      	; 0x6de2 <lora_driver_setApplicationKey+0x2>
    6de8:	9f 01       	movw	r18, r30
    6dea:	21 52       	subi	r18, 0x21	; 33
    6dec:	31 09       	sbc	r19, r1
    6dee:	28 17       	cp	r18, r24
    6df0:	39 07       	cpc	r19, r25
    6df2:	29 f4       	brne	.+10     	; 0x6dfe <lora_driver_setApplicationKey+0x1e>
    6df4:	bc 01       	movw	r22, r24
    6df6:	8d ef       	ldi	r24, 0xFD	; 253
    6df8:	95 e0       	ldi	r25, 0x05	; 5
    6dfa:	4a cf       	rjmp	.-364    	; 0x6c90 <_uploadMessageRc>
    6dfc:	08 95       	ret
    6dfe:	89 e0       	ldi	r24, 0x09	; 9
    6e00:	08 95       	ret

00006e02 <lora_driver_saveMac>:
    6e02:	60 e0       	ldi	r22, 0x00	; 0
    6e04:	70 e0       	ldi	r23, 0x00	; 0
    6e06:	8c e3       	ldi	r24, 0x3C	; 60
    6e08:	96 e0       	ldi	r25, 0x06	; 6
    6e0a:	42 cf       	rjmp	.-380    	; 0x6c90 <_uploadMessageRc>
    6e0c:	08 95       	ret

00006e0e <lora_driver_join>:
    6e0e:	0f 93       	push	r16
    6e10:	1f 93       	push	r17
    6e12:	e8 2f       	mov	r30, r24
    6e14:	f0 e0       	ldi	r31, 0x00	; 0
    6e16:	ee 0f       	add	r30, r30
    6e18:	ff 1f       	adc	r31, r31
    6e1a:	ea 5e       	subi	r30, 0xEA	; 234
    6e1c:	f7 4f       	sbci	r31, 0xF7	; 247
    6e1e:	60 81       	ld	r22, Z
    6e20:	71 81       	ldd	r23, Z+1	; 0x01
    6e22:	85 e4       	ldi	r24, 0x45	; 69
    6e24:	96 e0       	ldi	r25, 0x06	; 6
    6e26:	34 df       	rcall	.-408    	; 0x6c90 <_uploadMessageRc>
    6e28:	81 11       	cpse	r24, r1
    6e2a:	14 c0       	rjmp	.+40     	; 0x6e54 <lora_driver_join+0x46>
    6e2c:	08 e2       	ldi	r16, 0x28	; 40
    6e2e:	15 e0       	ldi	r17, 0x05	; 5
    6e30:	20 e0       	ldi	r18, 0x00	; 0
    6e32:	30 e0       	ldi	r19, 0x00	; 0
    6e34:	4d e2       	ldi	r20, 0x2D	; 45
    6e36:	50 e0       	ldi	r21, 0x00	; 0
    6e38:	66 eb       	ldi	r22, 0xB6	; 182
    6e3a:	77 e1       	ldi	r23, 0x17	; 23
    6e3c:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6e40:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6e44:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xStreamBufferReceive>
    6e48:	88 23       	and	r24, r24
    6e4a:	21 f0       	breq	.+8      	; 0x6e54 <lora_driver_join+0x46>
    6e4c:	86 eb       	ldi	r24, 0xB6	; 182
    6e4e:	97 e1       	ldi	r25, 0x17	; 23
    6e50:	aa de       	rcall	.-684    	; 0x6ba6 <_reply2ReturnCode>
    6e52:	03 c0       	rjmp	.+6      	; 0x6e5a <lora_driver_join+0x4c>
    6e54:	86 eb       	ldi	r24, 0xB6	; 182
    6e56:	97 e1       	ldi	r25, 0x17	; 23
    6e58:	a6 de       	rcall	.-692    	; 0x6ba6 <_reply2ReturnCode>
    6e5a:	1f 91       	pop	r17
    6e5c:	0f 91       	pop	r16
    6e5e:	08 95       	ret

00006e60 <lora_driver_sendUploadMessage>:
    6e60:	0f 93       	push	r16
    6e62:	1f 93       	push	r17
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	1f 92       	push	r1
    6e6a:	cd b7       	in	r28, 0x3d	; 61
    6e6c:	de b7       	in	r29, 0x3e	; 62
    6e6e:	db 01       	movw	r26, r22
    6e70:	11 96       	adiw	r26, 0x01	; 1
    6e72:	9c 91       	ld	r25, X
    6e74:	11 97       	sbiw	r26, 0x01	; 1
    6e76:	95 31       	cpi	r25, 0x15	; 21
    6e78:	08 f0       	brcs	.+2      	; 0x6e7c <lora_driver_sendUploadMessage+0x1c>
    6e7a:	b4 c0       	rjmp	.+360    	; 0x6fe4 <lora_driver_sendUploadMessage+0x184>
    6e7c:	99 23       	and	r25, r25
    6e7e:	81 f1       	breq	.+96     	; 0x6ee0 <lora_driver_sendUploadMessage+0x80>
    6e80:	60 e0       	ldi	r22, 0x00	; 0
    6e82:	70 e0       	ldi	r23, 0x00	; 0
    6e84:	27 2f       	mov	r18, r23
    6e86:	30 e0       	ldi	r19, 0x00	; 0
    6e88:	46 2f       	mov	r20, r22
    6e8a:	50 e0       	ldi	r21, 0x00	; 0
    6e8c:	fd 01       	movw	r30, r26
    6e8e:	e4 0f       	add	r30, r20
    6e90:	f5 1f       	adc	r31, r21
    6e92:	92 81       	ldd	r25, Z+2	; 0x02
    6e94:	92 95       	swap	r25
    6e96:	9f 70       	andi	r25, 0x0F	; 15
    6e98:	9a 30       	cpi	r25, 0x0A	; 10
    6e9a:	10 f0       	brcs	.+4      	; 0x6ea0 <lora_driver_sendUploadMessage+0x40>
    6e9c:	99 5c       	subi	r25, 0xC9	; 201
    6e9e:	01 c0       	rjmp	.+2      	; 0x6ea2 <lora_driver_sendUploadMessage+0x42>
    6ea0:	90 5d       	subi	r25, 0xD0	; 208
    6ea2:	f9 01       	movw	r30, r18
    6ea4:	e9 5b       	subi	r30, 0xB9	; 185
    6ea6:	f8 4e       	sbci	r31, 0xE8	; 232
    6ea8:	90 83       	st	Z, r25
    6eaa:	2f 5f       	subi	r18, 0xFF	; 255
    6eac:	3f 4f       	sbci	r19, 0xFF	; 255
    6eae:	fd 01       	movw	r30, r26
    6eb0:	e4 0f       	add	r30, r20
    6eb2:	f5 1f       	adc	r31, r21
    6eb4:	92 81       	ldd	r25, Z+2	; 0x02
    6eb6:	9f 70       	andi	r25, 0x0F	; 15
    6eb8:	49 2f       	mov	r20, r25
    6eba:	50 e0       	ldi	r21, 0x00	; 0
    6ebc:	4a 30       	cpi	r20, 0x0A	; 10
    6ebe:	51 05       	cpc	r21, r1
    6ec0:	14 f0       	brlt	.+4      	; 0x6ec6 <lora_driver_sendUploadMessage+0x66>
    6ec2:	99 5c       	subi	r25, 0xC9	; 201
    6ec4:	01 c0       	rjmp	.+2      	; 0x6ec8 <lora_driver_sendUploadMessage+0x68>
    6ec6:	90 5d       	subi	r25, 0xD0	; 208
    6ec8:	f9 01       	movw	r30, r18
    6eca:	e9 5b       	subi	r30, 0xB9	; 185
    6ecc:	f8 4e       	sbci	r31, 0xE8	; 232
    6ece:	90 83       	st	Z, r25
    6ed0:	7e 5f       	subi	r23, 0xFE	; 254
    6ed2:	6f 5f       	subi	r22, 0xFF	; 255
    6ed4:	11 96       	adiw	r26, 0x01	; 1
    6ed6:	9c 91       	ld	r25, X
    6ed8:	11 97       	sbiw	r26, 0x01	; 1
    6eda:	69 17       	cp	r22, r25
    6edc:	98 f2       	brcs	.-90     	; 0x6e84 <lora_driver_sendUploadMessage+0x24>
    6ede:	01 c0       	rjmp	.+2      	; 0x6ee2 <lora_driver_sendUploadMessage+0x82>
    6ee0:	70 e0       	ldi	r23, 0x00	; 0
    6ee2:	e7 2f       	mov	r30, r23
    6ee4:	f0 e0       	ldi	r31, 0x00	; 0
    6ee6:	e9 5b       	subi	r30, 0xB9	; 185
    6ee8:	f8 4e       	sbci	r31, 0xE8	; 232
    6eea:	10 82       	st	Z, r1
    6eec:	4c 91       	ld	r20, X
    6eee:	81 11       	cpse	r24, r1
    6ef0:	03 c0       	rjmp	.+6      	; 0x6ef8 <lora_driver_sendUploadMessage+0x98>
    6ef2:	8e e4       	ldi	r24, 0x4E	; 78
    6ef4:	96 e0       	ldi	r25, 0x06	; 6
    6ef6:	02 c0       	rjmp	.+4      	; 0x6efc <lora_driver_sendUploadMessage+0x9c>
    6ef8:	80 e5       	ldi	r24, 0x50	; 80
    6efa:	96 e0       	ldi	r25, 0x06	; 6
    6efc:	27 e4       	ldi	r18, 0x47	; 71
    6efe:	37 e1       	ldi	r19, 0x17	; 23
    6f00:	3f 93       	push	r19
    6f02:	2f 93       	push	r18
    6f04:	1f 92       	push	r1
    6f06:	4f 93       	push	r20
    6f08:	9f 93       	push	r25
    6f0a:	8f 93       	push	r24
    6f0c:	84 e5       	ldi	r24, 0x54	; 84
    6f0e:	96 e0       	ldi	r25, 0x06	; 6
    6f10:	9f 93       	push	r25
    6f12:	8f 93       	push	r24
    6f14:	89 e8       	ldi	r24, 0x89	; 137
    6f16:	97 e1       	ldi	r25, 0x17	; 23
    6f18:	9f 93       	push	r25
    6f1a:	8f 93       	push	r24
    6f1c:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    6f20:	60 e0       	ldi	r22, 0x00	; 0
    6f22:	70 e0       	ldi	r23, 0x00	; 0
    6f24:	89 e8       	ldi	r24, 0x89	; 137
    6f26:	97 e1       	ldi	r25, 0x17	; 23
    6f28:	b3 de       	rcall	.-666    	; 0x6c90 <_uploadMessageRc>
    6f2a:	0f b6       	in	r0, 0x3f	; 63
    6f2c:	f8 94       	cli
    6f2e:	de bf       	out	0x3e, r29	; 62
    6f30:	0f be       	out	0x3f, r0	; 63
    6f32:	cd bf       	out	0x3d, r28	; 61
    6f34:	81 11       	cpse	r24, r1
    6f36:	59 c0       	rjmp	.+178    	; 0x6fea <lora_driver_sendUploadMessage+0x18a>
    6f38:	08 e2       	ldi	r16, 0x28	; 40
    6f3a:	15 e0       	ldi	r17, 0x05	; 5
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
    6f40:	4d e2       	ldi	r20, 0x2D	; 45
    6f42:	50 e0       	ldi	r21, 0x00	; 0
    6f44:	66 eb       	ldi	r22, 0xB6	; 182
    6f46:	77 e1       	ldi	r23, 0x17	; 23
    6f48:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <_serialReplyBufferHandle>
    6f4c:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_serialReplyBufferHandle+0x1>
    6f50:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xStreamBufferReceive>
    6f54:	88 23       	and	r24, r24
    6f56:	09 f4       	brne	.+2      	; 0x6f5a <lora_driver_sendUploadMessage+0xfa>
    6f58:	47 c0       	rjmp	.+142    	; 0x6fe8 <lora_driver_sendUploadMessage+0x188>
    6f5a:	86 eb       	ldi	r24, 0xB6	; 182
    6f5c:	97 e1       	ldi	r25, 0x17	; 23
    6f5e:	23 de       	rcall	.-954    	; 0x6ba6 <_reply2ReturnCode>
    6f60:	8e 30       	cpi	r24, 0x0E	; 14
    6f62:	09 f0       	breq	.+2      	; 0x6f66 <lora_driver_sendUploadMessage+0x106>
    6f64:	42 c0       	rjmp	.+132    	; 0x6fea <lora_driver_sendUploadMessage+0x18a>
    6f66:	87 e0       	ldi	r24, 0x07	; 7
    6f68:	89 83       	std	Y+1, r24	; 0x01
    6f6a:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <_downlinkMessageBuffer>
    6f6e:	90 91 2c 17 	lds	r25, 0x172C	; 0x80172c <_downlinkMessageBuffer+0x1>
    6f72:	89 2b       	or	r24, r25
    6f74:	a9 f1       	breq	.+106    	; 0x6fe0 <lora_driver_sendUploadMessage+0x180>
    6f76:	be 01       	movw	r22, r28
    6f78:	6f 5f       	subi	r22, 0xFF	; 255
    6f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f7c:	86 eb       	ldi	r24, 0xB6	; 182
    6f7e:	97 e1       	ldi	r25, 0x17	; 23
    6f80:	68 d1       	rcall	.+720    	; 0x7252 <decode_port_no>
    6f82:	80 93 31 17 	sts	0x1731, r24	; 0x801731 <_downlinkPayload>
    6f86:	e9 81       	ldd	r30, Y+1	; 0x01
    6f88:	f0 e0       	ldi	r31, 0x00	; 0
    6f8a:	ea 54       	subi	r30, 0x4A	; 74
    6f8c:	f8 4e       	sbci	r31, 0xE8	; 232
    6f8e:	df 01       	movw	r26, r30
    6f90:	0d 90       	ld	r0, X+
    6f92:	00 20       	and	r0, r0
    6f94:	e9 f7       	brne	.-6      	; 0x6f90 <lora_driver_sendUploadMessage+0x130>
    6f96:	11 97       	sbiw	r26, 0x01	; 1
    6f98:	ae 1b       	sub	r26, r30
    6f9a:	bf 0b       	sbc	r27, r31
    6f9c:	aa 23       	and	r26, r26
    6f9e:	91 f0       	breq	.+36     	; 0x6fc4 <lora_driver_sendUploadMessage+0x164>
    6fa0:	bb 27       	eor	r27, r27
    6fa2:	cd 01       	movw	r24, r26
    6fa4:	01 97       	sbiw	r24, 0x01	; 1
    6fa6:	9c 01       	movw	r18, r24
    6fa8:	12 f4       	brpl	.+4      	; 0x6fae <lora_driver_sendUploadMessage+0x14e>
    6faa:	2f 5f       	subi	r18, 0xFF	; 255
    6fac:	3f 4f       	sbci	r19, 0xFF	; 255
    6fae:	35 95       	asr	r19
    6fb0:	27 95       	ror	r18
    6fb2:	20 93 32 17 	sts	0x1732, r18	; 0x801732 <_downlinkPayload+0x1>
    6fb6:	af 01       	movw	r20, r30
    6fb8:	4f 5f       	subi	r20, 0xFF	; 255
    6fba:	5f 4f       	sbci	r21, 0xFF	; 255
    6fbc:	64 e1       	ldi	r22, 0x14	; 20
    6fbe:	83 e3       	ldi	r24, 0x33	; 51
    6fc0:	97 e1       	ldi	r25, 0x17	; 23
    6fc2:	73 d1       	rcall	.+742    	; 0x72aa <decode_hexadecimal_string_bytes>
    6fc4:	01 e0       	ldi	r16, 0x01	; 1
    6fc6:	10 e0       	ldi	r17, 0x00	; 0
    6fc8:	20 e0       	ldi	r18, 0x00	; 0
    6fca:	30 e0       	ldi	r19, 0x00	; 0
    6fcc:	46 e1       	ldi	r20, 0x16	; 22
    6fce:	50 e0       	ldi	r21, 0x00	; 0
    6fd0:	61 e3       	ldi	r22, 0x31	; 49
    6fd2:	77 e1       	ldi	r23, 0x17	; 23
    6fd4:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <_downlinkMessageBuffer>
    6fd8:	90 91 2c 17 	lds	r25, 0x172C	; 0x80172c <_downlinkMessageBuffer+0x1>
    6fdc:	0e 94 0b 14 	call	0x2816	; 0x2816 <xStreamBufferSend>
    6fe0:	8e e0       	ldi	r24, 0x0E	; 14
    6fe2:	03 c0       	rjmp	.+6      	; 0x6fea <lora_driver_sendUploadMessage+0x18a>
    6fe4:	84 e1       	ldi	r24, 0x14	; 20
    6fe6:	01 c0       	rjmp	.+2      	; 0x6fea <lora_driver_sendUploadMessage+0x18a>
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	0f 90       	pop	r0
    6fec:	df 91       	pop	r29
    6fee:	cf 91       	pop	r28
    6ff0:	1f 91       	pop	r17
    6ff2:	0f 91       	pop	r16
    6ff4:	08 95       	ret

00006ff6 <lora_driver_setAdaptiveDataRate>:
    6ff6:	81 30       	cpi	r24, 0x01	; 1
    6ff8:	19 f0       	breq	.+6      	; 0x7000 <lora_driver_setAdaptiveDataRate+0xa>
    6ffa:	64 e6       	ldi	r22, 0x64	; 100
    6ffc:	76 e0       	ldi	r23, 0x06	; 6
    6ffe:	02 c0       	rjmp	.+4      	; 0x7004 <lora_driver_setAdaptiveDataRate+0xe>
    7000:	6d e3       	ldi	r22, 0x3D	; 61
    7002:	77 e0       	ldi	r23, 0x07	; 7
    7004:	88 e6       	ldi	r24, 0x68	; 104
    7006:	96 e0       	ldi	r25, 0x06	; 6
    7008:	43 ce       	rjmp	.-890    	; 0x6c90 <_uploadMessageRc>
    700a:	08 95       	ret

0000700c <lora_driver_setReceiveDelay>:
    700c:	9f 93       	push	r25
    700e:	8f 93       	push	r24
    7010:	89 e9       	ldi	r24, 0x99	; 153
    7012:	96 e0       	ldi	r25, 0x06	; 6
    7014:	9f 93       	push	r25
    7016:	8f 93       	push	r24
    7018:	89 e8       	ldi	r24, 0x89	; 137
    701a:	97 e1       	ldi	r25, 0x17	; 23
    701c:	9f 93       	push	r25
    701e:	8f 93       	push	r24
    7020:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    7024:	60 e0       	ldi	r22, 0x00	; 0
    7026:	70 e0       	ldi	r23, 0x00	; 0
    7028:	89 e8       	ldi	r24, 0x89	; 137
    702a:	97 e1       	ldi	r25, 0x17	; 23
    702c:	31 de       	rcall	.-926    	; 0x6c90 <_uploadMessageRc>
    702e:	0f 90       	pop	r0
    7030:	0f 90       	pop	r0
    7032:	0f 90       	pop	r0
    7034:	0f 90       	pop	r0
    7036:	0f 90       	pop	r0
    7038:	0f 90       	pop	r0
    703a:	08 95       	ret

0000703c <lora_driver_configureToEu868>:
    703c:	2f 92       	push	r2
    703e:	3f 92       	push	r3
    7040:	4f 92       	push	r4
    7042:	5f 92       	push	r5
    7044:	6f 92       	push	r6
    7046:	7f 92       	push	r7
    7048:	8f 92       	push	r8
    704a:	9f 92       	push	r9
    704c:	af 92       	push	r10
    704e:	bf 92       	push	r11
    7050:	cf 92       	push	r12
    7052:	df 92       	push	r13
    7054:	ef 92       	push	r14
    7056:	ff 92       	push	r15
    7058:	0f 93       	push	r16
    705a:	1f 93       	push	r17
    705c:	cf 93       	push	r28
    705e:	df 93       	push	r29
    7060:	cd b7       	in	r28, 0x3d	; 61
    7062:	de b7       	in	r29, 0x3e	; 62
    7064:	a0 97       	sbiw	r28, 0x20	; 32
    7066:	0f b6       	in	r0, 0x3f	; 63
    7068:	f8 94       	cli
    706a:	de bf       	out	0x3e, r29	; 62
    706c:	0f be       	out	0x3f, r0	; 63
    706e:	cd bf       	out	0x3d, r28	; 61
    7070:	66 ec       	ldi	r22, 0xC6	; 198
    7072:	76 e0       	ldi	r23, 0x06	; 6
    7074:	82 ed       	ldi	r24, 0xD2	; 210
    7076:	96 e0       	ldi	r25, 0x06	; 6
    7078:	3c dd       	rcall	.-1416   	; 0x6af2 <_uploadMessage>
    707a:	95 dd       	rcall	.-1238   	; 0x6ba6 <_reply2ReturnCode>
    707c:	81 11       	cpse	r24, r1
    707e:	a3 c0       	rjmp	.+326    	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    7080:	80 e2       	ldi	r24, 0x20	; 32
    7082:	e4 e3       	ldi	r30, 0x34	; 52
    7084:	f5 e0       	ldi	r31, 0x05	; 5
    7086:	de 01       	movw	r26, r28
    7088:	11 96       	adiw	r26, 0x01	; 1
    708a:	01 90       	ld	r0, Z+
    708c:	0d 92       	st	X+, r0
    708e:	8a 95       	dec	r24
    7090:	e1 f7       	brne	.-8      	; 0x708a <lora_driver_configureToEu868+0x4e>
    7092:	9e 01       	movw	r18, r28
    7094:	2f 5f       	subi	r18, 0xFF	; 255
    7096:	3f 4f       	sbci	r19, 0xFF	; 255
    7098:	69 01       	movw	r12, r18
    709a:	e1 2c       	mov	r14, r1
    709c:	f1 2c       	mov	r15, r1
    709e:	0f 2e       	mov	r0, r31
    70a0:	fe ed       	ldi	r31, 0xDE	; 222
    70a2:	af 2e       	mov	r10, r31
    70a4:	f6 e0       	ldi	r31, 0x06	; 6
    70a6:	bf 2e       	mov	r11, r31
    70a8:	f0 2d       	mov	r31, r0
    70aa:	09 e8       	ldi	r16, 0x89	; 137
    70ac:	17 e1       	ldi	r17, 0x17	; 23
    70ae:	0f 2e       	mov	r0, r31
    70b0:	f7 ef       	ldi	r31, 0xF7	; 247
    70b2:	4f 2e       	mov	r4, r31
    70b4:	f6 e0       	ldi	r31, 0x06	; 6
    70b6:	5f 2e       	mov	r5, r31
    70b8:	f0 2d       	mov	r31, r0
    70ba:	0f 2e       	mov	r0, r31
    70bc:	fe e0       	ldi	r31, 0x0E	; 14
    70be:	8f 2e       	mov	r8, r31
    70c0:	f7 e0       	ldi	r31, 0x07	; 7
    70c2:	9f 2e       	mov	r9, r31
    70c4:	f0 2d       	mov	r31, r0
    70c6:	0f 2e       	mov	r0, r31
    70c8:	f8 e2       	ldi	r31, 0x28	; 40
    70ca:	6f 2e       	mov	r6, r31
    70cc:	f7 e0       	ldi	r31, 0x07	; 7
    70ce:	7f 2e       	mov	r7, r31
    70d0:	f0 2d       	mov	r31, r0
    70d2:	3e 2c       	mov	r3, r14
    70d4:	2f 2c       	mov	r2, r15
    70d6:	ff 92       	push	r15
    70d8:	ef 92       	push	r14
    70da:	bf 92       	push	r11
    70dc:	af 92       	push	r10
    70de:	1f 93       	push	r17
    70e0:	0f 93       	push	r16
    70e2:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    70e6:	60 e0       	ldi	r22, 0x00	; 0
    70e8:	70 e0       	ldi	r23, 0x00	; 0
    70ea:	c8 01       	movw	r24, r16
    70ec:	02 dd       	rcall	.-1532   	; 0x6af2 <_uploadMessage>
    70ee:	5b dd       	rcall	.-1354   	; 0x6ba6 <_reply2ReturnCode>
    70f0:	0f 90       	pop	r0
    70f2:	0f 90       	pop	r0
    70f4:	0f 90       	pop	r0
    70f6:	0f 90       	pop	r0
    70f8:	0f 90       	pop	r0
    70fa:	0f 90       	pop	r0
    70fc:	81 11       	cpse	r24, r1
    70fe:	63 c0       	rjmp	.+198    	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    7100:	32 e0       	ldi	r19, 0x02	; 2
    7102:	3e 15       	cp	r19, r14
    7104:	e8 f4       	brcc	.+58     	; 0x7140 <lora_driver_configureToEu868+0x104>
    7106:	f6 01       	movw	r30, r12
    7108:	83 81       	ldd	r24, Z+3	; 0x03
    710a:	8f 93       	push	r24
    710c:	82 81       	ldd	r24, Z+2	; 0x02
    710e:	8f 93       	push	r24
    7110:	81 81       	ldd	r24, Z+1	; 0x01
    7112:	8f 93       	push	r24
    7114:	80 81       	ld	r24, Z
    7116:	8f 93       	push	r24
    7118:	ff 92       	push	r15
    711a:	ef 92       	push	r14
    711c:	5f 92       	push	r5
    711e:	4f 92       	push	r4
    7120:	1f 93       	push	r17
    7122:	0f 93       	push	r16
    7124:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    7128:	60 e0       	ldi	r22, 0x00	; 0
    712a:	70 e0       	ldi	r23, 0x00	; 0
    712c:	c8 01       	movw	r24, r16
    712e:	e1 dc       	rcall	.-1598   	; 0x6af2 <_uploadMessage>
    7130:	3a dd       	rcall	.-1420   	; 0x6ba6 <_reply2ReturnCode>
    7132:	0f b6       	in	r0, 0x3f	; 63
    7134:	f8 94       	cli
    7136:	de bf       	out	0x3e, r29	; 62
    7138:	0f be       	out	0x3f, r0	; 63
    713a:	cd bf       	out	0x3d, r28	; 61
    713c:	81 11       	cpse	r24, r1
    713e:	43 c0       	rjmp	.+134    	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    7140:	2f 92       	push	r2
    7142:	3f 92       	push	r3
    7144:	9f 92       	push	r9
    7146:	8f 92       	push	r8
    7148:	1f 93       	push	r17
    714a:	0f 93       	push	r16
    714c:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    7150:	60 e0       	ldi	r22, 0x00	; 0
    7152:	70 e0       	ldi	r23, 0x00	; 0
    7154:	c8 01       	movw	r24, r16
    7156:	cd dc       	rcall	.-1638   	; 0x6af2 <_uploadMessage>
    7158:	26 dd       	rcall	.-1460   	; 0x6ba6 <_reply2ReturnCode>
    715a:	0f 90       	pop	r0
    715c:	0f 90       	pop	r0
    715e:	0f 90       	pop	r0
    7160:	0f 90       	pop	r0
    7162:	0f 90       	pop	r0
    7164:	0f 90       	pop	r0
    7166:	81 11       	cpse	r24, r1
    7168:	2e c0       	rjmp	.+92     	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    716a:	2f 92       	push	r2
    716c:	3f 92       	push	r3
    716e:	7f 92       	push	r7
    7170:	6f 92       	push	r6
    7172:	1f 93       	push	r17
    7174:	0f 93       	push	r16
    7176:	0e 94 b1 44 	call	0x8962	; 0x8962 <sprintf>
    717a:	60 e0       	ldi	r22, 0x00	; 0
    717c:	70 e0       	ldi	r23, 0x00	; 0
    717e:	c8 01       	movw	r24, r16
    7180:	b8 dc       	rcall	.-1680   	; 0x6af2 <_uploadMessage>
    7182:	11 dd       	rcall	.-1502   	; 0x6ba6 <_reply2ReturnCode>
    7184:	0f 90       	pop	r0
    7186:	0f 90       	pop	r0
    7188:	0f 90       	pop	r0
    718a:	0f 90       	pop	r0
    718c:	0f 90       	pop	r0
    718e:	0f 90       	pop	r0
    7190:	81 11       	cpse	r24, r1
    7192:	19 c0       	rjmp	.+50     	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    7194:	3f ef       	ldi	r19, 0xFF	; 255
    7196:	e3 1a       	sub	r14, r19
    7198:	f3 0a       	sbc	r15, r19
    719a:	84 e0       	ldi	r24, 0x04	; 4
    719c:	c8 0e       	add	r12, r24
    719e:	d1 1c       	adc	r13, r1
    71a0:	98 e0       	ldi	r25, 0x08	; 8
    71a2:	e9 16       	cp	r14, r25
    71a4:	f1 04       	cpc	r15, r1
    71a6:	09 f0       	breq	.+2      	; 0x71aa <lora_driver_configureToEu868+0x16e>
    71a8:	94 cf       	rjmp	.-216    	; 0x70d2 <lora_driver_configureToEu868+0x96>
    71aa:	60 e0       	ldi	r22, 0x00	; 0
    71ac:	70 e0       	ldi	r23, 0x00	; 0
    71ae:	80 e4       	ldi	r24, 0x40	; 64
    71b0:	97 e0       	ldi	r25, 0x07	; 7
    71b2:	9f dc       	rcall	.-1730   	; 0x6af2 <_uploadMessage>
    71b4:	f8 dc       	rcall	.-1552   	; 0x6ba6 <_reply2ReturnCode>
    71b6:	81 11       	cpse	r24, r1
    71b8:	06 c0       	rjmp	.+12     	; 0x71c6 <lora_driver_configureToEu868+0x18a>
    71ba:	60 e0       	ldi	r22, 0x00	; 0
    71bc:	70 e0       	ldi	r23, 0x00	; 0
    71be:	81 e5       	ldi	r24, 0x51	; 81
    71c0:	97 e0       	ldi	r25, 0x07	; 7
    71c2:	97 dc       	rcall	.-1746   	; 0x6af2 <_uploadMessage>
    71c4:	f0 dc       	rcall	.-1568   	; 0x6ba6 <_reply2ReturnCode>
    71c6:	a0 96       	adiw	r28, 0x20	; 32
    71c8:	0f b6       	in	r0, 0x3f	; 63
    71ca:	f8 94       	cli
    71cc:	de bf       	out	0x3e, r29	; 62
    71ce:	0f be       	out	0x3f, r0	; 63
    71d0:	cd bf       	out	0x3d, r28	; 61
    71d2:	df 91       	pop	r29
    71d4:	cf 91       	pop	r28
    71d6:	1f 91       	pop	r17
    71d8:	0f 91       	pop	r16
    71da:	ff 90       	pop	r15
    71dc:	ef 90       	pop	r14
    71de:	df 90       	pop	r13
    71e0:	cf 90       	pop	r12
    71e2:	bf 90       	pop	r11
    71e4:	af 90       	pop	r10
    71e6:	9f 90       	pop	r9
    71e8:	8f 90       	pop	r8
    71ea:	7f 90       	pop	r7
    71ec:	6f 90       	pop	r6
    71ee:	5f 90       	pop	r5
    71f0:	4f 90       	pop	r4
    71f2:	3f 90       	pop	r3
    71f4:	2f 90       	pop	r2
    71f6:	08 95       	ret

000071f8 <lora_driver_setOtaaIdentity>:
    71f8:	ef 92       	push	r14
    71fa:	ff 92       	push	r15
    71fc:	0f 93       	push	r16
    71fe:	1f 93       	push	r17
    7200:	cf 93       	push	r28
    7202:	df 93       	push	r29
    7204:	ec 01       	movw	r28, r24
    7206:	8b 01       	movw	r16, r22
    7208:	7a 01       	movw	r14, r20
    720a:	81 e0       	ldi	r24, 0x01	; 1
    720c:	f4 de       	rcall	.-536    	; 0x6ff6 <lora_driver_setAdaptiveDataRate>
    720e:	81 11       	cpse	r24, r1
    7210:	0d c0       	rjmp	.+26     	; 0x722c <lora_driver_setOtaaIdentity+0x34>
    7212:	ce 01       	movw	r24, r28
    7214:	d4 dd       	rcall	.-1112   	; 0x6dbe <lora_driver_setApplicationIdentifier>
    7216:	81 11       	cpse	r24, r1
    7218:	09 c0       	rjmp	.+18     	; 0x722c <lora_driver_setOtaaIdentity+0x34>
    721a:	c8 01       	movw	r24, r16
    721c:	e1 dd       	rcall	.-1086   	; 0x6de0 <lora_driver_setApplicationKey>
    721e:	81 11       	cpse	r24, r1
    7220:	05 c0       	rjmp	.+10     	; 0x722c <lora_driver_setOtaaIdentity+0x34>
    7222:	c7 01       	movw	r24, r14
    7224:	bb dd       	rcall	.-1162   	; 0x6d9c <lora_driver_setDeviceIdentifier>
    7226:	81 11       	cpse	r24, r1
    7228:	01 c0       	rjmp	.+2      	; 0x722c <lora_driver_setOtaaIdentity+0x34>
    722a:	eb dd       	rcall	.-1066   	; 0x6e02 <lora_driver_saveMac>
    722c:	df 91       	pop	r29
    722e:	cf 91       	pop	r28
    7230:	1f 91       	pop	r17
    7232:	0f 91       	pop	r16
    7234:	ff 90       	pop	r15
    7236:	ef 90       	pop	r14
    7238:	08 95       	ret

0000723a <lora_driver_mapReturnCodeToText>:
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	fc 01       	movw	r30, r24
    723e:	ee 0f       	add	r30, r30
    7240:	ff 1f       	adc	r31, r31
    7242:	8e 0f       	add	r24, r30
    7244:	9f 1f       	adc	r25, r31
    7246:	fc 01       	movw	r30, r24
    7248:	e6 5e       	subi	r30, 0xE6	; 230
    724a:	f7 4f       	sbci	r31, 0xF7	; 247
    724c:	81 81       	ldd	r24, Z+1	; 0x01
    724e:	92 81       	ldd	r25, Z+2	; 0x02
    7250:	08 95       	ret

00007252 <decode_port_no>:
    7252:	dc 01       	movw	r26, r24
    7254:	00 97       	sbiw	r24, 0x00	; 0
    7256:	29 f1       	breq	.+74     	; 0x72a2 <decode_port_no+0x50>
    7258:	fb 01       	movw	r30, r22
    725a:	20 81       	ld	r18, Z
    725c:	fc 01       	movw	r30, r24
    725e:	01 90       	ld	r0, Z+
    7260:	00 20       	and	r0, r0
    7262:	e9 f7       	brne	.-6      	; 0x725e <decode_port_no+0xc>
    7264:	31 97       	sbiw	r30, 0x01	; 1
    7266:	e8 1b       	sub	r30, r24
    7268:	f9 0b       	sbc	r31, r25
    726a:	82 2f       	mov	r24, r18
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	e8 17       	cp	r30, r24
    7270:	f9 07       	cpc	r31, r25
    7272:	c8 f0       	brcs	.+50     	; 0x72a6 <decode_port_no+0x54>
    7274:	80 e0       	ldi	r24, 0x00	; 0
    7276:	08 c0       	rjmp	.+16     	; 0x7288 <decode_port_no+0x36>
    7278:	88 0f       	add	r24, r24
    727a:	38 2f       	mov	r19, r24
    727c:	33 0f       	add	r19, r19
    727e:	33 0f       	add	r19, r19
    7280:	83 0f       	add	r24, r19
    7282:	80 53       	subi	r24, 0x30	; 48
    7284:	89 0f       	add	r24, r25
    7286:	2f 5f       	subi	r18, 0xFF	; 255
    7288:	fd 01       	movw	r30, r26
    728a:	e2 0f       	add	r30, r18
    728c:	f1 1d       	adc	r31, r1
    728e:	90 81       	ld	r25, Z
    7290:	30 ed       	ldi	r19, 0xD0	; 208
    7292:	39 0f       	add	r19, r25
    7294:	3a 30       	cpi	r19, 0x0A	; 10
    7296:	10 f4       	brcc	.+4      	; 0x729c <decode_port_no+0x4a>
    7298:	91 11       	cpse	r25, r1
    729a:	ee cf       	rjmp	.-36     	; 0x7278 <decode_port_no+0x26>
    729c:	fb 01       	movw	r30, r22
    729e:	20 83       	st	Z, r18
    72a0:	08 95       	ret
    72a2:	80 e0       	ldi	r24, 0x00	; 0
    72a4:	08 95       	ret
    72a6:	80 e0       	ldi	r24, 0x00	; 0
    72a8:	08 95       	ret

000072aa <decode_hexadecimal_string_bytes>:
    72aa:	0f 93       	push	r16
    72ac:	1f 93       	push	r17
    72ae:	cf 93       	push	r28
    72b0:	df 93       	push	r29
    72b2:	dc 01       	movw	r26, r24
    72b4:	ea 01       	movw	r28, r20
    72b6:	20 97       	sbiw	r28, 0x00	; 0
    72b8:	e1 f1       	breq	.+120    	; 0x7332 <decode_hexadecimal_string_bytes+0x88>
    72ba:	fa 01       	movw	r30, r20
    72bc:	01 90       	ld	r0, Z+
    72be:	00 20       	and	r0, r0
    72c0:	e9 f7       	brne	.-6      	; 0x72bc <decode_hexadecimal_string_bytes+0x12>
    72c2:	31 97       	sbiw	r30, 0x01	; 1
    72c4:	e4 1b       	sub	r30, r20
    72c6:	f5 0b       	sbc	r31, r21
    72c8:	32 97       	sbiw	r30, 0x02	; 2
    72ca:	10 f5       	brcc	.+68     	; 0x7310 <decode_hexadecimal_string_bytes+0x66>
    72cc:	32 c0       	rjmp	.+100    	; 0x7332 <decode_hexadecimal_string_bytes+0x88>
    72ce:	8d 01       	movw	r16, r26
    72d0:	04 0f       	add	r16, r20
    72d2:	15 1f       	adc	r17, r21
    72d4:	30 e0       	ldi	r19, 0x00	; 0
    72d6:	ae 01       	movw	r20, r28
    72d8:	42 0f       	add	r20, r18
    72da:	53 1f       	adc	r21, r19
    72dc:	fa 01       	movw	r30, r20
    72de:	90 81       	ld	r25, Z
    72e0:	91 34       	cpi	r25, 0x41	; 65
    72e2:	28 f0       	brcs	.+10     	; 0x72ee <decode_hexadecimal_string_bytes+0x44>
    72e4:	97 53       	subi	r25, 0x37	; 55
    72e6:	59 2f       	mov	r21, r25
    72e8:	52 95       	swap	r21
    72ea:	50 7f       	andi	r21, 0xF0	; 240
    72ec:	03 c0       	rjmp	.+6      	; 0x72f4 <decode_hexadecimal_string_bytes+0x4a>
    72ee:	59 2f       	mov	r21, r25
    72f0:	52 95       	swap	r21
    72f2:	50 7f       	andi	r21, 0xF0	; 240
    72f4:	2c 0f       	add	r18, r28
    72f6:	3d 1f       	adc	r19, r29
    72f8:	f9 01       	movw	r30, r18
    72fa:	91 81       	ldd	r25, Z+1	; 0x01
    72fc:	91 34       	cpi	r25, 0x41	; 65
    72fe:	10 f0       	brcs	.+4      	; 0x7304 <decode_hexadecimal_string_bytes+0x5a>
    7300:	97 53       	subi	r25, 0x37	; 55
    7302:	01 c0       	rjmp	.+2      	; 0x7306 <decode_hexadecimal_string_bytes+0x5c>
    7304:	90 53       	subi	r25, 0x30	; 48
    7306:	95 0f       	add	r25, r21
    7308:	f8 01       	movw	r30, r16
    730a:	90 83       	st	Z, r25
    730c:	8f 5f       	subi	r24, 0xFF	; 255
    730e:	01 c0       	rjmp	.+2      	; 0x7312 <decode_hexadecimal_string_bytes+0x68>
    7310:	80 e0       	ldi	r24, 0x00	; 0
    7312:	28 2f       	mov	r18, r24
    7314:	22 0f       	add	r18, r18
    7316:	48 2f       	mov	r20, r24
    7318:	50 e0       	ldi	r21, 0x00	; 0
    731a:	fe 01       	movw	r30, r28
    731c:	01 90       	ld	r0, Z+
    731e:	00 20       	and	r0, r0
    7320:	e9 f7       	brne	.-6      	; 0x731c <decode_hexadecimal_string_bytes+0x72>
    7322:	31 97       	sbiw	r30, 0x01	; 1
    7324:	ec 1b       	sub	r30, r28
    7326:	fd 0b       	sbc	r31, r29
    7328:	4e 17       	cp	r20, r30
    732a:	5f 07       	cpc	r21, r31
    732c:	10 f4       	brcc	.+4      	; 0x7332 <decode_hexadecimal_string_bytes+0x88>
    732e:	86 13       	cpse	r24, r22
    7330:	ce cf       	rjmp	.-100    	; 0x72ce <decode_hexadecimal_string_bytes+0x24>
    7332:	df 91       	pop	r29
    7334:	cf 91       	pop	r28
    7336:	1f 91       	pop	r17
    7338:	0f 91       	pop	r16
    733a:	08 95       	ret

0000733c <_serialCallBack>:
    733c:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <crc_sum.1945>
    7340:	86 0f       	add	r24, r22
    7342:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <crc_sum.1945>
    7346:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_mh_state>
    734a:	91 30       	cpi	r25, 0x01	; 1
    734c:	79 f0       	breq	.+30     	; 0x736c <_serialCallBack+0x30>
    734e:	28 f0       	brcs	.+10     	; 0x735a <_serialCallBack+0x1e>
    7350:	92 30       	cpi	r25, 0x02	; 2
    7352:	a9 f0       	breq	.+42     	; 0x737e <_serialCallBack+0x42>
    7354:	93 30       	cpi	r25, 0x03	; 3
    7356:	19 f1       	breq	.+70     	; 0x739e <_serialCallBack+0x62>
    7358:	08 95       	ret
    735a:	6f 3f       	cpi	r22, 0xFF	; 255
    735c:	09 f0       	breq	.+2      	; 0x7360 <_serialCallBack+0x24>
    735e:	48 c0       	rjmp	.+144    	; 0x73f0 <_serialCallBack+0xb4>
    7360:	10 92 e6 17 	sts	0x17E6, r1	; 0x8017e6 <crc_sum.1945>
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_mh_state>
    736a:	08 95       	ret
    736c:	66 38       	cpi	r22, 0x86	; 134
    736e:	09 f0       	breq	.+2      	; 0x7372 <_serialCallBack+0x36>
    7370:	3f c0       	rjmp	.+126    	; 0x73f0 <_serialCallBack+0xb4>
    7372:	10 92 e5 17 	sts	0x17E5, r1	; 0x8017e5 <inDex.1943>
    7376:	82 e0       	ldi	r24, 0x02	; 2
    7378:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_mh_state>
    737c:	08 95       	ret
    737e:	e0 91 e5 17 	lds	r30, 0x17E5	; 0x8017e5 <inDex.1943>
    7382:	81 e0       	ldi	r24, 0x01	; 1
    7384:	8e 0f       	add	r24, r30
    7386:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <inDex.1943>
    738a:	f0 e0       	ldi	r31, 0x00	; 0
    738c:	ed 51       	subi	r30, 0x1D	; 29
    738e:	f8 4e       	sbci	r31, 0xE8	; 232
    7390:	60 83       	st	Z, r22
    7392:	82 30       	cpi	r24, 0x02	; 2
    7394:	69 f5       	brne	.+90     	; 0x73f0 <_serialCallBack+0xb4>
    7396:	83 e0       	ldi	r24, 0x03	; 3
    7398:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_mh_state>
    739c:	08 95       	ret
    739e:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <inDex.1943>
    73a2:	21 e0       	ldi	r18, 0x01	; 1
    73a4:	29 0f       	add	r18, r25
    73a6:	20 93 e5 17 	sts	0x17E5, r18	; 0x8017e5 <inDex.1943>
    73aa:	96 30       	cpi	r25, 0x06	; 6
    73ac:	09 f5       	brne	.+66     	; 0x73f0 <_serialCallBack+0xb4>
    73ae:	81 11       	cpse	r24, r1
    73b0:	0e c0       	rjmp	.+28     	; 0x73ce <_serialCallBack+0x92>
    73b2:	e3 ee       	ldi	r30, 0xE3	; 227
    73b4:	f7 e1       	ldi	r31, 0x17	; 23
    73b6:	80 81       	ld	r24, Z
    73b8:	90 e0       	ldi	r25, 0x00	; 0
    73ba:	98 2f       	mov	r25, r24
    73bc:	88 27       	eor	r24, r24
    73be:	21 81       	ldd	r18, Z+1	; 0x01
    73c0:	82 0f       	add	r24, r18
    73c2:	91 1d       	adc	r25, r1
    73c4:	90 93 eb 17 	sts	0x17EB, r25	; 0x8017eb <_ppm+0x1>
    73c8:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <_ppm>
    73cc:	04 c0       	rjmp	.+8      	; 0x73d6 <_serialCallBack+0x9a>
    73ce:	10 92 eb 17 	sts	0x17EB, r1	; 0x8017eb <_ppm+0x1>
    73d2:	10 92 ea 17 	sts	0x17EA, r1	; 0x8017ea <_ppm>
    73d6:	10 92 e9 17 	sts	0x17E9, r1	; 0x8017e9 <_mh_state>
    73da:	e0 91 e7 17 	lds	r30, 0x17E7	; 0x8017e7 <_appCallBack>
    73de:	f0 91 e8 17 	lds	r31, 0x17E8	; 0x8017e8 <_appCallBack+0x1>
    73e2:	30 97       	sbiw	r30, 0x00	; 0
    73e4:	29 f0       	breq	.+10     	; 0x73f0 <_serialCallBack+0xb4>
    73e6:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <_ppm>
    73ea:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <_ppm+0x1>
    73ee:	19 95       	eicall
    73f0:	08 95       	ret

000073f2 <mh_z19_initialise>:
    73f2:	8f 92       	push	r8
    73f4:	9f 92       	push	r9
    73f6:	af 92       	push	r10
    73f8:	cf 92       	push	r12
    73fa:	ef 92       	push	r14
    73fc:	0f 93       	push	r16
    73fe:	0f 2e       	mov	r0, r31
    7400:	fe e9       	ldi	r31, 0x9E	; 158
    7402:	8f 2e       	mov	r8, r31
    7404:	f9 e3       	ldi	r31, 0x39	; 57
    7406:	9f 2e       	mov	r9, r31
    7408:	f0 2d       	mov	r31, r0
    740a:	68 94       	set
    740c:	aa 24       	eor	r10, r10
    740e:	a4 f8       	bld	r10, 4
    7410:	68 94       	set
    7412:	cc 24       	eor	r12, r12
    7414:	c4 f8       	bld	r12, 4
    7416:	e1 2c       	mov	r14, r1
    7418:	00 e0       	ldi	r16, 0x00	; 0
    741a:	23 e0       	ldi	r18, 0x03	; 3
    741c:	40 e8       	ldi	r20, 0x80	; 128
    741e:	55 e2       	ldi	r21, 0x25	; 37
    7420:	60 e0       	ldi	r22, 0x00	; 0
    7422:	70 e0       	ldi	r23, 0x00	; 0
    7424:	3f d0       	rcall	.+126    	; 0x74a4 <serial_create>
    7426:	90 93 ed 17 	sts	0x17ED, r25	; 0x8017ed <_serial+0x1>
    742a:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <_serial>
    742e:	0f 91       	pop	r16
    7430:	ef 90       	pop	r14
    7432:	cf 90       	pop	r12
    7434:	af 90       	pop	r10
    7436:	9f 90       	pop	r9
    7438:	8f 90       	pop	r8
    743a:	08 95       	ret

0000743c <mh_z19_injectCallBack>:
    743c:	90 93 e8 17 	sts	0x17E8, r25	; 0x8017e8 <_appCallBack+0x1>
    7440:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <_appCallBack>
    7444:	08 95       	ret

00007446 <mh_z19_takeMeassuring>:
    7446:	cf 93       	push	r28
    7448:	df 93       	push	r29
    744a:	cd b7       	in	r28, 0x3d	; 61
    744c:	de b7       	in	r29, 0x3e	; 62
    744e:	29 97       	sbiw	r28, 0x09	; 9
    7450:	0f b6       	in	r0, 0x3f	; 63
    7452:	f8 94       	cli
    7454:	de bf       	out	0x3e, r29	; 62
    7456:	0f be       	out	0x3f, r0	; 63
    7458:	cd bf       	out	0x3d, r28	; 61
    745a:	89 e0       	ldi	r24, 0x09	; 9
    745c:	e4 e5       	ldi	r30, 0x54	; 84
    745e:	f5 e0       	ldi	r31, 0x05	; 5
    7460:	9e 01       	movw	r18, r28
    7462:	2f 5f       	subi	r18, 0xFF	; 255
    7464:	3f 4f       	sbci	r19, 0xFF	; 255
    7466:	d9 01       	movw	r26, r18
    7468:	01 90       	ld	r0, Z+
    746a:	0d 92       	st	X+, r0
    746c:	8a 95       	dec	r24
    746e:	e1 f7       	brne	.-8      	; 0x7468 <mh_z19_takeMeassuring+0x22>
    7470:	10 92 eb 17 	sts	0x17EB, r1	; 0x8017eb <_ppm+0x1>
    7474:	10 92 ea 17 	sts	0x17EA, r1	; 0x8017ea <_ppm>
    7478:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <_serial>
    747c:	90 91 ed 17 	lds	r25, 0x17ED	; 0x8017ed <_serial+0x1>
    7480:	00 97       	sbiw	r24, 0x00	; 0
    7482:	31 f0       	breq	.+12     	; 0x7490 <mh_z19_takeMeassuring+0x4a>
    7484:	42 2f       	mov	r20, r18
    7486:	53 2f       	mov	r21, r19
    7488:	69 e0       	ldi	r22, 0x09	; 9
    748a:	d8 d0       	rcall	.+432    	; 0x763c <serial_sendBytes>
    748c:	80 e0       	ldi	r24, 0x00	; 0
    748e:	01 c0       	rjmp	.+2      	; 0x7492 <mh_z19_takeMeassuring+0x4c>
    7490:	82 e0       	ldi	r24, 0x02	; 2
    7492:	29 96       	adiw	r28, 0x09	; 9
    7494:	0f b6       	in	r0, 0x3f	; 63
    7496:	f8 94       	cli
    7498:	de bf       	out	0x3e, r29	; 62
    749a:	0f be       	out	0x3f, r0	; 63
    749c:	cd bf       	out	0x3d, r28	; 61
    749e:	df 91       	pop	r29
    74a0:	cf 91       	pop	r28
    74a2:	08 95       	ret

000074a4 <serial_create>:
    74a4:	2f 92       	push	r2
    74a6:	3f 92       	push	r3
    74a8:	4f 92       	push	r4
    74aa:	5f 92       	push	r5
    74ac:	6f 92       	push	r6
    74ae:	7f 92       	push	r7
    74b0:	8f 92       	push	r8
    74b2:	9f 92       	push	r9
    74b4:	af 92       	push	r10
    74b6:	cf 92       	push	r12
    74b8:	ef 92       	push	r14
    74ba:	ff 92       	push	r15
    74bc:	0f 93       	push	r16
    74be:	1f 93       	push	r17
    74c0:	cf 93       	push	r28
    74c2:	df 93       	push	r29
    74c4:	cd b7       	in	r28, 0x3d	; 61
    74c6:	de b7       	in	r29, 0x3e	; 62
    74c8:	f8 2e       	mov	r15, r24
    74ca:	2a 01       	movw	r4, r20
    74cc:	3b 01       	movw	r6, r22
    74ce:	88 e0       	ldi	r24, 0x08	; 8
    74d0:	90 e0       	ldi	r25, 0x00	; 0
    74d2:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <malloc>
    74d6:	8c 01       	movw	r16, r24
    74d8:	8f 2d       	mov	r24, r15
    74da:	90 e0       	ldi	r25, 0x00	; 0
    74dc:	fc 01       	movw	r30, r24
    74de:	ee 0f       	add	r30, r30
    74e0:	ff 1f       	adc	r31, r31
    74e2:	e2 51       	subi	r30, 0x12	; 18
    74e4:	f8 4e       	sbci	r31, 0xE8	; 232
    74e6:	11 83       	std	Z+1, r17	; 0x01
    74e8:	00 83       	st	Z, r16
    74ea:	01 15       	cp	r16, r1
    74ec:	11 05       	cpc	r17, r1
    74ee:	09 f4       	brne	.+2      	; 0x74f2 <serial_create+0x4e>
    74f0:	68 c0       	rjmp	.+208    	; 0x75c2 <serial_create+0x11e>
    74f2:	88 0f       	add	r24, r24
    74f4:	99 1f       	adc	r25, r25
    74f6:	fc 01       	movw	r30, r24
    74f8:	e5 5f       	subi	r30, 0xF5	; 245
    74fa:	fd 4f       	sbci	r31, 0xFD	; 253
    74fc:	80 81       	ld	r24, Z
    74fe:	91 81       	ldd	r25, Z+1	; 0x01
    7500:	d8 01       	movw	r26, r16
    7502:	8d 93       	st	X+, r24
    7504:	9c 93       	st	X, r25
    7506:	8c 2d       	mov	r24, r12
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	88 0f       	add	r24, r24
    750c:	99 1f       	adc	r25, r25
    750e:	88 0f       	add	r24, r24
    7510:	99 1f       	adc	r25, r25
    7512:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <malloc>
    7516:	1c 01       	movw	r2, r24
    7518:	86 e0       	ldi	r24, 0x06	; 6
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <malloc>
    7520:	7c 01       	movw	r14, r24
    7522:	4c 2d       	mov	r20, r12
    7524:	b1 01       	movw	r22, r2
    7526:	ef d6       	rcall	.+3550   	; 0x8306 <fifo_init>
    7528:	f8 01       	movw	r30, r16
    752a:	f5 82       	std	Z+5, r15	; 0x05
    752c:	e4 82       	std	Z+4, r14	; 0x04
    752e:	8a 2d       	mov	r24, r10
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	88 0f       	add	r24, r24
    7534:	99 1f       	adc	r25, r25
    7536:	88 0f       	add	r24, r24
    7538:	99 1f       	adc	r25, r25
    753a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <malloc>
    753e:	1c 01       	movw	r2, r24
    7540:	86 e0       	ldi	r24, 0x06	; 6
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <malloc>
    7548:	7c 01       	movw	r14, r24
    754a:	4a 2d       	mov	r20, r10
    754c:	b1 01       	movw	r22, r2
    754e:	db d6       	rcall	.+3510   	; 0x8306 <fifo_init>
    7550:	d8 01       	movw	r26, r16
    7552:	13 96       	adiw	r26, 0x03	; 3
    7554:	fc 92       	st	X, r15
    7556:	ee 92       	st	-X, r14
    7558:	12 97       	sbiw	r26, 0x02	; 2
    755a:	17 96       	adiw	r26, 0x07	; 7
    755c:	9c 92       	st	X, r9
    755e:	8e 92       	st	-X, r8
    7560:	16 97       	sbiw	r26, 0x06	; 6
    7562:	ff b6       	in	r15, 0x3f	; 63
    7564:	f8 94       	cli
    7566:	ed 91       	ld	r30, X+
    7568:	fc 91       	ld	r31, X
    756a:	11 97       	sbiw	r26, 0x01	; 1
    756c:	36 97       	sbiw	r30, 0x06	; 6
    756e:	80 81       	ld	r24, Z
    7570:	82 60       	ori	r24, 0x02	; 2
    7572:	80 83       	st	Z, r24
    7574:	8d 90       	ld	r8, X+
    7576:	9c 90       	ld	r9, X
    7578:	c3 01       	movw	r24, r6
    757a:	b2 01       	movw	r22, r4
    757c:	c4 d7       	rcall	.+3976   	; 0x8506 <__floatunsisf>
    757e:	20 e0       	ldi	r18, 0x00	; 0
    7580:	30 e0       	ldi	r19, 0x00	; 0
    7582:	40 e0       	ldi	r20, 0x00	; 0
    7584:	51 e4       	ldi	r21, 0x41	; 65
    7586:	38 d9       	rcall	.-3472   	; 0x67f8 <__mulsf3>
    7588:	9b 01       	movw	r18, r22
    758a:	ac 01       	movw	r20, r24
    758c:	60 e0       	ldi	r22, 0x00	; 0
    758e:	74 e2       	ldi	r23, 0x24	; 36
    7590:	84 e7       	ldi	r24, 0x74	; 116
    7592:	9b e4       	ldi	r25, 0x4B	; 75
    7594:	40 d7       	rcall	.+3712   	; 0x8416 <__divsf3>
    7596:	20 e0       	ldi	r18, 0x00	; 0
    7598:	30 e0       	ldi	r19, 0x00	; 0
    759a:	40 e8       	ldi	r20, 0x80	; 128
    759c:	5f e3       	ldi	r21, 0x3F	; 63
    759e:	cf d6       	rcall	.+3486   	; 0x833e <__subsf3>
    75a0:	ae d8       	rcall	.-3748   	; 0x66fe <__fixunssfsi>
    75a2:	f4 01       	movw	r30, r8
    75a4:	32 97       	sbiw	r30, 0x02	; 2
    75a6:	60 83       	st	Z, r22
    75a8:	d8 01       	movw	r26, r16
    75aa:	ed 91       	ld	r30, X+
    75ac:	fc 91       	ld	r31, X
    75ae:	11 97       	sbiw	r26, 0x01	; 1
    75b0:	35 97       	sbiw	r30, 0x05	; 5
    75b2:	88 e9       	ldi	r24, 0x98	; 152
    75b4:	80 83       	st	Z, r24
    75b6:	ed 91       	ld	r30, X+
    75b8:	fc 91       	ld	r31, X
    75ba:	34 97       	sbiw	r30, 0x04	; 4
    75bc:	86 e0       	ldi	r24, 0x06	; 6
    75be:	80 83       	st	Z, r24
    75c0:	ff be       	out	0x3f, r15	; 63
    75c2:	c8 01       	movw	r24, r16
    75c4:	df 91       	pop	r29
    75c6:	cf 91       	pop	r28
    75c8:	1f 91       	pop	r17
    75ca:	0f 91       	pop	r16
    75cc:	ff 90       	pop	r15
    75ce:	ef 90       	pop	r14
    75d0:	cf 90       	pop	r12
    75d2:	af 90       	pop	r10
    75d4:	9f 90       	pop	r9
    75d6:	8f 90       	pop	r8
    75d8:	7f 90       	pop	r7
    75da:	6f 90       	pop	r6
    75dc:	5f 90       	pop	r5
    75de:	4f 90       	pop	r4
    75e0:	3f 90       	pop	r3
    75e2:	2f 90       	pop	r2
    75e4:	08 95       	ret

000075e6 <serial_sendByte>:
    75e6:	cf 93       	push	r28
    75e8:	df 93       	push	r29
    75ea:	dc 01       	movw	r26, r24
    75ec:	89 2b       	or	r24, r25
    75ee:	01 f1       	breq	.+64     	; 0x7630 <serial_sendByte+0x4a>
    75f0:	12 96       	adiw	r26, 0x02	; 2
    75f2:	ed 91       	ld	r30, X+
    75f4:	fc 91       	ld	r31, X
    75f6:	13 97       	sbiw	r26, 0x03	; 3
    75f8:	93 81       	ldd	r25, Z+3	; 0x03
    75fa:	82 81       	ldd	r24, Z+2	; 0x02
    75fc:	25 81       	ldd	r18, Z+5	; 0x05
    75fe:	98 1b       	sub	r25, r24
    7600:	92 23       	and	r25, r18
    7602:	84 81       	ldd	r24, Z+4	; 0x04
    7604:	98 17       	cp	r25, r24
    7606:	b1 f0       	breq	.+44     	; 0x7634 <serial_sendByte+0x4e>
    7608:	83 81       	ldd	r24, Z+3	; 0x03
    760a:	26 95       	lsr	r18
    760c:	28 23       	and	r18, r24
    760e:	c0 81       	ld	r28, Z
    7610:	d1 81       	ldd	r29, Z+1	; 0x01
    7612:	c2 0f       	add	r28, r18
    7614:	d1 1d       	adc	r29, r1
    7616:	68 83       	st	Y, r22
    7618:	8f 5f       	subi	r24, 0xFF	; 255
    761a:	95 81       	ldd	r25, Z+5	; 0x05
    761c:	89 23       	and	r24, r25
    761e:	83 83       	std	Z+3, r24	; 0x03
    7620:	ed 91       	ld	r30, X+
    7622:	fc 91       	ld	r31, X
    7624:	35 97       	sbiw	r30, 0x05	; 5
    7626:	80 81       	ld	r24, Z
    7628:	80 62       	ori	r24, 0x20	; 32
    762a:	80 83       	st	Z, r24
    762c:	80 e0       	ldi	r24, 0x00	; 0
    762e:	03 c0       	rjmp	.+6      	; 0x7636 <serial_sendByte+0x50>
    7630:	81 e0       	ldi	r24, 0x01	; 1
    7632:	01 c0       	rjmp	.+2      	; 0x7636 <serial_sendByte+0x50>
    7634:	82 e0       	ldi	r24, 0x02	; 2
    7636:	df 91       	pop	r29
    7638:	cf 91       	pop	r28
    763a:	08 95       	ret

0000763c <serial_sendBytes>:
    763c:	ef 92       	push	r14
    763e:	ff 92       	push	r15
    7640:	0f 93       	push	r16
    7642:	1f 93       	push	r17
    7644:	cf 93       	push	r28
    7646:	df 93       	push	r29
    7648:	7c 01       	movw	r14, r24
    764a:	00 97       	sbiw	r24, 0x00	; 0
    764c:	09 f4       	brne	.+2      	; 0x7650 <serial_sendBytes+0x14>
    764e:	41 c0       	rjmp	.+130    	; 0x76d2 <serial_sendBytes+0x96>
    7650:	dc 01       	movw	r26, r24
    7652:	12 96       	adiw	r26, 0x02	; 2
    7654:	ed 91       	ld	r30, X+
    7656:	fc 91       	ld	r31, X
    7658:	13 97       	sbiw	r26, 0x03	; 3
    765a:	93 81       	ldd	r25, Z+3	; 0x03
    765c:	82 81       	ldd	r24, Z+2	; 0x02
    765e:	98 1b       	sub	r25, r24
    7660:	85 81       	ldd	r24, Z+5	; 0x05
    7662:	98 23       	and	r25, r24
    7664:	84 81       	ldd	r24, Z+4	; 0x04
    7666:	89 1b       	sub	r24, r25
    7668:	86 17       	cp	r24, r22
    766a:	a8 f1       	brcs	.+106    	; 0x76d6 <serial_sendBytes+0x9a>
    766c:	66 23       	and	r22, r22
    766e:	41 f1       	breq	.+80     	; 0x76c0 <serial_sendBytes+0x84>
    7670:	84 2f       	mov	r24, r20
    7672:	95 2f       	mov	r25, r21
    7674:	dc 01       	movw	r26, r24
    7676:	61 50       	subi	r22, 0x01	; 1
    7678:	46 2f       	mov	r20, r22
    767a:	50 e0       	ldi	r21, 0x00	; 0
    767c:	4f 5f       	subi	r20, 0xFF	; 255
    767e:	5f 4f       	sbci	r21, 0xFF	; 255
    7680:	48 0f       	add	r20, r24
    7682:	59 1f       	adc	r21, r25
    7684:	e7 01       	movw	r28, r14
    7686:	ea 81       	ldd	r30, Y+2	; 0x02
    7688:	fb 81       	ldd	r31, Y+3	; 0x03
    768a:	93 81       	ldd	r25, Z+3	; 0x03
    768c:	82 81       	ldd	r24, Z+2	; 0x02
    768e:	25 81       	ldd	r18, Z+5	; 0x05
    7690:	98 1b       	sub	r25, r24
    7692:	92 23       	and	r25, r18
    7694:	84 81       	ldd	r24, Z+4	; 0x04
    7696:	98 17       	cp	r25, r24
    7698:	79 f0       	breq	.+30     	; 0x76b8 <serial_sendBytes+0x7c>
    769a:	8c 91       	ld	r24, X
    769c:	93 81       	ldd	r25, Z+3	; 0x03
    769e:	26 95       	lsr	r18
    76a0:	29 23       	and	r18, r25
    76a2:	60 81       	ld	r22, Z
    76a4:	71 81       	ldd	r23, Z+1	; 0x01
    76a6:	8b 01       	movw	r16, r22
    76a8:	02 0f       	add	r16, r18
    76aa:	11 1d       	adc	r17, r1
    76ac:	e8 01       	movw	r28, r16
    76ae:	88 83       	st	Y, r24
    76b0:	9f 5f       	subi	r25, 0xFF	; 255
    76b2:	85 81       	ldd	r24, Z+5	; 0x05
    76b4:	98 23       	and	r25, r24
    76b6:	93 83       	std	Z+3, r25	; 0x03
    76b8:	11 96       	adiw	r26, 0x01	; 1
    76ba:	a4 17       	cp	r26, r20
    76bc:	b5 07       	cpc	r27, r21
    76be:	11 f7       	brne	.-60     	; 0x7684 <serial_sendBytes+0x48>
    76c0:	d7 01       	movw	r26, r14
    76c2:	ed 91       	ld	r30, X+
    76c4:	fc 91       	ld	r31, X
    76c6:	35 97       	sbiw	r30, 0x05	; 5
    76c8:	80 81       	ld	r24, Z
    76ca:	80 62       	ori	r24, 0x20	; 32
    76cc:	80 83       	st	Z, r24
    76ce:	80 e0       	ldi	r24, 0x00	; 0
    76d0:	03 c0       	rjmp	.+6      	; 0x76d8 <serial_sendBytes+0x9c>
    76d2:	81 e0       	ldi	r24, 0x01	; 1
    76d4:	01 c0       	rjmp	.+2      	; 0x76d8 <serial_sendBytes+0x9c>
    76d6:	82 e0       	ldi	r24, 0x02	; 2
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	1f 91       	pop	r17
    76de:	0f 91       	pop	r16
    76e0:	ff 90       	pop	r15
    76e2:	ef 90       	pop	r14
    76e4:	08 95       	ret

000076e6 <serial_getByte>:
    76e6:	00 97       	sbiw	r24, 0x00	; 0
    76e8:	d1 f0       	breq	.+52     	; 0x771e <serial_getByte+0x38>
    76ea:	dc 01       	movw	r26, r24
    76ec:	14 96       	adiw	r26, 0x04	; 4
    76ee:	ed 91       	ld	r30, X+
    76f0:	fc 91       	ld	r31, X
    76f2:	15 97       	sbiw	r26, 0x05	; 5
    76f4:	93 81       	ldd	r25, Z+3	; 0x03
    76f6:	82 81       	ldd	r24, Z+2	; 0x02
    76f8:	98 17       	cp	r25, r24
    76fa:	99 f0       	breq	.+38     	; 0x7722 <serial_getByte+0x3c>
    76fc:	92 81       	ldd	r25, Z+2	; 0x02
    76fe:	85 81       	ldd	r24, Z+5	; 0x05
    7700:	86 95       	lsr	r24
    7702:	89 23       	and	r24, r25
    7704:	a0 81       	ld	r26, Z
    7706:	b1 81       	ldd	r27, Z+1	; 0x01
    7708:	a8 0f       	add	r26, r24
    770a:	b1 1d       	adc	r27, r1
    770c:	8c 91       	ld	r24, X
    770e:	db 01       	movw	r26, r22
    7710:	8c 93       	st	X, r24
    7712:	9f 5f       	subi	r25, 0xFF	; 255
    7714:	85 81       	ldd	r24, Z+5	; 0x05
    7716:	98 23       	and	r25, r24
    7718:	92 83       	std	Z+2, r25	; 0x02
    771a:	80 e0       	ldi	r24, 0x00	; 0
    771c:	08 95       	ret
    771e:	81 e0       	ldi	r24, 0x01	; 1
    7720:	08 95       	ret
    7722:	83 e0       	ldi	r24, 0x03	; 3
    7724:	08 95       	ret

00007726 <__vector_25>:
    7726:	1f 92       	push	r1
    7728:	0f 92       	push	r0
    772a:	0f b6       	in	r0, 0x3f	; 63
    772c:	0f 92       	push	r0
    772e:	11 24       	eor	r1, r1
    7730:	0b b6       	in	r0, 0x3b	; 59
    7732:	0f 92       	push	r0
    7734:	2f 93       	push	r18
    7736:	3f 93       	push	r19
    7738:	4f 93       	push	r20
    773a:	5f 93       	push	r21
    773c:	6f 93       	push	r22
    773e:	7f 93       	push	r23
    7740:	8f 93       	push	r24
    7742:	9f 93       	push	r25
    7744:	af 93       	push	r26
    7746:	bf 93       	push	r27
    7748:	cf 93       	push	r28
    774a:	df 93       	push	r29
    774c:	ef 93       	push	r30
    774e:	ff 93       	push	r31
    7750:	a0 91 ee 17 	lds	r26, 0x17EE	; 0x8017ee <_ser_handle>
    7754:	b0 91 ef 17 	lds	r27, 0x17EF	; 0x8017ef <_ser_handle+0x1>
    7758:	10 97       	sbiw	r26, 0x00	; 0
    775a:	11 f1       	breq	.+68     	; 0x77a0 <__vector_25+0x7a>
    775c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7760:	14 96       	adiw	r26, 0x04	; 4
    7762:	ed 91       	ld	r30, X+
    7764:	fc 91       	ld	r31, X
    7766:	15 97       	sbiw	r26, 0x05	; 5
    7768:	93 81       	ldd	r25, Z+3	; 0x03
    776a:	82 81       	ldd	r24, Z+2	; 0x02
    776c:	25 81       	ldd	r18, Z+5	; 0x05
    776e:	98 1b       	sub	r25, r24
    7770:	92 23       	and	r25, r18
    7772:	84 81       	ldd	r24, Z+4	; 0x04
    7774:	98 17       	cp	r25, r24
    7776:	61 f0       	breq	.+24     	; 0x7790 <__vector_25+0x6a>
    7778:	83 81       	ldd	r24, Z+3	; 0x03
    777a:	26 95       	lsr	r18
    777c:	28 23       	and	r18, r24
    777e:	c0 81       	ld	r28, Z
    7780:	d1 81       	ldd	r29, Z+1	; 0x01
    7782:	c2 0f       	add	r28, r18
    7784:	d1 1d       	adc	r29, r1
    7786:	68 83       	st	Y, r22
    7788:	8f 5f       	subi	r24, 0xFF	; 255
    778a:	95 81       	ldd	r25, Z+5	; 0x05
    778c:	89 23       	and	r24, r25
    778e:	83 83       	std	Z+3, r24	; 0x03
    7790:	16 96       	adiw	r26, 0x06	; 6
    7792:	ed 91       	ld	r30, X+
    7794:	fc 91       	ld	r31, X
    7796:	17 97       	sbiw	r26, 0x07	; 7
    7798:	30 97       	sbiw	r30, 0x00	; 0
    779a:	11 f0       	breq	.+4      	; 0x77a0 <__vector_25+0x7a>
    779c:	cd 01       	movw	r24, r26
    779e:	19 95       	eicall
    77a0:	ff 91       	pop	r31
    77a2:	ef 91       	pop	r30
    77a4:	df 91       	pop	r29
    77a6:	cf 91       	pop	r28
    77a8:	bf 91       	pop	r27
    77aa:	af 91       	pop	r26
    77ac:	9f 91       	pop	r25
    77ae:	8f 91       	pop	r24
    77b0:	7f 91       	pop	r23
    77b2:	6f 91       	pop	r22
    77b4:	5f 91       	pop	r21
    77b6:	4f 91       	pop	r20
    77b8:	3f 91       	pop	r19
    77ba:	2f 91       	pop	r18
    77bc:	0f 90       	pop	r0
    77be:	0b be       	out	0x3b, r0	; 59
    77c0:	0f 90       	pop	r0
    77c2:	0f be       	out	0x3f, r0	; 63
    77c4:	0f 90       	pop	r0
    77c6:	1f 90       	pop	r1
    77c8:	18 95       	reti

000077ca <__vector_26>:
    77ca:	1f 92       	push	r1
    77cc:	0f 92       	push	r0
    77ce:	0f b6       	in	r0, 0x3f	; 63
    77d0:	0f 92       	push	r0
    77d2:	11 24       	eor	r1, r1
    77d4:	0b b6       	in	r0, 0x3b	; 59
    77d6:	0f 92       	push	r0
    77d8:	2f 93       	push	r18
    77da:	8f 93       	push	r24
    77dc:	9f 93       	push	r25
    77de:	af 93       	push	r26
    77e0:	bf 93       	push	r27
    77e2:	ef 93       	push	r30
    77e4:	ff 93       	push	r31
    77e6:	e0 91 ee 17 	lds	r30, 0x17EE	; 0x8017ee <_ser_handle>
    77ea:	f0 91 ef 17 	lds	r31, 0x17EF	; 0x8017ef <_ser_handle+0x1>
    77ee:	30 97       	sbiw	r30, 0x00	; 0
    77f0:	b9 f0       	breq	.+46     	; 0x7820 <__vector_26+0x56>
    77f2:	02 80       	ldd	r0, Z+2	; 0x02
    77f4:	f3 81       	ldd	r31, Z+3	; 0x03
    77f6:	e0 2d       	mov	r30, r0
    77f8:	93 81       	ldd	r25, Z+3	; 0x03
    77fa:	82 81       	ldd	r24, Z+2	; 0x02
    77fc:	98 17       	cp	r25, r24
    77fe:	b1 f0       	breq	.+44     	; 0x782c <__vector_26+0x62>
    7800:	92 81       	ldd	r25, Z+2	; 0x02
    7802:	85 81       	ldd	r24, Z+5	; 0x05
    7804:	28 2f       	mov	r18, r24
    7806:	26 95       	lsr	r18
    7808:	29 23       	and	r18, r25
    780a:	a0 81       	ld	r26, Z
    780c:	b1 81       	ldd	r27, Z+1	; 0x01
    780e:	a2 0f       	add	r26, r18
    7810:	b1 1d       	adc	r27, r1
    7812:	2c 91       	ld	r18, X
    7814:	9f 5f       	subi	r25, 0xFF	; 255
    7816:	89 23       	and	r24, r25
    7818:	82 83       	std	Z+2, r24	; 0x02
    781a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    781e:	0b c0       	rjmp	.+22     	; 0x7836 <__vector_26+0x6c>
    7820:	e1 ec       	ldi	r30, 0xC1	; 193
    7822:	f0 e0       	ldi	r31, 0x00	; 0
    7824:	80 81       	ld	r24, Z
    7826:	8f 7d       	andi	r24, 0xDF	; 223
    7828:	80 83       	st	Z, r24
    782a:	05 c0       	rjmp	.+10     	; 0x7836 <__vector_26+0x6c>
    782c:	e1 ec       	ldi	r30, 0xC1	; 193
    782e:	f0 e0       	ldi	r31, 0x00	; 0
    7830:	80 81       	ld	r24, Z
    7832:	8f 7d       	andi	r24, 0xDF	; 223
    7834:	80 83       	st	Z, r24
    7836:	ff 91       	pop	r31
    7838:	ef 91       	pop	r30
    783a:	bf 91       	pop	r27
    783c:	af 91       	pop	r26
    783e:	9f 91       	pop	r25
    7840:	8f 91       	pop	r24
    7842:	2f 91       	pop	r18
    7844:	0f 90       	pop	r0
    7846:	0b be       	out	0x3b, r0	; 59
    7848:	0f 90       	pop	r0
    784a:	0f be       	out	0x3f, r0	; 63
    784c:	0f 90       	pop	r0
    784e:	1f 90       	pop	r1
    7850:	18 95       	reti

00007852 <__vector_36>:
    7852:	1f 92       	push	r1
    7854:	0f 92       	push	r0
    7856:	0f b6       	in	r0, 0x3f	; 63
    7858:	0f 92       	push	r0
    785a:	11 24       	eor	r1, r1
    785c:	0b b6       	in	r0, 0x3b	; 59
    785e:	0f 92       	push	r0
    7860:	2f 93       	push	r18
    7862:	3f 93       	push	r19
    7864:	4f 93       	push	r20
    7866:	5f 93       	push	r21
    7868:	6f 93       	push	r22
    786a:	7f 93       	push	r23
    786c:	8f 93       	push	r24
    786e:	9f 93       	push	r25
    7870:	af 93       	push	r26
    7872:	bf 93       	push	r27
    7874:	cf 93       	push	r28
    7876:	df 93       	push	r29
    7878:	ef 93       	push	r30
    787a:	ff 93       	push	r31
    787c:	a0 91 f0 17 	lds	r26, 0x17F0	; 0x8017f0 <_ser_handle+0x2>
    7880:	b0 91 f1 17 	lds	r27, 0x17F1	; 0x8017f1 <_ser_handle+0x3>
    7884:	10 97       	sbiw	r26, 0x00	; 0
    7886:	11 f1       	breq	.+68     	; 0x78cc <__vector_36+0x7a>
    7888:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    788c:	14 96       	adiw	r26, 0x04	; 4
    788e:	ed 91       	ld	r30, X+
    7890:	fc 91       	ld	r31, X
    7892:	15 97       	sbiw	r26, 0x05	; 5
    7894:	93 81       	ldd	r25, Z+3	; 0x03
    7896:	82 81       	ldd	r24, Z+2	; 0x02
    7898:	25 81       	ldd	r18, Z+5	; 0x05
    789a:	98 1b       	sub	r25, r24
    789c:	92 23       	and	r25, r18
    789e:	84 81       	ldd	r24, Z+4	; 0x04
    78a0:	98 17       	cp	r25, r24
    78a2:	61 f0       	breq	.+24     	; 0x78bc <__vector_36+0x6a>
    78a4:	83 81       	ldd	r24, Z+3	; 0x03
    78a6:	26 95       	lsr	r18
    78a8:	28 23       	and	r18, r24
    78aa:	c0 81       	ld	r28, Z
    78ac:	d1 81       	ldd	r29, Z+1	; 0x01
    78ae:	c2 0f       	add	r28, r18
    78b0:	d1 1d       	adc	r29, r1
    78b2:	68 83       	st	Y, r22
    78b4:	8f 5f       	subi	r24, 0xFF	; 255
    78b6:	95 81       	ldd	r25, Z+5	; 0x05
    78b8:	89 23       	and	r24, r25
    78ba:	83 83       	std	Z+3, r24	; 0x03
    78bc:	16 96       	adiw	r26, 0x06	; 6
    78be:	ed 91       	ld	r30, X+
    78c0:	fc 91       	ld	r31, X
    78c2:	17 97       	sbiw	r26, 0x07	; 7
    78c4:	30 97       	sbiw	r30, 0x00	; 0
    78c6:	11 f0       	breq	.+4      	; 0x78cc <__vector_36+0x7a>
    78c8:	cd 01       	movw	r24, r26
    78ca:	19 95       	eicall
    78cc:	ff 91       	pop	r31
    78ce:	ef 91       	pop	r30
    78d0:	df 91       	pop	r29
    78d2:	cf 91       	pop	r28
    78d4:	bf 91       	pop	r27
    78d6:	af 91       	pop	r26
    78d8:	9f 91       	pop	r25
    78da:	8f 91       	pop	r24
    78dc:	7f 91       	pop	r23
    78de:	6f 91       	pop	r22
    78e0:	5f 91       	pop	r21
    78e2:	4f 91       	pop	r20
    78e4:	3f 91       	pop	r19
    78e6:	2f 91       	pop	r18
    78e8:	0f 90       	pop	r0
    78ea:	0b be       	out	0x3b, r0	; 59
    78ec:	0f 90       	pop	r0
    78ee:	0f be       	out	0x3f, r0	; 63
    78f0:	0f 90       	pop	r0
    78f2:	1f 90       	pop	r1
    78f4:	18 95       	reti

000078f6 <__vector_37>:
    78f6:	1f 92       	push	r1
    78f8:	0f 92       	push	r0
    78fa:	0f b6       	in	r0, 0x3f	; 63
    78fc:	0f 92       	push	r0
    78fe:	11 24       	eor	r1, r1
    7900:	0b b6       	in	r0, 0x3b	; 59
    7902:	0f 92       	push	r0
    7904:	2f 93       	push	r18
    7906:	8f 93       	push	r24
    7908:	9f 93       	push	r25
    790a:	af 93       	push	r26
    790c:	bf 93       	push	r27
    790e:	ef 93       	push	r30
    7910:	ff 93       	push	r31
    7912:	e0 91 f0 17 	lds	r30, 0x17F0	; 0x8017f0 <_ser_handle+0x2>
    7916:	f0 91 f1 17 	lds	r31, 0x17F1	; 0x8017f1 <_ser_handle+0x3>
    791a:	30 97       	sbiw	r30, 0x00	; 0
    791c:	b9 f0       	breq	.+46     	; 0x794c <__vector_37+0x56>
    791e:	02 80       	ldd	r0, Z+2	; 0x02
    7920:	f3 81       	ldd	r31, Z+3	; 0x03
    7922:	e0 2d       	mov	r30, r0
    7924:	93 81       	ldd	r25, Z+3	; 0x03
    7926:	82 81       	ldd	r24, Z+2	; 0x02
    7928:	98 17       	cp	r25, r24
    792a:	b1 f0       	breq	.+44     	; 0x7958 <__vector_37+0x62>
    792c:	92 81       	ldd	r25, Z+2	; 0x02
    792e:	85 81       	ldd	r24, Z+5	; 0x05
    7930:	28 2f       	mov	r18, r24
    7932:	26 95       	lsr	r18
    7934:	29 23       	and	r18, r25
    7936:	a0 81       	ld	r26, Z
    7938:	b1 81       	ldd	r27, Z+1	; 0x01
    793a:	a2 0f       	add	r26, r18
    793c:	b1 1d       	adc	r27, r1
    793e:	2c 91       	ld	r18, X
    7940:	9f 5f       	subi	r25, 0xFF	; 255
    7942:	89 23       	and	r24, r25
    7944:	82 83       	std	Z+2, r24	; 0x02
    7946:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    794a:	0b c0       	rjmp	.+22     	; 0x7962 <__vector_37+0x6c>
    794c:	e9 ec       	ldi	r30, 0xC9	; 201
    794e:	f0 e0       	ldi	r31, 0x00	; 0
    7950:	80 81       	ld	r24, Z
    7952:	8f 7d       	andi	r24, 0xDF	; 223
    7954:	80 83       	st	Z, r24
    7956:	05 c0       	rjmp	.+10     	; 0x7962 <__vector_37+0x6c>
    7958:	e9 ec       	ldi	r30, 0xC9	; 201
    795a:	f0 e0       	ldi	r31, 0x00	; 0
    795c:	80 81       	ld	r24, Z
    795e:	8f 7d       	andi	r24, 0xDF	; 223
    7960:	80 83       	st	Z, r24
    7962:	ff 91       	pop	r31
    7964:	ef 91       	pop	r30
    7966:	bf 91       	pop	r27
    7968:	af 91       	pop	r26
    796a:	9f 91       	pop	r25
    796c:	8f 91       	pop	r24
    796e:	2f 91       	pop	r18
    7970:	0f 90       	pop	r0
    7972:	0b be       	out	0x3b, r0	; 59
    7974:	0f 90       	pop	r0
    7976:	0f be       	out	0x3f, r0	; 63
    7978:	0f 90       	pop	r0
    797a:	1f 90       	pop	r1
    797c:	18 95       	reti

0000797e <__vector_51>:
    797e:	1f 92       	push	r1
    7980:	0f 92       	push	r0
    7982:	0f b6       	in	r0, 0x3f	; 63
    7984:	0f 92       	push	r0
    7986:	11 24       	eor	r1, r1
    7988:	0b b6       	in	r0, 0x3b	; 59
    798a:	0f 92       	push	r0
    798c:	2f 93       	push	r18
    798e:	3f 93       	push	r19
    7990:	4f 93       	push	r20
    7992:	5f 93       	push	r21
    7994:	6f 93       	push	r22
    7996:	7f 93       	push	r23
    7998:	8f 93       	push	r24
    799a:	9f 93       	push	r25
    799c:	af 93       	push	r26
    799e:	bf 93       	push	r27
    79a0:	cf 93       	push	r28
    79a2:	df 93       	push	r29
    79a4:	ef 93       	push	r30
    79a6:	ff 93       	push	r31
    79a8:	a0 91 f2 17 	lds	r26, 0x17F2	; 0x8017f2 <_ser_handle+0x4>
    79ac:	b0 91 f3 17 	lds	r27, 0x17F3	; 0x8017f3 <_ser_handle+0x5>
    79b0:	10 97       	sbiw	r26, 0x00	; 0
    79b2:	11 f1       	breq	.+68     	; 0x79f8 <__vector_51+0x7a>
    79b4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    79b8:	14 96       	adiw	r26, 0x04	; 4
    79ba:	ed 91       	ld	r30, X+
    79bc:	fc 91       	ld	r31, X
    79be:	15 97       	sbiw	r26, 0x05	; 5
    79c0:	93 81       	ldd	r25, Z+3	; 0x03
    79c2:	82 81       	ldd	r24, Z+2	; 0x02
    79c4:	25 81       	ldd	r18, Z+5	; 0x05
    79c6:	98 1b       	sub	r25, r24
    79c8:	92 23       	and	r25, r18
    79ca:	84 81       	ldd	r24, Z+4	; 0x04
    79cc:	98 17       	cp	r25, r24
    79ce:	61 f0       	breq	.+24     	; 0x79e8 <__vector_51+0x6a>
    79d0:	83 81       	ldd	r24, Z+3	; 0x03
    79d2:	26 95       	lsr	r18
    79d4:	28 23       	and	r18, r24
    79d6:	c0 81       	ld	r28, Z
    79d8:	d1 81       	ldd	r29, Z+1	; 0x01
    79da:	c2 0f       	add	r28, r18
    79dc:	d1 1d       	adc	r29, r1
    79de:	68 83       	st	Y, r22
    79e0:	8f 5f       	subi	r24, 0xFF	; 255
    79e2:	95 81       	ldd	r25, Z+5	; 0x05
    79e4:	89 23       	and	r24, r25
    79e6:	83 83       	std	Z+3, r24	; 0x03
    79e8:	16 96       	adiw	r26, 0x06	; 6
    79ea:	ed 91       	ld	r30, X+
    79ec:	fc 91       	ld	r31, X
    79ee:	17 97       	sbiw	r26, 0x07	; 7
    79f0:	30 97       	sbiw	r30, 0x00	; 0
    79f2:	11 f0       	breq	.+4      	; 0x79f8 <__vector_51+0x7a>
    79f4:	cd 01       	movw	r24, r26
    79f6:	19 95       	eicall
    79f8:	ff 91       	pop	r31
    79fa:	ef 91       	pop	r30
    79fc:	df 91       	pop	r29
    79fe:	cf 91       	pop	r28
    7a00:	bf 91       	pop	r27
    7a02:	af 91       	pop	r26
    7a04:	9f 91       	pop	r25
    7a06:	8f 91       	pop	r24
    7a08:	7f 91       	pop	r23
    7a0a:	6f 91       	pop	r22
    7a0c:	5f 91       	pop	r21
    7a0e:	4f 91       	pop	r20
    7a10:	3f 91       	pop	r19
    7a12:	2f 91       	pop	r18
    7a14:	0f 90       	pop	r0
    7a16:	0b be       	out	0x3b, r0	; 59
    7a18:	0f 90       	pop	r0
    7a1a:	0f be       	out	0x3f, r0	; 63
    7a1c:	0f 90       	pop	r0
    7a1e:	1f 90       	pop	r1
    7a20:	18 95       	reti

00007a22 <__vector_52>:
    7a22:	1f 92       	push	r1
    7a24:	0f 92       	push	r0
    7a26:	0f b6       	in	r0, 0x3f	; 63
    7a28:	0f 92       	push	r0
    7a2a:	11 24       	eor	r1, r1
    7a2c:	0b b6       	in	r0, 0x3b	; 59
    7a2e:	0f 92       	push	r0
    7a30:	2f 93       	push	r18
    7a32:	8f 93       	push	r24
    7a34:	9f 93       	push	r25
    7a36:	af 93       	push	r26
    7a38:	bf 93       	push	r27
    7a3a:	ef 93       	push	r30
    7a3c:	ff 93       	push	r31
    7a3e:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <_ser_handle+0x4>
    7a42:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <_ser_handle+0x5>
    7a46:	30 97       	sbiw	r30, 0x00	; 0
    7a48:	b9 f0       	breq	.+46     	; 0x7a78 <__vector_52+0x56>
    7a4a:	02 80       	ldd	r0, Z+2	; 0x02
    7a4c:	f3 81       	ldd	r31, Z+3	; 0x03
    7a4e:	e0 2d       	mov	r30, r0
    7a50:	93 81       	ldd	r25, Z+3	; 0x03
    7a52:	82 81       	ldd	r24, Z+2	; 0x02
    7a54:	98 17       	cp	r25, r24
    7a56:	b1 f0       	breq	.+44     	; 0x7a84 <__vector_52+0x62>
    7a58:	92 81       	ldd	r25, Z+2	; 0x02
    7a5a:	85 81       	ldd	r24, Z+5	; 0x05
    7a5c:	28 2f       	mov	r18, r24
    7a5e:	26 95       	lsr	r18
    7a60:	29 23       	and	r18, r25
    7a62:	a0 81       	ld	r26, Z
    7a64:	b1 81       	ldd	r27, Z+1	; 0x01
    7a66:	a2 0f       	add	r26, r18
    7a68:	b1 1d       	adc	r27, r1
    7a6a:	2c 91       	ld	r18, X
    7a6c:	9f 5f       	subi	r25, 0xFF	; 255
    7a6e:	89 23       	and	r24, r25
    7a70:	82 83       	std	Z+2, r24	; 0x02
    7a72:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    7a76:	0b c0       	rjmp	.+22     	; 0x7a8e <__vector_52+0x6c>
    7a78:	e1 ed       	ldi	r30, 0xD1	; 209
    7a7a:	f0 e0       	ldi	r31, 0x00	; 0
    7a7c:	80 81       	ld	r24, Z
    7a7e:	8f 7d       	andi	r24, 0xDF	; 223
    7a80:	80 83       	st	Z, r24
    7a82:	05 c0       	rjmp	.+10     	; 0x7a8e <__vector_52+0x6c>
    7a84:	e1 ed       	ldi	r30, 0xD1	; 209
    7a86:	f0 e0       	ldi	r31, 0x00	; 0
    7a88:	80 81       	ld	r24, Z
    7a8a:	8f 7d       	andi	r24, 0xDF	; 223
    7a8c:	80 83       	st	Z, r24
    7a8e:	ff 91       	pop	r31
    7a90:	ef 91       	pop	r30
    7a92:	bf 91       	pop	r27
    7a94:	af 91       	pop	r26
    7a96:	9f 91       	pop	r25
    7a98:	8f 91       	pop	r24
    7a9a:	2f 91       	pop	r18
    7a9c:	0f 90       	pop	r0
    7a9e:	0b be       	out	0x3b, r0	; 59
    7aa0:	0f 90       	pop	r0
    7aa2:	0f be       	out	0x3f, r0	; 63
    7aa4:	0f 90       	pop	r0
    7aa6:	1f 90       	pop	r1
    7aa8:	18 95       	reti

00007aaa <__vector_54>:
    7aaa:	1f 92       	push	r1
    7aac:	0f 92       	push	r0
    7aae:	0f b6       	in	r0, 0x3f	; 63
    7ab0:	0f 92       	push	r0
    7ab2:	11 24       	eor	r1, r1
    7ab4:	0b b6       	in	r0, 0x3b	; 59
    7ab6:	0f 92       	push	r0
    7ab8:	2f 93       	push	r18
    7aba:	3f 93       	push	r19
    7abc:	4f 93       	push	r20
    7abe:	5f 93       	push	r21
    7ac0:	6f 93       	push	r22
    7ac2:	7f 93       	push	r23
    7ac4:	8f 93       	push	r24
    7ac6:	9f 93       	push	r25
    7ac8:	af 93       	push	r26
    7aca:	bf 93       	push	r27
    7acc:	cf 93       	push	r28
    7ace:	df 93       	push	r29
    7ad0:	ef 93       	push	r30
    7ad2:	ff 93       	push	r31
    7ad4:	a0 91 f4 17 	lds	r26, 0x17F4	; 0x8017f4 <_ser_handle+0x6>
    7ad8:	b0 91 f5 17 	lds	r27, 0x17F5	; 0x8017f5 <_ser_handle+0x7>
    7adc:	10 97       	sbiw	r26, 0x00	; 0
    7ade:	11 f1       	breq	.+68     	; 0x7b24 <__vector_54+0x7a>
    7ae0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    7ae4:	14 96       	adiw	r26, 0x04	; 4
    7ae6:	ed 91       	ld	r30, X+
    7ae8:	fc 91       	ld	r31, X
    7aea:	15 97       	sbiw	r26, 0x05	; 5
    7aec:	93 81       	ldd	r25, Z+3	; 0x03
    7aee:	82 81       	ldd	r24, Z+2	; 0x02
    7af0:	25 81       	ldd	r18, Z+5	; 0x05
    7af2:	98 1b       	sub	r25, r24
    7af4:	92 23       	and	r25, r18
    7af6:	84 81       	ldd	r24, Z+4	; 0x04
    7af8:	98 17       	cp	r25, r24
    7afa:	61 f0       	breq	.+24     	; 0x7b14 <__vector_54+0x6a>
    7afc:	83 81       	ldd	r24, Z+3	; 0x03
    7afe:	26 95       	lsr	r18
    7b00:	28 23       	and	r18, r24
    7b02:	c0 81       	ld	r28, Z
    7b04:	d1 81       	ldd	r29, Z+1	; 0x01
    7b06:	c2 0f       	add	r28, r18
    7b08:	d1 1d       	adc	r29, r1
    7b0a:	68 83       	st	Y, r22
    7b0c:	8f 5f       	subi	r24, 0xFF	; 255
    7b0e:	95 81       	ldd	r25, Z+5	; 0x05
    7b10:	89 23       	and	r24, r25
    7b12:	83 83       	std	Z+3, r24	; 0x03
    7b14:	16 96       	adiw	r26, 0x06	; 6
    7b16:	ed 91       	ld	r30, X+
    7b18:	fc 91       	ld	r31, X
    7b1a:	17 97       	sbiw	r26, 0x07	; 7
    7b1c:	30 97       	sbiw	r30, 0x00	; 0
    7b1e:	11 f0       	breq	.+4      	; 0x7b24 <__vector_54+0x7a>
    7b20:	cd 01       	movw	r24, r26
    7b22:	19 95       	eicall
    7b24:	ff 91       	pop	r31
    7b26:	ef 91       	pop	r30
    7b28:	df 91       	pop	r29
    7b2a:	cf 91       	pop	r28
    7b2c:	bf 91       	pop	r27
    7b2e:	af 91       	pop	r26
    7b30:	9f 91       	pop	r25
    7b32:	8f 91       	pop	r24
    7b34:	7f 91       	pop	r23
    7b36:	6f 91       	pop	r22
    7b38:	5f 91       	pop	r21
    7b3a:	4f 91       	pop	r20
    7b3c:	3f 91       	pop	r19
    7b3e:	2f 91       	pop	r18
    7b40:	0f 90       	pop	r0
    7b42:	0b be       	out	0x3b, r0	; 59
    7b44:	0f 90       	pop	r0
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	0f 90       	pop	r0
    7b4a:	1f 90       	pop	r1
    7b4c:	18 95       	reti

00007b4e <__vector_55>:
    7b4e:	1f 92       	push	r1
    7b50:	0f 92       	push	r0
    7b52:	0f b6       	in	r0, 0x3f	; 63
    7b54:	0f 92       	push	r0
    7b56:	11 24       	eor	r1, r1
    7b58:	0b b6       	in	r0, 0x3b	; 59
    7b5a:	0f 92       	push	r0
    7b5c:	2f 93       	push	r18
    7b5e:	8f 93       	push	r24
    7b60:	9f 93       	push	r25
    7b62:	af 93       	push	r26
    7b64:	bf 93       	push	r27
    7b66:	ef 93       	push	r30
    7b68:	ff 93       	push	r31
    7b6a:	e0 91 f4 17 	lds	r30, 0x17F4	; 0x8017f4 <_ser_handle+0x6>
    7b6e:	f0 91 f5 17 	lds	r31, 0x17F5	; 0x8017f5 <_ser_handle+0x7>
    7b72:	30 97       	sbiw	r30, 0x00	; 0
    7b74:	b9 f0       	breq	.+46     	; 0x7ba4 <__vector_55+0x56>
    7b76:	02 80       	ldd	r0, Z+2	; 0x02
    7b78:	f3 81       	ldd	r31, Z+3	; 0x03
    7b7a:	e0 2d       	mov	r30, r0
    7b7c:	93 81       	ldd	r25, Z+3	; 0x03
    7b7e:	82 81       	ldd	r24, Z+2	; 0x02
    7b80:	98 17       	cp	r25, r24
    7b82:	b1 f0       	breq	.+44     	; 0x7bb0 <__vector_55+0x62>
    7b84:	92 81       	ldd	r25, Z+2	; 0x02
    7b86:	85 81       	ldd	r24, Z+5	; 0x05
    7b88:	28 2f       	mov	r18, r24
    7b8a:	26 95       	lsr	r18
    7b8c:	29 23       	and	r18, r25
    7b8e:	a0 81       	ld	r26, Z
    7b90:	b1 81       	ldd	r27, Z+1	; 0x01
    7b92:	a2 0f       	add	r26, r18
    7b94:	b1 1d       	adc	r27, r1
    7b96:	2c 91       	ld	r18, X
    7b98:	9f 5f       	subi	r25, 0xFF	; 255
    7b9a:	89 23       	and	r24, r25
    7b9c:	82 83       	std	Z+2, r24	; 0x02
    7b9e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    7ba2:	0b c0       	rjmp	.+22     	; 0x7bba <__vector_55+0x6c>
    7ba4:	e1 e3       	ldi	r30, 0x31	; 49
    7ba6:	f1 e0       	ldi	r31, 0x01	; 1
    7ba8:	80 81       	ld	r24, Z
    7baa:	8f 7d       	andi	r24, 0xDF	; 223
    7bac:	80 83       	st	Z, r24
    7bae:	05 c0       	rjmp	.+10     	; 0x7bba <__vector_55+0x6c>
    7bb0:	e1 e3       	ldi	r30, 0x31	; 49
    7bb2:	f1 e0       	ldi	r31, 0x01	; 1
    7bb4:	80 81       	ld	r24, Z
    7bb6:	8f 7d       	andi	r24, 0xDF	; 223
    7bb8:	80 83       	st	Z, r24
    7bba:	ff 91       	pop	r31
    7bbc:	ef 91       	pop	r30
    7bbe:	bf 91       	pop	r27
    7bc0:	af 91       	pop	r26
    7bc2:	9f 91       	pop	r25
    7bc4:	8f 91       	pop	r24
    7bc6:	2f 91       	pop	r18
    7bc8:	0f 90       	pop	r0
    7bca:	0b be       	out	0x3b, r0	; 59
    7bcc:	0f 90       	pop	r0
    7bce:	0f be       	out	0x3f, r0	; 63
    7bd0:	0f 90       	pop	r0
    7bd2:	1f 90       	pop	r1
    7bd4:	18 95       	reti

00007bd6 <usart_getchar>:
    7bd6:	cf 93       	push	r28
    7bd8:	df 93       	push	r29
    7bda:	1f 92       	push	r1
    7bdc:	cd b7       	in	r28, 0x3d	; 61
    7bde:	de b7       	in	r29, 0x3e	; 62
    7be0:	be 01       	movw	r22, r28
    7be2:	6f 5f       	subi	r22, 0xFF	; 255
    7be4:	7f 4f       	sbci	r23, 0xFF	; 255
    7be6:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <_com_serial_instance>
    7bea:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <_com_serial_instance+0x1>
    7bee:	7b dd       	rcall	.-1290   	; 0x76e6 <serial_getByte>
    7bf0:	81 11       	cpse	r24, r1
    7bf2:	f6 cf       	rjmp	.-20     	; 0x7be0 <usart_getchar+0xa>
    7bf4:	89 81       	ldd	r24, Y+1	; 0x01
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	0f 90       	pop	r0
    7bfa:	df 91       	pop	r29
    7bfc:	cf 91       	pop	r28
    7bfe:	08 95       	ret

00007c00 <usart_putchar>:
    7c00:	68 2f       	mov	r22, r24
    7c02:	80 91 f6 17 	lds	r24, 0x17F6	; 0x8017f6 <_com_serial_instance>
    7c06:	90 91 f7 17 	lds	r25, 0x17F7	; 0x8017f7 <_com_serial_instance+0x1>
    7c0a:	ed dc       	rcall	.-1574   	; 0x75e6 <serial_sendByte>
    7c0c:	80 e0       	ldi	r24, 0x00	; 0
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	08 95       	ret

00007c12 <stdio_initialise>:
    7c12:	8f 92       	push	r8
    7c14:	9f 92       	push	r9
    7c16:	af 92       	push	r10
    7c18:	cf 92       	push	r12
    7c1a:	ef 92       	push	r14
    7c1c:	0f 93       	push	r16
    7c1e:	81 2c       	mov	r8, r1
    7c20:	91 2c       	mov	r9, r1
    7c22:	68 94       	set
    7c24:	aa 24       	eor	r10, r10
    7c26:	a7 f8       	bld	r10, 7
    7c28:	68 94       	set
    7c2a:	cc 24       	eor	r12, r12
    7c2c:	c7 f8       	bld	r12, 7
    7c2e:	e1 2c       	mov	r14, r1
    7c30:	00 e0       	ldi	r16, 0x00	; 0
    7c32:	23 e0       	ldi	r18, 0x03	; 3
    7c34:	40 e0       	ldi	r20, 0x00	; 0
    7c36:	51 ee       	ldi	r21, 0xE1	; 225
    7c38:	60 e0       	ldi	r22, 0x00	; 0
    7c3a:	70 e0       	ldi	r23, 0x00	; 0
    7c3c:	33 dc       	rcall	.-1946   	; 0x74a4 <serial_create>
    7c3e:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <_com_serial_instance+0x1>
    7c42:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <_com_serial_instance>
    7c46:	e0 e4       	ldi	r30, 0x40	; 64
    7c48:	f8 e1       	ldi	r31, 0x18	; 24
    7c4a:	83 e1       	ldi	r24, 0x13	; 19
    7c4c:	92 e0       	ldi	r25, 0x02	; 2
    7c4e:	91 83       	std	Z+1, r25	; 0x01
    7c50:	80 83       	st	Z, r24
    7c52:	93 83       	std	Z+3, r25	; 0x03
    7c54:	82 83       	std	Z+2, r24	; 0x02
    7c56:	0f 91       	pop	r16
    7c58:	ef 90       	pop	r14
    7c5a:	cf 90       	pop	r12
    7c5c:	af 90       	pop	r10
    7c5e:	9f 90       	pop	r9
    7c60:	8f 90       	pop	r8
    7c62:	08 95       	ret

00007c64 <_turn_off>:
    7c64:	90 e0       	ldi	r25, 0x00	; 0
    7c66:	fc 01       	movw	r30, r24
    7c68:	ee 0f       	add	r30, r30
    7c6a:	ff 1f       	adc	r31, r31
    7c6c:	e8 0f       	add	r30, r24
    7c6e:	f9 1f       	adc	r31, r25
    7c70:	ee 0f       	add	r30, r30
    7c72:	ff 1f       	adc	r31, r31
    7c74:	e8 50       	subi	r30, 0x08	; 8
    7c76:	f8 4e       	sbci	r31, 0xE8	; 232
    7c78:	23 81       	ldd	r18, Z+3	; 0x03
    7c7a:	21 11       	cpse	r18, r1
    7c7c:	1f c0       	rjmp	.+62     	; 0x7cbc <_turn_off+0x58>
    7c7e:	9c 01       	movw	r18, r24
    7c80:	22 0f       	add	r18, r18
    7c82:	33 1f       	adc	r19, r19
    7c84:	f9 01       	movw	r30, r18
    7c86:	e8 0f       	add	r30, r24
    7c88:	f9 1f       	adc	r31, r25
    7c8a:	ee 0f       	add	r30, r30
    7c8c:	ff 1f       	adc	r31, r31
    7c8e:	e8 50       	subi	r30, 0x08	; 8
    7c90:	f8 4e       	sbci	r31, 0xE8	; 232
    7c92:	a0 81       	ld	r26, Z
    7c94:	b1 81       	ldd	r27, Z+1	; 0x01
    7c96:	4c 91       	ld	r20, X
    7c98:	f9 01       	movw	r30, r18
    7c9a:	e8 0f       	add	r30, r24
    7c9c:	f9 1f       	adc	r31, r25
    7c9e:	ee 0f       	add	r30, r30
    7ca0:	ff 1f       	adc	r31, r31
    7ca2:	e8 50       	subi	r30, 0x08	; 8
    7ca4:	f8 4e       	sbci	r31, 0xE8	; 232
    7ca6:	81 e0       	ldi	r24, 0x01	; 1
    7ca8:	90 e0       	ldi	r25, 0x00	; 0
    7caa:	02 80       	ldd	r0, Z+2	; 0x02
    7cac:	02 c0       	rjmp	.+4      	; 0x7cb2 <_turn_off+0x4e>
    7cae:	88 0f       	add	r24, r24
    7cb0:	99 1f       	adc	r25, r25
    7cb2:	0a 94       	dec	r0
    7cb4:	e2 f7       	brpl	.-8      	; 0x7cae <_turn_off+0x4a>
    7cb6:	84 2b       	or	r24, r20
    7cb8:	8c 93       	st	X, r24
    7cba:	08 95       	ret
    7cbc:	fc 01       	movw	r30, r24
    7cbe:	ee 0f       	add	r30, r30
    7cc0:	ff 1f       	adc	r31, r31
    7cc2:	df 01       	movw	r26, r30
    7cc4:	a8 0f       	add	r26, r24
    7cc6:	b9 1f       	adc	r27, r25
    7cc8:	aa 0f       	add	r26, r26
    7cca:	bb 1f       	adc	r27, r27
    7ccc:	a8 50       	subi	r26, 0x08	; 8
    7cce:	b8 4e       	sbci	r27, 0xE8	; 232
    7cd0:	0d 90       	ld	r0, X+
    7cd2:	bc 91       	ld	r27, X
    7cd4:	a0 2d       	mov	r26, r0
    7cd6:	2c 91       	ld	r18, X
    7cd8:	e8 0f       	add	r30, r24
    7cda:	f9 1f       	adc	r31, r25
    7cdc:	ee 0f       	add	r30, r30
    7cde:	ff 1f       	adc	r31, r31
    7ce0:	e8 50       	subi	r30, 0x08	; 8
    7ce2:	f8 4e       	sbci	r31, 0xE8	; 232
    7ce4:	81 e0       	ldi	r24, 0x01	; 1
    7ce6:	90 e0       	ldi	r25, 0x00	; 0
    7ce8:	02 80       	ldd	r0, Z+2	; 0x02
    7cea:	02 c0       	rjmp	.+4      	; 0x7cf0 <_turn_off+0x8c>
    7cec:	88 0f       	add	r24, r24
    7cee:	99 1f       	adc	r25, r25
    7cf0:	0a 94       	dec	r0
    7cf2:	e2 f7       	brpl	.-8      	; 0x7cec <_turn_off+0x88>
    7cf4:	80 95       	com	r24
    7cf6:	82 23       	and	r24, r18
    7cf8:	8c 93       	st	X, r24
    7cfa:	08 95       	ret

00007cfc <_turn_on>:
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	fc 01       	movw	r30, r24
    7d00:	ee 0f       	add	r30, r30
    7d02:	ff 1f       	adc	r31, r31
    7d04:	e8 0f       	add	r30, r24
    7d06:	f9 1f       	adc	r31, r25
    7d08:	ee 0f       	add	r30, r30
    7d0a:	ff 1f       	adc	r31, r31
    7d0c:	e8 50       	subi	r30, 0x08	; 8
    7d0e:	f8 4e       	sbci	r31, 0xE8	; 232
    7d10:	23 81       	ldd	r18, Z+3	; 0x03
    7d12:	21 11       	cpse	r18, r1
    7d14:	20 c0       	rjmp	.+64     	; 0x7d56 <_turn_on+0x5a>
    7d16:	9c 01       	movw	r18, r24
    7d18:	22 0f       	add	r18, r18
    7d1a:	33 1f       	adc	r19, r19
    7d1c:	f9 01       	movw	r30, r18
    7d1e:	e8 0f       	add	r30, r24
    7d20:	f9 1f       	adc	r31, r25
    7d22:	ee 0f       	add	r30, r30
    7d24:	ff 1f       	adc	r31, r31
    7d26:	e8 50       	subi	r30, 0x08	; 8
    7d28:	f8 4e       	sbci	r31, 0xE8	; 232
    7d2a:	a0 81       	ld	r26, Z
    7d2c:	b1 81       	ldd	r27, Z+1	; 0x01
    7d2e:	4c 91       	ld	r20, X
    7d30:	f9 01       	movw	r30, r18
    7d32:	e8 0f       	add	r30, r24
    7d34:	f9 1f       	adc	r31, r25
    7d36:	ee 0f       	add	r30, r30
    7d38:	ff 1f       	adc	r31, r31
    7d3a:	e8 50       	subi	r30, 0x08	; 8
    7d3c:	f8 4e       	sbci	r31, 0xE8	; 232
    7d3e:	81 e0       	ldi	r24, 0x01	; 1
    7d40:	90 e0       	ldi	r25, 0x00	; 0
    7d42:	02 80       	ldd	r0, Z+2	; 0x02
    7d44:	02 c0       	rjmp	.+4      	; 0x7d4a <_turn_on+0x4e>
    7d46:	88 0f       	add	r24, r24
    7d48:	99 1f       	adc	r25, r25
    7d4a:	0a 94       	dec	r0
    7d4c:	e2 f7       	brpl	.-8      	; 0x7d46 <_turn_on+0x4a>
    7d4e:	80 95       	com	r24
    7d50:	84 23       	and	r24, r20
    7d52:	8c 93       	st	X, r24
    7d54:	08 95       	ret
    7d56:	fc 01       	movw	r30, r24
    7d58:	ee 0f       	add	r30, r30
    7d5a:	ff 1f       	adc	r31, r31
    7d5c:	df 01       	movw	r26, r30
    7d5e:	a8 0f       	add	r26, r24
    7d60:	b9 1f       	adc	r27, r25
    7d62:	aa 0f       	add	r26, r26
    7d64:	bb 1f       	adc	r27, r27
    7d66:	a8 50       	subi	r26, 0x08	; 8
    7d68:	b8 4e       	sbci	r27, 0xE8	; 232
    7d6a:	0d 90       	ld	r0, X+
    7d6c:	bc 91       	ld	r27, X
    7d6e:	a0 2d       	mov	r26, r0
    7d70:	2c 91       	ld	r18, X
    7d72:	e8 0f       	add	r30, r24
    7d74:	f9 1f       	adc	r31, r25
    7d76:	ee 0f       	add	r30, r30
    7d78:	ff 1f       	adc	r31, r31
    7d7a:	e8 50       	subi	r30, 0x08	; 8
    7d7c:	f8 4e       	sbci	r31, 0xE8	; 232
    7d7e:	81 e0       	ldi	r24, 0x01	; 1
    7d80:	90 e0       	ldi	r25, 0x00	; 0
    7d82:	02 80       	ldd	r0, Z+2	; 0x02
    7d84:	02 c0       	rjmp	.+4      	; 0x7d8a <_turn_on+0x8e>
    7d86:	88 0f       	add	r24, r24
    7d88:	99 1f       	adc	r25, r25
    7d8a:	0a 94       	dec	r0
    7d8c:	e2 f7       	brpl	.-8      	; 0x7d86 <_turn_on+0x8a>
    7d8e:	82 2b       	or	r24, r18
    7d90:	8c 93       	st	X, r24
    7d92:	08 95       	ret

00007d94 <_hal_led_task>:
    7d94:	cc 24       	eor	r12, r12
    7d96:	c3 94       	inc	r12
    7d98:	d1 2c       	mov	r13, r1
    7d9a:	68 94       	set
    7d9c:	bb 24       	eor	r11, r11
    7d9e:	b2 f8       	bld	r11, 2
    7da0:	c8 ef       	ldi	r28, 0xF8	; 248
    7da2:	d7 e1       	ldi	r29, 0x17	; 23
    7da4:	10 e0       	ldi	r17, 0x00	; 0
    7da6:	8c 81       	ldd	r24, Y+4	; 0x04
    7da8:	81 30       	cpi	r24, 0x01	; 1
    7daa:	81 f0       	breq	.+32     	; 0x7dcc <_hal_led_task+0x38>
    7dac:	18 f1       	brcs	.+70     	; 0x7df4 <_hal_led_task+0x60>
    7dae:	82 30       	cpi	r24, 0x02	; 2
    7db0:	61 f5       	brne	.+88     	; 0x7e0a <_hal_led_task+0x76>
    7db2:	e8 81       	ld	r30, Y
    7db4:	f9 81       	ldd	r31, Y+1	; 0x01
    7db6:	20 81       	ld	r18, Z
    7db8:	c6 01       	movw	r24, r12
    7dba:	0a 80       	ldd	r0, Y+2	; 0x02
    7dbc:	02 c0       	rjmp	.+4      	; 0x7dc2 <_hal_led_task+0x2e>
    7dbe:	88 0f       	add	r24, r24
    7dc0:	99 1f       	adc	r25, r25
    7dc2:	0a 94       	dec	r0
    7dc4:	e2 f7       	brpl	.-8      	; 0x7dbe <_hal_led_task+0x2a>
    7dc6:	82 27       	eor	r24, r18
    7dc8:	80 83       	st	Z, r24
    7dca:	1f c0       	rjmp	.+62     	; 0x7e0a <_hal_led_task+0x76>
    7dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    7dce:	8f 5f       	subi	r24, 0xFF	; 255
    7dd0:	86 30       	cpi	r24, 0x06	; 6
    7dd2:	10 f4       	brcc	.+4      	; 0x7dd8 <_hal_led_task+0x44>
    7dd4:	8d 83       	std	Y+5, r24	; 0x05
    7dd6:	19 c0       	rjmp	.+50     	; 0x7e0a <_hal_led_task+0x76>
    7dd8:	1d 82       	std	Y+5, r1	; 0x05
    7dda:	e8 81       	ld	r30, Y
    7ddc:	f9 81       	ldd	r31, Y+1	; 0x01
    7dde:	20 81       	ld	r18, Z
    7de0:	c6 01       	movw	r24, r12
    7de2:	0a 80       	ldd	r0, Y+2	; 0x02
    7de4:	02 c0       	rjmp	.+4      	; 0x7dea <_hal_led_task+0x56>
    7de6:	88 0f       	add	r24, r24
    7de8:	99 1f       	adc	r25, r25
    7dea:	0a 94       	dec	r0
    7dec:	e2 f7       	brpl	.-8      	; 0x7de6 <_hal_led_task+0x52>
    7dee:	82 27       	eor	r24, r18
    7df0:	80 83       	st	Z, r24
    7df2:	0b c0       	rjmp	.+22     	; 0x7e0a <_hal_led_task+0x76>
    7df4:	0d 81       	ldd	r16, Y+5	; 0x05
    7df6:	00 23       	and	r16, r16
    7df8:	29 f0       	breq	.+10     	; 0x7e04 <_hal_led_task+0x70>
    7dfa:	81 2f       	mov	r24, r17
    7dfc:	7f df       	rcall	.-258    	; 0x7cfc <_turn_on>
    7dfe:	01 50       	subi	r16, 0x01	; 1
    7e00:	0d 83       	std	Y+5, r16	; 0x05
    7e02:	03 c0       	rjmp	.+6      	; 0x7e0a <_hal_led_task+0x76>
    7e04:	bc 82       	std	Y+4, r11	; 0x04
    7e06:	81 2f       	mov	r24, r17
    7e08:	2d df       	rcall	.-422    	; 0x7c64 <_turn_off>
    7e0a:	1f 5f       	subi	r17, 0xFF	; 255
    7e0c:	26 96       	adiw	r28, 0x06	; 6
    7e0e:	14 30       	cpi	r17, 0x04	; 4
    7e10:	51 f6       	brne	.-108    	; 0x7da6 <_hal_led_task+0x12>
    7e12:	6c e0       	ldi	r22, 0x0C	; 12
    7e14:	70 e0       	ldi	r23, 0x00	; 0
    7e16:	80 e0       	ldi	r24, 0x00	; 0
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <vTaskDelay>
    7e1e:	c0 cf       	rjmp	.-128    	; 0x7da0 <_hal_led_task+0xc>

00007e20 <status_leds_initialise>:
    7e20:	ef 92       	push	r14
    7e22:	ff 92       	push	r15
    7e24:	0f 93       	push	r16
    7e26:	1f 93       	push	r17
    7e28:	cf 93       	push	r28
    7e2a:	df 93       	push	r29
    7e2c:	08 2f       	mov	r16, r24
    7e2e:	80 e4       	ldi	r24, 0x40	; 64
    7e30:	87 b9       	out	0x07, r24	; 7
    7e32:	c8 ef       	ldi	r28, 0xF8	; 248
    7e34:	d7 e1       	ldi	r29, 0x17	; 23
    7e36:	0f 2e       	mov	r0, r31
    7e38:	f8 e2       	ldi	r31, 0x28	; 40
    7e3a:	ef 2e       	mov	r14, r31
    7e3c:	f1 2c       	mov	r15, r1
    7e3e:	f0 2d       	mov	r31, r0
    7e40:	f9 82       	std	Y+1, r15	; 0x01
    7e42:	e8 82       	st	Y, r14
    7e44:	86 e0       	ldi	r24, 0x06	; 6
    7e46:	8a 83       	std	Y+2, r24	; 0x02
    7e48:	1b 82       	std	Y+3, r1	; 0x03
    7e4a:	14 e0       	ldi	r17, 0x04	; 4
    7e4c:	1c 83       	std	Y+4, r17	; 0x04
    7e4e:	80 e0       	ldi	r24, 0x00	; 0
    7e50:	09 df       	rcall	.-494    	; 0x7c64 <_turn_off>
    7e52:	80 e8       	ldi	r24, 0x80	; 128
    7e54:	87 b9       	out	0x07, r24	; 7
    7e56:	ff 82       	std	Y+7, r15	; 0x07
    7e58:	ee 82       	std	Y+6, r14	; 0x06
    7e5a:	87 e0       	ldi	r24, 0x07	; 7
    7e5c:	88 87       	std	Y+8, r24	; 0x08
    7e5e:	19 86       	std	Y+9, r1	; 0x09
    7e60:	1a 87       	std	Y+10, r17	; 0x0a
    7e62:	81 e0       	ldi	r24, 0x01	; 1
    7e64:	ff de       	rcall	.-514    	; 0x7c64 <_turn_off>
    7e66:	80 e2       	ldi	r24, 0x20	; 32
    7e68:	83 bb       	out	0x13, r24	; 19
    7e6a:	84 e3       	ldi	r24, 0x34	; 52
    7e6c:	90 e0       	ldi	r25, 0x00	; 0
    7e6e:	9d 87       	std	Y+13, r25	; 0x0d
    7e70:	8c 87       	std	Y+12, r24	; 0x0c
    7e72:	85 e0       	ldi	r24, 0x05	; 5
    7e74:	8e 87       	std	Y+14, r24	; 0x0e
    7e76:	1f 86       	std	Y+15, r1	; 0x0f
    7e78:	18 8b       	std	Y+16, r17	; 0x10
    7e7a:	82 e0       	ldi	r24, 0x02	; 2
    7e7c:	f3 de       	rcall	.-538    	; 0x7c64 <_turn_off>
    7e7e:	80 e1       	ldi	r24, 0x10	; 16
    7e80:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    7e84:	82 e0       	ldi	r24, 0x02	; 2
    7e86:	91 e0       	ldi	r25, 0x01	; 1
    7e88:	9b 8b       	std	Y+19, r25	; 0x13
    7e8a:	8a 8b       	std	Y+18, r24	; 0x12
    7e8c:	1c 8b       	std	Y+20, r17	; 0x14
    7e8e:	1d 8a       	std	Y+21, r1	; 0x15
    7e90:	1e 8b       	std	Y+22, r17	; 0x16
    7e92:	83 e0       	ldi	r24, 0x03	; 3
    7e94:	e7 de       	rcall	.-562    	; 0x7c64 <_turn_off>
    7e96:	e1 2c       	mov	r14, r1
    7e98:	f1 2c       	mov	r15, r1
    7e9a:	20 e0       	ldi	r18, 0x00	; 0
    7e9c:	30 e0       	ldi	r19, 0x00	; 0
    7e9e:	40 ec       	ldi	r20, 0xC0	; 192
    7ea0:	50 e0       	ldi	r21, 0x00	; 0
    7ea2:	6d e4       	ldi	r22, 0x4D	; 77
    7ea4:	78 e0       	ldi	r23, 0x08	; 8
    7ea6:	8a ec       	ldi	r24, 0xCA	; 202
    7ea8:	9e e3       	ldi	r25, 0x3E	; 62
    7eaa:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <xTaskCreate>
    7eae:	df 91       	pop	r29
    7eb0:	cf 91       	pop	r28
    7eb2:	1f 91       	pop	r17
    7eb4:	0f 91       	pop	r16
    7eb6:	ff 90       	pop	r15
    7eb8:	ef 90       	pop	r14
    7eba:	08 95       	ret

00007ebc <status_leds_slowBlink>:
    7ebc:	cf 93       	push	r28
    7ebe:	df 93       	push	r29
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	fc 01       	movw	r30, r24
    7ec4:	ee 0f       	add	r30, r30
    7ec6:	ff 1f       	adc	r31, r31
    7ec8:	df 01       	movw	r26, r30
    7eca:	a8 0f       	add	r26, r24
    7ecc:	b9 1f       	adc	r27, r25
    7ece:	aa 0f       	add	r26, r26
    7ed0:	bb 1f       	adc	r27, r27
    7ed2:	a8 50       	subi	r26, 0x08	; 8
    7ed4:	b8 4e       	sbci	r27, 0xE8	; 232
    7ed6:	cd 91       	ld	r28, X+
    7ed8:	dc 91       	ld	r29, X
    7eda:	11 97       	sbiw	r26, 0x01	; 1
    7edc:	48 81       	ld	r20, Y
    7ede:	21 e0       	ldi	r18, 0x01	; 1
    7ee0:	30 e0       	ldi	r19, 0x00	; 0
    7ee2:	12 96       	adiw	r26, 0x02	; 2
    7ee4:	0c 90       	ld	r0, X
    7ee6:	12 97       	sbiw	r26, 0x02	; 2
    7ee8:	02 c0       	rjmp	.+4      	; 0x7eee <status_leds_slowBlink+0x32>
    7eea:	22 0f       	add	r18, r18
    7eec:	33 1f       	adc	r19, r19
    7eee:	0a 94       	dec	r0
    7ef0:	e2 f7       	brpl	.-8      	; 0x7eea <status_leds_slowBlink+0x2e>
    7ef2:	24 27       	eor	r18, r20
    7ef4:	28 83       	st	Y, r18
    7ef6:	fd 01       	movw	r30, r26
    7ef8:	81 e0       	ldi	r24, 0x01	; 1
    7efa:	84 83       	std	Z+4, r24	; 0x04
    7efc:	df 91       	pop	r29
    7efe:	cf 91       	pop	r28
    7f00:	08 95       	ret

00007f02 <status_leds_fastBlink>:
    7f02:	cf 93       	push	r28
    7f04:	df 93       	push	r29
    7f06:	90 e0       	ldi	r25, 0x00	; 0
    7f08:	fc 01       	movw	r30, r24
    7f0a:	ee 0f       	add	r30, r30
    7f0c:	ff 1f       	adc	r31, r31
    7f0e:	df 01       	movw	r26, r30
    7f10:	a8 0f       	add	r26, r24
    7f12:	b9 1f       	adc	r27, r25
    7f14:	aa 0f       	add	r26, r26
    7f16:	bb 1f       	adc	r27, r27
    7f18:	a8 50       	subi	r26, 0x08	; 8
    7f1a:	b8 4e       	sbci	r27, 0xE8	; 232
    7f1c:	cd 91       	ld	r28, X+
    7f1e:	dc 91       	ld	r29, X
    7f20:	11 97       	sbiw	r26, 0x01	; 1
    7f22:	48 81       	ld	r20, Y
    7f24:	21 e0       	ldi	r18, 0x01	; 1
    7f26:	30 e0       	ldi	r19, 0x00	; 0
    7f28:	12 96       	adiw	r26, 0x02	; 2
    7f2a:	0c 90       	ld	r0, X
    7f2c:	12 97       	sbiw	r26, 0x02	; 2
    7f2e:	02 c0       	rjmp	.+4      	; 0x7f34 <status_leds_fastBlink+0x32>
    7f30:	22 0f       	add	r18, r18
    7f32:	33 1f       	adc	r19, r19
    7f34:	0a 94       	dec	r0
    7f36:	e2 f7       	brpl	.-8      	; 0x7f30 <status_leds_fastBlink+0x2e>
    7f38:	24 27       	eor	r18, r20
    7f3a:	28 83       	st	Y, r18
    7f3c:	fd 01       	movw	r30, r26
    7f3e:	82 e0       	ldi	r24, 0x02	; 2
    7f40:	84 83       	std	Z+4, r24	; 0x04
    7f42:	df 91       	pop	r29
    7f44:	cf 91       	pop	r28
    7f46:	08 95       	ret

00007f48 <status_leds_ledOn>:
    7f48:	28 2f       	mov	r18, r24
    7f4a:	30 e0       	ldi	r19, 0x00	; 0
    7f4c:	f9 01       	movw	r30, r18
    7f4e:	ee 0f       	add	r30, r30
    7f50:	ff 1f       	adc	r31, r31
    7f52:	e2 0f       	add	r30, r18
    7f54:	f3 1f       	adc	r31, r19
    7f56:	ee 0f       	add	r30, r30
    7f58:	ff 1f       	adc	r31, r31
    7f5a:	e8 50       	subi	r30, 0x08	; 8
    7f5c:	f8 4e       	sbci	r31, 0xE8	; 232
    7f5e:	93 e0       	ldi	r25, 0x03	; 3
    7f60:	94 83       	std	Z+4, r25	; 0x04
    7f62:	cc ce       	rjmp	.-616    	; 0x7cfc <_turn_on>
    7f64:	08 95       	ret

00007f66 <status_leds_ledOff>:
    7f66:	28 2f       	mov	r18, r24
    7f68:	30 e0       	ldi	r19, 0x00	; 0
    7f6a:	f9 01       	movw	r30, r18
    7f6c:	ee 0f       	add	r30, r30
    7f6e:	ff 1f       	adc	r31, r31
    7f70:	e2 0f       	add	r30, r18
    7f72:	f3 1f       	adc	r31, r19
    7f74:	ee 0f       	add	r30, r30
    7f76:	ff 1f       	adc	r31, r31
    7f78:	e8 50       	subi	r30, 0x08	; 8
    7f7a:	f8 4e       	sbci	r31, 0xE8	; 232
    7f7c:	94 e0       	ldi	r25, 0x04	; 4
    7f7e:	94 83       	std	Z+4, r25	; 0x04
    7f80:	71 ce       	rjmp	.-798    	; 0x7c64 <_turn_off>
    7f82:	08 95       	ret

00007f84 <status_leds_longPuls>:
    7f84:	90 e0       	ldi	r25, 0x00	; 0
    7f86:	fc 01       	movw	r30, r24
    7f88:	ee 0f       	add	r30, r30
    7f8a:	ff 1f       	adc	r31, r31
    7f8c:	df 01       	movw	r26, r30
    7f8e:	a8 0f       	add	r26, r24
    7f90:	b9 1f       	adc	r27, r25
    7f92:	aa 0f       	add	r26, r26
    7f94:	bb 1f       	adc	r27, r27
    7f96:	a8 50       	subi	r26, 0x08	; 8
    7f98:	b8 4e       	sbci	r27, 0xE8	; 232
    7f9a:	26 e0       	ldi	r18, 0x06	; 6
    7f9c:	15 96       	adiw	r26, 0x05	; 5
    7f9e:	2c 93       	st	X, r18
    7fa0:	15 97       	sbiw	r26, 0x05	; 5
    7fa2:	fd 01       	movw	r30, r26
    7fa4:	14 82       	std	Z+4, r1	; 0x04
    7fa6:	08 95       	ret

00007fa8 <status_leds_shortPuls>:
    7fa8:	90 e0       	ldi	r25, 0x00	; 0
    7faa:	fc 01       	movw	r30, r24
    7fac:	ee 0f       	add	r30, r30
    7fae:	ff 1f       	adc	r31, r31
    7fb0:	df 01       	movw	r26, r30
    7fb2:	a8 0f       	add	r26, r24
    7fb4:	b9 1f       	adc	r27, r25
    7fb6:	aa 0f       	add	r26, r26
    7fb8:	bb 1f       	adc	r27, r27
    7fba:	a8 50       	subi	r26, 0x08	; 8
    7fbc:	b8 4e       	sbci	r27, 0xE8	; 232
    7fbe:	15 96       	adiw	r26, 0x05	; 5
    7fc0:	1c 92       	st	X, r1
    7fc2:	15 97       	sbiw	r26, 0x05	; 5
    7fc4:	fd 01       	movw	r30, r26
    7fc6:	14 82       	std	Z+4, r1	; 0x04
    7fc8:	08 95       	ret

00007fca <_initTwiInterface>:
    7fca:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_twiIsInitiated>
    7fce:	81 11       	cpse	r24, r1
    7fd0:	0c c0       	rjmp	.+24     	; 0x7fea <_initTwiInterface+0x20>
    7fd2:	8c e0       	ldi	r24, 0x0C	; 12
    7fd4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    7fd8:	8f ef       	ldi	r24, 0xFF	; 255
    7fda:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    7fde:	84 e0       	ldi	r24, 0x04	; 4
    7fe0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7fe4:	81 e0       	ldi	r24, 0x01	; 1
    7fe6:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_twiIsInitiated>
    7fea:	08 95       	ret

00007fec <twiCreate>:
    7fec:	af 92       	push	r10
    7fee:	bf 92       	push	r11
    7ff0:	cf 92       	push	r12
    7ff2:	df 92       	push	r13
    7ff4:	ef 92       	push	r14
    7ff6:	ff 92       	push	r15
    7ff8:	0f 93       	push	r16
    7ffa:	1f 93       	push	r17
    7ffc:	cf 93       	push	r28
    7ffe:	df 93       	push	r29
    8000:	a8 2e       	mov	r10, r24
    8002:	b6 2e       	mov	r11, r22
    8004:	69 01       	movw	r12, r18
    8006:	7a 01       	movw	r14, r20
    8008:	84 e0       	ldi	r24, 0x04	; 4
    800a:	90 e0       	ldi	r25, 0x00	; 0
    800c:	e3 d2       	rcall	.+1478   	; 0x85d4 <malloc>
    800e:	ec 01       	movw	r28, r24
    8010:	89 2b       	or	r24, r25
    8012:	61 f1       	breq	.+88     	; 0x806c <twiCreate+0x80>
    8014:	a8 82       	st	Y, r10
    8016:	81 e0       	ldi	r24, 0x01	; 1
    8018:	b8 12       	cpse	r11, r24
    801a:	12 c0       	rjmp	.+36     	; 0x8040 <twiCreate+0x54>
    801c:	c7 01       	movw	r24, r14
    801e:	b6 01       	movw	r22, r12
    8020:	20 ea       	ldi	r18, 0xA0	; 160
    8022:	36 e8       	ldi	r19, 0x86	; 134
    8024:	41 e0       	ldi	r20, 0x01	; 1
    8026:	50 e0       	ldi	r21, 0x00	; 0
    8028:	ab d2       	rcall	.+1366   	; 0x8580 <__udivmodsi4>
    802a:	da 01       	movw	r26, r20
    802c:	c9 01       	movw	r24, r18
    802e:	40 97       	sbiw	r24, 0x10	; 16
    8030:	a1 09       	sbc	r26, r1
    8032:	b1 09       	sbc	r27, r1
    8034:	b6 95       	lsr	r27
    8036:	a7 95       	ror	r26
    8038:	97 95       	ror	r25
    803a:	87 95       	ror	r24
    803c:	89 83       	std	Y+1, r24	; 0x01
    803e:	11 c0       	rjmp	.+34     	; 0x8062 <twiCreate+0x76>
    8040:	c7 01       	movw	r24, r14
    8042:	b6 01       	movw	r22, r12
    8044:	20 e8       	ldi	r18, 0x80	; 128
    8046:	3a e1       	ldi	r19, 0x1A	; 26
    8048:	46 e0       	ldi	r20, 0x06	; 6
    804a:	50 e0       	ldi	r21, 0x00	; 0
    804c:	99 d2       	rcall	.+1330   	; 0x8580 <__udivmodsi4>
    804e:	da 01       	movw	r26, r20
    8050:	c9 01       	movw	r24, r18
    8052:	40 97       	sbiw	r24, 0x10	; 16
    8054:	a1 09       	sbc	r26, r1
    8056:	b1 09       	sbc	r27, r1
    8058:	b6 95       	lsr	r27
    805a:	a7 95       	ror	r26
    805c:	97 95       	ror	r25
    805e:	87 95       	ror	r24
    8060:	89 83       	std	Y+1, r24	; 0x01
    8062:	1b 83       	std	Y+3, r17	; 0x03
    8064:	0a 83       	std	Y+2, r16	; 0x02
    8066:	8c 2f       	mov	r24, r28
    8068:	9d 2f       	mov	r25, r29
    806a:	02 c0       	rjmp	.+4      	; 0x8070 <twiCreate+0x84>
    806c:	80 e0       	ldi	r24, 0x00	; 0
    806e:	90 e0       	ldi	r25, 0x00	; 0
    8070:	df 91       	pop	r29
    8072:	cf 91       	pop	r28
    8074:	1f 91       	pop	r17
    8076:	0f 91       	pop	r16
    8078:	ff 90       	pop	r15
    807a:	ef 90       	pop	r14
    807c:	df 90       	pop	r13
    807e:	cf 90       	pop	r12
    8080:	bf 90       	pop	r11
    8082:	af 90       	pop	r10
    8084:	08 95       	ret

00008086 <twiIsBusy>:
    8086:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    808a:	81 70       	andi	r24, 0x01	; 1
    808c:	08 95       	ret

0000808e <twiTransmit>:
    808e:	ff 92       	push	r15
    8090:	0f 93       	push	r16
    8092:	1f 93       	push	r17
    8094:	cf 93       	push	r28
    8096:	df 93       	push	r29
    8098:	00 97       	sbiw	r24, 0x00	; 0
    809a:	d1 f1       	breq	.+116    	; 0x8110 <twiTransmit+0x82>
    809c:	4a 30       	cpi	r20, 0x0A	; 10
    809e:	d0 f5       	brcc	.+116    	; 0x8114 <twiTransmit+0x86>
    80a0:	f4 2e       	mov	r15, r20
    80a2:	8b 01       	movw	r16, r22
    80a4:	ec 01       	movw	r28, r24
    80a6:	ef df       	rcall	.-34     	; 0x8086 <twiIsBusy>
    80a8:	81 11       	cpse	r24, r1
    80aa:	36 c0       	rjmp	.+108    	; 0x8118 <twiTransmit+0x8a>
    80ac:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_twiCurrentHandler>
    80b0:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_twiCurrentHandler+0x1>
    80b4:	c8 17       	cp	r28, r24
    80b6:	d9 07       	cpc	r29, r25
    80b8:	41 f0       	breq	.+16     	; 0x80ca <twiTransmit+0x3c>
    80ba:	87 df       	rcall	.-242    	; 0x7fca <_initTwiInterface>
    80bc:	89 81       	ldd	r24, Y+1	; 0x01
    80be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    80c2:	d0 93 12 18 	sts	0x1812, r29	; 0x801812 <_twiCurrentHandler+0x1>
    80c6:	c0 93 11 18 	sts	0x1811, r28	; 0x801811 <_twiCurrentHandler>
    80ca:	81 e0       	ldi	r24, 0x01	; 1
    80cc:	8f 0d       	add	r24, r15
    80ce:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_twiMessageLen>
    80d2:	88 81       	ld	r24, Y
    80d4:	88 0f       	add	r24, r24
    80d6:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <_twiMessageBuffer>
    80da:	ff 20       	and	r15, r15
    80dc:	89 f0       	breq	.+34     	; 0x8100 <twiTransmit+0x72>
    80de:	f8 01       	movw	r30, r16
    80e0:	a5 e1       	ldi	r26, 0x15	; 21
    80e2:	b8 e1       	ldi	r27, 0x18	; 24
    80e4:	4f ef       	ldi	r20, 0xFF	; 255
    80e6:	4f 0d       	add	r20, r15
    80e8:	64 2f       	mov	r22, r20
    80ea:	70 e0       	ldi	r23, 0x00	; 0
    80ec:	cb 01       	movw	r24, r22
    80ee:	01 96       	adiw	r24, 0x01	; 1
    80f0:	b8 01       	movw	r22, r16
    80f2:	68 0f       	add	r22, r24
    80f4:	79 1f       	adc	r23, r25
    80f6:	81 91       	ld	r24, Z+
    80f8:	8d 93       	st	X+, r24
    80fa:	e6 17       	cp	r30, r22
    80fc:	f7 07       	cpc	r31, r23
    80fe:	d9 f7       	brne	.-10     	; 0x80f6 <twiTransmit+0x68>
    8100:	88 ef       	ldi	r24, 0xF8	; 248
    8102:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    8106:	85 ea       	ldi	r24, 0xA5	; 165
    8108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    810c:	84 e0       	ldi	r24, 0x04	; 4
    810e:	05 c0       	rjmp	.+10     	; 0x811a <twiTransmit+0x8c>
    8110:	86 e0       	ldi	r24, 0x06	; 6
    8112:	03 c0       	rjmp	.+6      	; 0x811a <twiTransmit+0x8c>
    8114:	87 e0       	ldi	r24, 0x07	; 7
    8116:	01 c0       	rjmp	.+2      	; 0x811a <twiTransmit+0x8c>
    8118:	82 e0       	ldi	r24, 0x02	; 2
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	1f 91       	pop	r17
    8120:	0f 91       	pop	r16
    8122:	ff 90       	pop	r15
    8124:	08 95       	ret

00008126 <twiReceive>:
    8126:	1f 93       	push	r17
    8128:	cf 93       	push	r28
    812a:	df 93       	push	r29
    812c:	00 97       	sbiw	r24, 0x00	; 0
    812e:	29 f1       	breq	.+74     	; 0x817a <twiReceive+0x54>
    8130:	6b 30       	cpi	r22, 0x0B	; 11
    8132:	28 f5       	brcc	.+74     	; 0x817e <twiReceive+0x58>
    8134:	16 2f       	mov	r17, r22
    8136:	ec 01       	movw	r28, r24
    8138:	a6 df       	rcall	.-180    	; 0x8086 <twiIsBusy>
    813a:	81 11       	cpse	r24, r1
    813c:	22 c0       	rjmp	.+68     	; 0x8182 <twiReceive+0x5c>
    813e:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_twiCurrentHandler>
    8142:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_twiCurrentHandler+0x1>
    8146:	c8 17       	cp	r28, r24
    8148:	d9 07       	cpc	r29, r25
    814a:	41 f0       	breq	.+16     	; 0x815c <twiReceive+0x36>
    814c:	3e df       	rcall	.-388    	; 0x7fca <_initTwiInterface>
    814e:	89 81       	ldd	r24, Y+1	; 0x01
    8150:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    8154:	d0 93 12 18 	sts	0x1812, r29	; 0x801812 <_twiCurrentHandler+0x1>
    8158:	c0 93 11 18 	sts	0x1811, r28	; 0x801811 <_twiCurrentHandler>
    815c:	10 93 13 18 	sts	0x1813, r17	; 0x801813 <_twiMessageLen>
    8160:	88 81       	ld	r24, Y
    8162:	88 0f       	add	r24, r24
    8164:	81 60       	ori	r24, 0x01	; 1
    8166:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <_twiMessageBuffer>
    816a:	88 ef       	ldi	r24, 0xF8	; 248
    816c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    8170:	85 ea       	ldi	r24, 0xA5	; 165
    8172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8176:	85 e0       	ldi	r24, 0x05	; 5
    8178:	05 c0       	rjmp	.+10     	; 0x8184 <twiReceive+0x5e>
    817a:	86 e0       	ldi	r24, 0x06	; 6
    817c:	03 c0       	rjmp	.+6      	; 0x8184 <twiReceive+0x5e>
    817e:	87 e0       	ldi	r24, 0x07	; 7
    8180:	01 c0       	rjmp	.+2      	; 0x8184 <twiReceive+0x5e>
    8182:	82 e0       	ldi	r24, 0x02	; 2
    8184:	df 91       	pop	r29
    8186:	cf 91       	pop	r28
    8188:	1f 91       	pop	r17
    818a:	08 95       	ret

0000818c <__vector_39>:
    818c:	1f 92       	push	r1
    818e:	0f 92       	push	r0
    8190:	0f b6       	in	r0, 0x3f	; 63
    8192:	0f 92       	push	r0
    8194:	11 24       	eor	r1, r1
    8196:	0b b6       	in	r0, 0x3b	; 59
    8198:	0f 92       	push	r0
    819a:	2f 93       	push	r18
    819c:	3f 93       	push	r19
    819e:	4f 93       	push	r20
    81a0:	5f 93       	push	r21
    81a2:	6f 93       	push	r22
    81a4:	7f 93       	push	r23
    81a6:	8f 93       	push	r24
    81a8:	9f 93       	push	r25
    81aa:	af 93       	push	r26
    81ac:	bf 93       	push	r27
    81ae:	ef 93       	push	r30
    81b0:	ff 93       	push	r31
    81b2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    81b6:	8e 2f       	mov	r24, r30
    81b8:	90 e0       	ldi	r25, 0x00	; 0
    81ba:	fc 01       	movw	r30, r24
    81bc:	38 97       	sbiw	r30, 0x08	; 8
    81be:	e1 35       	cpi	r30, 0x51	; 81
    81c0:	f1 05       	cpc	r31, r1
    81c2:	08 f0       	brcs	.+2      	; 0x81c6 <__vector_39+0x3a>
    81c4:	75 c0       	rjmp	.+234    	; 0x82b0 <__vector_39+0x124>
    81c6:	88 27       	eor	r24, r24
    81c8:	e4 58       	subi	r30, 0x84	; 132
    81ca:	ff 4f       	sbci	r31, 0xFF	; 255
    81cc:	8f 4f       	sbci	r24, 0xFF	; 255
    81ce:	fa c1       	rjmp	.+1012   	; 0x85c4 <__tablejump2__>
    81d0:	10 92 10 18 	sts	0x1810, r1	; 0x801810 <_index.1885>
    81d4:	e0 91 10 18 	lds	r30, 0x1810	; 0x801810 <_index.1885>
    81d8:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <_twiMessageLen>
    81dc:	e8 17       	cp	r30, r24
    81de:	70 f4       	brcc	.+28     	; 0x81fc <__vector_39+0x70>
    81e0:	81 e0       	ldi	r24, 0x01	; 1
    81e2:	8e 0f       	add	r24, r30
    81e4:	80 93 10 18 	sts	0x1810, r24	; 0x801810 <_index.1885>
    81e8:	f0 e0       	ldi	r31, 0x00	; 0
    81ea:	ec 5e       	subi	r30, 0xEC	; 236
    81ec:	f7 4e       	sbci	r31, 0xE7	; 231
    81ee:	80 81       	ld	r24, Z
    81f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    81f4:	85 e8       	ldi	r24, 0x85	; 133
    81f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    81fa:	72 c0       	rjmp	.+228    	; 0x82e0 <__vector_39+0x154>
    81fc:	84 e9       	ldi	r24, 0x94	; 148
    81fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8202:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_twiCurrentHandler>
    8206:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_twiCurrentHandler+0x1>
    820a:	dc 01       	movw	r26, r24
    820c:	12 96       	adiw	r26, 0x02	; 2
    820e:	ed 91       	ld	r30, X+
    8210:	fc 91       	ld	r31, X
    8212:	13 97       	sbiw	r26, 0x03	; 3
    8214:	30 97       	sbiw	r30, 0x00	; 0
    8216:	09 f4       	brne	.+2      	; 0x821a <__vector_39+0x8e>
    8218:	63 c0       	rjmp	.+198    	; 0x82e0 <__vector_39+0x154>
    821a:	20 e0       	ldi	r18, 0x00	; 0
    821c:	40 e0       	ldi	r20, 0x00	; 0
    821e:	50 e0       	ldi	r21, 0x00	; 0
    8220:	64 e0       	ldi	r22, 0x04	; 4
    8222:	19 95       	eicall
    8224:	5d c0       	rjmp	.+186    	; 0x82e0 <__vector_39+0x154>
    8226:	e0 91 10 18 	lds	r30, 0x1810	; 0x801810 <_index.1885>
    822a:	81 e0       	ldi	r24, 0x01	; 1
    822c:	8e 0f       	add	r24, r30
    822e:	80 93 10 18 	sts	0x1810, r24	; 0x801810 <_index.1885>
    8232:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    8236:	f0 e0       	ldi	r31, 0x00	; 0
    8238:	ec 5e       	subi	r30, 0xEC	; 236
    823a:	f7 4e       	sbci	r31, 0xE7	; 231
    823c:	80 83       	st	Z, r24
    823e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    8242:	80 34       	cpi	r24, 0x40	; 64
    8244:	11 f4       	brne	.+4      	; 0x824a <__vector_39+0xbe>
    8246:	10 92 10 18 	sts	0x1810, r1	; 0x801810 <_index.1885>
    824a:	20 91 10 18 	lds	r18, 0x1810	; 0x801810 <_index.1885>
    824e:	30 e0       	ldi	r19, 0x00	; 0
    8250:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <_twiMessageLen>
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	01 97       	sbiw	r24, 0x01	; 1
    8258:	28 17       	cp	r18, r24
    825a:	39 07       	cpc	r19, r25
    825c:	24 f4       	brge	.+8      	; 0x8266 <__vector_39+0xda>
    825e:	85 ec       	ldi	r24, 0xC5	; 197
    8260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8264:	3d c0       	rjmp	.+122    	; 0x82e0 <__vector_39+0x154>
    8266:	85 e8       	ldi	r24, 0x85	; 133
    8268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    826c:	39 c0       	rjmp	.+114    	; 0x82e0 <__vector_39+0x154>
    826e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    8272:	e0 91 10 18 	lds	r30, 0x1810	; 0x801810 <_index.1885>
    8276:	f0 e0       	ldi	r31, 0x00	; 0
    8278:	ec 5e       	subi	r30, 0xEC	; 236
    827a:	f7 4e       	sbci	r31, 0xE7	; 231
    827c:	80 83       	st	Z, r24
    827e:	84 e9       	ldi	r24, 0x94	; 148
    8280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8284:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_twiCurrentHandler>
    8288:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_twiCurrentHandler+0x1>
    828c:	dc 01       	movw	r26, r24
    828e:	12 96       	adiw	r26, 0x02	; 2
    8290:	ed 91       	ld	r30, X+
    8292:	fc 91       	ld	r31, X
    8294:	13 97       	sbiw	r26, 0x03	; 3
    8296:	30 97       	sbiw	r30, 0x00	; 0
    8298:	19 f1       	breq	.+70     	; 0x82e0 <__vector_39+0x154>
    829a:	20 91 13 18 	lds	r18, 0x1813	; 0x801813 <_twiMessageLen>
    829e:	44 e1       	ldi	r20, 0x14	; 20
    82a0:	58 e1       	ldi	r21, 0x18	; 24
    82a2:	65 e0       	ldi	r22, 0x05	; 5
    82a4:	19 95       	eicall
    82a6:	1c c0       	rjmp	.+56     	; 0x82e0 <__vector_39+0x154>
    82a8:	85 ea       	ldi	r24, 0xA5	; 165
    82aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    82ae:	18 c0       	rjmp	.+48     	; 0x82e0 <__vector_39+0x154>
    82b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    82b4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    82b8:	84 e0       	ldi	r24, 0x04	; 4
    82ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    82be:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_twiCurrentHandler>
    82c2:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_twiCurrentHandler+0x1>
    82c6:	dc 01       	movw	r26, r24
    82c8:	12 96       	adiw	r26, 0x02	; 2
    82ca:	ed 91       	ld	r30, X+
    82cc:	fc 91       	ld	r31, X
    82ce:	13 97       	sbiw	r26, 0x03	; 3
    82d0:	30 97       	sbiw	r30, 0x00	; 0
    82d2:	31 f0       	breq	.+12     	; 0x82e0 <__vector_39+0x154>
    82d4:	20 e0       	ldi	r18, 0x00	; 0
    82d6:	40 e0       	ldi	r20, 0x00	; 0
    82d8:	50 e0       	ldi	r21, 0x00	; 0
    82da:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    82de:	19 95       	eicall
    82e0:	ff 91       	pop	r31
    82e2:	ef 91       	pop	r30
    82e4:	bf 91       	pop	r27
    82e6:	af 91       	pop	r26
    82e8:	9f 91       	pop	r25
    82ea:	8f 91       	pop	r24
    82ec:	7f 91       	pop	r23
    82ee:	6f 91       	pop	r22
    82f0:	5f 91       	pop	r21
    82f2:	4f 91       	pop	r20
    82f4:	3f 91       	pop	r19
    82f6:	2f 91       	pop	r18
    82f8:	0f 90       	pop	r0
    82fa:	0b be       	out	0x3b, r0	; 59
    82fc:	0f 90       	pop	r0
    82fe:	0f be       	out	0x3f, r0	; 63
    8300:	0f 90       	pop	r0
    8302:	1f 90       	pop	r1
    8304:	18 95       	reti

00008306 <fifo_init>:
    8306:	fc 01       	movw	r30, r24
    8308:	41 11       	cpse	r20, r1
    830a:	01 c0       	rjmp	.+2      	; 0x830e <fifo_init+0x8>
    830c:	84 d2       	rcall	.+1288   	; 0x8816 <abort>
    830e:	84 2f       	mov	r24, r20
    8310:	90 e0       	ldi	r25, 0x00	; 0
    8312:	9c 01       	movw	r18, r24
    8314:	21 50       	subi	r18, 0x01	; 1
    8316:	31 09       	sbc	r19, r1
    8318:	82 23       	and	r24, r18
    831a:	93 23       	and	r25, r19
    831c:	89 2b       	or	r24, r25
    831e:	09 f0       	breq	.+2      	; 0x8322 <fifo_init+0x1c>
    8320:	7a d2       	rcall	.+1268   	; 0x8816 <abort>
    8322:	41 38       	cpi	r20, 0x81	; 129
    8324:	08 f0       	brcs	.+2      	; 0x8328 <fifo_init+0x22>
    8326:	77 d2       	rcall	.+1262   	; 0x8816 <abort>
    8328:	12 82       	std	Z+2, r1	; 0x02
    832a:	13 82       	std	Z+3, r1	; 0x03
    832c:	44 83       	std	Z+4, r20	; 0x04
    832e:	44 0f       	add	r20, r20
    8330:	41 50       	subi	r20, 0x01	; 1
    8332:	45 83       	std	Z+5, r20	; 0x05
    8334:	71 83       	std	Z+1, r23	; 0x01
    8336:	60 83       	st	Z, r22
    8338:	80 e0       	ldi	r24, 0x00	; 0
    833a:	90 e0       	ldi	r25, 0x00	; 0
    833c:	08 95       	ret

0000833e <__subsf3>:
    833e:	50 58       	subi	r21, 0x80	; 128

00008340 <__addsf3>:
    8340:	bb 27       	eor	r27, r27
    8342:	aa 27       	eor	r26, r26
    8344:	13 d0       	rcall	.+38     	; 0x836c <__addsf3x>
    8346:	0c 94 76 34 	jmp	0x68ec	; 0x68ec <__fp_round>
    834a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__fp_pscA>
    834e:	38 f0       	brcs	.+14     	; 0x835e <__addsf3+0x1e>
    8350:	0e 94 6f 34 	call	0x68de	; 0x68de <__fp_pscB>
    8354:	20 f0       	brcs	.+8      	; 0x835e <__addsf3+0x1e>
    8356:	39 f4       	brne	.+14     	; 0x8366 <__addsf3+0x26>
    8358:	9f 3f       	cpi	r25, 0xFF	; 255
    835a:	19 f4       	brne	.+6      	; 0x8362 <__addsf3+0x22>
    835c:	26 f4       	brtc	.+8      	; 0x8366 <__addsf3+0x26>
    835e:	0c 94 65 34 	jmp	0x68ca	; 0x68ca <__fp_nan>
    8362:	0e f4       	brtc	.+2      	; 0x8366 <__addsf3+0x26>
    8364:	e0 95       	com	r30
    8366:	e7 fb       	bst	r30, 7
    8368:	0c 94 5f 34 	jmp	0x68be	; 0x68be <__fp_inf>

0000836c <__addsf3x>:
    836c:	e9 2f       	mov	r30, r25
    836e:	0e 94 cf 33 	call	0x679e	; 0x679e <__fp_split3>
    8372:	58 f3       	brcs	.-42     	; 0x834a <__addsf3+0xa>
    8374:	ba 17       	cp	r27, r26
    8376:	62 07       	cpc	r22, r18
    8378:	73 07       	cpc	r23, r19
    837a:	84 07       	cpc	r24, r20
    837c:	95 07       	cpc	r25, r21
    837e:	20 f0       	brcs	.+8      	; 0x8388 <__addsf3x+0x1c>
    8380:	79 f4       	brne	.+30     	; 0x83a0 <__addsf3x+0x34>
    8382:	a6 f5       	brtc	.+104    	; 0x83ec <__addsf3x+0x80>
    8384:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__fp_zero>
    8388:	0e f4       	brtc	.+2      	; 0x838c <__addsf3x+0x20>
    838a:	e0 95       	com	r30
    838c:	0b 2e       	mov	r0, r27
    838e:	ba 2f       	mov	r27, r26
    8390:	a0 2d       	mov	r26, r0
    8392:	0b 01       	movw	r0, r22
    8394:	b9 01       	movw	r22, r18
    8396:	90 01       	movw	r18, r0
    8398:	0c 01       	movw	r0, r24
    839a:	ca 01       	movw	r24, r20
    839c:	a0 01       	movw	r20, r0
    839e:	11 24       	eor	r1, r1
    83a0:	ff 27       	eor	r31, r31
    83a2:	59 1b       	sub	r21, r25
    83a4:	99 f0       	breq	.+38     	; 0x83cc <__addsf3x+0x60>
    83a6:	59 3f       	cpi	r21, 0xF9	; 249
    83a8:	50 f4       	brcc	.+20     	; 0x83be <__addsf3x+0x52>
    83aa:	50 3e       	cpi	r21, 0xE0	; 224
    83ac:	68 f1       	brcs	.+90     	; 0x8408 <__addsf3x+0x9c>
    83ae:	1a 16       	cp	r1, r26
    83b0:	f0 40       	sbci	r31, 0x00	; 0
    83b2:	a2 2f       	mov	r26, r18
    83b4:	23 2f       	mov	r18, r19
    83b6:	34 2f       	mov	r19, r20
    83b8:	44 27       	eor	r20, r20
    83ba:	58 5f       	subi	r21, 0xF8	; 248
    83bc:	f3 cf       	rjmp	.-26     	; 0x83a4 <__addsf3x+0x38>
    83be:	46 95       	lsr	r20
    83c0:	37 95       	ror	r19
    83c2:	27 95       	ror	r18
    83c4:	a7 95       	ror	r26
    83c6:	f0 40       	sbci	r31, 0x00	; 0
    83c8:	53 95       	inc	r21
    83ca:	c9 f7       	brne	.-14     	; 0x83be <__addsf3x+0x52>
    83cc:	7e f4       	brtc	.+30     	; 0x83ec <__addsf3x+0x80>
    83ce:	1f 16       	cp	r1, r31
    83d0:	ba 0b       	sbc	r27, r26
    83d2:	62 0b       	sbc	r22, r18
    83d4:	73 0b       	sbc	r23, r19
    83d6:	84 0b       	sbc	r24, r20
    83d8:	ba f0       	brmi	.+46     	; 0x8408 <__addsf3x+0x9c>
    83da:	91 50       	subi	r25, 0x01	; 1
    83dc:	a1 f0       	breq	.+40     	; 0x8406 <__addsf3x+0x9a>
    83de:	ff 0f       	add	r31, r31
    83e0:	bb 1f       	adc	r27, r27
    83e2:	66 1f       	adc	r22, r22
    83e4:	77 1f       	adc	r23, r23
    83e6:	88 1f       	adc	r24, r24
    83e8:	c2 f7       	brpl	.-16     	; 0x83da <__addsf3x+0x6e>
    83ea:	0e c0       	rjmp	.+28     	; 0x8408 <__addsf3x+0x9c>
    83ec:	ba 0f       	add	r27, r26
    83ee:	62 1f       	adc	r22, r18
    83f0:	73 1f       	adc	r23, r19
    83f2:	84 1f       	adc	r24, r20
    83f4:	48 f4       	brcc	.+18     	; 0x8408 <__addsf3x+0x9c>
    83f6:	87 95       	ror	r24
    83f8:	77 95       	ror	r23
    83fa:	67 95       	ror	r22
    83fc:	b7 95       	ror	r27
    83fe:	f7 95       	ror	r31
    8400:	9e 3f       	cpi	r25, 0xFE	; 254
    8402:	08 f0       	brcs	.+2      	; 0x8406 <__addsf3x+0x9a>
    8404:	b0 cf       	rjmp	.-160    	; 0x8366 <__addsf3+0x26>
    8406:	93 95       	inc	r25
    8408:	88 0f       	add	r24, r24
    840a:	08 f0       	brcs	.+2      	; 0x840e <__addsf3x+0xa2>
    840c:	99 27       	eor	r25, r25
    840e:	ee 0f       	add	r30, r30
    8410:	97 95       	ror	r25
    8412:	87 95       	ror	r24
    8414:	08 95       	ret

00008416 <__divsf3>:
    8416:	12 d0       	rcall	.+36     	; 0x843c <__divsf3x>
    8418:	0c 94 76 34 	jmp	0x68ec	; 0x68ec <__fp_round>
    841c:	0e 94 6f 34 	call	0x68de	; 0x68de <__fp_pscB>
    8420:	58 f0       	brcs	.+22     	; 0x8438 <__divsf3+0x22>
    8422:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__fp_pscA>
    8426:	40 f0       	brcs	.+16     	; 0x8438 <__divsf3+0x22>
    8428:	29 f4       	brne	.+10     	; 0x8434 <__divsf3+0x1e>
    842a:	5f 3f       	cpi	r21, 0xFF	; 255
    842c:	29 f0       	breq	.+10     	; 0x8438 <__divsf3+0x22>
    842e:	0c 94 5f 34 	jmp	0x68be	; 0x68be <__fp_inf>
    8432:	51 11       	cpse	r21, r1
    8434:	0c 94 f2 33 	jmp	0x67e4	; 0x67e4 <__fp_szero>
    8438:	0c 94 65 34 	jmp	0x68ca	; 0x68ca <__fp_nan>

0000843c <__divsf3x>:
    843c:	0e 94 cf 33 	call	0x679e	; 0x679e <__fp_split3>
    8440:	68 f3       	brcs	.-38     	; 0x841c <__divsf3+0x6>

00008442 <__divsf3_pse>:
    8442:	99 23       	and	r25, r25
    8444:	b1 f3       	breq	.-20     	; 0x8432 <__divsf3+0x1c>
    8446:	55 23       	and	r21, r21
    8448:	91 f3       	breq	.-28     	; 0x842e <__divsf3+0x18>
    844a:	95 1b       	sub	r25, r21
    844c:	55 0b       	sbc	r21, r21
    844e:	bb 27       	eor	r27, r27
    8450:	aa 27       	eor	r26, r26
    8452:	62 17       	cp	r22, r18
    8454:	73 07       	cpc	r23, r19
    8456:	84 07       	cpc	r24, r20
    8458:	38 f0       	brcs	.+14     	; 0x8468 <__divsf3_pse+0x26>
    845a:	9f 5f       	subi	r25, 0xFF	; 255
    845c:	5f 4f       	sbci	r21, 0xFF	; 255
    845e:	22 0f       	add	r18, r18
    8460:	33 1f       	adc	r19, r19
    8462:	44 1f       	adc	r20, r20
    8464:	aa 1f       	adc	r26, r26
    8466:	a9 f3       	breq	.-22     	; 0x8452 <__divsf3_pse+0x10>
    8468:	35 d0       	rcall	.+106    	; 0x84d4 <__divsf3_pse+0x92>
    846a:	0e 2e       	mov	r0, r30
    846c:	3a f0       	brmi	.+14     	; 0x847c <__divsf3_pse+0x3a>
    846e:	e0 e8       	ldi	r30, 0x80	; 128
    8470:	32 d0       	rcall	.+100    	; 0x84d6 <__divsf3_pse+0x94>
    8472:	91 50       	subi	r25, 0x01	; 1
    8474:	50 40       	sbci	r21, 0x00	; 0
    8476:	e6 95       	lsr	r30
    8478:	00 1c       	adc	r0, r0
    847a:	ca f7       	brpl	.-14     	; 0x846e <__divsf3_pse+0x2c>
    847c:	2b d0       	rcall	.+86     	; 0x84d4 <__divsf3_pse+0x92>
    847e:	fe 2f       	mov	r31, r30
    8480:	29 d0       	rcall	.+82     	; 0x84d4 <__divsf3_pse+0x92>
    8482:	66 0f       	add	r22, r22
    8484:	77 1f       	adc	r23, r23
    8486:	88 1f       	adc	r24, r24
    8488:	bb 1f       	adc	r27, r27
    848a:	26 17       	cp	r18, r22
    848c:	37 07       	cpc	r19, r23
    848e:	48 07       	cpc	r20, r24
    8490:	ab 07       	cpc	r26, r27
    8492:	b0 e8       	ldi	r27, 0x80	; 128
    8494:	09 f0       	breq	.+2      	; 0x8498 <__divsf3_pse+0x56>
    8496:	bb 0b       	sbc	r27, r27
    8498:	80 2d       	mov	r24, r0
    849a:	bf 01       	movw	r22, r30
    849c:	ff 27       	eor	r31, r31
    849e:	93 58       	subi	r25, 0x83	; 131
    84a0:	5f 4f       	sbci	r21, 0xFF	; 255
    84a2:	3a f0       	brmi	.+14     	; 0x84b2 <__divsf3_pse+0x70>
    84a4:	9e 3f       	cpi	r25, 0xFE	; 254
    84a6:	51 05       	cpc	r21, r1
    84a8:	78 f0       	brcs	.+30     	; 0x84c8 <__divsf3_pse+0x86>
    84aa:	0c 94 5f 34 	jmp	0x68be	; 0x68be <__fp_inf>
    84ae:	0c 94 f2 33 	jmp	0x67e4	; 0x67e4 <__fp_szero>
    84b2:	5f 3f       	cpi	r21, 0xFF	; 255
    84b4:	e4 f3       	brlt	.-8      	; 0x84ae <__divsf3_pse+0x6c>
    84b6:	98 3e       	cpi	r25, 0xE8	; 232
    84b8:	d4 f3       	brlt	.-12     	; 0x84ae <__divsf3_pse+0x6c>
    84ba:	86 95       	lsr	r24
    84bc:	77 95       	ror	r23
    84be:	67 95       	ror	r22
    84c0:	b7 95       	ror	r27
    84c2:	f7 95       	ror	r31
    84c4:	9f 5f       	subi	r25, 0xFF	; 255
    84c6:	c9 f7       	brne	.-14     	; 0x84ba <__divsf3_pse+0x78>
    84c8:	88 0f       	add	r24, r24
    84ca:	91 1d       	adc	r25, r1
    84cc:	96 95       	lsr	r25
    84ce:	87 95       	ror	r24
    84d0:	97 f9       	bld	r25, 7
    84d2:	08 95       	ret
    84d4:	e1 e0       	ldi	r30, 0x01	; 1
    84d6:	66 0f       	add	r22, r22
    84d8:	77 1f       	adc	r23, r23
    84da:	88 1f       	adc	r24, r24
    84dc:	bb 1f       	adc	r27, r27
    84de:	62 17       	cp	r22, r18
    84e0:	73 07       	cpc	r23, r19
    84e2:	84 07       	cpc	r24, r20
    84e4:	ba 07       	cpc	r27, r26
    84e6:	20 f0       	brcs	.+8      	; 0x84f0 <__divsf3_pse+0xae>
    84e8:	62 1b       	sub	r22, r18
    84ea:	73 0b       	sbc	r23, r19
    84ec:	84 0b       	sbc	r24, r20
    84ee:	ba 0b       	sbc	r27, r26
    84f0:	ee 1f       	adc	r30, r30
    84f2:	88 f7       	brcc	.-30     	; 0x84d6 <__divsf3_pse+0x94>
    84f4:	e0 95       	com	r30
    84f6:	08 95       	ret

000084f8 <__fixsfsi>:
    84f8:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__fixunssfsi>
    84fc:	68 94       	set
    84fe:	b1 11       	cpse	r27, r1
    8500:	0c 94 f2 33 	jmp	0x67e4	; 0x67e4 <__fp_szero>
    8504:	08 95       	ret

00008506 <__floatunsisf>:
    8506:	e8 94       	clt
    8508:	09 c0       	rjmp	.+18     	; 0x851c <__floatsisf+0x12>

0000850a <__floatsisf>:
    850a:	97 fb       	bst	r25, 7
    850c:	3e f4       	brtc	.+14     	; 0x851c <__floatsisf+0x12>
    850e:	90 95       	com	r25
    8510:	80 95       	com	r24
    8512:	70 95       	com	r23
    8514:	61 95       	neg	r22
    8516:	7f 4f       	sbci	r23, 0xFF	; 255
    8518:	8f 4f       	sbci	r24, 0xFF	; 255
    851a:	9f 4f       	sbci	r25, 0xFF	; 255
    851c:	99 23       	and	r25, r25
    851e:	a9 f0       	breq	.+42     	; 0x854a <__floatsisf+0x40>
    8520:	f9 2f       	mov	r31, r25
    8522:	96 e9       	ldi	r25, 0x96	; 150
    8524:	bb 27       	eor	r27, r27
    8526:	93 95       	inc	r25
    8528:	f6 95       	lsr	r31
    852a:	87 95       	ror	r24
    852c:	77 95       	ror	r23
    852e:	67 95       	ror	r22
    8530:	b7 95       	ror	r27
    8532:	f1 11       	cpse	r31, r1
    8534:	f8 cf       	rjmp	.-16     	; 0x8526 <__floatsisf+0x1c>
    8536:	fa f4       	brpl	.+62     	; 0x8576 <__floatsisf+0x6c>
    8538:	bb 0f       	add	r27, r27
    853a:	11 f4       	brne	.+4      	; 0x8540 <__floatsisf+0x36>
    853c:	60 ff       	sbrs	r22, 0
    853e:	1b c0       	rjmp	.+54     	; 0x8576 <__floatsisf+0x6c>
    8540:	6f 5f       	subi	r22, 0xFF	; 255
    8542:	7f 4f       	sbci	r23, 0xFF	; 255
    8544:	8f 4f       	sbci	r24, 0xFF	; 255
    8546:	9f 4f       	sbci	r25, 0xFF	; 255
    8548:	16 c0       	rjmp	.+44     	; 0x8576 <__floatsisf+0x6c>
    854a:	88 23       	and	r24, r24
    854c:	11 f0       	breq	.+4      	; 0x8552 <__floatsisf+0x48>
    854e:	96 e9       	ldi	r25, 0x96	; 150
    8550:	11 c0       	rjmp	.+34     	; 0x8574 <__floatsisf+0x6a>
    8552:	77 23       	and	r23, r23
    8554:	21 f0       	breq	.+8      	; 0x855e <__floatsisf+0x54>
    8556:	9e e8       	ldi	r25, 0x8E	; 142
    8558:	87 2f       	mov	r24, r23
    855a:	76 2f       	mov	r23, r22
    855c:	05 c0       	rjmp	.+10     	; 0x8568 <__floatsisf+0x5e>
    855e:	66 23       	and	r22, r22
    8560:	71 f0       	breq	.+28     	; 0x857e <__floatsisf+0x74>
    8562:	96 e8       	ldi	r25, 0x86	; 134
    8564:	86 2f       	mov	r24, r22
    8566:	70 e0       	ldi	r23, 0x00	; 0
    8568:	60 e0       	ldi	r22, 0x00	; 0
    856a:	2a f0       	brmi	.+10     	; 0x8576 <__floatsisf+0x6c>
    856c:	9a 95       	dec	r25
    856e:	66 0f       	add	r22, r22
    8570:	77 1f       	adc	r23, r23
    8572:	88 1f       	adc	r24, r24
    8574:	da f7       	brpl	.-10     	; 0x856c <__floatsisf+0x62>
    8576:	88 0f       	add	r24, r24
    8578:	96 95       	lsr	r25
    857a:	87 95       	ror	r24
    857c:	97 f9       	bld	r25, 7
    857e:	08 95       	ret

00008580 <__udivmodsi4>:
    8580:	a1 e2       	ldi	r26, 0x21	; 33
    8582:	1a 2e       	mov	r1, r26
    8584:	aa 1b       	sub	r26, r26
    8586:	bb 1b       	sub	r27, r27
    8588:	fd 01       	movw	r30, r26
    858a:	0d c0       	rjmp	.+26     	; 0x85a6 <__udivmodsi4_ep>

0000858c <__udivmodsi4_loop>:
    858c:	aa 1f       	adc	r26, r26
    858e:	bb 1f       	adc	r27, r27
    8590:	ee 1f       	adc	r30, r30
    8592:	ff 1f       	adc	r31, r31
    8594:	a2 17       	cp	r26, r18
    8596:	b3 07       	cpc	r27, r19
    8598:	e4 07       	cpc	r30, r20
    859a:	f5 07       	cpc	r31, r21
    859c:	20 f0       	brcs	.+8      	; 0x85a6 <__udivmodsi4_ep>
    859e:	a2 1b       	sub	r26, r18
    85a0:	b3 0b       	sbc	r27, r19
    85a2:	e4 0b       	sbc	r30, r20
    85a4:	f5 0b       	sbc	r31, r21

000085a6 <__udivmodsi4_ep>:
    85a6:	66 1f       	adc	r22, r22
    85a8:	77 1f       	adc	r23, r23
    85aa:	88 1f       	adc	r24, r24
    85ac:	99 1f       	adc	r25, r25
    85ae:	1a 94       	dec	r1
    85b0:	69 f7       	brne	.-38     	; 0x858c <__udivmodsi4_loop>
    85b2:	60 95       	com	r22
    85b4:	70 95       	com	r23
    85b6:	80 95       	com	r24
    85b8:	90 95       	com	r25
    85ba:	9b 01       	movw	r18, r22
    85bc:	ac 01       	movw	r20, r24
    85be:	bd 01       	movw	r22, r26
    85c0:	cf 01       	movw	r24, r30
    85c2:	08 95       	ret

000085c4 <__tablejump2__>:
    85c4:	ee 0f       	add	r30, r30
    85c6:	ff 1f       	adc	r31, r31
    85c8:	88 1f       	adc	r24, r24
    85ca:	8b bf       	out	0x3b, r24	; 59
    85cc:	07 90       	elpm	r0, Z+
    85ce:	f6 91       	elpm	r31, Z
    85d0:	e0 2d       	mov	r30, r0
    85d2:	19 94       	eijmp

000085d4 <malloc>:
    85d4:	0f 93       	push	r16
    85d6:	1f 93       	push	r17
    85d8:	cf 93       	push	r28
    85da:	df 93       	push	r29
    85dc:	82 30       	cpi	r24, 0x02	; 2
    85de:	91 05       	cpc	r25, r1
    85e0:	10 f4       	brcc	.+4      	; 0x85e6 <malloc+0x12>
    85e2:	82 e0       	ldi	r24, 0x02	; 2
    85e4:	90 e0       	ldi	r25, 0x00	; 0
    85e6:	e0 91 3e 18 	lds	r30, 0x183E	; 0x80183e <__flp>
    85ea:	f0 91 3f 18 	lds	r31, 0x183F	; 0x80183f <__flp+0x1>
    85ee:	20 e0       	ldi	r18, 0x00	; 0
    85f0:	30 e0       	ldi	r19, 0x00	; 0
    85f2:	a0 e0       	ldi	r26, 0x00	; 0
    85f4:	b0 e0       	ldi	r27, 0x00	; 0
    85f6:	30 97       	sbiw	r30, 0x00	; 0
    85f8:	19 f1       	breq	.+70     	; 0x8640 <malloc+0x6c>
    85fa:	40 81       	ld	r20, Z
    85fc:	51 81       	ldd	r21, Z+1	; 0x01
    85fe:	02 81       	ldd	r16, Z+2	; 0x02
    8600:	13 81       	ldd	r17, Z+3	; 0x03
    8602:	48 17       	cp	r20, r24
    8604:	59 07       	cpc	r21, r25
    8606:	c8 f0       	brcs	.+50     	; 0x863a <malloc+0x66>
    8608:	84 17       	cp	r24, r20
    860a:	95 07       	cpc	r25, r21
    860c:	69 f4       	brne	.+26     	; 0x8628 <malloc+0x54>
    860e:	10 97       	sbiw	r26, 0x00	; 0
    8610:	31 f0       	breq	.+12     	; 0x861e <malloc+0x4a>
    8612:	12 96       	adiw	r26, 0x02	; 2
    8614:	0c 93       	st	X, r16
    8616:	12 97       	sbiw	r26, 0x02	; 2
    8618:	13 96       	adiw	r26, 0x03	; 3
    861a:	1c 93       	st	X, r17
    861c:	27 c0       	rjmp	.+78     	; 0x866c <malloc+0x98>
    861e:	00 93 3e 18 	sts	0x183E, r16	; 0x80183e <__flp>
    8622:	10 93 3f 18 	sts	0x183F, r17	; 0x80183f <__flp+0x1>
    8626:	22 c0       	rjmp	.+68     	; 0x866c <malloc+0x98>
    8628:	21 15       	cp	r18, r1
    862a:	31 05       	cpc	r19, r1
    862c:	19 f0       	breq	.+6      	; 0x8634 <malloc+0x60>
    862e:	42 17       	cp	r20, r18
    8630:	53 07       	cpc	r21, r19
    8632:	18 f4       	brcc	.+6      	; 0x863a <malloc+0x66>
    8634:	9a 01       	movw	r18, r20
    8636:	bd 01       	movw	r22, r26
    8638:	ef 01       	movw	r28, r30
    863a:	df 01       	movw	r26, r30
    863c:	f8 01       	movw	r30, r16
    863e:	db cf       	rjmp	.-74     	; 0x85f6 <malloc+0x22>
    8640:	21 15       	cp	r18, r1
    8642:	31 05       	cpc	r19, r1
    8644:	f9 f0       	breq	.+62     	; 0x8684 <malloc+0xb0>
    8646:	28 1b       	sub	r18, r24
    8648:	39 0b       	sbc	r19, r25
    864a:	24 30       	cpi	r18, 0x04	; 4
    864c:	31 05       	cpc	r19, r1
    864e:	80 f4       	brcc	.+32     	; 0x8670 <malloc+0x9c>
    8650:	8a 81       	ldd	r24, Y+2	; 0x02
    8652:	9b 81       	ldd	r25, Y+3	; 0x03
    8654:	61 15       	cp	r22, r1
    8656:	71 05       	cpc	r23, r1
    8658:	21 f0       	breq	.+8      	; 0x8662 <malloc+0x8e>
    865a:	fb 01       	movw	r30, r22
    865c:	93 83       	std	Z+3, r25	; 0x03
    865e:	82 83       	std	Z+2, r24	; 0x02
    8660:	04 c0       	rjmp	.+8      	; 0x866a <malloc+0x96>
    8662:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <__flp+0x1>
    8666:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <__flp>
    866a:	fe 01       	movw	r30, r28
    866c:	32 96       	adiw	r30, 0x02	; 2
    866e:	44 c0       	rjmp	.+136    	; 0x86f8 <malloc+0x124>
    8670:	fe 01       	movw	r30, r28
    8672:	e2 0f       	add	r30, r18
    8674:	f3 1f       	adc	r31, r19
    8676:	81 93       	st	Z+, r24
    8678:	91 93       	st	Z+, r25
    867a:	22 50       	subi	r18, 0x02	; 2
    867c:	31 09       	sbc	r19, r1
    867e:	39 83       	std	Y+1, r19	; 0x01
    8680:	28 83       	st	Y, r18
    8682:	3a c0       	rjmp	.+116    	; 0x86f8 <malloc+0x124>
    8684:	20 91 3c 18 	lds	r18, 0x183C	; 0x80183c <__brkval>
    8688:	30 91 3d 18 	lds	r19, 0x183D	; 0x80183d <__brkval+0x1>
    868c:	23 2b       	or	r18, r19
    868e:	41 f4       	brne	.+16     	; 0x86a0 <malloc+0xcc>
    8690:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    8694:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    8698:	30 93 3d 18 	sts	0x183D, r19	; 0x80183d <__brkval+0x1>
    869c:	20 93 3c 18 	sts	0x183C, r18	; 0x80183c <__brkval>
    86a0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    86a4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    86a8:	21 15       	cp	r18, r1
    86aa:	31 05       	cpc	r19, r1
    86ac:	41 f4       	brne	.+16     	; 0x86be <malloc+0xea>
    86ae:	2d b7       	in	r18, 0x3d	; 61
    86b0:	3e b7       	in	r19, 0x3e	; 62
    86b2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    86b6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    86ba:	24 1b       	sub	r18, r20
    86bc:	35 0b       	sbc	r19, r21
    86be:	e0 91 3c 18 	lds	r30, 0x183C	; 0x80183c <__brkval>
    86c2:	f0 91 3d 18 	lds	r31, 0x183D	; 0x80183d <__brkval+0x1>
    86c6:	e2 17       	cp	r30, r18
    86c8:	f3 07       	cpc	r31, r19
    86ca:	a0 f4       	brcc	.+40     	; 0x86f4 <malloc+0x120>
    86cc:	2e 1b       	sub	r18, r30
    86ce:	3f 0b       	sbc	r19, r31
    86d0:	28 17       	cp	r18, r24
    86d2:	39 07       	cpc	r19, r25
    86d4:	78 f0       	brcs	.+30     	; 0x86f4 <malloc+0x120>
    86d6:	ac 01       	movw	r20, r24
    86d8:	4e 5f       	subi	r20, 0xFE	; 254
    86da:	5f 4f       	sbci	r21, 0xFF	; 255
    86dc:	24 17       	cp	r18, r20
    86de:	35 07       	cpc	r19, r21
    86e0:	48 f0       	brcs	.+18     	; 0x86f4 <malloc+0x120>
    86e2:	4e 0f       	add	r20, r30
    86e4:	5f 1f       	adc	r21, r31
    86e6:	50 93 3d 18 	sts	0x183D, r21	; 0x80183d <__brkval+0x1>
    86ea:	40 93 3c 18 	sts	0x183C, r20	; 0x80183c <__brkval>
    86ee:	81 93       	st	Z+, r24
    86f0:	91 93       	st	Z+, r25
    86f2:	02 c0       	rjmp	.+4      	; 0x86f8 <malloc+0x124>
    86f4:	e0 e0       	ldi	r30, 0x00	; 0
    86f6:	f0 e0       	ldi	r31, 0x00	; 0
    86f8:	cf 01       	movw	r24, r30
    86fa:	df 91       	pop	r29
    86fc:	cf 91       	pop	r28
    86fe:	1f 91       	pop	r17
    8700:	0f 91       	pop	r16
    8702:	08 95       	ret

00008704 <free>:
    8704:	cf 93       	push	r28
    8706:	df 93       	push	r29
    8708:	00 97       	sbiw	r24, 0x00	; 0
    870a:	09 f4       	brne	.+2      	; 0x870e <free+0xa>
    870c:	81 c0       	rjmp	.+258    	; 0x8810 <free+0x10c>
    870e:	fc 01       	movw	r30, r24
    8710:	32 97       	sbiw	r30, 0x02	; 2
    8712:	13 82       	std	Z+3, r1	; 0x03
    8714:	12 82       	std	Z+2, r1	; 0x02
    8716:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <__flp>
    871a:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <__flp+0x1>
    871e:	10 97       	sbiw	r26, 0x00	; 0
    8720:	81 f4       	brne	.+32     	; 0x8742 <free+0x3e>
    8722:	20 81       	ld	r18, Z
    8724:	31 81       	ldd	r19, Z+1	; 0x01
    8726:	82 0f       	add	r24, r18
    8728:	93 1f       	adc	r25, r19
    872a:	20 91 3c 18 	lds	r18, 0x183C	; 0x80183c <__brkval>
    872e:	30 91 3d 18 	lds	r19, 0x183D	; 0x80183d <__brkval+0x1>
    8732:	28 17       	cp	r18, r24
    8734:	39 07       	cpc	r19, r25
    8736:	51 f5       	brne	.+84     	; 0x878c <free+0x88>
    8738:	f0 93 3d 18 	sts	0x183D, r31	; 0x80183d <__brkval+0x1>
    873c:	e0 93 3c 18 	sts	0x183C, r30	; 0x80183c <__brkval>
    8740:	67 c0       	rjmp	.+206    	; 0x8810 <free+0x10c>
    8742:	ed 01       	movw	r28, r26
    8744:	20 e0       	ldi	r18, 0x00	; 0
    8746:	30 e0       	ldi	r19, 0x00	; 0
    8748:	ce 17       	cp	r28, r30
    874a:	df 07       	cpc	r29, r31
    874c:	40 f4       	brcc	.+16     	; 0x875e <free+0x5a>
    874e:	4a 81       	ldd	r20, Y+2	; 0x02
    8750:	5b 81       	ldd	r21, Y+3	; 0x03
    8752:	9e 01       	movw	r18, r28
    8754:	41 15       	cp	r20, r1
    8756:	51 05       	cpc	r21, r1
    8758:	f1 f0       	breq	.+60     	; 0x8796 <free+0x92>
    875a:	ea 01       	movw	r28, r20
    875c:	f5 cf       	rjmp	.-22     	; 0x8748 <free+0x44>
    875e:	d3 83       	std	Z+3, r29	; 0x03
    8760:	c2 83       	std	Z+2, r28	; 0x02
    8762:	40 81       	ld	r20, Z
    8764:	51 81       	ldd	r21, Z+1	; 0x01
    8766:	84 0f       	add	r24, r20
    8768:	95 1f       	adc	r25, r21
    876a:	c8 17       	cp	r28, r24
    876c:	d9 07       	cpc	r29, r25
    876e:	59 f4       	brne	.+22     	; 0x8786 <free+0x82>
    8770:	88 81       	ld	r24, Y
    8772:	99 81       	ldd	r25, Y+1	; 0x01
    8774:	84 0f       	add	r24, r20
    8776:	95 1f       	adc	r25, r21
    8778:	02 96       	adiw	r24, 0x02	; 2
    877a:	91 83       	std	Z+1, r25	; 0x01
    877c:	80 83       	st	Z, r24
    877e:	8a 81       	ldd	r24, Y+2	; 0x02
    8780:	9b 81       	ldd	r25, Y+3	; 0x03
    8782:	93 83       	std	Z+3, r25	; 0x03
    8784:	82 83       	std	Z+2, r24	; 0x02
    8786:	21 15       	cp	r18, r1
    8788:	31 05       	cpc	r19, r1
    878a:	29 f4       	brne	.+10     	; 0x8796 <free+0x92>
    878c:	f0 93 3f 18 	sts	0x183F, r31	; 0x80183f <__flp+0x1>
    8790:	e0 93 3e 18 	sts	0x183E, r30	; 0x80183e <__flp>
    8794:	3d c0       	rjmp	.+122    	; 0x8810 <free+0x10c>
    8796:	e9 01       	movw	r28, r18
    8798:	fb 83       	std	Y+3, r31	; 0x03
    879a:	ea 83       	std	Y+2, r30	; 0x02
    879c:	49 91       	ld	r20, Y+
    879e:	59 91       	ld	r21, Y+
    87a0:	c4 0f       	add	r28, r20
    87a2:	d5 1f       	adc	r29, r21
    87a4:	ec 17       	cp	r30, r28
    87a6:	fd 07       	cpc	r31, r29
    87a8:	61 f4       	brne	.+24     	; 0x87c2 <free+0xbe>
    87aa:	80 81       	ld	r24, Z
    87ac:	91 81       	ldd	r25, Z+1	; 0x01
    87ae:	84 0f       	add	r24, r20
    87b0:	95 1f       	adc	r25, r21
    87b2:	02 96       	adiw	r24, 0x02	; 2
    87b4:	e9 01       	movw	r28, r18
    87b6:	99 83       	std	Y+1, r25	; 0x01
    87b8:	88 83       	st	Y, r24
    87ba:	82 81       	ldd	r24, Z+2	; 0x02
    87bc:	93 81       	ldd	r25, Z+3	; 0x03
    87be:	9b 83       	std	Y+3, r25	; 0x03
    87c0:	8a 83       	std	Y+2, r24	; 0x02
    87c2:	e0 e0       	ldi	r30, 0x00	; 0
    87c4:	f0 e0       	ldi	r31, 0x00	; 0
    87c6:	12 96       	adiw	r26, 0x02	; 2
    87c8:	8d 91       	ld	r24, X+
    87ca:	9c 91       	ld	r25, X
    87cc:	13 97       	sbiw	r26, 0x03	; 3
    87ce:	00 97       	sbiw	r24, 0x00	; 0
    87d0:	19 f0       	breq	.+6      	; 0x87d8 <free+0xd4>
    87d2:	fd 01       	movw	r30, r26
    87d4:	dc 01       	movw	r26, r24
    87d6:	f7 cf       	rjmp	.-18     	; 0x87c6 <free+0xc2>
    87d8:	8d 91       	ld	r24, X+
    87da:	9c 91       	ld	r25, X
    87dc:	11 97       	sbiw	r26, 0x01	; 1
    87de:	9d 01       	movw	r18, r26
    87e0:	2e 5f       	subi	r18, 0xFE	; 254
    87e2:	3f 4f       	sbci	r19, 0xFF	; 255
    87e4:	82 0f       	add	r24, r18
    87e6:	93 1f       	adc	r25, r19
    87e8:	20 91 3c 18 	lds	r18, 0x183C	; 0x80183c <__brkval>
    87ec:	30 91 3d 18 	lds	r19, 0x183D	; 0x80183d <__brkval+0x1>
    87f0:	28 17       	cp	r18, r24
    87f2:	39 07       	cpc	r19, r25
    87f4:	69 f4       	brne	.+26     	; 0x8810 <free+0x10c>
    87f6:	30 97       	sbiw	r30, 0x00	; 0
    87f8:	29 f4       	brne	.+10     	; 0x8804 <free+0x100>
    87fa:	10 92 3f 18 	sts	0x183F, r1	; 0x80183f <__flp+0x1>
    87fe:	10 92 3e 18 	sts	0x183E, r1	; 0x80183e <__flp>
    8802:	02 c0       	rjmp	.+4      	; 0x8808 <free+0x104>
    8804:	13 82       	std	Z+3, r1	; 0x03
    8806:	12 82       	std	Z+2, r1	; 0x02
    8808:	b0 93 3d 18 	sts	0x183D, r27	; 0x80183d <__brkval+0x1>
    880c:	a0 93 3c 18 	sts	0x183C, r26	; 0x80183c <__brkval>
    8810:	df 91       	pop	r29
    8812:	cf 91       	pop	r28
    8814:	08 95       	ret

00008816 <abort>:
    8816:	81 e0       	ldi	r24, 0x01	; 1
    8818:	90 e0       	ldi	r25, 0x00	; 0
    881a:	f8 94       	cli
    881c:	7d c3       	rjmp	.+1786   	; 0x8f18 <_exit>

0000881e <memcpy>:
    881e:	fb 01       	movw	r30, r22
    8820:	dc 01       	movw	r26, r24
    8822:	02 c0       	rjmp	.+4      	; 0x8828 <memcpy+0xa>
    8824:	01 90       	ld	r0, Z+
    8826:	0d 92       	st	X+, r0
    8828:	41 50       	subi	r20, 0x01	; 1
    882a:	50 40       	sbci	r21, 0x00	; 0
    882c:	d8 f7       	brcc	.-10     	; 0x8824 <memcpy+0x6>
    882e:	08 95       	ret

00008830 <memset>:
    8830:	dc 01       	movw	r26, r24
    8832:	01 c0       	rjmp	.+2      	; 0x8836 <memset+0x6>
    8834:	6d 93       	st	X+, r22
    8836:	41 50       	subi	r20, 0x01	; 1
    8838:	50 40       	sbci	r21, 0x00	; 0
    883a:	e0 f7       	brcc	.-8      	; 0x8834 <memset+0x4>
    883c:	08 95       	ret

0000883e <strcasestr>:
    883e:	fb 01       	movw	r30, r22
    8840:	51 91       	ld	r21, Z+
    8842:	55 23       	and	r21, r21
    8844:	b1 f0       	breq	.+44     	; 0x8872 <strcasestr+0x34>
    8846:	bf 01       	movw	r22, r30
    8848:	dc 01       	movw	r26, r24
    884a:	05 2e       	mov	r0, r21
    884c:	4d 91       	ld	r20, X+
    884e:	44 23       	and	r20, r20
    8850:	69 f0       	breq	.+26     	; 0x886c <strcasestr+0x2e>
    8852:	10 d0       	rcall	.+32     	; 0x8874 <strcasestr+0x36>
    8854:	d9 f7       	brne	.-10     	; 0x884c <strcasestr+0xe>
    8856:	cd 01       	movw	r24, r26
    8858:	01 90       	ld	r0, Z+
    885a:	00 20       	and	r0, r0
    885c:	49 f0       	breq	.+18     	; 0x8870 <strcasestr+0x32>
    885e:	4d 91       	ld	r20, X+
    8860:	41 11       	cpse	r20, r1
    8862:	08 d0       	rcall	.+16     	; 0x8874 <strcasestr+0x36>
    8864:	c9 f3       	breq	.-14     	; 0x8858 <strcasestr+0x1a>
    8866:	fb 01       	movw	r30, r22
    8868:	41 11       	cpse	r20, r1
    886a:	ee cf       	rjmp	.-36     	; 0x8848 <strcasestr+0xa>
    886c:	81 e0       	ldi	r24, 0x01	; 1
    886e:	90 e0       	ldi	r25, 0x00	; 0
    8870:	01 97       	sbiw	r24, 0x01	; 1
    8872:	08 95       	ret
    8874:	40 25       	eor	r20, r0
    8876:	39 f0       	breq	.+14     	; 0x8886 <strcasestr+0x48>
    8878:	40 32       	cpi	r20, 0x20	; 32
    887a:	29 f4       	brne	.+10     	; 0x8886 <strcasestr+0x48>
    887c:	40 29       	or	r20, r0
    887e:	4b 57       	subi	r20, 0x7B	; 123
    8880:	46 5e       	subi	r20, 0xE6	; 230
    8882:	08 f0       	brcs	.+2      	; 0x8886 <strcasestr+0x48>
    8884:	18 94       	sez
    8886:	08 95       	ret

00008888 <strcat>:
    8888:	fb 01       	movw	r30, r22
    888a:	dc 01       	movw	r26, r24
    888c:	0d 90       	ld	r0, X+
    888e:	00 20       	and	r0, r0
    8890:	e9 f7       	brne	.-6      	; 0x888c <strcat+0x4>
    8892:	11 97       	sbiw	r26, 0x01	; 1
    8894:	01 90       	ld	r0, Z+
    8896:	0d 92       	st	X+, r0
    8898:	00 20       	and	r0, r0
    889a:	e1 f7       	brne	.-8      	; 0x8894 <strcat+0xc>
    889c:	08 95       	ret

0000889e <strcpy>:
    889e:	fb 01       	movw	r30, r22
    88a0:	dc 01       	movw	r26, r24
    88a2:	01 90       	ld	r0, Z+
    88a4:	0d 92       	st	X+, r0
    88a6:	00 20       	and	r0, r0
    88a8:	e1 f7       	brne	.-8      	; 0x88a2 <strcpy+0x4>
    88aa:	08 95       	ret

000088ac <strncasecmp>:
    88ac:	fb 01       	movw	r30, r22
    88ae:	dc 01       	movw	r26, r24
    88b0:	41 50       	subi	r20, 0x01	; 1
    88b2:	50 40       	sbci	r21, 0x00	; 0
    88b4:	88 f0       	brcs	.+34     	; 0x88d8 <strncasecmp+0x2c>
    88b6:	8d 91       	ld	r24, X+
    88b8:	81 34       	cpi	r24, 0x41	; 65
    88ba:	1c f0       	brlt	.+6      	; 0x88c2 <strncasecmp+0x16>
    88bc:	8b 35       	cpi	r24, 0x5B	; 91
    88be:	0c f4       	brge	.+2      	; 0x88c2 <strncasecmp+0x16>
    88c0:	80 5e       	subi	r24, 0xE0	; 224
    88c2:	61 91       	ld	r22, Z+
    88c4:	61 34       	cpi	r22, 0x41	; 65
    88c6:	1c f0       	brlt	.+6      	; 0x88ce <strncasecmp+0x22>
    88c8:	6b 35       	cpi	r22, 0x5B	; 91
    88ca:	0c f4       	brge	.+2      	; 0x88ce <strncasecmp+0x22>
    88cc:	60 5e       	subi	r22, 0xE0	; 224
    88ce:	86 1b       	sub	r24, r22
    88d0:	61 11       	cpse	r22, r1
    88d2:	71 f3       	breq	.-36     	; 0x88b0 <strncasecmp+0x4>
    88d4:	99 0b       	sbc	r25, r25
    88d6:	08 95       	ret
    88d8:	88 1b       	sub	r24, r24
    88da:	fc cf       	rjmp	.-8      	; 0x88d4 <strncasecmp+0x28>

000088dc <printf>:
    88dc:	cf 93       	push	r28
    88de:	df 93       	push	r29
    88e0:	cd b7       	in	r28, 0x3d	; 61
    88e2:	de b7       	in	r29, 0x3e	; 62
    88e4:	ae 01       	movw	r20, r28
    88e6:	4a 5f       	subi	r20, 0xFA	; 250
    88e8:	5f 4f       	sbci	r21, 0xFF	; 255
    88ea:	fa 01       	movw	r30, r20
    88ec:	61 91       	ld	r22, Z+
    88ee:	71 91       	ld	r23, Z+
    88f0:	af 01       	movw	r20, r30
    88f2:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <__iob+0x2>
    88f6:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <__iob+0x3>
    88fa:	61 d0       	rcall	.+194    	; 0x89be <vfprintf>
    88fc:	df 91       	pop	r29
    88fe:	cf 91       	pop	r28
    8900:	08 95       	ret

00008902 <puts>:
    8902:	0f 93       	push	r16
    8904:	1f 93       	push	r17
    8906:	cf 93       	push	r28
    8908:	df 93       	push	r29
    890a:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <__iob+0x2>
    890e:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <__iob+0x3>
    8912:	23 81       	ldd	r18, Z+3	; 0x03
    8914:	21 ff       	sbrs	r18, 1
    8916:	1b c0       	rjmp	.+54     	; 0x894e <puts+0x4c>
    8918:	8c 01       	movw	r16, r24
    891a:	d0 e0       	ldi	r29, 0x00	; 0
    891c:	c0 e0       	ldi	r28, 0x00	; 0
    891e:	f8 01       	movw	r30, r16
    8920:	81 91       	ld	r24, Z+
    8922:	8f 01       	movw	r16, r30
    8924:	60 91 42 18 	lds	r22, 0x1842	; 0x801842 <__iob+0x2>
    8928:	70 91 43 18 	lds	r23, 0x1843	; 0x801843 <__iob+0x3>
    892c:	db 01       	movw	r26, r22
    892e:	18 96       	adiw	r26, 0x08	; 8
    8930:	ed 91       	ld	r30, X+
    8932:	fc 91       	ld	r31, X
    8934:	19 97       	sbiw	r26, 0x09	; 9
    8936:	88 23       	and	r24, r24
    8938:	31 f0       	breq	.+12     	; 0x8946 <puts+0x44>
    893a:	19 95       	eicall
    893c:	89 2b       	or	r24, r25
    893e:	79 f3       	breq	.-34     	; 0x891e <puts+0x1c>
    8940:	df ef       	ldi	r29, 0xFF	; 255
    8942:	cf ef       	ldi	r28, 0xFF	; 255
    8944:	ec cf       	rjmp	.-40     	; 0x891e <puts+0x1c>
    8946:	8a e0       	ldi	r24, 0x0A	; 10
    8948:	19 95       	eicall
    894a:	89 2b       	or	r24, r25
    894c:	19 f0       	breq	.+6      	; 0x8954 <puts+0x52>
    894e:	8f ef       	ldi	r24, 0xFF	; 255
    8950:	9f ef       	ldi	r25, 0xFF	; 255
    8952:	02 c0       	rjmp	.+4      	; 0x8958 <puts+0x56>
    8954:	8d 2f       	mov	r24, r29
    8956:	9c 2f       	mov	r25, r28
    8958:	df 91       	pop	r29
    895a:	cf 91       	pop	r28
    895c:	1f 91       	pop	r17
    895e:	0f 91       	pop	r16
    8960:	08 95       	ret

00008962 <sprintf>:
    8962:	0f 93       	push	r16
    8964:	1f 93       	push	r17
    8966:	cf 93       	push	r28
    8968:	df 93       	push	r29
    896a:	cd b7       	in	r28, 0x3d	; 61
    896c:	de b7       	in	r29, 0x3e	; 62
    896e:	2e 97       	sbiw	r28, 0x0e	; 14
    8970:	0f b6       	in	r0, 0x3f	; 63
    8972:	f8 94       	cli
    8974:	de bf       	out	0x3e, r29	; 62
    8976:	0f be       	out	0x3f, r0	; 63
    8978:	cd bf       	out	0x3d, r28	; 61
    897a:	0e 89       	ldd	r16, Y+22	; 0x16
    897c:	1f 89       	ldd	r17, Y+23	; 0x17
    897e:	86 e0       	ldi	r24, 0x06	; 6
    8980:	8c 83       	std	Y+4, r24	; 0x04
    8982:	1a 83       	std	Y+2, r17	; 0x02
    8984:	09 83       	std	Y+1, r16	; 0x01
    8986:	8f ef       	ldi	r24, 0xFF	; 255
    8988:	9f e7       	ldi	r25, 0x7F	; 127
    898a:	9e 83       	std	Y+6, r25	; 0x06
    898c:	8d 83       	std	Y+5, r24	; 0x05
    898e:	ae 01       	movw	r20, r28
    8990:	46 5e       	subi	r20, 0xE6	; 230
    8992:	5f 4f       	sbci	r21, 0xFF	; 255
    8994:	68 8d       	ldd	r22, Y+24	; 0x18
    8996:	79 8d       	ldd	r23, Y+25	; 0x19
    8998:	ce 01       	movw	r24, r28
    899a:	01 96       	adiw	r24, 0x01	; 1
    899c:	10 d0       	rcall	.+32     	; 0x89be <vfprintf>
    899e:	ef 81       	ldd	r30, Y+7	; 0x07
    89a0:	f8 85       	ldd	r31, Y+8	; 0x08
    89a2:	e0 0f       	add	r30, r16
    89a4:	f1 1f       	adc	r31, r17
    89a6:	10 82       	st	Z, r1
    89a8:	2e 96       	adiw	r28, 0x0e	; 14
    89aa:	0f b6       	in	r0, 0x3f	; 63
    89ac:	f8 94       	cli
    89ae:	de bf       	out	0x3e, r29	; 62
    89b0:	0f be       	out	0x3f, r0	; 63
    89b2:	cd bf       	out	0x3d, r28	; 61
    89b4:	df 91       	pop	r29
    89b6:	cf 91       	pop	r28
    89b8:	1f 91       	pop	r17
    89ba:	0f 91       	pop	r16
    89bc:	08 95       	ret

000089be <vfprintf>:
    89be:	2f 92       	push	r2
    89c0:	3f 92       	push	r3
    89c2:	4f 92       	push	r4
    89c4:	5f 92       	push	r5
    89c6:	6f 92       	push	r6
    89c8:	7f 92       	push	r7
    89ca:	8f 92       	push	r8
    89cc:	9f 92       	push	r9
    89ce:	af 92       	push	r10
    89d0:	bf 92       	push	r11
    89d2:	cf 92       	push	r12
    89d4:	df 92       	push	r13
    89d6:	ef 92       	push	r14
    89d8:	ff 92       	push	r15
    89da:	0f 93       	push	r16
    89dc:	1f 93       	push	r17
    89de:	cf 93       	push	r28
    89e0:	df 93       	push	r29
    89e2:	cd b7       	in	r28, 0x3d	; 61
    89e4:	de b7       	in	r29, 0x3e	; 62
    89e6:	2b 97       	sbiw	r28, 0x0b	; 11
    89e8:	0f b6       	in	r0, 0x3f	; 63
    89ea:	f8 94       	cli
    89ec:	de bf       	out	0x3e, r29	; 62
    89ee:	0f be       	out	0x3f, r0	; 63
    89f0:	cd bf       	out	0x3d, r28	; 61
    89f2:	6c 01       	movw	r12, r24
    89f4:	7b 01       	movw	r14, r22
    89f6:	8a 01       	movw	r16, r20
    89f8:	fc 01       	movw	r30, r24
    89fa:	17 82       	std	Z+7, r1	; 0x07
    89fc:	16 82       	std	Z+6, r1	; 0x06
    89fe:	83 81       	ldd	r24, Z+3	; 0x03
    8a00:	81 ff       	sbrs	r24, 1
    8a02:	bf c1       	rjmp	.+894    	; 0x8d82 <vfprintf+0x3c4>
    8a04:	ce 01       	movw	r24, r28
    8a06:	01 96       	adiw	r24, 0x01	; 1
    8a08:	3c 01       	movw	r6, r24
    8a0a:	f6 01       	movw	r30, r12
    8a0c:	93 81       	ldd	r25, Z+3	; 0x03
    8a0e:	f7 01       	movw	r30, r14
    8a10:	93 fd       	sbrc	r25, 3
    8a12:	85 91       	lpm	r24, Z+
    8a14:	93 ff       	sbrs	r25, 3
    8a16:	81 91       	ld	r24, Z+
    8a18:	7f 01       	movw	r14, r30
    8a1a:	88 23       	and	r24, r24
    8a1c:	09 f4       	brne	.+2      	; 0x8a20 <vfprintf+0x62>
    8a1e:	ad c1       	rjmp	.+858    	; 0x8d7a <vfprintf+0x3bc>
    8a20:	85 32       	cpi	r24, 0x25	; 37
    8a22:	39 f4       	brne	.+14     	; 0x8a32 <vfprintf+0x74>
    8a24:	93 fd       	sbrc	r25, 3
    8a26:	85 91       	lpm	r24, Z+
    8a28:	93 ff       	sbrs	r25, 3
    8a2a:	81 91       	ld	r24, Z+
    8a2c:	7f 01       	movw	r14, r30
    8a2e:	85 32       	cpi	r24, 0x25	; 37
    8a30:	21 f4       	brne	.+8      	; 0x8a3a <vfprintf+0x7c>
    8a32:	b6 01       	movw	r22, r12
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	d6 d1       	rcall	.+940    	; 0x8de4 <fputc>
    8a38:	e8 cf       	rjmp	.-48     	; 0x8a0a <vfprintf+0x4c>
    8a3a:	91 2c       	mov	r9, r1
    8a3c:	21 2c       	mov	r2, r1
    8a3e:	31 2c       	mov	r3, r1
    8a40:	ff e1       	ldi	r31, 0x1F	; 31
    8a42:	f3 15       	cp	r31, r3
    8a44:	d8 f0       	brcs	.+54     	; 0x8a7c <vfprintf+0xbe>
    8a46:	8b 32       	cpi	r24, 0x2B	; 43
    8a48:	79 f0       	breq	.+30     	; 0x8a68 <vfprintf+0xaa>
    8a4a:	38 f4       	brcc	.+14     	; 0x8a5a <vfprintf+0x9c>
    8a4c:	80 32       	cpi	r24, 0x20	; 32
    8a4e:	79 f0       	breq	.+30     	; 0x8a6e <vfprintf+0xb0>
    8a50:	83 32       	cpi	r24, 0x23	; 35
    8a52:	a1 f4       	brne	.+40     	; 0x8a7c <vfprintf+0xbe>
    8a54:	23 2d       	mov	r18, r3
    8a56:	20 61       	ori	r18, 0x10	; 16
    8a58:	1d c0       	rjmp	.+58     	; 0x8a94 <vfprintf+0xd6>
    8a5a:	8d 32       	cpi	r24, 0x2D	; 45
    8a5c:	61 f0       	breq	.+24     	; 0x8a76 <vfprintf+0xb8>
    8a5e:	80 33       	cpi	r24, 0x30	; 48
    8a60:	69 f4       	brne	.+26     	; 0x8a7c <vfprintf+0xbe>
    8a62:	23 2d       	mov	r18, r3
    8a64:	21 60       	ori	r18, 0x01	; 1
    8a66:	16 c0       	rjmp	.+44     	; 0x8a94 <vfprintf+0xd6>
    8a68:	83 2d       	mov	r24, r3
    8a6a:	82 60       	ori	r24, 0x02	; 2
    8a6c:	38 2e       	mov	r3, r24
    8a6e:	e3 2d       	mov	r30, r3
    8a70:	e4 60       	ori	r30, 0x04	; 4
    8a72:	3e 2e       	mov	r3, r30
    8a74:	2a c0       	rjmp	.+84     	; 0x8aca <vfprintf+0x10c>
    8a76:	f3 2d       	mov	r31, r3
    8a78:	f8 60       	ori	r31, 0x08	; 8
    8a7a:	1d c0       	rjmp	.+58     	; 0x8ab6 <vfprintf+0xf8>
    8a7c:	37 fc       	sbrc	r3, 7
    8a7e:	2d c0       	rjmp	.+90     	; 0x8ada <vfprintf+0x11c>
    8a80:	20 ed       	ldi	r18, 0xD0	; 208
    8a82:	28 0f       	add	r18, r24
    8a84:	2a 30       	cpi	r18, 0x0A	; 10
    8a86:	40 f0       	brcs	.+16     	; 0x8a98 <vfprintf+0xda>
    8a88:	8e 32       	cpi	r24, 0x2E	; 46
    8a8a:	b9 f4       	brne	.+46     	; 0x8aba <vfprintf+0xfc>
    8a8c:	36 fc       	sbrc	r3, 6
    8a8e:	75 c1       	rjmp	.+746    	; 0x8d7a <vfprintf+0x3bc>
    8a90:	23 2d       	mov	r18, r3
    8a92:	20 64       	ori	r18, 0x40	; 64
    8a94:	32 2e       	mov	r3, r18
    8a96:	19 c0       	rjmp	.+50     	; 0x8aca <vfprintf+0x10c>
    8a98:	36 fe       	sbrs	r3, 6
    8a9a:	06 c0       	rjmp	.+12     	; 0x8aa8 <vfprintf+0xea>
    8a9c:	8a e0       	ldi	r24, 0x0A	; 10
    8a9e:	98 9e       	mul	r9, r24
    8aa0:	20 0d       	add	r18, r0
    8aa2:	11 24       	eor	r1, r1
    8aa4:	92 2e       	mov	r9, r18
    8aa6:	11 c0       	rjmp	.+34     	; 0x8aca <vfprintf+0x10c>
    8aa8:	ea e0       	ldi	r30, 0x0A	; 10
    8aaa:	2e 9e       	mul	r2, r30
    8aac:	20 0d       	add	r18, r0
    8aae:	11 24       	eor	r1, r1
    8ab0:	22 2e       	mov	r2, r18
    8ab2:	f3 2d       	mov	r31, r3
    8ab4:	f0 62       	ori	r31, 0x20	; 32
    8ab6:	3f 2e       	mov	r3, r31
    8ab8:	08 c0       	rjmp	.+16     	; 0x8aca <vfprintf+0x10c>
    8aba:	8c 36       	cpi	r24, 0x6C	; 108
    8abc:	21 f4       	brne	.+8      	; 0x8ac6 <vfprintf+0x108>
    8abe:	83 2d       	mov	r24, r3
    8ac0:	80 68       	ori	r24, 0x80	; 128
    8ac2:	38 2e       	mov	r3, r24
    8ac4:	02 c0       	rjmp	.+4      	; 0x8aca <vfprintf+0x10c>
    8ac6:	88 36       	cpi	r24, 0x68	; 104
    8ac8:	41 f4       	brne	.+16     	; 0x8ada <vfprintf+0x11c>
    8aca:	f7 01       	movw	r30, r14
    8acc:	93 fd       	sbrc	r25, 3
    8ace:	85 91       	lpm	r24, Z+
    8ad0:	93 ff       	sbrs	r25, 3
    8ad2:	81 91       	ld	r24, Z+
    8ad4:	7f 01       	movw	r14, r30
    8ad6:	81 11       	cpse	r24, r1
    8ad8:	b3 cf       	rjmp	.-154    	; 0x8a40 <vfprintf+0x82>
    8ada:	98 2f       	mov	r25, r24
    8adc:	9f 7d       	andi	r25, 0xDF	; 223
    8ade:	95 54       	subi	r25, 0x45	; 69
    8ae0:	93 30       	cpi	r25, 0x03	; 3
    8ae2:	28 f4       	brcc	.+10     	; 0x8aee <vfprintf+0x130>
    8ae4:	0c 5f       	subi	r16, 0xFC	; 252
    8ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    8ae8:	9f e3       	ldi	r25, 0x3F	; 63
    8aea:	99 83       	std	Y+1, r25	; 0x01
    8aec:	0d c0       	rjmp	.+26     	; 0x8b08 <vfprintf+0x14a>
    8aee:	83 36       	cpi	r24, 0x63	; 99
    8af0:	31 f0       	breq	.+12     	; 0x8afe <vfprintf+0x140>
    8af2:	83 37       	cpi	r24, 0x73	; 115
    8af4:	71 f0       	breq	.+28     	; 0x8b12 <vfprintf+0x154>
    8af6:	83 35       	cpi	r24, 0x53	; 83
    8af8:	09 f0       	breq	.+2      	; 0x8afc <vfprintf+0x13e>
    8afa:	55 c0       	rjmp	.+170    	; 0x8ba6 <vfprintf+0x1e8>
    8afc:	20 c0       	rjmp	.+64     	; 0x8b3e <vfprintf+0x180>
    8afe:	f8 01       	movw	r30, r16
    8b00:	80 81       	ld	r24, Z
    8b02:	89 83       	std	Y+1, r24	; 0x01
    8b04:	0e 5f       	subi	r16, 0xFE	; 254
    8b06:	1f 4f       	sbci	r17, 0xFF	; 255
    8b08:	88 24       	eor	r8, r8
    8b0a:	83 94       	inc	r8
    8b0c:	91 2c       	mov	r9, r1
    8b0e:	53 01       	movw	r10, r6
    8b10:	12 c0       	rjmp	.+36     	; 0x8b36 <vfprintf+0x178>
    8b12:	28 01       	movw	r4, r16
    8b14:	f2 e0       	ldi	r31, 0x02	; 2
    8b16:	4f 0e       	add	r4, r31
    8b18:	51 1c       	adc	r5, r1
    8b1a:	f8 01       	movw	r30, r16
    8b1c:	a0 80       	ld	r10, Z
    8b1e:	b1 80       	ldd	r11, Z+1	; 0x01
    8b20:	36 fe       	sbrs	r3, 6
    8b22:	03 c0       	rjmp	.+6      	; 0x8b2a <vfprintf+0x16c>
    8b24:	69 2d       	mov	r22, r9
    8b26:	70 e0       	ldi	r23, 0x00	; 0
    8b28:	02 c0       	rjmp	.+4      	; 0x8b2e <vfprintf+0x170>
    8b2a:	6f ef       	ldi	r22, 0xFF	; 255
    8b2c:	7f ef       	ldi	r23, 0xFF	; 255
    8b2e:	c5 01       	movw	r24, r10
    8b30:	4e d1       	rcall	.+668    	; 0x8dce <strnlen>
    8b32:	4c 01       	movw	r8, r24
    8b34:	82 01       	movw	r16, r4
    8b36:	f3 2d       	mov	r31, r3
    8b38:	ff 77       	andi	r31, 0x7F	; 127
    8b3a:	3f 2e       	mov	r3, r31
    8b3c:	15 c0       	rjmp	.+42     	; 0x8b68 <vfprintf+0x1aa>
    8b3e:	28 01       	movw	r4, r16
    8b40:	22 e0       	ldi	r18, 0x02	; 2
    8b42:	42 0e       	add	r4, r18
    8b44:	51 1c       	adc	r5, r1
    8b46:	f8 01       	movw	r30, r16
    8b48:	a0 80       	ld	r10, Z
    8b4a:	b1 80       	ldd	r11, Z+1	; 0x01
    8b4c:	36 fe       	sbrs	r3, 6
    8b4e:	03 c0       	rjmp	.+6      	; 0x8b56 <vfprintf+0x198>
    8b50:	69 2d       	mov	r22, r9
    8b52:	70 e0       	ldi	r23, 0x00	; 0
    8b54:	02 c0       	rjmp	.+4      	; 0x8b5a <vfprintf+0x19c>
    8b56:	6f ef       	ldi	r22, 0xFF	; 255
    8b58:	7f ef       	ldi	r23, 0xFF	; 255
    8b5a:	c5 01       	movw	r24, r10
    8b5c:	2d d1       	rcall	.+602    	; 0x8db8 <strnlen_P>
    8b5e:	4c 01       	movw	r8, r24
    8b60:	f3 2d       	mov	r31, r3
    8b62:	f0 68       	ori	r31, 0x80	; 128
    8b64:	3f 2e       	mov	r3, r31
    8b66:	82 01       	movw	r16, r4
    8b68:	33 fc       	sbrc	r3, 3
    8b6a:	19 c0       	rjmp	.+50     	; 0x8b9e <vfprintf+0x1e0>
    8b6c:	82 2d       	mov	r24, r2
    8b6e:	90 e0       	ldi	r25, 0x00	; 0
    8b70:	88 16       	cp	r8, r24
    8b72:	99 06       	cpc	r9, r25
    8b74:	a0 f4       	brcc	.+40     	; 0x8b9e <vfprintf+0x1e0>
    8b76:	b6 01       	movw	r22, r12
    8b78:	80 e2       	ldi	r24, 0x20	; 32
    8b7a:	90 e0       	ldi	r25, 0x00	; 0
    8b7c:	33 d1       	rcall	.+614    	; 0x8de4 <fputc>
    8b7e:	2a 94       	dec	r2
    8b80:	f5 cf       	rjmp	.-22     	; 0x8b6c <vfprintf+0x1ae>
    8b82:	f5 01       	movw	r30, r10
    8b84:	37 fc       	sbrc	r3, 7
    8b86:	85 91       	lpm	r24, Z+
    8b88:	37 fe       	sbrs	r3, 7
    8b8a:	81 91       	ld	r24, Z+
    8b8c:	5f 01       	movw	r10, r30
    8b8e:	b6 01       	movw	r22, r12
    8b90:	90 e0       	ldi	r25, 0x00	; 0
    8b92:	28 d1       	rcall	.+592    	; 0x8de4 <fputc>
    8b94:	21 10       	cpse	r2, r1
    8b96:	2a 94       	dec	r2
    8b98:	21 e0       	ldi	r18, 0x01	; 1
    8b9a:	82 1a       	sub	r8, r18
    8b9c:	91 08       	sbc	r9, r1
    8b9e:	81 14       	cp	r8, r1
    8ba0:	91 04       	cpc	r9, r1
    8ba2:	79 f7       	brne	.-34     	; 0x8b82 <vfprintf+0x1c4>
    8ba4:	e1 c0       	rjmp	.+450    	; 0x8d68 <vfprintf+0x3aa>
    8ba6:	84 36       	cpi	r24, 0x64	; 100
    8ba8:	11 f0       	breq	.+4      	; 0x8bae <vfprintf+0x1f0>
    8baa:	89 36       	cpi	r24, 0x69	; 105
    8bac:	39 f5       	brne	.+78     	; 0x8bfc <vfprintf+0x23e>
    8bae:	f8 01       	movw	r30, r16
    8bb0:	37 fe       	sbrs	r3, 7
    8bb2:	07 c0       	rjmp	.+14     	; 0x8bc2 <vfprintf+0x204>
    8bb4:	60 81       	ld	r22, Z
    8bb6:	71 81       	ldd	r23, Z+1	; 0x01
    8bb8:	82 81       	ldd	r24, Z+2	; 0x02
    8bba:	93 81       	ldd	r25, Z+3	; 0x03
    8bbc:	0c 5f       	subi	r16, 0xFC	; 252
    8bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    8bc0:	08 c0       	rjmp	.+16     	; 0x8bd2 <vfprintf+0x214>
    8bc2:	60 81       	ld	r22, Z
    8bc4:	71 81       	ldd	r23, Z+1	; 0x01
    8bc6:	07 2e       	mov	r0, r23
    8bc8:	00 0c       	add	r0, r0
    8bca:	88 0b       	sbc	r24, r24
    8bcc:	99 0b       	sbc	r25, r25
    8bce:	0e 5f       	subi	r16, 0xFE	; 254
    8bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    8bd2:	f3 2d       	mov	r31, r3
    8bd4:	ff 76       	andi	r31, 0x6F	; 111
    8bd6:	3f 2e       	mov	r3, r31
    8bd8:	97 ff       	sbrs	r25, 7
    8bda:	09 c0       	rjmp	.+18     	; 0x8bee <vfprintf+0x230>
    8bdc:	90 95       	com	r25
    8bde:	80 95       	com	r24
    8be0:	70 95       	com	r23
    8be2:	61 95       	neg	r22
    8be4:	7f 4f       	sbci	r23, 0xFF	; 255
    8be6:	8f 4f       	sbci	r24, 0xFF	; 255
    8be8:	9f 4f       	sbci	r25, 0xFF	; 255
    8bea:	f0 68       	ori	r31, 0x80	; 128
    8bec:	3f 2e       	mov	r3, r31
    8bee:	2a e0       	ldi	r18, 0x0A	; 10
    8bf0:	30 e0       	ldi	r19, 0x00	; 0
    8bf2:	a3 01       	movw	r20, r6
    8bf4:	33 d1       	rcall	.+614    	; 0x8e5c <__ultoa_invert>
    8bf6:	88 2e       	mov	r8, r24
    8bf8:	86 18       	sub	r8, r6
    8bfa:	44 c0       	rjmp	.+136    	; 0x8c84 <vfprintf+0x2c6>
    8bfc:	85 37       	cpi	r24, 0x75	; 117
    8bfe:	31 f4       	brne	.+12     	; 0x8c0c <vfprintf+0x24e>
    8c00:	23 2d       	mov	r18, r3
    8c02:	2f 7e       	andi	r18, 0xEF	; 239
    8c04:	b2 2e       	mov	r11, r18
    8c06:	2a e0       	ldi	r18, 0x0A	; 10
    8c08:	30 e0       	ldi	r19, 0x00	; 0
    8c0a:	25 c0       	rjmp	.+74     	; 0x8c56 <vfprintf+0x298>
    8c0c:	93 2d       	mov	r25, r3
    8c0e:	99 7f       	andi	r25, 0xF9	; 249
    8c10:	b9 2e       	mov	r11, r25
    8c12:	8f 36       	cpi	r24, 0x6F	; 111
    8c14:	c1 f0       	breq	.+48     	; 0x8c46 <vfprintf+0x288>
    8c16:	18 f4       	brcc	.+6      	; 0x8c1e <vfprintf+0x260>
    8c18:	88 35       	cpi	r24, 0x58	; 88
    8c1a:	79 f0       	breq	.+30     	; 0x8c3a <vfprintf+0x27c>
    8c1c:	ae c0       	rjmp	.+348    	; 0x8d7a <vfprintf+0x3bc>
    8c1e:	80 37       	cpi	r24, 0x70	; 112
    8c20:	19 f0       	breq	.+6      	; 0x8c28 <vfprintf+0x26a>
    8c22:	88 37       	cpi	r24, 0x78	; 120
    8c24:	21 f0       	breq	.+8      	; 0x8c2e <vfprintf+0x270>
    8c26:	a9 c0       	rjmp	.+338    	; 0x8d7a <vfprintf+0x3bc>
    8c28:	e9 2f       	mov	r30, r25
    8c2a:	e0 61       	ori	r30, 0x10	; 16
    8c2c:	be 2e       	mov	r11, r30
    8c2e:	b4 fe       	sbrs	r11, 4
    8c30:	0d c0       	rjmp	.+26     	; 0x8c4c <vfprintf+0x28e>
    8c32:	fb 2d       	mov	r31, r11
    8c34:	f4 60       	ori	r31, 0x04	; 4
    8c36:	bf 2e       	mov	r11, r31
    8c38:	09 c0       	rjmp	.+18     	; 0x8c4c <vfprintf+0x28e>
    8c3a:	34 fe       	sbrs	r3, 4
    8c3c:	0a c0       	rjmp	.+20     	; 0x8c52 <vfprintf+0x294>
    8c3e:	29 2f       	mov	r18, r25
    8c40:	26 60       	ori	r18, 0x06	; 6
    8c42:	b2 2e       	mov	r11, r18
    8c44:	06 c0       	rjmp	.+12     	; 0x8c52 <vfprintf+0x294>
    8c46:	28 e0       	ldi	r18, 0x08	; 8
    8c48:	30 e0       	ldi	r19, 0x00	; 0
    8c4a:	05 c0       	rjmp	.+10     	; 0x8c56 <vfprintf+0x298>
    8c4c:	20 e1       	ldi	r18, 0x10	; 16
    8c4e:	30 e0       	ldi	r19, 0x00	; 0
    8c50:	02 c0       	rjmp	.+4      	; 0x8c56 <vfprintf+0x298>
    8c52:	20 e1       	ldi	r18, 0x10	; 16
    8c54:	32 e0       	ldi	r19, 0x02	; 2
    8c56:	f8 01       	movw	r30, r16
    8c58:	b7 fe       	sbrs	r11, 7
    8c5a:	07 c0       	rjmp	.+14     	; 0x8c6a <vfprintf+0x2ac>
    8c5c:	60 81       	ld	r22, Z
    8c5e:	71 81       	ldd	r23, Z+1	; 0x01
    8c60:	82 81       	ldd	r24, Z+2	; 0x02
    8c62:	93 81       	ldd	r25, Z+3	; 0x03
    8c64:	0c 5f       	subi	r16, 0xFC	; 252
    8c66:	1f 4f       	sbci	r17, 0xFF	; 255
    8c68:	06 c0       	rjmp	.+12     	; 0x8c76 <vfprintf+0x2b8>
    8c6a:	60 81       	ld	r22, Z
    8c6c:	71 81       	ldd	r23, Z+1	; 0x01
    8c6e:	80 e0       	ldi	r24, 0x00	; 0
    8c70:	90 e0       	ldi	r25, 0x00	; 0
    8c72:	0e 5f       	subi	r16, 0xFE	; 254
    8c74:	1f 4f       	sbci	r17, 0xFF	; 255
    8c76:	a3 01       	movw	r20, r6
    8c78:	f1 d0       	rcall	.+482    	; 0x8e5c <__ultoa_invert>
    8c7a:	88 2e       	mov	r8, r24
    8c7c:	86 18       	sub	r8, r6
    8c7e:	fb 2d       	mov	r31, r11
    8c80:	ff 77       	andi	r31, 0x7F	; 127
    8c82:	3f 2e       	mov	r3, r31
    8c84:	36 fe       	sbrs	r3, 6
    8c86:	0d c0       	rjmp	.+26     	; 0x8ca2 <vfprintf+0x2e4>
    8c88:	23 2d       	mov	r18, r3
    8c8a:	2e 7f       	andi	r18, 0xFE	; 254
    8c8c:	a2 2e       	mov	r10, r18
    8c8e:	89 14       	cp	r8, r9
    8c90:	58 f4       	brcc	.+22     	; 0x8ca8 <vfprintf+0x2ea>
    8c92:	34 fe       	sbrs	r3, 4
    8c94:	0b c0       	rjmp	.+22     	; 0x8cac <vfprintf+0x2ee>
    8c96:	32 fc       	sbrc	r3, 2
    8c98:	09 c0       	rjmp	.+18     	; 0x8cac <vfprintf+0x2ee>
    8c9a:	83 2d       	mov	r24, r3
    8c9c:	8e 7e       	andi	r24, 0xEE	; 238
    8c9e:	a8 2e       	mov	r10, r24
    8ca0:	05 c0       	rjmp	.+10     	; 0x8cac <vfprintf+0x2ee>
    8ca2:	b8 2c       	mov	r11, r8
    8ca4:	a3 2c       	mov	r10, r3
    8ca6:	03 c0       	rjmp	.+6      	; 0x8cae <vfprintf+0x2f0>
    8ca8:	b8 2c       	mov	r11, r8
    8caa:	01 c0       	rjmp	.+2      	; 0x8cae <vfprintf+0x2f0>
    8cac:	b9 2c       	mov	r11, r9
    8cae:	a4 fe       	sbrs	r10, 4
    8cb0:	0f c0       	rjmp	.+30     	; 0x8cd0 <vfprintf+0x312>
    8cb2:	fe 01       	movw	r30, r28
    8cb4:	e8 0d       	add	r30, r8
    8cb6:	f1 1d       	adc	r31, r1
    8cb8:	80 81       	ld	r24, Z
    8cba:	80 33       	cpi	r24, 0x30	; 48
    8cbc:	21 f4       	brne	.+8      	; 0x8cc6 <vfprintf+0x308>
    8cbe:	9a 2d       	mov	r25, r10
    8cc0:	99 7e       	andi	r25, 0xE9	; 233
    8cc2:	a9 2e       	mov	r10, r25
    8cc4:	09 c0       	rjmp	.+18     	; 0x8cd8 <vfprintf+0x31a>
    8cc6:	a2 fe       	sbrs	r10, 2
    8cc8:	06 c0       	rjmp	.+12     	; 0x8cd6 <vfprintf+0x318>
    8cca:	b3 94       	inc	r11
    8ccc:	b3 94       	inc	r11
    8cce:	04 c0       	rjmp	.+8      	; 0x8cd8 <vfprintf+0x31a>
    8cd0:	8a 2d       	mov	r24, r10
    8cd2:	86 78       	andi	r24, 0x86	; 134
    8cd4:	09 f0       	breq	.+2      	; 0x8cd8 <vfprintf+0x31a>
    8cd6:	b3 94       	inc	r11
    8cd8:	a3 fc       	sbrc	r10, 3
    8cda:	10 c0       	rjmp	.+32     	; 0x8cfc <vfprintf+0x33e>
    8cdc:	a0 fe       	sbrs	r10, 0
    8cde:	06 c0       	rjmp	.+12     	; 0x8cec <vfprintf+0x32e>
    8ce0:	b2 14       	cp	r11, r2
    8ce2:	80 f4       	brcc	.+32     	; 0x8d04 <vfprintf+0x346>
    8ce4:	28 0c       	add	r2, r8
    8ce6:	92 2c       	mov	r9, r2
    8ce8:	9b 18       	sub	r9, r11
    8cea:	0d c0       	rjmp	.+26     	; 0x8d06 <vfprintf+0x348>
    8cec:	b2 14       	cp	r11, r2
    8cee:	58 f4       	brcc	.+22     	; 0x8d06 <vfprintf+0x348>
    8cf0:	b6 01       	movw	r22, r12
    8cf2:	80 e2       	ldi	r24, 0x20	; 32
    8cf4:	90 e0       	ldi	r25, 0x00	; 0
    8cf6:	76 d0       	rcall	.+236    	; 0x8de4 <fputc>
    8cf8:	b3 94       	inc	r11
    8cfa:	f8 cf       	rjmp	.-16     	; 0x8cec <vfprintf+0x32e>
    8cfc:	b2 14       	cp	r11, r2
    8cfe:	18 f4       	brcc	.+6      	; 0x8d06 <vfprintf+0x348>
    8d00:	2b 18       	sub	r2, r11
    8d02:	02 c0       	rjmp	.+4      	; 0x8d08 <vfprintf+0x34a>
    8d04:	98 2c       	mov	r9, r8
    8d06:	21 2c       	mov	r2, r1
    8d08:	a4 fe       	sbrs	r10, 4
    8d0a:	0f c0       	rjmp	.+30     	; 0x8d2a <vfprintf+0x36c>
    8d0c:	b6 01       	movw	r22, r12
    8d0e:	80 e3       	ldi	r24, 0x30	; 48
    8d10:	90 e0       	ldi	r25, 0x00	; 0
    8d12:	68 d0       	rcall	.+208    	; 0x8de4 <fputc>
    8d14:	a2 fe       	sbrs	r10, 2
    8d16:	16 c0       	rjmp	.+44     	; 0x8d44 <vfprintf+0x386>
    8d18:	a1 fc       	sbrc	r10, 1
    8d1a:	03 c0       	rjmp	.+6      	; 0x8d22 <vfprintf+0x364>
    8d1c:	88 e7       	ldi	r24, 0x78	; 120
    8d1e:	90 e0       	ldi	r25, 0x00	; 0
    8d20:	02 c0       	rjmp	.+4      	; 0x8d26 <vfprintf+0x368>
    8d22:	88 e5       	ldi	r24, 0x58	; 88
    8d24:	90 e0       	ldi	r25, 0x00	; 0
    8d26:	b6 01       	movw	r22, r12
    8d28:	0c c0       	rjmp	.+24     	; 0x8d42 <vfprintf+0x384>
    8d2a:	8a 2d       	mov	r24, r10
    8d2c:	86 78       	andi	r24, 0x86	; 134
    8d2e:	51 f0       	breq	.+20     	; 0x8d44 <vfprintf+0x386>
    8d30:	a1 fe       	sbrs	r10, 1
    8d32:	02 c0       	rjmp	.+4      	; 0x8d38 <vfprintf+0x37a>
    8d34:	8b e2       	ldi	r24, 0x2B	; 43
    8d36:	01 c0       	rjmp	.+2      	; 0x8d3a <vfprintf+0x37c>
    8d38:	80 e2       	ldi	r24, 0x20	; 32
    8d3a:	a7 fc       	sbrc	r10, 7
    8d3c:	8d e2       	ldi	r24, 0x2D	; 45
    8d3e:	b6 01       	movw	r22, r12
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	50 d0       	rcall	.+160    	; 0x8de4 <fputc>
    8d44:	89 14       	cp	r8, r9
    8d46:	30 f4       	brcc	.+12     	; 0x8d54 <vfprintf+0x396>
    8d48:	b6 01       	movw	r22, r12
    8d4a:	80 e3       	ldi	r24, 0x30	; 48
    8d4c:	90 e0       	ldi	r25, 0x00	; 0
    8d4e:	4a d0       	rcall	.+148    	; 0x8de4 <fputc>
    8d50:	9a 94       	dec	r9
    8d52:	f8 cf       	rjmp	.-16     	; 0x8d44 <vfprintf+0x386>
    8d54:	8a 94       	dec	r8
    8d56:	f3 01       	movw	r30, r6
    8d58:	e8 0d       	add	r30, r8
    8d5a:	f1 1d       	adc	r31, r1
    8d5c:	80 81       	ld	r24, Z
    8d5e:	b6 01       	movw	r22, r12
    8d60:	90 e0       	ldi	r25, 0x00	; 0
    8d62:	40 d0       	rcall	.+128    	; 0x8de4 <fputc>
    8d64:	81 10       	cpse	r8, r1
    8d66:	f6 cf       	rjmp	.-20     	; 0x8d54 <vfprintf+0x396>
    8d68:	22 20       	and	r2, r2
    8d6a:	09 f4       	brne	.+2      	; 0x8d6e <vfprintf+0x3b0>
    8d6c:	4e ce       	rjmp	.-868    	; 0x8a0a <vfprintf+0x4c>
    8d6e:	b6 01       	movw	r22, r12
    8d70:	80 e2       	ldi	r24, 0x20	; 32
    8d72:	90 e0       	ldi	r25, 0x00	; 0
    8d74:	37 d0       	rcall	.+110    	; 0x8de4 <fputc>
    8d76:	2a 94       	dec	r2
    8d78:	f7 cf       	rjmp	.-18     	; 0x8d68 <vfprintf+0x3aa>
    8d7a:	f6 01       	movw	r30, r12
    8d7c:	86 81       	ldd	r24, Z+6	; 0x06
    8d7e:	97 81       	ldd	r25, Z+7	; 0x07
    8d80:	02 c0       	rjmp	.+4      	; 0x8d86 <vfprintf+0x3c8>
    8d82:	8f ef       	ldi	r24, 0xFF	; 255
    8d84:	9f ef       	ldi	r25, 0xFF	; 255
    8d86:	2b 96       	adiw	r28, 0x0b	; 11
    8d88:	0f b6       	in	r0, 0x3f	; 63
    8d8a:	f8 94       	cli
    8d8c:	de bf       	out	0x3e, r29	; 62
    8d8e:	0f be       	out	0x3f, r0	; 63
    8d90:	cd bf       	out	0x3d, r28	; 61
    8d92:	df 91       	pop	r29
    8d94:	cf 91       	pop	r28
    8d96:	1f 91       	pop	r17
    8d98:	0f 91       	pop	r16
    8d9a:	ff 90       	pop	r15
    8d9c:	ef 90       	pop	r14
    8d9e:	df 90       	pop	r13
    8da0:	cf 90       	pop	r12
    8da2:	bf 90       	pop	r11
    8da4:	af 90       	pop	r10
    8da6:	9f 90       	pop	r9
    8da8:	8f 90       	pop	r8
    8daa:	7f 90       	pop	r7
    8dac:	6f 90       	pop	r6
    8dae:	5f 90       	pop	r5
    8db0:	4f 90       	pop	r4
    8db2:	3f 90       	pop	r3
    8db4:	2f 90       	pop	r2
    8db6:	08 95       	ret

00008db8 <strnlen_P>:
    8db8:	fc 01       	movw	r30, r24
    8dba:	05 90       	lpm	r0, Z+
    8dbc:	61 50       	subi	r22, 0x01	; 1
    8dbe:	70 40       	sbci	r23, 0x00	; 0
    8dc0:	01 10       	cpse	r0, r1
    8dc2:	d8 f7       	brcc	.-10     	; 0x8dba <strnlen_P+0x2>
    8dc4:	80 95       	com	r24
    8dc6:	90 95       	com	r25
    8dc8:	8e 0f       	add	r24, r30
    8dca:	9f 1f       	adc	r25, r31
    8dcc:	08 95       	ret

00008dce <strnlen>:
    8dce:	fc 01       	movw	r30, r24
    8dd0:	61 50       	subi	r22, 0x01	; 1
    8dd2:	70 40       	sbci	r23, 0x00	; 0
    8dd4:	01 90       	ld	r0, Z+
    8dd6:	01 10       	cpse	r0, r1
    8dd8:	d8 f7       	brcc	.-10     	; 0x8dd0 <strnlen+0x2>
    8dda:	80 95       	com	r24
    8ddc:	90 95       	com	r25
    8dde:	8e 0f       	add	r24, r30
    8de0:	9f 1f       	adc	r25, r31
    8de2:	08 95       	ret

00008de4 <fputc>:
    8de4:	0f 93       	push	r16
    8de6:	1f 93       	push	r17
    8de8:	cf 93       	push	r28
    8dea:	df 93       	push	r29
    8dec:	fb 01       	movw	r30, r22
    8dee:	23 81       	ldd	r18, Z+3	; 0x03
    8df0:	21 fd       	sbrc	r18, 1
    8df2:	03 c0       	rjmp	.+6      	; 0x8dfa <fputc+0x16>
    8df4:	8f ef       	ldi	r24, 0xFF	; 255
    8df6:	9f ef       	ldi	r25, 0xFF	; 255
    8df8:	2c c0       	rjmp	.+88     	; 0x8e52 <fputc+0x6e>
    8dfa:	22 ff       	sbrs	r18, 2
    8dfc:	16 c0       	rjmp	.+44     	; 0x8e2a <fputc+0x46>
    8dfe:	46 81       	ldd	r20, Z+6	; 0x06
    8e00:	57 81       	ldd	r21, Z+7	; 0x07
    8e02:	24 81       	ldd	r18, Z+4	; 0x04
    8e04:	35 81       	ldd	r19, Z+5	; 0x05
    8e06:	42 17       	cp	r20, r18
    8e08:	53 07       	cpc	r21, r19
    8e0a:	44 f4       	brge	.+16     	; 0x8e1c <fputc+0x38>
    8e0c:	a0 81       	ld	r26, Z
    8e0e:	b1 81       	ldd	r27, Z+1	; 0x01
    8e10:	9d 01       	movw	r18, r26
    8e12:	2f 5f       	subi	r18, 0xFF	; 255
    8e14:	3f 4f       	sbci	r19, 0xFF	; 255
    8e16:	31 83       	std	Z+1, r19	; 0x01
    8e18:	20 83       	st	Z, r18
    8e1a:	8c 93       	st	X, r24
    8e1c:	26 81       	ldd	r18, Z+6	; 0x06
    8e1e:	37 81       	ldd	r19, Z+7	; 0x07
    8e20:	2f 5f       	subi	r18, 0xFF	; 255
    8e22:	3f 4f       	sbci	r19, 0xFF	; 255
    8e24:	37 83       	std	Z+7, r19	; 0x07
    8e26:	26 83       	std	Z+6, r18	; 0x06
    8e28:	14 c0       	rjmp	.+40     	; 0x8e52 <fputc+0x6e>
    8e2a:	8b 01       	movw	r16, r22
    8e2c:	ec 01       	movw	r28, r24
    8e2e:	fb 01       	movw	r30, r22
    8e30:	00 84       	ldd	r0, Z+8	; 0x08
    8e32:	f1 85       	ldd	r31, Z+9	; 0x09
    8e34:	e0 2d       	mov	r30, r0
    8e36:	19 95       	eicall
    8e38:	89 2b       	or	r24, r25
    8e3a:	e1 f6       	brne	.-72     	; 0x8df4 <fputc+0x10>
    8e3c:	d8 01       	movw	r26, r16
    8e3e:	16 96       	adiw	r26, 0x06	; 6
    8e40:	8d 91       	ld	r24, X+
    8e42:	9c 91       	ld	r25, X
    8e44:	17 97       	sbiw	r26, 0x07	; 7
    8e46:	01 96       	adiw	r24, 0x01	; 1
    8e48:	17 96       	adiw	r26, 0x07	; 7
    8e4a:	9c 93       	st	X, r25
    8e4c:	8e 93       	st	-X, r24
    8e4e:	16 97       	sbiw	r26, 0x06	; 6
    8e50:	ce 01       	movw	r24, r28
    8e52:	df 91       	pop	r29
    8e54:	cf 91       	pop	r28
    8e56:	1f 91       	pop	r17
    8e58:	0f 91       	pop	r16
    8e5a:	08 95       	ret

00008e5c <__ultoa_invert>:
    8e5c:	fa 01       	movw	r30, r20
    8e5e:	aa 27       	eor	r26, r26
    8e60:	28 30       	cpi	r18, 0x08	; 8
    8e62:	51 f1       	breq	.+84     	; 0x8eb8 <__ultoa_invert+0x5c>
    8e64:	20 31       	cpi	r18, 0x10	; 16
    8e66:	81 f1       	breq	.+96     	; 0x8ec8 <__ultoa_invert+0x6c>
    8e68:	e8 94       	clt
    8e6a:	6f 93       	push	r22
    8e6c:	6e 7f       	andi	r22, 0xFE	; 254
    8e6e:	6e 5f       	subi	r22, 0xFE	; 254
    8e70:	7f 4f       	sbci	r23, 0xFF	; 255
    8e72:	8f 4f       	sbci	r24, 0xFF	; 255
    8e74:	9f 4f       	sbci	r25, 0xFF	; 255
    8e76:	af 4f       	sbci	r26, 0xFF	; 255
    8e78:	b1 e0       	ldi	r27, 0x01	; 1
    8e7a:	3e d0       	rcall	.+124    	; 0x8ef8 <__ultoa_invert+0x9c>
    8e7c:	b4 e0       	ldi	r27, 0x04	; 4
    8e7e:	3c d0       	rcall	.+120    	; 0x8ef8 <__ultoa_invert+0x9c>
    8e80:	67 0f       	add	r22, r23
    8e82:	78 1f       	adc	r23, r24
    8e84:	89 1f       	adc	r24, r25
    8e86:	9a 1f       	adc	r25, r26
    8e88:	a1 1d       	adc	r26, r1
    8e8a:	68 0f       	add	r22, r24
    8e8c:	79 1f       	adc	r23, r25
    8e8e:	8a 1f       	adc	r24, r26
    8e90:	91 1d       	adc	r25, r1
    8e92:	a1 1d       	adc	r26, r1
    8e94:	6a 0f       	add	r22, r26
    8e96:	71 1d       	adc	r23, r1
    8e98:	81 1d       	adc	r24, r1
    8e9a:	91 1d       	adc	r25, r1
    8e9c:	a1 1d       	adc	r26, r1
    8e9e:	20 d0       	rcall	.+64     	; 0x8ee0 <__ultoa_invert+0x84>
    8ea0:	09 f4       	brne	.+2      	; 0x8ea4 <__ultoa_invert+0x48>
    8ea2:	68 94       	set
    8ea4:	3f 91       	pop	r19
    8ea6:	2a e0       	ldi	r18, 0x0A	; 10
    8ea8:	26 9f       	mul	r18, r22
    8eaa:	11 24       	eor	r1, r1
    8eac:	30 19       	sub	r19, r0
    8eae:	30 5d       	subi	r19, 0xD0	; 208
    8eb0:	31 93       	st	Z+, r19
    8eb2:	de f6       	brtc	.-74     	; 0x8e6a <__ultoa_invert+0xe>
    8eb4:	cf 01       	movw	r24, r30
    8eb6:	08 95       	ret
    8eb8:	46 2f       	mov	r20, r22
    8eba:	47 70       	andi	r20, 0x07	; 7
    8ebc:	40 5d       	subi	r20, 0xD0	; 208
    8ebe:	41 93       	st	Z+, r20
    8ec0:	b3 e0       	ldi	r27, 0x03	; 3
    8ec2:	0f d0       	rcall	.+30     	; 0x8ee2 <__ultoa_invert+0x86>
    8ec4:	c9 f7       	brne	.-14     	; 0x8eb8 <__ultoa_invert+0x5c>
    8ec6:	f6 cf       	rjmp	.-20     	; 0x8eb4 <__ultoa_invert+0x58>
    8ec8:	46 2f       	mov	r20, r22
    8eca:	4f 70       	andi	r20, 0x0F	; 15
    8ecc:	40 5d       	subi	r20, 0xD0	; 208
    8ece:	4a 33       	cpi	r20, 0x3A	; 58
    8ed0:	18 f0       	brcs	.+6      	; 0x8ed8 <__ultoa_invert+0x7c>
    8ed2:	49 5d       	subi	r20, 0xD9	; 217
    8ed4:	31 fd       	sbrc	r19, 1
    8ed6:	40 52       	subi	r20, 0x20	; 32
    8ed8:	41 93       	st	Z+, r20
    8eda:	02 d0       	rcall	.+4      	; 0x8ee0 <__ultoa_invert+0x84>
    8edc:	a9 f7       	brne	.-22     	; 0x8ec8 <__ultoa_invert+0x6c>
    8ede:	ea cf       	rjmp	.-44     	; 0x8eb4 <__ultoa_invert+0x58>
    8ee0:	b4 e0       	ldi	r27, 0x04	; 4
    8ee2:	a6 95       	lsr	r26
    8ee4:	97 95       	ror	r25
    8ee6:	87 95       	ror	r24
    8ee8:	77 95       	ror	r23
    8eea:	67 95       	ror	r22
    8eec:	ba 95       	dec	r27
    8eee:	c9 f7       	brne	.-14     	; 0x8ee2 <__ultoa_invert+0x86>
    8ef0:	00 97       	sbiw	r24, 0x00	; 0
    8ef2:	61 05       	cpc	r22, r1
    8ef4:	71 05       	cpc	r23, r1
    8ef6:	08 95       	ret
    8ef8:	9b 01       	movw	r18, r22
    8efa:	ac 01       	movw	r20, r24
    8efc:	0a 2e       	mov	r0, r26
    8efe:	06 94       	lsr	r0
    8f00:	57 95       	ror	r21
    8f02:	47 95       	ror	r20
    8f04:	37 95       	ror	r19
    8f06:	27 95       	ror	r18
    8f08:	ba 95       	dec	r27
    8f0a:	c9 f7       	brne	.-14     	; 0x8efe <__ultoa_invert+0xa2>
    8f0c:	62 0f       	add	r22, r18
    8f0e:	73 1f       	adc	r23, r19
    8f10:	84 1f       	adc	r24, r20
    8f12:	95 1f       	adc	r25, r21
    8f14:	a0 1d       	adc	r26, r0
    8f16:	08 95       	ret

00008f18 <_exit>:
    8f18:	f8 94       	cli

00008f1a <__stop_program>:
    8f1a:	ff cf       	rjmp	.-2      	; 0x8f1a <__stop_program>
