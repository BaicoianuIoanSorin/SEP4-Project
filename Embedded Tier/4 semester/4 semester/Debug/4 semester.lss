
4 semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005da  00800200  00008c4c  00008ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fe4  008007da  008007da  000092ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000092ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a70  00000000  00000000  00009358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a04b  00000000  00000000  00009dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ccd  00000000  00000000  00013e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b15  00000000  00000000  00016ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000276c  00000000  00000000  0001d5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f41  00000000  00000000  0001fd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006af4  00000000  00000000  00023ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0002a799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c1       	rjmp	.+516    	; 0x206 <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_12>
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2b 3a 	jmp	0x7456	; 0x7456 <__vector_25>
      68:	0c 94 7d 3a 	jmp	0x74fa	; 0x74fa <__vector_26>
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c1 3a 	jmp	0x7582	; 0x7582 <__vector_36>
      94:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__vector_37>
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5e 3f 	jmp	0x7ebc	; 0x7ebc <__vector_39>
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 57 3b 	jmp	0x76ae	; 0x76ae <__vector_51>
      d0:	0c 94 a9 3b 	jmp	0x7752	; 0x7752 <__vector_52>
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__vector_54>
      dc:	0c 94 3f 3c 	jmp	0x787e	; 0x787e <__vector_55>
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8a 2f       	mov	r24, r26
      e6:	8a 2f       	mov	r24, r26
      e8:	8a 2f       	mov	r24, r26
      ea:	e9 2f       	mov	r30, r25
      ec:	f4 2f       	mov	r31, r20
      ee:	2b 30       	cpi	r18, 0x0B	; 11
      f0:	8a 2f       	mov	r24, r26
      f2:	8a 2f       	mov	r24, r26
      f4:	e9 2f       	mov	r30, r25
      f6:	f4 2f       	mov	r31, r20
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	f0 3f       	cpi	r31, 0xF0	; 240
      fc:	f0 3f       	cpi	r31, 0xF0	; 240
      fe:	f0 3f       	cpi	r31, 0xF0	; 240
     100:	f0 3f       	cpi	r31, 0xF0	; 240
     102:	f0 3f       	cpi	r31, 0xF0	; 240
     104:	f0 3f       	cpi	r31, 0xF0	; 240
     106:	f0 3f       	cpi	r31, 0xF0	; 240
     108:	80 3f       	cpi	r24, 0xF0	; 240
     10a:	f0 3f       	cpi	r31, 0xF0	; 240
     10c:	f0 3f       	cpi	r31, 0xF0	; 240
     10e:	f0 3f       	cpi	r31, 0xF0	; 240
     110:	f0 3f       	cpi	r31, 0xF0	; 240
     112:	f0 3f       	cpi	r31, 0xF0	; 240
     114:	f0 3f       	cpi	r31, 0xF0	; 240
     116:	f0 3f       	cpi	r31, 0xF0	; 240
     118:	82 3f       	cpi	r24, 0xF2	; 242
     11a:	f0 3f       	cpi	r31, 0xF0	; 240
     11c:	f0 3f       	cpi	r31, 0xF0	; 240
     11e:	f0 3f       	cpi	r31, 0xF0	; 240
     120:	f0 3f       	cpi	r31, 0xF0	; 240
     122:	f0 3f       	cpi	r31, 0xF0	; 240
     124:	f0 3f       	cpi	r31, 0xF0	; 240
     126:	f0 3f       	cpi	r31, 0xF0	; 240
     128:	f0 3f       	cpi	r31, 0xF0	; 240
     12a:	f0 3f       	cpi	r31, 0xF0	; 240
     12c:	f0 3f       	cpi	r31, 0xF0	; 240
     12e:	f0 3f       	cpi	r31, 0xF0	; 240
     130:	f0 3f       	cpi	r31, 0xF0	; 240
     132:	f0 3f       	cpi	r31, 0xF0	; 240
     134:	f0 3f       	cpi	r31, 0xF0	; 240
     136:	f0 3f       	cpi	r31, 0xF0	; 240
     138:	82 3f       	cpi	r24, 0xF2	; 242
     13a:	f0 3f       	cpi	r31, 0xF0	; 240
     13c:	f0 3f       	cpi	r31, 0xF0	; 240
     13e:	f0 3f       	cpi	r31, 0xF0	; 240
     140:	f0 3f       	cpi	r31, 0xF0	; 240
     142:	f0 3f       	cpi	r31, 0xF0	; 240
     144:	f0 3f       	cpi	r31, 0xF0	; 240
     146:	f0 3f       	cpi	r31, 0xF0	; 240
     148:	f0 3f       	cpi	r31, 0xF0	; 240
     14a:	f0 3f       	cpi	r31, 0xF0	; 240
     14c:	f0 3f       	cpi	r31, 0xF0	; 240
     14e:	f0 3f       	cpi	r31, 0xF0	; 240
     150:	f0 3f       	cpi	r31, 0xF0	; 240
     152:	f0 3f       	cpi	r31, 0xF0	; 240
     154:	f0 3f       	cpi	r31, 0xF0	; 240
     156:	f0 3f       	cpi	r31, 0xF0	; 240
     158:	ec 3f       	cpi	r30, 0xFC	; 252
     15a:	f0 3f       	cpi	r31, 0xF0	; 240
     15c:	f0 3f       	cpi	r31, 0xF0	; 240
     15e:	f0 3f       	cpi	r31, 0xF0	; 240
     160:	f0 3f       	cpi	r31, 0xF0	; 240
     162:	f0 3f       	cpi	r31, 0xF0	; 240
     164:	f0 3f       	cpi	r31, 0xF0	; 240
     166:	f0 3f       	cpi	r31, 0xF0	; 240
     168:	b7 3f       	cpi	r27, 0xF7	; 247
     16a:	f0 3f       	cpi	r31, 0xF0	; 240
     16c:	f0 3f       	cpi	r31, 0xF0	; 240
     16e:	f0 3f       	cpi	r31, 0xF0	; 240
     170:	f0 3f       	cpi	r31, 0xF0	; 240
     172:	f0 3f       	cpi	r31, 0xF0	; 240
     174:	f0 3f       	cpi	r31, 0xF0	; 240
     176:	f0 3f       	cpi	r31, 0xF0	; 240
     178:	f0 3f       	cpi	r31, 0xF0	; 240
     17a:	f0 3f       	cpi	r31, 0xF0	; 240
     17c:	f0 3f       	cpi	r31, 0xF0	; 240
     17e:	f0 3f       	cpi	r31, 0xF0	; 240
     180:	f0 3f       	cpi	r31, 0xF0	; 240
     182:	f0 3f       	cpi	r31, 0xF0	; 240
     184:	f0 3f       	cpi	r31, 0xF0	; 240
     186:	f0 3f       	cpi	r31, 0xF0	; 240
     188:	ab 3f       	cpi	r26, 0xFB	; 251
     18a:	f0 3f       	cpi	r31, 0xF0	; 240
     18c:	f0 3f       	cpi	r31, 0xF0	; 240
     18e:	f0 3f       	cpi	r31, 0xF0	; 240
     190:	f0 3f       	cpi	r31, 0xF0	; 240
     192:	f0 3f       	cpi	r31, 0xF0	; 240
     194:	f0 3f       	cpi	r31, 0xF0	; 240
     196:	f0 3f       	cpi	r31, 0xF0	; 240
     198:	cf 3f       	cpi	r28, 0xFF	; 255

0000019a <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <prvCheckTasksWaitingTermination>
     1ae:	80 91 9c 15 	lds	r24, 0x159C	; 0x80159c <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	10 f0       	brcs	.+4      	; 0x1ba <prvIdleTask+0x20>
     1b6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
     1ba:	0e 94 58 31 	call	0x62b0	; 0x62b0 <vApplicationIdleHook>
     1be:	f5 cf       	rjmp	.-22     	; 0x1aa <prvIdleTask+0x10>

000001c0 <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	27 97       	sbiw	r28, 0x07	; 7
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	9f 83       	std	Y+7, r25	; 0x07
     1d6:	8e 83       	std	Y+6, r24	; 0x06
     1d8:	ce 01       	movw	r24, r28
     1da:	05 96       	adiw	r24, 0x05	; 5
     1dc:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <prvGetNextExpireTime>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	89 83       	std	Y+1, r24	; 0x01
     1e6:	9a 83       	std	Y+2, r25	; 0x02
     1e8:	ab 83       	std	Y+3, r26	; 0x03
     1ea:	bc 83       	std	Y+4, r27	; 0x04
     1ec:	2d 81       	ldd	r18, Y+5	; 0x05
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	ab 81       	ldd	r26, Y+3	; 0x03
     1f4:	bc 81       	ldd	r27, Y+4	; 0x04
     1f6:	42 2f       	mov	r20, r18
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <prvProcessTimerOrBlockTask>
     200:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <prvProcessReceivedCommands>
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <prvTimerTask+0x18>

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d1 e2       	ldi	r29, 0x21	; 33
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0c bf       	out	0x3c, r16	; 60

00000216 <__do_copy_data>:
     216:	17 e0       	ldi	r17, 0x07	; 7
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b2 e0       	ldi	r27, 0x02	; 2
     21c:	ec e4       	ldi	r30, 0x4C	; 76
     21e:	fc e8       	ldi	r31, 0x8C	; 140
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	aa 3d       	cpi	r26, 0xDA	; 218
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	27 e1       	ldi	r18, 0x17	; 23
     232:	aa ed       	ldi	r26, 0xDA	; 218
     234:	b7 e0       	ldi	r27, 0x07	; 7
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ae 3b       	cpi	r26, 0xBE	; 190
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 bb 32 	call	0x6576	; 0x6576 <main>
     244:	0c 94 24 46 	jmp	0x8c48	; 0x8c48 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <ApplicationTask>:
#include "Application.h"

void ApplicationTask(void *pvParameters)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	6c 97       	sbiw	r28, 0x1c	; 28
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	9c 8f       	std	Y+28, r25	; 0x1c
     26c:	8b 8f       	std	Y+27, r24	; 0x1b
	for (;;)
	{
		//if(ALL_READY_BITS == ALL_READY_BITS){
			//Use in the future when we have both sensors = xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
			xEventGroupSetBits(measureEventGroup, HUMIDITY_TEMPERATURE_MEASURE_BIT);
     26e:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <measureEventGroup>
     272:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <measureEventGroup+0x1>
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	46 d5       	rcall	.+2700   	; 0xd0c <xEventGroupSetBits>
		//}
		
		//Use in the future when we have both sensors = EventBits_t eventBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
		EventBits_t eventBits = xEventGroupWaitBits(dataReadyEventGroup,HUMIDITY_TEMPERATURE_READY_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     280:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <dataReadyEventGroup>
     284:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <dataReadyEventGroup+0x1>
     288:	cc 24       	eor	r12, r12
     28a:	ca 94       	dec	r12
     28c:	dc 2c       	mov	r13, r12
     28e:	76 01       	movw	r14, r12
     290:	01 e0       	ldi	r16, 0x01	; 1
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	42 e0       	ldi	r20, 0x02	; 2
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	00 d4       	rcall	.+2048   	; 0xa9e <xEventGroupWaitBits>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	ab 83       	std	Y+3, r26	; 0x03
     2a8:	bc 83       	std	Y+4, r27	; 0x04
		if((eventBits &(HUMIDITY_TEMPERATURE_READY_BIT))==(HUMIDITY_TEMPERATURE_READY_BIT))
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	ab 81       	ldd	r26, Y+3	; 0x03
     2b0:	bc 81       	ldd	r27, Y+4	; 0x04
     2b2:	82 70       	andi	r24, 0x02	; 2
     2b4:	99 27       	eor	r25, r25
     2b6:	aa 27       	eor	r26, r26
     2b8:	bb 27       	eor	r27, r27
     2ba:	89 2b       	or	r24, r25
     2bc:	8a 2b       	or	r24, r26
     2be:	8b 2b       	or	r24, r27
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <ApplicationTask+0x7a>
     2c2:	3c c0       	rjmp	.+120    	; 0x33c <ApplicationTask+0xf2>
		{
			printf("ALL DATA COLLECTED\n");
     2c4:	82 e2       	ldi	r24, 0x22	; 34
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
			printf("Temperature is: %x, and humidity is: %x\n",getTemperature(),getHumidity());
     2cc:	07 d3       	rcall	.+1550   	; 0x8dc <getHumidity>
     2ce:	8c 01       	movw	r16, r24
     2d0:	10 d3       	rcall	.+1568   	; 0x8f2 <getTemperature>
     2d2:	21 2f       	mov	r18, r17
     2d4:	2f 93       	push	r18
     2d6:	20 2f       	mov	r18, r16
     2d8:	2f 93       	push	r18
     2da:	29 2f       	mov	r18, r25
     2dc:	2f 93       	push	r18
     2de:	8f 93       	push	r24
     2e0:	85 e3       	ldi	r24, 0x35	; 53
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	89 2f       	mov	r24, r25
     2e6:	8f 93       	push	r24
     2e8:	85 e3       	ldi	r24, 0x35	; 53
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	8f 93       	push	r24
     2ee:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
			
			setTemperature(getTemperature());
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	f9 d2       	rcall	.+1522   	; 0x8f2 <getTemperature>
			setHumidity(getHumidity());
     300:	56 d0       	rcall	.+172    	; 0x3ae <setTemperature>
     302:	ec d2       	rcall	.+1496   	; 0x8dc <getHumidity>
     304:	40 d0       	rcall	.+128    	; 0x386 <setHumidity>
			
			//fake data
			setCo2Ppm(10);
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	65 d0       	rcall	.+202    	; 0x3d6 <setCo2Ppm>
     30c:	ce 01       	movw	r24, r28
			
			lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
     30e:	05 96       	adiw	r24, 0x05	; 5
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	75 d0       	rcall	.+234    	; 0x3fe <sensorDataPackageHandler_getLoRaPayload>
     314:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <upLinkMessageBuffer>
			xMessageBufferSend(upLinkMessageBuffer,&_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     318:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <upLinkMessageBuffer+0x1>
     31c:	be 01       	movw	r22, r28
     31e:	6b 5f       	subi	r22, 0xFB	; 251
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	0f ef       	ldi	r16, 0xFF	; 255
     324:	1f ef       	ldi	r17, 0xFF	; 255
     326:	98 01       	movw	r18, r16
     328:	46 e1       	ldi	r20, 0x16	; 22
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xStreamBufferSend>
     330:	60 e1       	ldi	r22, 0x10	; 16
     332:	7d e1       	ldi	r23, 0x1D	; 29
																					
			vTaskDelay(pdMS_TO_TICKS(120000));
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	70 e0       	ldi	r23, 0x00	; 0
			//xSemaphoreGive(tempHumSemaphore);
		}
		vTaskDelay(pdMS_TO_TICKS(50));
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
     348:	92 cf       	rjmp	.-220    	; 0x26e <ApplicationTask+0x24>

0000034a <createApplicationTask>:
     34a:	ef 92       	push	r14
	}
     34c:	ff 92       	push	r15
}

void createApplicationTask(UBaseType_t Taskpriority)
{
     34e:	0f 93       	push	r16
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     35c:	e1 2c       	mov	r14, r1
     35e:	f1 2c       	mov	r15, r1
     360:	09 81       	ldd	r16, Y+1	; 0x01
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 ec       	ldi	r20, 0xC0	; 192
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	6e e5       	ldi	r22, 0x5E	; 94
     36c:	72 e0       	ldi	r23, 0x02	; 2
     36e:	85 e2       	ldi	r24, 0x25	; 37
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskCreate>
	,  "AppTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + Taskpriority
	,  NULL );
     376:	00 00       	nop
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <setHumidity>:

uint16_t temperature;
uint16_t humidity;
uint16_t co2Ppm;

void setHumidity(uint16_t value){
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	1f 92       	push	r1
     38c:	1f 92       	push	r1
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	9a 83       	std	Y+2, r25	; 0x02
     394:	89 83       	std	Y+1, r24	; 0x01
	humidity = value;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <humidity+0x1>
     39e:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <humidity>
}
     3a2:	00 00       	nop
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <setTemperature>:
void setTemperature(uint16_t value){
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	1f 92       	push	r1
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	89 83       	std	Y+1, r24	; 0x01
	temperature = value;
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <__data_end+0x1>
     3c6:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <__data_end>
}
     3ca:	00 00       	nop
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <setCo2Ppm>:
void setCo2Ppm(uint16_t value){
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	1f 92       	push	r1
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 83       	std	Y+1, r24	; 0x01
	co2Ppm = value;
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ea:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <co2Ppm+0x1>
     3ee:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <co2Ppm>
}
     3f2:	00 00       	nop
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <sensorDataPackageHandler_getLoRaPayload>:


lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	1f 92       	push	r1
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	9c 83       	std	Y+4, r25	; 0x04
     40e:	8b 83       	std	Y+3, r24	; 0x03
     410:	6d 83       	std	Y+5, r22	; 0x05
	lora_driver_payload_t* payload_t;
	
	payload_t = pvPortMalloc(sizeof(lora_driver_payload_t));
     412:	86 e1       	ldi	r24, 0x16	; 22
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	d5 d5       	rcall	.+2986   	; 0xfc2 <pvPortMalloc>
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
	
	if(payload_t != NULL){
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	89 2b       	or	r24, r25
     422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	46 c0       	rjmp	.+140    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		payload_t->portNo=port_No;
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	2d 81       	ldd	r18, Y+5	; 0x05
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
		payload_t->len=6;
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	26 e0       	ldi	r18, 0x06	; 6
     436:	fc 01       	movw	r30, r24
     438:	21 83       	std	Z+1, r18	; 0x01
		payload_t->bytes[0]=co2Ppm >> 8;
     43a:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <co2Ppm>
     43e:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <co2Ppm+0x1>
     442:	89 2f       	mov	r24, r25
     444:	99 27       	eor	r25, r25
     446:	28 2f       	mov	r18, r24
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	fc 01       	movw	r30, r24
     44e:	22 83       	std	Z+2, r18	; 0x02
		payload_t->bytes[1]=co2Ppm & 0xFF;
     450:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <co2Ppm>
     454:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <co2Ppm+0x1>
     458:	28 2f       	mov	r18, r24
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	fc 01       	movw	r30, r24
     460:	23 83       	std	Z+3, r18	; 0x03
		payload_t->bytes[2]=humidity >> 8;
     462:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <humidity>
     466:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <humidity+0x1>
     46a:	89 2f       	mov	r24, r25
     46c:	99 27       	eor	r25, r25
     46e:	28 2f       	mov	r18, r24
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	fc 01       	movw	r30, r24
     476:	24 83       	std	Z+4, r18	; 0x04
		payload_t->bytes[3]=humidity & 0xFF;
     478:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <humidity>
     47c:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <humidity+0x1>
     480:	28 2f       	mov	r18, r24
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	fc 01       	movw	r30, r24
     488:	25 83       	std	Z+5, r18	; 0x05
		payload_t->bytes[4]=temperature >> 8;
     48a:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <__data_end>
     48e:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <__data_end+0x1>
     492:	89 2f       	mov	r24, r25
     494:	99 27       	eor	r25, r25
     496:	28 2f       	mov	r18, r24
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	fc 01       	movw	r30, r24
     49e:	26 83       	std	Z+6, r18	; 0x06
		payload_t->bytes[5]=temperature & 0xFF;
     4a0:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <__data_end>
     4a4:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <__data_end+0x1>
     4a8:	28 2f       	mov	r18, r24
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	fc 01       	movw	r30, r24
     4b0:	27 83       	std	Z+7, r18	; 0x07
	}
	
	return *payload_t;
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	29 81       	ldd	r18, Y+1	; 0x01
     4b8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ba:	46 e1       	ldi	r20, 0x16	; 22
     4bc:	f9 01       	movw	r30, r18
     4be:	dc 01       	movw	r26, r24
     4c0:	01 90       	ld	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	4a 95       	dec	r20
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
}
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	9c 81       	ldd	r25, Y+4	; 0x04
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <lora_handler_uplink_payload>:
lora_driver_payload_t uplink_payload;

void lora_handler_task( void *pvParameters );

void lora_handler_uplink_payload(UBaseType_t lora_handler_task_priority)
{
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     4ee:	e1 2c       	mov	r14, r1
     4f0:	f1 2c       	mov	r15, r1
     4f2:	09 81       	ldd	r16, Y+1	; 0x01
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	48 e8       	ldi	r20, 0x88	; 136
     4fa:	51 e0       	ldi	r21, 0x01	; 1
     4fc:	66 e6       	ldi	r22, 0x66	; 102
     4fe:	72 e0       	ldi	r23, 0x02	; 2
     500:	85 ec       	ldi	r24, 0xC5	; 197
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskCreate>
	,  "Uplink_payload_handler_task"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     508:	00 00       	nop
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <_lora_setup>:

 void _lora_setup(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	66 97       	sbiw	r28, 0x16	; 22
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 f6 3d 	call	0x7bec	; 0x7bec <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     532:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <lora_driver_rn2483FactoryReset>
     536:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     53a:	29 2f       	mov	r18, r25
     53c:	2f 93       	push	r18
     53e:	8f 93       	push	r24
     540:	82 e8       	ldi	r24, 0x82	; 130
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	89 2f       	mov	r24, r25
     546:	8f 93       	push	r24
     548:	82 e8       	ldi	r24, 0x82	; 130
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	8f 93       	push	r24
     54e:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     55a:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <lora_driver_configureToEu868>
     55e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     562:	29 2f       	mov	r18, r25
     564:	2f 93       	push	r18
     566:	8f 93       	push	r24
     568:	85 e9       	ldi	r24, 0x95	; 149
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	89 2f       	mov	r24, r25
     56e:	8f 93       	push	r24
     570:	85 e9       	ldi	r24, 0x95	; 149
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	8f 93       	push	r24
     576:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     582:	ce 01       	movw	r24, r28
     584:	03 96       	adiw	r24, 0x03	; 3
     586:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <lora_driver_getRn2483Hweui>
     58a:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     592:	9c 01       	movw	r18, r24
     594:	ce 01       	movw	r24, r28
     596:	03 96       	adiw	r24, 0x03	; 3
     598:	49 2f       	mov	r20, r25
     59a:	4f 93       	push	r20
     59c:	8f 93       	push	r24
     59e:	83 2f       	mov	r24, r19
     5a0:	8f 93       	push	r24
     5a2:	82 2f       	mov	r24, r18
     5a4:	8f 93       	push	r24
     5a6:	8e ea       	ldi	r24, 0xAE	; 174
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	89 2f       	mov	r24, r25
     5ac:	8f 93       	push	r24
     5ae:	8e ea       	ldi	r24, 0xAE	; 174
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	8f 93       	push	r24
     5b4:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     5c4:	ce 01       	movw	r24, r28
     5c6:	03 96       	adiw	r24, 0x03	; 3
     5c8:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <lora_driver_setDeviceIdentifier>
     5cc:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     5d0:	29 2f       	mov	r18, r25
     5d2:	2f 93       	push	r18
     5d4:	8f 93       	push	r24
     5d6:	ce 01       	movw	r24, r28
     5d8:	03 96       	adiw	r24, 0x03	; 3
     5da:	29 2f       	mov	r18, r25
     5dc:	2f 93       	push	r18
     5de:	8f 93       	push	r24
     5e0:	82 ec       	ldi	r24, 0xC2	; 194
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	89 2f       	mov	r24, r25
     5e6:	8f 93       	push	r24
     5e8:	82 ec       	ldi	r24, 0xC2	; 194
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	8f 93       	push	r24
     5ee:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     5fe:	ce 01       	movw	r24, r28
     600:	03 96       	adiw	r24, 0x03	; 3
     602:	ac 01       	movw	r20, r24
     604:	67 ed       	ldi	r22, 0xD7	; 215
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	88 ef       	ldi	r24, 0xF8	; 248
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 48 38 	call	0x7090	; 0x7090 <lora_driver_setOtaaIdentity>
     610:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     614:	29 2f       	mov	r18, r25
     616:	2f 93       	push	r18
     618:	8f 93       	push	r24
     61a:	ce 01       	movw	r24, r28
     61c:	03 96       	adiw	r24, 0x03	; 3
     61e:	29 2f       	mov	r18, r25
     620:	2f 93       	push	r18
     622:	8f 93       	push	r24
     624:	87 ed       	ldi	r24, 0xD7	; 215
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	89 2f       	mov	r24, r25
     62a:	8f 93       	push	r24
     62c:	87 ed       	ldi	r24, 0xD7	; 215
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	8f 93       	push	r24
     632:	88 ef       	ldi	r24, 0xF8	; 248
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	89 2f       	mov	r24, r25
     638:	8f 93       	push	r24
     63a:	88 ef       	ldi	r24, 0xF8	; 248
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	8f 93       	push	r24
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	89 2f       	mov	r24, r25
     646:	8f 93       	push	r24
     648:	89 e0       	ldi	r24, 0x09	; 9
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	8f 93       	push	r24
     64e:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     662:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <lora_driver_saveMac>
     666:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     66a:	29 2f       	mov	r18, r25
     66c:	2f 93       	push	r18
     66e:	8f 93       	push	r24
     670:	8f e3       	ldi	r24, 0x3F	; 63
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	89 2f       	mov	r24, r25
     676:	8f 93       	push	r24
     678:	8f e3       	ldi	r24, 0x3F	; 63
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	8f 93       	push	r24
     67e:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <lora_driver_setAdaptiveDataRate>
     690:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     694:	29 2f       	mov	r18, r25
     696:	2f 93       	push	r18
     698:	8f 93       	push	r24
     69a:	8e e4       	ldi	r24, 0x4E	; 78
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	89 2f       	mov	r24, r25
     6a0:	8f 93       	push	r24
     6a2:	8e e4       	ldi	r24, 0x4E	; 78
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	8f 93       	push	r24
     6a8:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     6b4:	84 ef       	ldi	r24, 0xF4	; 244
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lora_driver_setReceiveDelay>
     6bc:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     6c0:	29 2f       	mov	r18, r25
     6c2:	2f 93       	push	r18
     6c4:	8f 93       	push	r24
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	8f 93       	push	r24
     6ca:	84 ef       	ldi	r24, 0xF4	; 244
     6cc:	8f 93       	push	r24
     6ce:	8f e6       	ldi	r24, 0x6F	; 111
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	89 2f       	mov	r24, r25
     6d4:	8f 93       	push	r24
     6d6:	8f e6       	ldi	r24, 0x6F	; 111
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	8f 93       	push	r24
     6dc:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	89 83       	std	Y+1, r24	; 0x01
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <lora_driver_join>
     6f6:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     6fe:	9c 01       	movw	r18, r24
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	43 2f       	mov	r20, r19
     708:	4f 93       	push	r20
     70a:	2f 93       	push	r18
     70c:	29 2f       	mov	r18, r25
     70e:	2f 93       	push	r18
     710:	8f 93       	push	r24
     712:	8f e8       	ldi	r24, 0x8F	; 143
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	89 2f       	mov	r24, r25
     718:	8f 93       	push	r24
     71a:	8f e8       	ldi	r24, 0x8F	; 143
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	8f 93       	push	r24
     720:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	88 30       	cpi	r24, 0x08	; 8
     734:	81 f0       	breq	.+32     	; 0x756 <_lora_setup+0x23e>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     73c:	66 e3       	ldi	r22, 0x36	; 54
     73e:	71 e0       	ldi	r23, 0x01	; 1
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	88 23       	and	r24, r24
     752:	71 f6       	brne	.-100    	; 0x6f0 <_lora_setup+0x1d8>
     754:	01 c0       	rjmp	.+2      	; 0x758 <_lora_setup+0x240>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
     756:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LORA_ACCEPTED)
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	88 30       	cpi	r24, 0x08	; 8
     75c:	21 f4       	brne	.+8      	; 0x766 <_lora_setup+0x24e>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <status_leds_ledOn>
		while (1)
		{
			taskYIELD();
		}
	}
}
     764:	09 c0       	rjmp	.+18     	; 0x778 <_lora_setup+0x260>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <status_leds_fastBlink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     772:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
		}
     776:	fd cf       	rjmp	.-6      	; 0x772 <_lora_setup+0x25a>
	}
}
     778:	66 96       	adiw	r28, 0x16	; 22
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2a 97       	sbiw	r28, 0x0a	; 10
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	9a 87       	std	Y+10, r25	; 0x0a
     7a4:	89 87       	std	Y+9, r24	; 0x09
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <lora_driver_resetRn2483>
	vTaskDelay(2);
     7ac:	62 e0       	ldi	r22, 0x02	; 2
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
	lora_driver_resetRn2483(0);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     7be:	66 e9       	ldi	r22, 0x96	; 150
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     7ca:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <lora_driver_flushBuffers>

	_lora_setup();
     7ce:	a4 de       	rcall	.-696    	; 0x518 <_lora_setup>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000UL); // Upload message every 5 minutes (300000 ms)
     7d0:	88 e8       	ldi	r24, 0x88	; 136
     7d2:	9e e0       	ldi	r25, 0x0E	; 14
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	ab 83       	std	Y+3, r26	; 0x03
     7de:	bc 83       	std	Y+4, r27	; 0x04
	xLastWakeTime = xTaskGetTickCount();
     7e0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <xTaskGetTickCount>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	8d 83       	std	Y+5, r24	; 0x05
     7ea:	9e 83       	std	Y+6, r25	; 0x06
     7ec:	af 83       	std	Y+7, r26	; 0x07
     7ee:	b8 87       	std	Y+8, r27	; 0x08
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	ab 81       	ldd	r26, Y+3	; 0x03
     7f6:	bc 81       	ldd	r27, Y+4	; 0x04
     7f8:	9e 01       	movw	r18, r28
     7fa:	2b 5f       	subi	r18, 0xFB	; 251
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	ac 01       	movw	r20, r24
     800:	bd 01       	movw	r22, r26
     802:	c9 01       	movw	r24, r18
     804:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <xTaskDelayUntil>

		
		xMessageBufferReceive(upLinkMessageBuffer,&uplink_payload,sizeof(uplink_payload),portMAX_DELAY);
     808:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <upLinkMessageBuffer>
     80c:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <upLinkMessageBuffer+0x1>
     810:	0f ef       	ldi	r16, 0xFF	; 255
     812:	1f ef       	ldi	r17, 0xFF	; 255
     814:	98 01       	movw	r18, r16
     816:	46 e1       	ldi	r20, 0x16	; 22
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	68 e9       	ldi	r22, 0x98	; 152
     81c:	77 e1       	ldi	r23, 0x17	; 23
     81e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xStreamBufferReceive>
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &uplink_payload)));
     828:	68 e9       	ldi	r22, 0x98	; 152
     82a:	77 e1       	ldi	r23, 0x17	; 23
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <lora_driver_sendUploadMessage>
     832:	0e 94 69 38 	call	0x70d2	; 0x70d2 <lora_driver_mapReturnCodeToText>
     836:	29 2f       	mov	r18, r25
     838:	2f 93       	push	r18
     83a:	8f 93       	push	r24
     83c:	8f ea       	ldi	r24, 0xAF	; 175
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	89 2f       	mov	r24, r25
     842:	8f 93       	push	r24
     844:	8f ea       	ldi	r24, 0xAF	; 175
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	8f 93       	push	r24
     84a:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
	}
     856:	cc cf       	rjmp	.-104    	; 0x7f0 <lora_handler_task+0x66>

00000858 <initializeEventGroup>:
EventGroupHandle_t dataReadyEventGroup;
MessageBufferHandle_t upLinkMessageBuffer;
//MessageBufferHandle_t downLinkMessageBuffer;

void initializeEventGroup()
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
	dataReadyEventGroup = xEventGroupCreate();
     860:	fd d0       	rcall	.+506    	; 0xa5c <xEventGroupCreate>
     862:	90 93 b1 17 	sts	0x17B1, r25	; 0x8017b1 <dataReadyEventGroup+0x1>
     866:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
     86a:	f8 d0       	rcall	.+496    	; 0xa5c <xEventGroupCreate>
     86c:	90 93 b3 17 	sts	0x17B3, r25	; 0x8017b3 <measureEventGroup+0x1>
     870:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <measureEventGroup>
     874:	00 00       	nop
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <createUpLinkMessageBuffer>:
     87c:	cf 93       	push	r28


void createUpLinkMessageBuffer()
{
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
	
	upLinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	8c e2       	ldi	r24, 0x2C	; 44
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <xStreamBufferGenericCreate>
     892:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <upLinkMessageBuffer+0x1>
     896:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <upLinkMessageBuffer>
	if(upLinkMessageBuffer == NULL )
     89a:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <upLinkMessageBuffer>
     89e:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <upLinkMessageBuffer+0x1>
     8a2:	89 2b       	or	r24, r25
     8a4:	61 f4       	brne	.+24     	; 0x8be <createUpLinkMessageBuffer+0x42>
	{
		printf("Not enough heap memory for uplink message buffer");
     8a6:	84 ec       	ldi	r24, 0xC4	; 196
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	89 2f       	mov	r24, r25
     8ac:	8f 93       	push	r24
     8ae:	84 ec       	ldi	r24, 0xC4	; 196
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	8f 93       	push	r24
     8b4:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
	}
	else
	{
		printf("Uplink message buffer created succesffully");
	}
     8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <createUpLinkMessageBuffer+0x58>
	{
		printf("Not enough heap memory for uplink message buffer");
	}
	else
	{
		printf("Uplink message buffer created succesffully");
     8be:	85 ef       	ldi	r24, 0xF5	; 245
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	89 2f       	mov	r24, r25
     8c4:	8f 93       	push	r24
     8c6:	85 ef       	ldi	r24, 0xF5	; 245
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	8f 93       	push	r24
     8cc:	0e 94 06 43 	call	0x860c	; 0x860c <printf>
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
	}
     8d4:	00 00       	nop
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <getHumidity>:
void create(UBaseType_t Taskpriority)
{
	initializeTempAndHumDriver();
	createTempAndHumTask(Taskpriority);
	
}
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <humidity>
     8e8:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <humidity+0x1>
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <getTemperature>:
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <__data_end>
     8fe:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <__data_end+0x1>
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <initializeTempAndHumDriver>:

void initializeTempAndHumDriver()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
     912:	0e 94 00 34 	call	0x6800	; 0x6800 <hih8120_initialise>
     916:	89 83       	std	Y+1, r24	; 0x01

	if ( HIH8120_OK == returnCode )
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	88 23       	and	r24, r24
     91c:	29 f4       	brne	.+10     	; 0x928 <initializeTempAndHumDriver+0x20>
	{
		printf("Temp and Hum Driver Initialized ok\n");
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
	}
}
     926:	04 c0       	rjmp	.+8      	; 0x930 <initializeTempAndHumDriver+0x28>
	{
		printf("Temp and Hum Driver Initialized ok\n");
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
     928:	83 e4       	ldi	r24, 0x43	; 67
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
	}
}
     930:	00 00       	nop
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <measureTempAndHum>:

void measureTempAndHum()
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	if ( HIH8120_OK != hih8120_wakeup() )
     942:	0e 94 18 34 	call	0x6830	; 0x6830 <hih8120_wakeup>
     946:	88 23       	and	r24, r24
     948:	21 f0       	breq	.+8      	; 0x952 <measureTempAndHum+0x18>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
     94a:	8d e5       	ldi	r24, 0x5D	; 93
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
     952:	63 e0       	ldi	r22, 0x03	; 3
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
     95e:	0e 94 2d 34 	call	0x685a	; 0x685a <hih8120_measure>
     962:	88 23       	and	r24, r24
     964:	21 f0       	breq	.+8      	; 0x96e <measureTempAndHum+0x34>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
     966:	8d e7       	ldi	r24, 0x7D	; 125
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
}
     97a:	00 00       	nop
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <TempAndHumTask>:

void TempAndHumTask(void* pvpParameter)
{
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 d0       	rcall	.+0      	; 0x992 <TempAndHumTask+0x10>
     992:	00 d0       	rcall	.+0      	; 0x994 <TempAndHumTask+0x12>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	9e 83       	std	Y+6, r25	; 0x06
     99a:	8d 83       	std	Y+5, r24	; 0x05
	
	while(1)
	{
		//Use it for later when we have both sensors = EventBits_t eventBits = xEventGroupWaitBits(measureEventGroup,ALL_MEASURE_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
		EventBits_t eventBits = xEventGroupWaitBits(measureEventGroup,HUMIDITY_TEMPERATURE_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     99c:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <measureEventGroup>
     9a0:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <measureEventGroup+0x1>
     9a4:	cc 24       	eor	r12, r12
     9a6:	ca 94       	dec	r12
     9a8:	dc 2c       	mov	r13, r12
     9aa:	76 01       	movw	r14, r12
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	72 d0       	rcall	.+228    	; 0xa9e <xEventGroupWaitBits>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	ab 83       	std	Y+3, r26	; 0x03
     9c4:	bc 83       	std	Y+4, r27	; 0x04
		if(eventBits & (HUMIDITY_TEMPERATURE_MEASURE_BIT))
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	ab 81       	ldd	r26, Y+3	; 0x03
     9cc:	bc 81       	ldd	r27, Y+4	; 0x04
     9ce:	81 70       	andi	r24, 0x01	; 1
     9d0:	99 27       	eor	r25, r25
     9d2:	aa 27       	eor	r26, r26
     9d4:	bb 27       	eor	r27, r27
     9d6:	89 2b       	or	r24, r25
     9d8:	8a 2b       	or	r24, r26
     9da:	8b 2b       	or	r24, r27
     9dc:	d1 f0       	breq	.+52     	; 0xa12 <TempAndHumTask+0x90>
		{
			puts("Measuring metrics...");
     9de:	82 ea       	ldi	r24, 0xA2	; 162
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
			measureTempAndHum();
     9e6:	a9 df       	rcall	.-174    	; 0x93a <measureTempAndHum>
			temperature = hih8120_getTemperature_x10();
     9e8:	0e 94 75 34 	call	0x68ea	; 0x68ea <hih8120_getTemperature_x10>
     9ec:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <__data_end+0x1>
     9f0:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <__data_end>
			humidity = hih8120_getHumidityPercent_x10();
     9f4:	0e 94 52 34 	call	0x68a4	; 0x68a4 <hih8120_getHumidityPercent_x10>
     9f8:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <humidity+0x1>
     9fc:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <humidity>
			//printf("Temperature: %d\n",Temp);
			//printf("Humidity: %d\n",Humidity);
			//Use it for later when we have both sensors = xEventGroupSetBits(dataReadyEventGroup,ALL_READY_BIT);
			xEventGroupSetBits(dataReadyEventGroup,HUMIDITY_TEMPERATURE_READY_BIT);
     a00:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <dataReadyEventGroup>
     a04:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <dataReadyEventGroup+0x1>
     a08:	42 e0       	ldi	r20, 0x02	; 2
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	7d d1       	rcall	.+762    	; 0xd0c <xEventGroupSetBits>
		}
		vTaskDelay(pdMS_TO_TICKS(10));
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	cb 01       	movw	r24, r22
     a18:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
	}
     a1c:	bf cf       	rjmp	.-130    	; 0x99c <TempAndHumTask+0x1a>

00000a1e <createTempAndHumTask>:
}

void createTempAndHumTask(UBaseType_t Taskpriority)
{
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	89 83       	std	Y+1, r24	; 0x01
	initializeTempAndHumDriver();
     a30:	6b df       	rcall	.-298    	; 0x908 <initializeTempAndHumDriver>
	xTaskCreate(
     a32:	e1 2c       	mov	r14, r1
     a34:	f1 2c       	mov	r15, r1
     a36:	09 81       	ldd	r16, Y+1	; 0x01
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 ec       	ldi	r20, 0xC0	; 192
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	67 eb       	ldi	r22, 0xB7	; 183
     a42:	74 e0       	ldi	r23, 0x04	; 4
     a44:	81 ec       	ldi	r24, 0xC1	; 193
     a46:	94 e0       	ldi	r25, 0x04	; 4
     a48:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskCreate>
	,  "TempAndHumTask"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + Taskpriority
	,  NULL );
}
     a4c:	00 00       	nop
     a4e:	0f 90       	pop	r0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <xEventGroupCreate>:
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	1f 92       	push	r1
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	8f e0       	ldi	r24, 0x0F	; 15
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	aa d2       	rcall	.+1364   	; 0xfc2 <pvPortMalloc>
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
     a76:	89 2b       	or	r24, r25
     a78:	59 f0       	breq	.+22     	; 0xa90 <xEventGroupCreate+0x34>
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	fc 01       	movw	r30, r24
     a80:	10 82       	st	Z, r1
     a82:	11 82       	std	Z+1, r1	; 0x01
     a84:	12 82       	std	Z+2, r1	; 0x02
     a86:	13 82       	std	Z+3, r1	; 0x03
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	04 96       	adiw	r24, 0x04	; 4
     a8e:	52 d5       	rcall	.+2724   	; 0x1534 <vListInitialise>
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <xEventGroupWaitBits>:
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	6d 97       	sbiw	r28, 0x1d	; 29
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	9b 8b       	std	Y+19, r25	; 0x13
     ac0:	8a 8b       	std	Y+18, r24	; 0x12
     ac2:	4c 8b       	std	Y+20, r20	; 0x14
     ac4:	5d 8b       	std	Y+21, r21	; 0x15
     ac6:	6e 8b       	std	Y+22, r22	; 0x16
     ac8:	7f 8b       	std	Y+23, r23	; 0x17
     aca:	28 8f       	std	Y+24, r18	; 0x18
     acc:	09 8f       	std	Y+25, r16	; 0x19
     ace:	ca 8e       	std	Y+26, r12	; 0x1a
     ad0:	db 8e       	std	Y+27, r13	; 0x1b
     ad2:	ec 8e       	std	Y+28, r14	; 0x1c
     ad4:	fd 8e       	std	Y+29, r15	; 0x1d
     ad6:	8a 89       	ldd	r24, Y+18	; 0x12
     ad8:	9b 89       	ldd	r25, Y+19	; 0x13
     ada:	9a 87       	std	Y+10, r25	; 0x0a
     adc:	89 87       	std	Y+9, r24	; 0x09
     ade:	1d 82       	std	Y+5, r1	; 0x05
     ae0:	1e 82       	std	Y+6, r1	; 0x06
     ae2:	1f 82       	std	Y+7, r1	; 0x07
     ae4:	18 86       	std	Y+8, r1	; 0x08
     ae6:	1b 86       	std	Y+11, r1	; 0x0b
     ae8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
     aec:	89 85       	ldd	r24, Y+9	; 0x09
     aee:	9a 85       	ldd	r25, Y+10	; 0x0a
     af0:	fc 01       	movw	r30, r24
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	a2 81       	ldd	r26, Z+2	; 0x02
     af8:	b3 81       	ldd	r27, Z+3	; 0x03
     afa:	8c 87       	std	Y+12, r24	; 0x0c
     afc:	9d 87       	std	Y+13, r25	; 0x0d
     afe:	ae 87       	std	Y+14, r26	; 0x0e
     b00:	bf 87       	std	Y+15, r27	; 0x0f
     b02:	2c 89       	ldd	r18, Y+20	; 0x14
     b04:	3d 89       	ldd	r19, Y+21	; 0x15
     b06:	4e 89       	ldd	r20, Y+22	; 0x16
     b08:	5f 89       	ldd	r21, Y+23	; 0x17
     b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b0e:	ae 85       	ldd	r26, Y+14	; 0x0e
     b10:	bf 85       	ldd	r27, Y+15	; 0x0f
     b12:	09 8d       	ldd	r16, Y+25	; 0x19
     b14:	bc 01       	movw	r22, r24
     b16:	cd 01       	movw	r24, r26
     b18:	07 d2       	rcall	.+1038   	; 0xf28 <prvTestWaitCondition>
     b1a:	88 8b       	std	Y+16, r24	; 0x10
     b1c:	88 89       	ldd	r24, Y+16	; 0x10
     b1e:	88 23       	and	r24, r24
     b20:	59 f1       	breq	.+86     	; 0xb78 <xEventGroupWaitBits+0xda>
     b22:	8c 85       	ldd	r24, Y+12	; 0x0c
     b24:	9d 85       	ldd	r25, Y+13	; 0x0d
     b26:	ae 85       	ldd	r26, Y+14	; 0x0e
     b28:	bf 85       	ldd	r27, Y+15	; 0x0f
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	ab 83       	std	Y+3, r26	; 0x03
     b30:	bc 83       	std	Y+4, r27	; 0x04
     b32:	1a 8e       	std	Y+26, r1	; 0x1a
     b34:	1b 8e       	std	Y+27, r1	; 0x1b
     b36:	1c 8e       	std	Y+28, r1	; 0x1c
     b38:	1d 8e       	std	Y+29, r1	; 0x1d
     b3a:	88 8d       	ldd	r24, Y+24	; 0x18
     b3c:	88 23       	and	r24, r24
     b3e:	09 f4       	brne	.+2      	; 0xb42 <xEventGroupWaitBits+0xa4>
     b40:	65 c0       	rjmp	.+202    	; 0xc0c <xEventGroupWaitBits+0x16e>
     b42:	89 85       	ldd	r24, Y+9	; 0x09
     b44:	9a 85       	ldd	r25, Y+10	; 0x0a
     b46:	fc 01       	movw	r30, r24
     b48:	20 81       	ld	r18, Z
     b4a:	31 81       	ldd	r19, Z+1	; 0x01
     b4c:	42 81       	ldd	r20, Z+2	; 0x02
     b4e:	53 81       	ldd	r21, Z+3	; 0x03
     b50:	8c 89       	ldd	r24, Y+20	; 0x14
     b52:	9d 89       	ldd	r25, Y+21	; 0x15
     b54:	ae 89       	ldd	r26, Y+22	; 0x16
     b56:	bf 89       	ldd	r27, Y+23	; 0x17
     b58:	80 95       	com	r24
     b5a:	90 95       	com	r25
     b5c:	a0 95       	com	r26
     b5e:	b0 95       	com	r27
     b60:	82 23       	and	r24, r18
     b62:	93 23       	and	r25, r19
     b64:	a4 23       	and	r26, r20
     b66:	b5 23       	and	r27, r21
     b68:	29 85       	ldd	r18, Y+9	; 0x09
     b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b6c:	f9 01       	movw	r30, r18
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
     b76:	4a c0       	rjmp	.+148    	; 0xc0c <xEventGroupWaitBits+0x16e>
     b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b7c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     b7e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     b80:	89 2b       	or	r24, r25
     b82:	8a 2b       	or	r24, r26
     b84:	8b 2b       	or	r24, r27
     b86:	59 f4       	brne	.+22     	; 0xb9e <xEventGroupWaitBits+0x100>
     b88:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8c:	ae 85       	ldd	r26, Y+14	; 0x0e
     b8e:	bf 85       	ldd	r27, Y+15	; 0x0f
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	9a 83       	std	Y+2, r25	; 0x02
     b94:	ab 83       	std	Y+3, r26	; 0x03
     b96:	bc 83       	std	Y+4, r27	; 0x04
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	37 c0       	rjmp	.+110    	; 0xc0c <xEventGroupWaitBits+0x16e>
     b9e:	88 8d       	ldd	r24, Y+24	; 0x18
     ba0:	88 23       	and	r24, r24
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <xEventGroupWaitBits+0x118>
     ba4:	8d 81       	ldd	r24, Y+5	; 0x05
     ba6:	9e 81       	ldd	r25, Y+6	; 0x06
     ba8:	af 81       	ldd	r26, Y+7	; 0x07
     baa:	b8 85       	ldd	r27, Y+8	; 0x08
     bac:	b1 60       	ori	r27, 0x01	; 1
     bae:	8d 83       	std	Y+5, r24	; 0x05
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	af 83       	std	Y+7, r26	; 0x07
     bb4:	b8 87       	std	Y+8, r27	; 0x08
     bb6:	89 8d       	ldd	r24, Y+25	; 0x19
     bb8:	88 23       	and	r24, r24
     bba:	49 f0       	breq	.+18     	; 0xbce <xEventGroupWaitBits+0x130>
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	af 81       	ldd	r26, Y+7	; 0x07
     bc2:	b8 85       	ldd	r27, Y+8	; 0x08
     bc4:	b4 60       	ori	r27, 0x04	; 4
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	af 83       	std	Y+7, r26	; 0x07
     bcc:	b8 87       	std	Y+8, r27	; 0x08
     bce:	2c 89       	ldd	r18, Y+20	; 0x14
     bd0:	3d 89       	ldd	r19, Y+21	; 0x15
     bd2:	4e 89       	ldd	r20, Y+22	; 0x16
     bd4:	5f 89       	ldd	r21, Y+23	; 0x17
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	af 81       	ldd	r26, Y+7	; 0x07
     bdc:	b8 85       	ldd	r27, Y+8	; 0x08
     bde:	82 2b       	or	r24, r18
     be0:	93 2b       	or	r25, r19
     be2:	a4 2b       	or	r26, r20
     be4:	b5 2b       	or	r27, r21
     be6:	29 85       	ldd	r18, Y+9	; 0x09
     be8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bea:	f9 01       	movw	r30, r18
     bec:	34 96       	adiw	r30, 0x04	; 4
     bee:	2a 8d       	ldd	r18, Y+26	; 0x1a
     bf0:	3b 8d       	ldd	r19, Y+27	; 0x1b
     bf2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     bf4:	5d 8d       	ldd	r21, Y+29	; 0x1d
     bf6:	89 01       	movw	r16, r18
     bf8:	9a 01       	movw	r18, r20
     bfa:	ac 01       	movw	r20, r24
     bfc:	bd 01       	movw	r22, r26
     bfe:	cf 01       	movw	r24, r30
     c00:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <vTaskPlaceOnUnorderedEventList>
     c04:	19 82       	std	Y+1, r1	; 0x01
     c06:	1a 82       	std	Y+2, r1	; 0x02
     c08:	1b 82       	std	Y+3, r1	; 0x03
     c0a:	1c 82       	std	Y+4, r1	; 0x04
     c0c:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
     c10:	89 8b       	std	Y+17, r24	; 0x11
     c12:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c14:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c16:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c18:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c1a:	89 2b       	or	r24, r25
     c1c:	8a 2b       	or	r24, r26
     c1e:	8b 2b       	or	r24, r27
     c20:	09 f4       	brne	.+2      	; 0xc24 <xEventGroupWaitBits+0x186>
     c22:	5f c0       	rjmp	.+190    	; 0xce2 <xEventGroupWaitBits+0x244>
     c24:	89 89       	ldd	r24, Y+17	; 0x11
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <xEventGroupWaitBits+0x18e>
     c2a:	75 d6       	rcall	.+3306   	; 0x1916 <vPortYield>
     c2c:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <uxTaskResetEventItemValue>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	9a 83       	std	Y+2, r25	; 0x02
     c38:	ab 83       	std	Y+3, r26	; 0x03
     c3a:	bc 83       	std	Y+4, r27	; 0x04
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	ab 81       	ldd	r26, Y+3	; 0x03
     c42:	bc 81       	ldd	r27, Y+4	; 0x04
     c44:	88 27       	eor	r24, r24
     c46:	99 27       	eor	r25, r25
     c48:	aa 27       	eor	r26, r26
     c4a:	b2 70       	andi	r27, 0x02	; 2
     c4c:	89 2b       	or	r24, r25
     c4e:	8a 2b       	or	r24, r26
     c50:	8b 2b       	or	r24, r27
     c52:	09 f0       	breq	.+2      	; 0xc56 <xEventGroupWaitBits+0x1b8>
     c54:	3d c0       	rjmp	.+122    	; 0xcd0 <xEventGroupWaitBits+0x232>
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	0f 92       	push	r0
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	fc 01       	movw	r30, r24
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	a2 81       	ldd	r26, Z+2	; 0x02
     c68:	b3 81       	ldd	r27, Z+3	; 0x03
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	ab 83       	std	Y+3, r26	; 0x03
     c70:	bc 83       	std	Y+4, r27	; 0x04
     c72:	2c 89       	ldd	r18, Y+20	; 0x14
     c74:	3d 89       	ldd	r19, Y+21	; 0x15
     c76:	4e 89       	ldd	r20, Y+22	; 0x16
     c78:	5f 89       	ldd	r21, Y+23	; 0x17
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	ab 81       	ldd	r26, Y+3	; 0x03
     c80:	bc 81       	ldd	r27, Y+4	; 0x04
     c82:	09 8d       	ldd	r16, Y+25	; 0x19
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	4f d1       	rcall	.+670    	; 0xf28 <prvTestWaitCondition>
     c8a:	88 23       	and	r24, r24
     c8c:	e9 f0       	breq	.+58     	; 0xcc8 <xEventGroupWaitBits+0x22a>
     c8e:	88 8d       	ldd	r24, Y+24	; 0x18
     c90:	88 23       	and	r24, r24
     c92:	d1 f0       	breq	.+52     	; 0xcc8 <xEventGroupWaitBits+0x22a>
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	fc 01       	movw	r30, r24
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	42 81       	ldd	r20, Z+2	; 0x02
     ca0:	53 81       	ldd	r21, Z+3	; 0x03
     ca2:	8c 89       	ldd	r24, Y+20	; 0x14
     ca4:	9d 89       	ldd	r25, Y+21	; 0x15
     ca6:	ae 89       	ldd	r26, Y+22	; 0x16
     ca8:	bf 89       	ldd	r27, Y+23	; 0x17
     caa:	80 95       	com	r24
     cac:	90 95       	com	r25
     cae:	a0 95       	com	r26
     cb0:	b0 95       	com	r27
     cb2:	82 23       	and	r24, r18
     cb4:	93 23       	and	r25, r19
     cb6:	a4 23       	and	r26, r20
     cb8:	b5 23       	and	r27, r21
     cba:	29 85       	ldd	r18, Y+9	; 0x09
     cbc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cbe:	f9 01       	movw	r30, r18
     cc0:	80 83       	st	Z, r24
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	a2 83       	std	Z+2, r26	; 0x02
     cc6:	b3 83       	std	Z+3, r27	; 0x03
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8b 87       	std	Y+11, r24	; 0x0b
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	ab 81       	ldd	r26, Y+3	; 0x03
     cd6:	bc 81       	ldd	r27, Y+4	; 0x04
     cd8:	bb 27       	eor	r27, r27
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	ab 83       	std	Y+3, r26	; 0x03
     ce0:	bc 83       	std	Y+4, r27	; 0x04
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	ab 81       	ldd	r26, Y+3	; 0x03
     ce8:	bc 81       	ldd	r27, Y+4	; 0x04
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	6d 96       	adiw	r28, 0x1d	; 29
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	08 95       	ret

00000d0c <xEventGroupSetBits>:
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	99 8f       	std	Y+25, r25	; 0x19
     d22:	88 8f       	std	Y+24, r24	; 0x18
     d24:	4a 8f       	std	Y+26, r20	; 0x1a
     d26:	5b 8f       	std	Y+27, r21	; 0x1b
     d28:	6c 8f       	std	Y+28, r22	; 0x1c
     d2a:	7d 8f       	std	Y+29, r23	; 0x1d
     d2c:	1b 82       	std	Y+3, r1	; 0x03
     d2e:	1c 82       	std	Y+4, r1	; 0x04
     d30:	1d 82       	std	Y+5, r1	; 0x05
     d32:	1e 82       	std	Y+6, r1	; 0x06
     d34:	88 8d       	ldd	r24, Y+24	; 0x18
     d36:	99 8d       	ldd	r25, Y+25	; 0x19
     d38:	99 87       	std	Y+9, r25	; 0x09
     d3a:	88 87       	std	Y+8, r24	; 0x08
     d3c:	1f 82       	std	Y+7, r1	; 0x07
     d3e:	88 85       	ldd	r24, Y+8	; 0x08
     d40:	99 85       	ldd	r25, Y+9	; 0x09
     d42:	04 96       	adiw	r24, 0x04	; 4
     d44:	9b 87       	std	Y+11, r25	; 0x0b
     d46:	8a 87       	std	Y+10, r24	; 0x0a
     d48:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4c:	03 96       	adiw	r24, 0x03	; 3
     d4e:	9d 87       	std	Y+13, r25	; 0x0d
     d50:	8c 87       	std	Y+12, r24	; 0x0c
     d52:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
     d56:	8a 85       	ldd	r24, Y+10	; 0x0a
     d58:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5a:	fc 01       	movw	r30, r24
     d5c:	87 81       	ldd	r24, Z+7	; 0x07
     d5e:	90 85       	ldd	r25, Z+8	; 0x08
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	88 85       	ldd	r24, Y+8	; 0x08
     d66:	99 85       	ldd	r25, Y+9	; 0x09
     d68:	fc 01       	movw	r30, r24
     d6a:	20 81       	ld	r18, Z
     d6c:	31 81       	ldd	r19, Z+1	; 0x01
     d6e:	42 81       	ldd	r20, Z+2	; 0x02
     d70:	53 81       	ldd	r21, Z+3	; 0x03
     d72:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d74:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d76:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d78:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d7a:	82 2b       	or	r24, r18
     d7c:	93 2b       	or	r25, r19
     d7e:	a4 2b       	or	r26, r20
     d80:	b5 2b       	or	r27, r21
     d82:	28 85       	ldd	r18, Y+8	; 0x08
     d84:	39 85       	ldd	r19, Y+9	; 0x09
     d86:	f9 01       	movw	r30, r18
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
     d90:	95 c0       	rjmp	.+298    	; 0xebc <xEventGroupSetBits+0x1b0>
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	fc 01       	movw	r30, r24
     d98:	84 81       	ldd	r24, Z+4	; 0x04
     d9a:	95 81       	ldd	r25, Z+5	; 0x05
     d9c:	9f 87       	std	Y+15, r25	; 0x0f
     d9e:	8e 87       	std	Y+14, r24	; 0x0e
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	a2 81       	ldd	r26, Z+2	; 0x02
     dac:	b3 81       	ldd	r27, Z+3	; 0x03
     dae:	88 8b       	std	Y+16, r24	; 0x10
     db0:	99 8b       	std	Y+17, r25	; 0x11
     db2:	aa 8b       	std	Y+18, r26	; 0x12
     db4:	bb 8b       	std	Y+19, r27	; 0x13
     db6:	1f 82       	std	Y+7, r1	; 0x07
     db8:	88 89       	ldd	r24, Y+16	; 0x10
     dba:	99 89       	ldd	r25, Y+17	; 0x11
     dbc:	aa 89       	ldd	r26, Y+18	; 0x12
     dbe:	bb 89       	ldd	r27, Y+19	; 0x13
     dc0:	88 27       	eor	r24, r24
     dc2:	99 27       	eor	r25, r25
     dc4:	aa 27       	eor	r26, r26
     dc6:	8c 8b       	std	Y+20, r24	; 0x14
     dc8:	9d 8b       	std	Y+21, r25	; 0x15
     dca:	ae 8b       	std	Y+22, r26	; 0x16
     dcc:	bf 8b       	std	Y+23, r27	; 0x17
     dce:	88 89       	ldd	r24, Y+16	; 0x10
     dd0:	99 89       	ldd	r25, Y+17	; 0x11
     dd2:	aa 89       	ldd	r26, Y+18	; 0x12
     dd4:	bb 89       	ldd	r27, Y+19	; 0x13
     dd6:	bb 27       	eor	r27, r27
     dd8:	88 8b       	std	Y+16, r24	; 0x10
     dda:	99 8b       	std	Y+17, r25	; 0x11
     ddc:	aa 8b       	std	Y+18, r26	; 0x12
     dde:	bb 8b       	std	Y+19, r27	; 0x13
     de0:	8c 89       	ldd	r24, Y+20	; 0x14
     de2:	9d 89       	ldd	r25, Y+21	; 0x15
     de4:	ae 89       	ldd	r26, Y+22	; 0x16
     de6:	bf 89       	ldd	r27, Y+23	; 0x17
     de8:	88 27       	eor	r24, r24
     dea:	99 27       	eor	r25, r25
     dec:	aa 27       	eor	r26, r26
     dee:	b4 70       	andi	r27, 0x04	; 4
     df0:	89 2b       	or	r24, r25
     df2:	8a 2b       	or	r24, r26
     df4:	8b 2b       	or	r24, r27
     df6:	b1 f4       	brne	.+44     	; 0xe24 <xEventGroupSetBits+0x118>
     df8:	88 85       	ldd	r24, Y+8	; 0x08
     dfa:	99 85       	ldd	r25, Y+9	; 0x09
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 81       	ld	r18, Z
     e00:	31 81       	ldd	r19, Z+1	; 0x01
     e02:	42 81       	ldd	r20, Z+2	; 0x02
     e04:	53 81       	ldd	r21, Z+3	; 0x03
     e06:	88 89       	ldd	r24, Y+16	; 0x10
     e08:	99 89       	ldd	r25, Y+17	; 0x11
     e0a:	aa 89       	ldd	r26, Y+18	; 0x12
     e0c:	bb 89       	ldd	r27, Y+19	; 0x13
     e0e:	82 23       	and	r24, r18
     e10:	93 23       	and	r25, r19
     e12:	a4 23       	and	r26, r20
     e14:	b5 23       	and	r27, r21
     e16:	89 2b       	or	r24, r25
     e18:	8a 2b       	or	r24, r26
     e1a:	8b 2b       	or	r24, r27
     e1c:	e9 f0       	breq	.+58     	; 0xe58 <xEventGroupSetBits+0x14c>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	8f 83       	std	Y+7, r24	; 0x07
     e22:	1a c0       	rjmp	.+52     	; 0xe58 <xEventGroupSetBits+0x14c>
     e24:	88 85       	ldd	r24, Y+8	; 0x08
     e26:	99 85       	ldd	r25, Y+9	; 0x09
     e28:	fc 01       	movw	r30, r24
     e2a:	20 81       	ld	r18, Z
     e2c:	31 81       	ldd	r19, Z+1	; 0x01
     e2e:	42 81       	ldd	r20, Z+2	; 0x02
     e30:	53 81       	ldd	r21, Z+3	; 0x03
     e32:	88 89       	ldd	r24, Y+16	; 0x10
     e34:	99 89       	ldd	r25, Y+17	; 0x11
     e36:	aa 89       	ldd	r26, Y+18	; 0x12
     e38:	bb 89       	ldd	r27, Y+19	; 0x13
     e3a:	28 23       	and	r18, r24
     e3c:	39 23       	and	r19, r25
     e3e:	4a 23       	and	r20, r26
     e40:	5b 23       	and	r21, r27
     e42:	88 89       	ldd	r24, Y+16	; 0x10
     e44:	99 89       	ldd	r25, Y+17	; 0x11
     e46:	aa 89       	ldd	r26, Y+18	; 0x12
     e48:	bb 89       	ldd	r27, Y+19	; 0x13
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	4a 07       	cpc	r20, r26
     e50:	5b 07       	cpc	r21, r27
     e52:	11 f4       	brne	.+4      	; 0xe58 <xEventGroupSetBits+0x14c>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	8f 81       	ldd	r24, Y+7	; 0x07
     e5a:	88 23       	and	r24, r24
     e5c:	59 f1       	breq	.+86     	; 0xeb4 <xEventGroupSetBits+0x1a8>
     e5e:	8c 89       	ldd	r24, Y+20	; 0x14
     e60:	9d 89       	ldd	r25, Y+21	; 0x15
     e62:	ae 89       	ldd	r26, Y+22	; 0x16
     e64:	bf 89       	ldd	r27, Y+23	; 0x17
     e66:	88 27       	eor	r24, r24
     e68:	99 27       	eor	r25, r25
     e6a:	aa 27       	eor	r26, r26
     e6c:	b1 70       	andi	r27, 0x01	; 1
     e6e:	89 2b       	or	r24, r25
     e70:	8a 2b       	or	r24, r26
     e72:	8b 2b       	or	r24, r27
     e74:	81 f0       	breq	.+32     	; 0xe96 <xEventGroupSetBits+0x18a>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	4d 81       	ldd	r20, Y+5	; 0x05
     e7c:	5e 81       	ldd	r21, Y+6	; 0x06
     e7e:	88 89       	ldd	r24, Y+16	; 0x10
     e80:	99 89       	ldd	r25, Y+17	; 0x11
     e82:	aa 89       	ldd	r26, Y+18	; 0x12
     e84:	bb 89       	ldd	r27, Y+19	; 0x13
     e86:	82 2b       	or	r24, r18
     e88:	93 2b       	or	r25, r19
     e8a:	a4 2b       	or	r26, r20
     e8c:	b5 2b       	or	r27, r21
     e8e:	8b 83       	std	Y+3, r24	; 0x03
     e90:	9c 83       	std	Y+4, r25	; 0x04
     e92:	ad 83       	std	Y+5, r26	; 0x05
     e94:	be 83       	std	Y+6, r27	; 0x06
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	99 85       	ldd	r25, Y+9	; 0x09
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	a2 81       	ldd	r26, Z+2	; 0x02
     ea2:	b3 81       	ldd	r27, Z+3	; 0x03
     ea4:	b2 60       	ori	r27, 0x02	; 2
     ea6:	29 81       	ldd	r18, Y+1	; 0x01
     ea8:	3a 81       	ldd	r19, Y+2	; 0x02
     eaa:	ac 01       	movw	r20, r24
     eac:	bd 01       	movw	r22, r26
     eae:	c9 01       	movw	r24, r18
     eb0:	0e 94 68 22 	call	0x44d0	; 0x44d0 <vTaskRemoveFromUnorderedEventList>
     eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	29 81       	ldd	r18, Y+1	; 0x01
     ebe:	3a 81       	ldd	r19, Y+2	; 0x02
     ec0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	09 f0       	breq	.+2      	; 0xecc <xEventGroupSetBits+0x1c0>
     eca:	63 cf       	rjmp	.-314    	; 0xd92 <xEventGroupSetBits+0x86>
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	99 85       	ldd	r25, Y+9	; 0x09
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	42 81       	ldd	r20, Z+2	; 0x02
     ed8:	53 81       	ldd	r21, Z+3	; 0x03
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	ad 81       	ldd	r26, Y+5	; 0x05
     ee0:	be 81       	ldd	r27, Y+6	; 0x06
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	a0 95       	com	r26
     ee8:	b0 95       	com	r27
     eea:	82 23       	and	r24, r18
     eec:	93 23       	and	r25, r19
     eee:	a4 23       	and	r26, r20
     ef0:	b5 23       	and	r27, r21
     ef2:	28 85       	ldd	r18, Y+8	; 0x08
     ef4:	39 85       	ldd	r19, Y+9	; 0x09
     ef6:	f9 01       	movw	r30, r18
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	a2 83       	std	Z+2, r26	; 0x02
     efe:	b3 83       	std	Z+3, r27	; 0x03
     f00:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	99 85       	ldd	r25, Y+9	; 0x09
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	a2 81       	ldd	r26, Z+2	; 0x02
     f10:	b3 81       	ldd	r27, Z+3	; 0x03
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	6d 96       	adiw	r28, 0x1d	; 29
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
     f28:	0f 93       	push	r16
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	2a 97       	sbiw	r28, 0x0a	; 10
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	6a 83       	std	Y+2, r22	; 0x02
     f40:	7b 83       	std	Y+3, r23	; 0x03
     f42:	8c 83       	std	Y+4, r24	; 0x04
     f44:	9d 83       	std	Y+5, r25	; 0x05
     f46:	2e 83       	std	Y+6, r18	; 0x06
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	48 87       	std	Y+8, r20	; 0x08
     f4c:	59 87       	std	Y+9, r21	; 0x09
     f4e:	0a 87       	std	Y+10, r16	; 0x0a
    BaseType_t xWaitConditionMet = pdFALSE;
     f50:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
     f52:	8a 85       	ldd	r24, Y+10	; 0x0a
     f54:	88 23       	and	r24, r24
     f56:	99 f4       	brne	.+38     	; 0xf7e <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f58:	2a 81       	ldd	r18, Y+2	; 0x02
     f5a:	3b 81       	ldd	r19, Y+3	; 0x03
     f5c:	4c 81       	ldd	r20, Y+4	; 0x04
     f5e:	5d 81       	ldd	r21, Y+5	; 0x05
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	a8 85       	ldd	r26, Y+8	; 0x08
     f66:	b9 85       	ldd	r27, Y+9	; 0x09
     f68:	82 23       	and	r24, r18
     f6a:	93 23       	and	r25, r19
     f6c:	a4 23       	and	r26, r20
     f6e:	b5 23       	and	r27, r21
     f70:	89 2b       	or	r24, r25
     f72:	8a 2b       	or	r24, r26
     f74:	8b 2b       	or	r24, r27
     f76:	d1 f0       	breq	.+52     	; 0xfac <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	17 c0       	rjmp	.+46     	; 0xfac <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f7e:	2a 81       	ldd	r18, Y+2	; 0x02
     f80:	3b 81       	ldd	r19, Y+3	; 0x03
     f82:	4c 81       	ldd	r20, Y+4	; 0x04
     f84:	5d 81       	ldd	r21, Y+5	; 0x05
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	a8 85       	ldd	r26, Y+8	; 0x08
     f8c:	b9 85       	ldd	r27, Y+9	; 0x09
     f8e:	28 23       	and	r18, r24
     f90:	39 23       	and	r19, r25
     f92:	4a 23       	and	r20, r26
     f94:	5b 23       	and	r21, r27
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	9f 81       	ldd	r25, Y+7	; 0x07
     f9a:	a8 85       	ldd	r26, Y+8	; 0x08
     f9c:	b9 85       	ldd	r27, Y+9	; 0x09
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	4a 07       	cpc	r20, r26
     fa4:	5b 07       	cpc	r21, r27
     fa6:	11 f4       	brne	.+4      	; 0xfac <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	2a 96       	adiw	r28, 0x0a	; 10
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	2a 97       	sbiw	r28, 0x0a	; 10
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	9a 87       	std	Y+10, r25	; 0x0a
     fd8:	89 87       	std	Y+9, r24	; 0x09
     fda:	1e 82       	std	Y+6, r1	; 0x06
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
     fe2:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <pxEnd>
     fe6:	90 91 8f 15 	lds	r25, 0x158F	; 0x80158f <pxEnd+0x1>
     fea:	89 2b       	or	r24, r25
     fec:	09 f4       	brne	.+2      	; 0xff0 <pvPortMalloc+0x2e>
     fee:	6e d1       	rcall	.+732    	; 0x12cc <prvHeapInit>
     ff0:	20 91 98 15 	lds	r18, 0x1598	; 0x801598 <xBlockAllocatedBit>
     ff4:	30 91 99 15 	lds	r19, 0x1599	; 0x801599 <xBlockAllocatedBit+0x1>
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	82 23       	and	r24, r18
     ffe:	93 23       	and	r25, r19
    1000:	89 2b       	or	r24, r25
    1002:	09 f0       	breq	.+2      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1004:	e1 c0       	rjmp	.+450    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	89 2b       	or	r24, r25
    100c:	a1 f0       	breq	.+40     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    100e:	24 e0       	ldi	r18, 0x04	; 4
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	28 0f       	add	r18, r24
    1018:	39 1f       	adc	r19, r25
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	48 f4       	brcc	.+18     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	29 85       	ldd	r18, Y+9	; 0x09
    102a:	3a 85       	ldd	r19, Y+10	; 0x0a
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	9a 87       	std	Y+10, r25	; 0x0a
    1032:	89 87       	std	Y+9, r24	; 0x09
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1036:	1a 86       	std	Y+10, r1	; 0x0a
    1038:	19 86       	std	Y+9, r1	; 0x09
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	89 2b       	or	r24, r25
    1040:	09 f4       	brne	.+2      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1042:	c2 c0       	rjmp	.+388    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    1044:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xFreeBytesRemaining>
    1048:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <xFreeBytesRemaining+0x1>
    104c:	29 85       	ldd	r18, Y+9	; 0x09
    104e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1050:	82 17       	cp	r24, r18
    1052:	93 07       	cpc	r25, r19
    1054:	08 f4       	brcc	.+2      	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1056:	b8 c0       	rjmp	.+368    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    1058:	8a e8       	ldi	r24, 0x8A	; 138
    105a:	95 e1       	ldi	r25, 0x15	; 21
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	80 91 8a 15 	lds	r24, 0x158A	; 0x80158a <xStart>
    1064:	90 91 8b 15 	lds	r25, 0x158B	; 0x80158b <xStart+0x1>
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	fc 01       	movw	r30, r24
    108a:	22 81       	ldd	r18, Z+2	; 0x02
    108c:	33 81       	ldd	r19, Z+3	; 0x03
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	fc 01       	movw	r30, r24
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	89 2b       	or	r24, r25
    10a4:	21 f7       	brne	.-56     	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    10a6:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <pxEnd>
    10aa:	90 91 8f 15 	lds	r25, 0x158F	; 0x80158f <pxEnd+0x1>
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	09 f4       	brne	.+2      	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
    10b8:	87 c0       	rjmp	.+270    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	fc 01       	movw	r30, r24
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 81       	ld	r18, Z
    10d8:	31 81       	ldd	r19, Z+1	; 0x01
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	fc 01       	movw	r30, r24
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	fc 01       	movw	r30, r24
    10ea:	22 81       	ldd	r18, Z+2	; 0x02
    10ec:	33 81       	ldd	r19, Z+3	; 0x03
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	28 1b       	sub	r18, r24
    10f4:	39 0b       	sbc	r19, r25
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 17       	cp	r24, r18
    1100:	93 07       	cpc	r25, r19
    1102:	00 f5       	brcc	.+64     	; 0x1144 <__EEPROM_REGION_LENGTH__+0x144>
    1104:	29 81       	ldd	r18, Y+1	; 0x01
    1106:	3a 81       	ldd	r19, Y+2	; 0x02
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	98 87       	std	Y+8, r25	; 0x08
    1112:	8f 83       	std	Y+7, r24	; 0x07
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	fc 01       	movw	r30, r24
    111a:	22 81       	ldd	r18, Z+2	; 0x02
    111c:	33 81       	ldd	r19, Z+3	; 0x03
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	28 1b       	sub	r18, r24
    1124:	39 0b       	sbc	r19, r25
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	fc 01       	movw	r30, r24
    112c:	33 83       	std	Z+3, r19	; 0x03
    112e:	22 83       	std	Z+2, r18	; 0x02
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	29 85       	ldd	r18, Y+9	; 0x09
    1136:	3a 85       	ldd	r19, Y+10	; 0x0a
    1138:	fc 01       	movw	r30, r24
    113a:	33 83       	std	Z+3, r19	; 0x03
    113c:	22 83       	std	Z+2, r18	; 0x02
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	44 d1       	rcall	.+648    	; 0x13cc <prvInsertBlockIntoFreeList>
    1144:	20 91 90 15 	lds	r18, 0x1590	; 0x801590 <xFreeBytesRemaining>
    1148:	30 91 91 15 	lds	r19, 0x1591	; 0x801591 <xFreeBytesRemaining+0x1>
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	fc 01       	movw	r30, r24
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	a9 01       	movw	r20, r18
    1158:	48 1b       	sub	r20, r24
    115a:	59 0b       	sbc	r21, r25
    115c:	ca 01       	movw	r24, r20
    115e:	90 93 91 15 	sts	0x1591, r25	; 0x801591 <xFreeBytesRemaining+0x1>
    1162:	80 93 90 15 	sts	0x1590, r24	; 0x801590 <xFreeBytesRemaining>
    1166:	20 91 90 15 	lds	r18, 0x1590	; 0x801590 <xFreeBytesRemaining>
    116a:	30 91 91 15 	lds	r19, 0x1591	; 0x801591 <xFreeBytesRemaining+0x1>
    116e:	80 91 92 15 	lds	r24, 0x1592	; 0x801592 <xMinimumEverFreeBytesRemaining>
    1172:	90 91 93 15 	lds	r25, 0x1593	; 0x801593 <xMinimumEverFreeBytesRemaining+0x1>
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	40 f4       	brcc	.+16     	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
    117c:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xFreeBytesRemaining>
    1180:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <xFreeBytesRemaining+0x1>
    1184:	90 93 93 15 	sts	0x1593, r25	; 0x801593 <xMinimumEverFreeBytesRemaining+0x1>
    1188:	80 93 92 15 	sts	0x1592, r24	; 0x801592 <xMinimumEverFreeBytesRemaining>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	22 81       	ldd	r18, Z+2	; 0x02
    1194:	33 81       	ldd	r19, Z+3	; 0x03
    1196:	80 91 98 15 	lds	r24, 0x1598	; 0x801598 <xBlockAllocatedBit>
    119a:	90 91 99 15 	lds	r25, 0x1599	; 0x801599 <xBlockAllocatedBit+0x1>
    119e:	28 2b       	or	r18, r24
    11a0:	39 2b       	or	r19, r25
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	fc 01       	movw	r30, r24
    11a8:	33 83       	std	Z+3, r19	; 0x03
    11aa:	22 83       	std	Z+2, r18	; 0x02
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	fc 01       	movw	r30, r24
    11b2:	11 82       	std	Z+1, r1	; 0x01
    11b4:	10 82       	st	Z, r1
    11b6:	80 91 94 15 	lds	r24, 0x1594	; 0x801594 <xNumberOfSuccessfulAllocations>
    11ba:	90 91 95 15 	lds	r25, 0x1595	; 0x801595 <xNumberOfSuccessfulAllocations+0x1>
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	90 93 95 15 	sts	0x1595, r25	; 0x801595 <xNumberOfSuccessfulAllocations+0x1>
    11c4:	80 93 94 15 	sts	0x1594, r24	; 0x801594 <xNumberOfSuccessfulAllocations>
    11c8:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	89 2b       	or	r24, r25
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <__EEPROM_REGION_LENGTH__+0x1d8>
    11d4:	0e 94 8b 31 	call	0x6316	; 0x6316 <vApplicationMallocFailedHook>
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	2a 96       	adiw	r28, 0x0a	; 10
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <vPortFree>:
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <vPortFree+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <vPortFree+0x8>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	89 2b       	or	r24, r25
    120c:	09 f4       	brne	.+2      	; 0x1210 <vPortFree+0x22>
    120e:	54 c0       	rjmp	.+168    	; 0x12b8 <vPortFree+0xca>
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	91 95       	neg	r25
    1216:	81 95       	neg	r24
    1218:	91 09       	sbc	r25, r1
    121a:	29 81       	ldd	r18, Y+1	; 0x01
    121c:	3a 81       	ldd	r19, Y+2	; 0x02
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	fc 01       	movw	r30, r24
    1234:	22 81       	ldd	r18, Z+2	; 0x02
    1236:	33 81       	ldd	r19, Z+3	; 0x03
    1238:	80 91 98 15 	lds	r24, 0x1598	; 0x801598 <xBlockAllocatedBit>
    123c:	90 91 99 15 	lds	r25, 0x1599	; 0x801599 <xBlockAllocatedBit+0x1>
    1240:	82 23       	and	r24, r18
    1242:	93 23       	and	r25, r19
    1244:	89 2b       	or	r24, r25
    1246:	c1 f1       	breq	.+112    	; 0x12b8 <vPortFree+0xca>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	fc 01       	movw	r30, r24
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	89 2b       	or	r24, r25
    1254:	89 f5       	brne	.+98     	; 0x12b8 <vPortFree+0xca>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	fc 01       	movw	r30, r24
    125c:	22 81       	ldd	r18, Z+2	; 0x02
    125e:	33 81       	ldd	r19, Z+3	; 0x03
    1260:	80 91 98 15 	lds	r24, 0x1598	; 0x801598 <xBlockAllocatedBit>
    1264:	90 91 99 15 	lds	r25, 0x1599	; 0x801599 <xBlockAllocatedBit+0x1>
    1268:	80 95       	com	r24
    126a:	90 95       	com	r25
    126c:	28 23       	and	r18, r24
    126e:	39 23       	and	r19, r25
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	fc 01       	movw	r30, r24
    1276:	33 83       	std	Z+3, r19	; 0x03
    1278:	22 83       	std	Z+2, r18	; 0x02
    127a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	fc 01       	movw	r30, r24
    1284:	22 81       	ldd	r18, Z+2	; 0x02
    1286:	33 81       	ldd	r19, Z+3	; 0x03
    1288:	80 91 90 15 	lds	r24, 0x1590	; 0x801590 <xFreeBytesRemaining>
    128c:	90 91 91 15 	lds	r25, 0x1591	; 0x801591 <xFreeBytesRemaining+0x1>
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	90 93 91 15 	sts	0x1591, r25	; 0x801591 <xFreeBytesRemaining+0x1>
    1298:	80 93 90 15 	sts	0x1590, r24	; 0x801590 <xFreeBytesRemaining>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	95 d0       	rcall	.+298    	; 0x13cc <prvInsertBlockIntoFreeList>
    12a2:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <xNumberOfSuccessfulFrees>
    12a6:	90 91 97 15 	lds	r25, 0x1597	; 0x801597 <xNumberOfSuccessfulFrees+0x1>
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	90 93 97 15 	sts	0x1597, r25	; 0x801597 <xNumberOfSuccessfulFrees+0x1>
    12b0:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <xNumberOfSuccessfulFrees>
    12b4:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    12b8:	00 00       	nop
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	28 97       	sbiw	r28, 0x08	; 8
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    12e0:	8c ea       	ldi	r24, 0xAC	; 172
    12e2:	9d e0       	ldi	r25, 0x0D	; 13
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
    12e8:	8e ed       	ldi	r24, 0xDE	; 222
    12ea:	97 e0       	ldi	r25, 0x07	; 7
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	9e 83       	std	Y+6, r25	; 0x06
    12f6:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	90 93 8b 15 	sts	0x158B, r25	; 0x80158b <xStart+0x1>
    1300:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <xStart>
    xStart.xBlockSize = ( size_t ) 0;
    1304:	10 92 8d 15 	sts	0x158D, r1	; 0x80158d <xStart+0x3>
    1308:	10 92 8c 15 	sts	0x158C, r1	; 0x80158c <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    130c:	2d 81       	ldd	r18, Y+5	; 0x05
    130e:	3e 81       	ldd	r19, Y+6	; 0x06
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	a9 01       	movw	r20, r18
    1326:	48 1b       	sub	r20, r24
    1328:	59 0b       	sbc	r21, r25
    132a:	ca 01       	movw	r24, r20
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	90 93 8f 15 	sts	0x158F, r25	; 0x80158f <pxEnd+0x1>
    1338:	80 93 8e 15 	sts	0x158E, r24	; 0x80158e <pxEnd>
    pxEnd->xBlockSize = 0;
    133c:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <pxEnd>
    1340:	90 91 8f 15 	lds	r25, 0x158F	; 0x80158f <pxEnd+0x1>
    1344:	fc 01       	movw	r30, r24
    1346:	13 82       	std	Z+3, r1	; 0x03
    1348:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    134a:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <pxEnd>
    134e:	90 91 8f 15 	lds	r25, 0x158F	; 0x80158f <pxEnd+0x1>
    1352:	fc 01       	movw	r30, r24
    1354:	11 82       	std	Z+1, r1	; 0x01
    1356:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	98 87       	std	Y+8, r25	; 0x08
    135e:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	2b 81       	ldd	r18, Y+3	; 0x03
    1366:	3c 81       	ldd	r19, Y+4	; 0x04
    1368:	28 1b       	sub	r18, r24
    136a:	39 0b       	sbc	r19, r25
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	fc 01       	movw	r30, r24
    1372:	33 83       	std	Z+3, r19	; 0x03
    1374:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1376:	20 91 8e 15 	lds	r18, 0x158E	; 0x80158e <pxEnd>
    137a:	30 91 8f 15 	lds	r19, 0x158F	; 0x80158f <pxEnd+0x1>
    137e:	8f 81       	ldd	r24, Y+7	; 0x07
    1380:	98 85       	ldd	r25, Y+8	; 0x08
    1382:	fc 01       	movw	r30, r24
    1384:	31 83       	std	Z+1, r19	; 0x01
    1386:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1388:	8f 81       	ldd	r24, Y+7	; 0x07
    138a:	98 85       	ldd	r25, Y+8	; 0x08
    138c:	fc 01       	movw	r30, r24
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	90 93 93 15 	sts	0x1593, r25	; 0x801593 <xMinimumEverFreeBytesRemaining+0x1>
    1396:	80 93 92 15 	sts	0x1592, r24	; 0x801592 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    139a:	8f 81       	ldd	r24, Y+7	; 0x07
    139c:	98 85       	ldd	r25, Y+8	; 0x08
    139e:	fc 01       	movw	r30, r24
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	90 93 91 15 	sts	0x1591, r25	; 0x801591 <xFreeBytesRemaining+0x1>
    13a8:	80 93 90 15 	sts	0x1590, r24	; 0x801590 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e8       	ldi	r25, 0x80	; 128
    13b0:	90 93 99 15 	sts	0x1599, r25	; 0x801599 <xBlockAllocatedBit+0x1>
    13b4:	80 93 98 15 	sts	0x1598, r24	; 0x801598 <xBlockAllocatedBit>
}
    13b8:	00 00       	nop
    13ba:	28 96       	adiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <prvInsertBlockIntoFreeList+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <prvInsertBlockIntoFreeList+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    13dc:	8a e8       	ldi	r24, 0x8A	; 138
    13de:	95 e1       	ldi	r25, 0x15	; 21
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <prvInsertBlockIntoFreeList+0x28>
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	fc 01       	movw	r30, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	78 f3       	brcs	.-34     	; 0x13e6 <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	fc 01       	movw	r30, r24
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	28 0f       	add	r18, r24
    1420:	39 1f       	adc	r19, r25
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	a9 f4       	brne	.+42     	; 0x1456 <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	fc 01       	movw	r30, r24
    1432:	22 81       	ldd	r18, Z+2	; 0x02
    1434:	33 81       	ldd	r19, Z+3	; 0x03
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	fc 01       	movw	r30, r24
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	28 0f       	add	r18, r24
    1442:	39 1f       	adc	r19, r25
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	fc 01       	movw	r30, r24
    144a:	33 83       	std	Z+3, r19	; 0x03
    144c:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	fc 01       	movw	r30, r24
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	28 0f       	add	r18, r24
    146e:	39 1f       	adc	r19, r25
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	fc 01       	movw	r30, r24
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	28 17       	cp	r18, r24
    147c:	39 07       	cpc	r19, r25
    147e:	c1 f5       	brne	.+112    	; 0x14f0 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	fc 01       	movw	r30, r24
    1486:	20 81       	ld	r18, Z
    1488:	31 81       	ldd	r19, Z+1	; 0x01
    148a:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <pxEnd>
    148e:	90 91 8f 15 	lds	r25, 0x158F	; 0x80158f <pxEnd+0x1>
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	11 f1       	breq	.+68     	; 0x14dc <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	fc 01       	movw	r30, r24
    149e:	22 81       	ldd	r18, Z+2	; 0x02
    14a0:	33 81       	ldd	r19, Z+3	; 0x03
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	fc 01       	movw	r30, r24
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	fc 01       	movw	r30, r24
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	28 0f       	add	r18, r24
    14b4:	39 1f       	adc	r19, r25
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	fc 01       	movw	r30, r24
    14bc:	33 83       	std	Z+3, r19	; 0x03
    14be:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	fc 01       	movw	r30, r24
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 81       	ld	r18, Z
    14ce:	31 81       	ldd	r19, Z+1	; 0x01
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	fc 01       	movw	r30, r24
    14d6:	31 83       	std	Z+1, r19	; 0x01
    14d8:	20 83       	st	Z, r18
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    14dc:	20 91 8e 15 	lds	r18, 0x158E	; 0x80158e <pxEnd>
    14e0:	30 91 8f 15 	lds	r19, 0x158F	; 0x80158f <pxEnd+0x1>
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	fc 01       	movw	r30, r24
    14ea:	31 83       	std	Z+1, r19	; 0x01
    14ec:	20 83       	st	Z, r18
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 81       	ld	r18, Z
    14f8:	31 81       	ldd	r19, Z+1	; 0x01
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	fc 01       	movw	r30, r24
    1500:	31 83       	std	Z+1, r19	; 0x01
    1502:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1504:	29 81       	ldd	r18, Y+1	; 0x01
    1506:	3a 81       	ldd	r19, Y+2	; 0x02
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	39 f0       	breq	.+14     	; 0x1520 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	fc 01       	movw	r30, r24
    151c:	31 83       	std	Z+1, r19	; 0x01
    151e:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1520:	00 00       	nop
    1522:	26 96       	adiw	r28, 0x06	; 6
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	1f 92       	push	r1
    153a:	1f 92       	push	r1
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	9c 01       	movw	r18, r24
    154a:	2d 5f       	subi	r18, 0xFD	; 253
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	fc 01       	movw	r30, r24
    1554:	32 83       	std	Z+2, r19	; 0x02
    1556:	21 83       	std	Z+1, r18	; 0x01
    1558:	29 81       	ldd	r18, Y+1	; 0x01
    155a:	3a 81       	ldd	r19, Y+2	; 0x02
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	dc 01       	movw	r26, r24
    1562:	f9 01       	movw	r30, r18
    1564:	83 83       	std	Z+3, r24	; 0x03
    1566:	94 83       	std	Z+4, r25	; 0x04
    1568:	a5 83       	std	Z+5, r26	; 0x05
    156a:	b6 83       	std	Z+6, r27	; 0x06
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	9c 01       	movw	r18, r24
    1572:	2d 5f       	subi	r18, 0xFD	; 253
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	fc 01       	movw	r30, r24
    157c:	30 87       	std	Z+8, r19	; 0x08
    157e:	27 83       	std	Z+7, r18	; 0x07
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	9c 01       	movw	r18, r24
    1586:	2d 5f       	subi	r18, 0xFD	; 253
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	fc 01       	movw	r30, r24
    1590:	32 87       	std	Z+10, r19	; 0x0a
    1592:	21 87       	std	Z+9, r18	; 0x09
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	fc 01       	movw	r30, r24
    159a:	10 82       	st	Z, r1
    159c:	00 00       	nop
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <vListInitialiseItem>:
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	1f 92       	push	r1
    15ae:	1f 92       	push	r1
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	13 86       	std	Z+11, r1	; 0x0b
    15c0:	12 86       	std	Z+10, r1	; 0x0a
    15c2:	00 00       	nop
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	2a 97       	sbiw	r28, 0x0a	; 10
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	7a 87       	std	Y+10, r23	; 0x0a
    15e8:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	a2 81       	ldd	r26, Z+2	; 0x02
    15f6:	b3 81       	ldd	r27, Z+3	; 0x03
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	ad 83       	std	Y+5, r26	; 0x05
    15fe:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	ad 81       	ldd	r26, Y+5	; 0x05
    1606:	be 81       	ldd	r27, Y+6	; 0x06
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	af 4f       	sbci	r26, 0xFF	; 255
    160e:	bf 4f       	sbci	r27, 0xFF	; 255
    1610:	41 f4       	brne	.+16     	; 0x1622 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	fc 01       	movw	r30, r24
    1618:	81 85       	ldd	r24, Z+9	; 0x09
    161a:	92 85       	ldd	r25, Z+10	; 0x0a
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	20 c0       	rjmp	.+64     	; 0x1662 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	03 96       	adiw	r24, 0x03	; 3
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	07 c0       	rjmp	.+14     	; 0x163c <vListInsert+0x6e>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	fc 01       	movw	r30, r24
    1634:	84 81       	ldd	r24, Z+4	; 0x04
    1636:	95 81       	ldd	r25, Z+5	; 0x05
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	fc 01       	movw	r30, r24
    1642:	84 81       	ldd	r24, Z+4	; 0x04
    1644:	95 81       	ldd	r25, Z+5	; 0x05
    1646:	fc 01       	movw	r30, r24
    1648:	20 81       	ld	r18, Z
    164a:	31 81       	ldd	r19, Z+1	; 0x01
    164c:	42 81       	ldd	r20, Z+2	; 0x02
    164e:	53 81       	ldd	r21, Z+3	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	ad 81       	ldd	r26, Y+5	; 0x05
    1656:	be 81       	ldd	r27, Y+6	; 0x06
    1658:	82 17       	cp	r24, r18
    165a:	93 07       	cpc	r25, r19
    165c:	a4 07       	cpc	r26, r20
    165e:	b5 07       	cpc	r27, r21
    1660:	30 f7       	brcc	.-52     	; 0x162e <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	fc 01       	movw	r30, r24
    1668:	24 81       	ldd	r18, Z+4	; 0x04
    166a:	35 81       	ldd	r19, Z+5	; 0x05
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	fc 01       	movw	r30, r24
    1672:	35 83       	std	Z+5, r19	; 0x05
    1674:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	fc 01       	movw	r30, r24
    167c:	84 81       	ldd	r24, Z+4	; 0x04
    167e:	95 81       	ldd	r25, Z+5	; 0x05
    1680:	29 85       	ldd	r18, Y+9	; 0x09
    1682:	3a 85       	ldd	r19, Y+10	; 0x0a
    1684:	fc 01       	movw	r30, r24
    1686:	37 83       	std	Z+7, r19	; 0x07
    1688:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	29 81       	ldd	r18, Y+1	; 0x01
    1690:	3a 81       	ldd	r19, Y+2	; 0x02
    1692:	fc 01       	movw	r30, r24
    1694:	37 83       	std	Z+7, r19	; 0x07
    1696:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	29 85       	ldd	r18, Y+9	; 0x09
    169e:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a0:	fc 01       	movw	r30, r24
    16a2:	35 83       	std	Z+5, r19	; 0x05
    16a4:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	2f 81       	ldd	r18, Y+7	; 0x07
    16ac:	38 85       	ldd	r19, Y+8	; 0x08
    16ae:	fc 01       	movw	r30, r24
    16b0:	33 87       	std	Z+11, r19	; 0x0b
    16b2:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    16b4:	8f 81       	ldd	r24, Y+7	; 0x07
    16b6:	98 85       	ldd	r25, Y+8	; 0x08
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	28 0f       	add	r18, r24
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
}
    16c8:	00 00       	nop
    16ca:	2a 96       	adiw	r28, 0x0a	; 10
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <uxListRemove+0x6>
    16e2:	1f 92       	push	r1
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	fc 01       	movw	r30, r24
    16f2:	82 85       	ldd	r24, Z+10	; 0x0a
    16f4:	93 85       	ldd	r25, Z+11	; 0x0b
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	fc 01       	movw	r30, r24
    1700:	84 81       	ldd	r24, Z+4	; 0x04
    1702:	95 81       	ldd	r25, Z+5	; 0x05
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	f9 01       	movw	r30, r18
    170a:	26 81       	ldd	r18, Z+6	; 0x06
    170c:	37 81       	ldd	r19, Z+7	; 0x07
    170e:	fc 01       	movw	r30, r24
    1710:	37 83       	std	Z+7, r19	; 0x07
    1712:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	fc 01       	movw	r30, r24
    171a:	86 81       	ldd	r24, Z+6	; 0x06
    171c:	97 81       	ldd	r25, Z+7	; 0x07
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	f9 01       	movw	r30, r18
    1724:	24 81       	ldd	r18, Z+4	; 0x04
    1726:	35 81       	ldd	r19, Z+5	; 0x05
    1728:	fc 01       	movw	r30, r24
    172a:	35 83       	std	Z+5, r19	; 0x05
    172c:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	fc 01       	movw	r30, r24
    1734:	21 81       	ldd	r18, Z+1	; 0x01
    1736:	32 81       	ldd	r19, Z+2	; 0x02
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	51 f4       	brne	.+20     	; 0x1756 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	fc 01       	movw	r30, r24
    1748:	26 81       	ldd	r18, Z+6	; 0x06
    174a:	37 81       	ldd	r19, Z+7	; 0x07
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	fc 01       	movw	r30, r24
    1752:	32 83       	std	Z+2, r19	; 0x02
    1754:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	fc 01       	movw	r30, r24
    175c:	13 86       	std	Z+11, r1	; 0x0b
    175e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	80 81       	ld	r24, Z
    1768:	2f ef       	ldi	r18, 0xFF	; 255
    176a:	28 0f       	add	r18, r24
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	fc 01       	movw	r30, r24
    1772:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	fc 01       	movw	r30, r24
    177a:	80 81       	ld	r24, Z
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	28 97       	sbiw	r28, 0x08	; 8
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	7e 83       	std	Y+6, r23	; 0x06
    17a4:	6d 83       	std	Y+5, r22	; 0x05
    17a6:	58 87       	std	Y+8, r21	; 0x08
    17a8:	4f 83       	std	Y+7, r20	; 0x07
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	29 81       	ldd	r18, Y+1	; 0x01
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	89 2f       	mov	r24, r25
    17cc:	99 27       	eor	r25, r25
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	29 81       	ldd	r18, Y+1	; 0x01
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	fc 01       	movw	r30, r24
    17ec:	10 82       	st	Z, r1
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	fc 01       	movw	r30, r24
    17fe:	10 82       	st	Z, r1
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	20 e8       	ldi	r18, 0x80	; 128
    1810:	fc 01       	movw	r30, r24
    1812:	20 83       	st	Z, r18
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	fc 01       	movw	r30, r24
    1824:	10 82       	st	Z, r1
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	fc 01       	movw	r30, r24
    1836:	10 82       	st	Z, r1
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	fc 01       	movw	r30, r24
    1848:	10 82       	st	Z, r1
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	47 97       	sbiw	r24, 0x17	; 23
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	29 81       	ldd	r18, Y+1	; 0x01
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	fc 01       	movw	r30, r24
    1864:	20 83       	st	Z, r18
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	89 2f       	mov	r24, r25
    1876:	99 27       	eor	r25, r25
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	29 81       	ldd	r18, Y+1	; 0x01
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	07 97       	sbiw	r24, 0x07	; 7
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	28 96       	adiw	r28, 0x08	; 8
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <xPortStartScheduler>:
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	ff d0       	rcall	.+510    	; 0x1aae <prvSetupTimerInterrupt>
    18b0:	a0 91 9a 15 	lds	r26, 0x159A	; 0x80159a <pxCurrentTCB>
    18b4:	b0 91 9b 15 	lds	r27, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    18b8:	cd 91       	ld	r28, X+
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	dd 91       	ld	r29, X+
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	cf 90       	pop	r12
    18e8:	bf 90       	pop	r11
    18ea:	af 90       	pop	r10
    18ec:	9f 90       	pop	r9
    18ee:	8f 90       	pop	r8
    18f0:	7f 90       	pop	r7
    18f2:	6f 90       	pop	r6
    18f4:	5f 90       	pop	r5
    18f6:	4f 90       	pop	r4
    18f8:	3f 90       	pop	r3
    18fa:	2f 90       	pop	r2
    18fc:	1f 90       	pop	r1
    18fe:	0f 90       	pop	r0
    1900:	0c be       	out	0x3c, r0	; 60
    1902:	0f 90       	pop	r0
    1904:	0b be       	out	0x3b, r0	; 59
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	08 95       	ret
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <vPortYield>:
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	0f 92       	push	r0
    191e:	0b b6       	in	r0, 0x3b	; 59
    1920:	0f 92       	push	r0
    1922:	0c b6       	in	r0, 0x3c	; 60
    1924:	0f 92       	push	r0
    1926:	1f 92       	push	r1
    1928:	11 24       	eor	r1, r1
    192a:	2f 92       	push	r2
    192c:	3f 92       	push	r3
    192e:	4f 92       	push	r4
    1930:	5f 92       	push	r5
    1932:	6f 92       	push	r6
    1934:	7f 92       	push	r7
    1936:	8f 92       	push	r8
    1938:	9f 92       	push	r9
    193a:	af 92       	push	r10
    193c:	bf 92       	push	r11
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ef 93       	push	r30
    1964:	ff 93       	push	r31
    1966:	a0 91 9a 15 	lds	r26, 0x159A	; 0x80159a <pxCurrentTCB>
    196a:	b0 91 9b 15 	lds	r27, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    196e:	0d b6       	in	r0, 0x3d	; 61
    1970:	0d 92       	st	X+, r0
    1972:	0e b6       	in	r0, 0x3e	; 62
    1974:	0d 92       	st	X+, r0
    1976:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <vTaskSwitchContext>
    197a:	a0 91 9a 15 	lds	r26, 0x159A	; 0x80159a <pxCurrentTCB>
    197e:	b0 91 9b 15 	lds	r27, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    1982:	cd 91       	ld	r28, X+
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	dd 91       	ld	r29, X+
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	bf 90       	pop	r11
    19b4:	af 90       	pop	r10
    19b6:	9f 90       	pop	r9
    19b8:	8f 90       	pop	r8
    19ba:	7f 90       	pop	r7
    19bc:	6f 90       	pop	r6
    19be:	5f 90       	pop	r5
    19c0:	4f 90       	pop	r4
    19c2:	3f 90       	pop	r3
    19c4:	2f 90       	pop	r2
    19c6:	1f 90       	pop	r1
    19c8:	0f 90       	pop	r0
    19ca:	0c be       	out	0x3c, r0	; 60
    19cc:	0f 90       	pop	r0
    19ce:	0b be       	out	0x3b, r0	; 59
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	08 95       	ret
	...

000019da <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	0f 92       	push	r0
    19e2:	0b b6       	in	r0, 0x3b	; 59
    19e4:	0f 92       	push	r0
    19e6:	0c b6       	in	r0, 0x3c	; 60
    19e8:	0f 92       	push	r0
    19ea:	1f 92       	push	r1
    19ec:	11 24       	eor	r1, r1
    19ee:	2f 92       	push	r2
    19f0:	3f 92       	push	r3
    19f2:	4f 92       	push	r4
    19f4:	5f 92       	push	r5
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
    1a2a:	a0 91 9a 15 	lds	r26, 0x159A	; 0x80159a <pxCurrentTCB>
    1a2e:	b0 91 9b 15 	lds	r27, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    1a32:	0d b6       	in	r0, 0x3d	; 61
    1a34:	0d 92       	st	X+, r0
    1a36:	0e b6       	in	r0, 0x3e	; 62
    1a38:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1a3a:	83 e5       	ldi	r24, 0x53	; 83
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	fc 01       	movw	r30, r24
    1a40:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    1a42:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <xTaskIncrementTick>
    1a46:	88 23       	and	r24, r24
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    1a4a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1a4e:	a0 91 9a 15 	lds	r26, 0x159A	; 0x80159a <pxCurrentTCB>
    1a52:	b0 91 9b 15 	lds	r27, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    1a56:	cd 91       	ld	r28, X+
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	dd 91       	ld	r29, X+
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	bf 91       	pop	r27
    1a68:	af 91       	pop	r26
    1a6a:	9f 91       	pop	r25
    1a6c:	8f 91       	pop	r24
    1a6e:	7f 91       	pop	r23
    1a70:	6f 91       	pop	r22
    1a72:	5f 91       	pop	r21
    1a74:	4f 91       	pop	r20
    1a76:	3f 91       	pop	r19
    1a78:	2f 91       	pop	r18
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	5f 90       	pop	r5
    1a94:	4f 90       	pop	r4
    1a96:	3f 90       	pop	r3
    1a98:	2f 90       	pop	r2
    1a9a:	1f 90       	pop	r1
    1a9c:	0f 90       	pop	r0
    1a9e:	0c be       	out	0x3c, r0	; 60
    1aa0:	0f 90       	pop	r0
    1aa2:	0b be       	out	0x3b, r0	; 59
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1aaa:	08 95       	ret
	...

00001aae <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    1ab6:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	88 70       	andi	r24, 0x08	; 8
    1abe:	99 27       	eor	r25, r25
    1ac0:	89 2b       	or	r24, r25
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <prvSetupTimerInterrupt+0x1a>
    1ac4:	80 ee       	ldi	r24, 0xE0	; 224
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <prvSetupTimerInterrupt+0x1c>
    1ac8:	80 ec       	ldi	r24, 0xC0	; 192
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	97 70       	andi	r25, 0x07	; 7
    1ace:	89 2b       	or	r24, r25
    1ad0:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1ad2:	88 e1       	ldi	r24, 0x18	; 24
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	a8 95       	wdr
    1ada:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    1ae4:	00 00       	nop
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1aec:	76 df       	rcall	.-276    	; 0x19da <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1aee:	18 95       	reti
	...

00001af2 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <xQueueGenericReset+0x6>
    1af8:	1f 92       	push	r1
    1afa:	1f 92       	push	r1
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	6d 83       	std	Y+5, r22	; 0x05
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	0f 92       	push	r0
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	29 81       	ldd	r18, Y+1	; 0x01
    1b20:	3a 81       	ldd	r19, Y+2	; 0x02
    1b22:	f9 01       	movw	r30, r18
    1b24:	27 8d       	ldd	r18, Z+31	; 0x1f
    1b26:	42 2f       	mov	r20, r18
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	29 81       	ldd	r18, Y+1	; 0x01
    1b2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b2e:	f9 01       	movw	r30, r18
    1b30:	20 a1       	ldd	r18, Z+32	; 0x20
    1b32:	22 2f       	mov	r18, r18
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	42 9f       	mul	r20, r18
    1b38:	b0 01       	movw	r22, r0
    1b3a:	43 9f       	mul	r20, r19
    1b3c:	70 0d       	add	r23, r0
    1b3e:	52 9f       	mul	r21, r18
    1b40:	70 0d       	add	r23, r0
    1b42:	11 24       	eor	r1, r1
    1b44:	9b 01       	movw	r18, r22
    1b46:	28 0f       	add	r18, r24
    1b48:	39 1f       	adc	r19, r25
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	fc 01       	movw	r30, r24
    1b50:	35 83       	std	Z+5, r19	; 0x05
    1b52:	24 83       	std	Z+4, r18	; 0x04
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	fc 01       	movw	r30, r24
    1b5a:	16 8e       	std	Z+30, r1	; 0x1e
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 81       	ld	r18, Z
    1b64:	31 81       	ldd	r19, Z+1	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	33 83       	std	Z+3, r19	; 0x03
    1b6e:	22 83       	std	Z+2, r18	; 0x02
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 81       	ld	r18, Z
    1b78:	31 81       	ldd	r19, Z+1	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	fc 01       	movw	r30, r24
    1b80:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	bc 01       	movw	r22, r24
    1b88:	61 50       	subi	r22, 0x01	; 1
    1b8a:	71 09       	sbc	r23, r1
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	fc 01       	movw	r30, r24
    1b92:	80 a1       	ldd	r24, Z+32	; 0x20
    1b94:	48 2f       	mov	r20, r24
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	64 9f       	mul	r22, r20
    1b9a:	c0 01       	movw	r24, r0
    1b9c:	65 9f       	mul	r22, r21
    1b9e:	90 0d       	add	r25, r0
    1ba0:	74 9f       	mul	r23, r20
    1ba2:	90 0d       	add	r25, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	28 0f       	add	r18, r24
    1ba8:	39 1f       	adc	r19, r25
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	fc 01       	movw	r30, r24
    1bb0:	37 83       	std	Z+7, r19	; 0x07
    1bb2:	26 83       	std	Z+6, r18	; 0x06
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	2f ef       	ldi	r18, 0xFF	; 255
    1bba:	fc 01       	movw	r30, r24
    1bbc:	21 a3       	std	Z+33, r18	; 0x21
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	22 a3       	std	Z+34, r18	; 0x22
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	88 23       	and	r24, r24
    1bcc:	79 f4       	brne	.+30     	; 0x1bec <xQueueGenericReset+0xfa>
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	80 85       	ldd	r24, Z+8	; 0x08
    1bd6:	88 23       	and	r24, r24
    1bd8:	89 f0       	breq	.+34     	; 0x1bfc <xQueueGenericReset+0x10a>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	08 96       	adiw	r24, 0x08	; 8
    1be0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    1be4:	88 23       	and	r24, r24
    1be6:	51 f0       	breq	.+20     	; 0x1bfc <xQueueGenericReset+0x10a>
    1be8:	96 de       	rcall	.-724    	; 0x1916 <vPortYield>
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <xQueueGenericReset+0x10a>
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	08 96       	adiw	r24, 0x08	; 8
    1bf2:	a0 dc       	rcall	.-1728   	; 0x1534 <vListInitialise>
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	43 96       	adiw	r24, 0x13	; 19
    1bfa:	9c dc       	rcall	.-1736   	; 0x1534 <vListInitialise>
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <xQueueGenericCreate>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	29 97       	sbiw	r28, 0x09	; 9
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	8f 83       	std	Y+7, r24	; 0x07
    1c2c:	68 87       	std	Y+8, r22	; 0x08
    1c2e:	49 87       	std	Y+9, r20	; 0x09
    1c30:	8f 81       	ldd	r24, Y+7	; 0x07
    1c32:	48 2f       	mov	r20, r24
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	88 85       	ldd	r24, Y+8	; 0x08
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	42 9f       	mul	r20, r18
    1c3e:	c0 01       	movw	r24, r0
    1c40:	43 9f       	mul	r20, r19
    1c42:	90 0d       	add	r25, r0
    1c44:	52 9f       	mul	r21, r18
    1c46:	90 0d       	add	r25, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	83 96       	adiw	r24, 0x23	; 35
    1c54:	b6 d9       	rcall	.-3220   	; 0xfc2 <pvPortMalloc>
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	89 2b       	or	r24, r25
    1c60:	99 f0       	breq	.+38     	; 0x1c88 <xQueueGenericCreate+0x76>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6e:	83 96       	adiw	r24, 0x23	; 35
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	89 01       	movw	r16, r18
    1c7e:	29 85       	ldd	r18, Y+9	; 0x09
    1c80:	ac 01       	movw	r20, r24
    1c82:	68 85       	ldd	r22, Y+8	; 0x08
    1c84:	8f 81       	ldd	r24, Y+7	; 0x07
    1c86:	0d d0       	rcall	.+26     	; 0x1ca2 <prvInitialiseNewQueue>
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	29 96       	adiw	r28, 0x09	; 9
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <prvInitialiseNewQueue>:
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	27 97       	sbiw	r28, 0x07	; 7
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	6a 83       	std	Y+2, r22	; 0x02
    1cbe:	5c 83       	std	Y+4, r21	; 0x04
    1cc0:	4b 83       	std	Y+3, r20	; 0x03
    1cc2:	2d 83       	std	Y+5, r18	; 0x05
    1cc4:	1f 83       	std	Y+7, r17	; 0x07
    1cc6:	0e 83       	std	Y+6, r16	; 0x06
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	88 23       	and	r24, r24
    1ccc:	41 f4       	brne	.+16     	; 0x1cde <prvInitialiseNewQueue+0x3c>
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	31 83       	std	Z+1, r19	; 0x01
    1cda:	20 83       	st	Z, r18
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <prvInitialiseNewQueue+0x4a>
    1cde:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	31 83       	std	Z+1, r19	; 0x01
    1cea:	20 83       	st	Z, r18
    1cec:	8e 81       	ldd	r24, Y+6	; 0x06
    1cee:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf0:	29 81       	ldd	r18, Y+1	; 0x01
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	27 8f       	std	Z+31, r18	; 0x1f
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfa:	2a 81       	ldd	r18, Y+2	; 0x02
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 a3       	std	Z+32, r18	; 0x20
    1d00:	8e 81       	ldd	r24, Y+6	; 0x06
    1d02:	9f 81       	ldd	r25, Y+7	; 0x07
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	f5 de       	rcall	.-534    	; 0x1af2 <xQueueGenericReset>
    1d08:	00 00       	nop
    1d0a:	27 96       	adiw	r28, 0x07	; 7
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <xQueueGenericSend>:
    1d20:	0f 93       	push	r16
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	62 97       	sbiw	r28, 0x12	; 18
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	9b 87       	std	Y+11, r25	; 0x0b
    1d38:	8a 87       	std	Y+10, r24	; 0x0a
    1d3a:	7d 87       	std	Y+13, r23	; 0x0d
    1d3c:	6c 87       	std	Y+12, r22	; 0x0c
    1d3e:	2e 87       	std	Y+14, r18	; 0x0e
    1d40:	3f 87       	std	Y+15, r19	; 0x0f
    1d42:	48 8b       	std	Y+16, r20	; 0x10
    1d44:	59 8b       	std	Y+17, r21	; 0x11
    1d46:	0a 8b       	std	Y+18, r16	; 0x12
    1d48:	19 82       	std	Y+1, r1	; 0x01
    1d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d4e:	9b 83       	std	Y+3, r25	; 0x03
    1d50:	8a 83       	std	Y+2, r24	; 0x02
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	0f 92       	push	r0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	fc 01       	movw	r30, r24
    1d66:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d68:	28 17       	cp	r18, r24
    1d6a:	18 f0       	brcs	.+6      	; 0x1d72 <xQueueGenericSend+0x52>
    1d6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	f9 f4       	brne	.+62     	; 0x1db0 <xQueueGenericSend+0x90>
    1d72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d74:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	4a 89       	ldd	r20, Y+18	; 0x12
    1d7c:	b9 01       	movw	r22, r18
    1d7e:	9d d1       	rcall	.+826    	; 0x20ba <prvCopyDataToQueue>
    1d80:	8c 83       	std	Y+4, r24	; 0x04
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	fc 01       	movw	r30, r24
    1d88:	83 89       	ldd	r24, Z+19	; 0x13
    1d8a:	88 23       	and	r24, r24
    1d8c:	49 f0       	breq	.+18     	; 0x1da0 <xQueueGenericSend+0x80>
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	43 96       	adiw	r24, 0x13	; 19
    1d94:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    1d98:	88 23       	and	r24, r24
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <xQueueGenericSend+0x88>
    1d9c:	bc dd       	rcall	.-1160   	; 0x1916 <vPortYield>
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <xQueueGenericSend+0x88>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	88 23       	and	r24, r24
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <xQueueGenericSend+0x88>
    1da6:	b7 dd       	rcall	.-1170   	; 0x1916 <vPortYield>
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	64 c0       	rjmp	.+200    	; 0x1e78 <xQueueGenericSend+0x158>
    1db0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db4:	a8 89       	ldd	r26, Y+16	; 0x10
    1db6:	b9 89       	ldd	r27, Y+17	; 0x11
    1db8:	89 2b       	or	r24, r25
    1dba:	8a 2b       	or	r24, r26
    1dbc:	8b 2b       	or	r24, r27
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <xQueueGenericSend+0xa8>
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	58 c0       	rjmp	.+176    	; 0x1e78 <xQueueGenericSend+0x158>
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	88 23       	and	r24, r24
    1dcc:	31 f4       	brne	.+12     	; 0x1dda <xQueueGenericSend+0xba>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	05 96       	adiw	r24, 0x05	; 5
    1dd2:	0e 94 ce 23 	call	0x479c	; 0x479c <vTaskInternalSetTimeOutState>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	0f 92       	push	r0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	fc 01       	movw	r30, r24
    1dee:	81 a1       	ldd	r24, Z+33	; 0x21
    1df0:	8f 3f       	cpi	r24, 0xFF	; 255
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <xQueueGenericSend+0xdc>
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	fc 01       	movw	r30, r24
    1dfa:	11 a2       	std	Z+33, r1	; 0x21
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	fc 01       	movw	r30, r24
    1e02:	82 a1       	ldd	r24, Z+34	; 0x22
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <xQueueGenericSend+0xf0>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	12 a2       	std	Z+34, r1	; 0x22
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	9e 01       	movw	r18, r28
    1e16:	22 5f       	subi	r18, 0xF2	; 242
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	05 96       	adiw	r24, 0x05	; 5
    1e1e:	b9 01       	movw	r22, r18
    1e20:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <xTaskCheckForTimeOut>
    1e24:	88 23       	and	r24, r24
    1e26:	11 f5       	brne	.+68     	; 0x1e6c <xQueueGenericSend+0x14c>
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2c:	e2 d2       	rcall	.+1476   	; 0x23f2 <prvIsQueueFull>
    1e2e:	88 23       	and	r24, r24
    1e30:	b9 f0       	breq	.+46     	; 0x1e60 <xQueueGenericSend+0x140>
    1e32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e36:	a8 89       	ldd	r26, Y+16	; 0x10
    1e38:	b9 89       	ldd	r27, Y+17	; 0x11
    1e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e3e:	28 5f       	subi	r18, 0xF8	; 248
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	ac 01       	movw	r20, r24
    1e44:	bd 01       	movw	r22, r26
    1e46:	c9 01       	movw	r24, r18
    1e48:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <vTaskPlaceOnEventList>
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	55 d2       	rcall	.+1194   	; 0x22fc <prvUnlockQueue>
    1e52:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    1e56:	88 23       	and	r24, r24
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <xQueueGenericSend+0x13c>
    1e5a:	7b cf       	rjmp	.-266    	; 0x1d52 <xQueueGenericSend+0x32>
    1e5c:	5c dd       	rcall	.-1352   	; 0x1916 <vPortYield>
    1e5e:	79 cf       	rjmp	.-270    	; 0x1d52 <xQueueGenericSend+0x32>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	4b d2       	rcall	.+1174   	; 0x22fc <prvUnlockQueue>
    1e66:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    1e6a:	73 cf       	rjmp	.-282    	; 0x1d52 <xQueueGenericSend+0x32>
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	45 d2       	rcall	.+1162   	; 0x22fc <prvUnlockQueue>
    1e72:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	62 96       	adiw	r28, 0x12	; 18
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	0f 91       	pop	r16
    1e8a:	08 95       	ret

00001e8c <xQueueGenericSendFromISR>:
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	2d 97       	sbiw	r28, 0x0d	; 13
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	98 87       	std	Y+8, r25	; 0x08
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	7a 87       	std	Y+10, r23	; 0x0a
    1ea6:	69 87       	std	Y+9, r22	; 0x09
    1ea8:	5c 87       	std	Y+12, r21	; 0x0c
    1eaa:	4b 87       	std	Y+11, r20	; 0x0b
    1eac:	2d 87       	std	Y+13, r18	; 0x0d
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	98 85       	ldd	r25, Y+8	; 0x08
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	1c 82       	std	Y+4, r1	; 0x04
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	26 8d       	ldd	r18, Z+30	; 0x1e
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ec8:	28 17       	cp	r18, r24
    1eca:	18 f0       	brcs	.+6      	; 0x1ed2 <xQueueGenericSendFromISR+0x46>
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	a9 f5       	brne	.+106    	; 0x1f3c <xQueueGenericSendFromISR+0xb0>
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	82 a1       	ldd	r24, Z+34	; 0x22
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ee4:	8e 83       	std	Y+6, r24	; 0x06
    1ee6:	29 85       	ldd	r18, Y+9	; 0x09
    1ee8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	e3 d0       	rcall	.+454    	; 0x20ba <prvCopyDataToQueue>
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef8:	b9 f4       	brne	.+46     	; 0x1f28 <xQueueGenericSendFromISR+0x9c>
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	9b 81       	ldd	r25, Y+3	; 0x03
    1efe:	fc 01       	movw	r30, r24
    1f00:	83 89       	ldd	r24, Z+19	; 0x13
    1f02:	88 23       	and	r24, r24
    1f04:	c1 f0       	breq	.+48     	; 0x1f36 <xQueueGenericSendFromISR+0xaa>
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0a:	43 96       	adiw	r24, 0x13	; 19
    1f0c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    1f10:	88 23       	and	r24, r24
    1f12:	89 f0       	breq	.+34     	; 0x1f36 <xQueueGenericSendFromISR+0xaa>
    1f14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f18:	89 2b       	or	r24, r25
    1f1a:	69 f0       	breq	.+26     	; 0x1f36 <xQueueGenericSendFromISR+0xaa>
    1f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f20:	21 e0       	ldi	r18, 0x01	; 1
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <xQueueGenericSendFromISR+0xaa>
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	fc 01       	movw	r30, r24
    1f34:	22 a3       	std	Z+34, r18	; 0x22
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <xQueueGenericSendFromISR+0xb2>
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	2d 96       	adiw	r28, 0x0d	; 13
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <xQueueReceive>:
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	61 97       	sbiw	r28, 0x11	; 17
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	9b 87       	std	Y+11, r25	; 0x0b
    1f68:	8a 87       	std	Y+10, r24	; 0x0a
    1f6a:	7d 87       	std	Y+13, r23	; 0x0d
    1f6c:	6c 87       	std	Y+12, r22	; 0x0c
    1f6e:	2e 87       	std	Y+14, r18	; 0x0e
    1f70:	3f 87       	std	Y+15, r19	; 0x0f
    1f72:	48 8b       	std	Y+16, r20	; 0x10
    1f74:	59 8b       	std	Y+17, r21	; 0x11
    1f76:	19 82       	std	Y+1, r1	; 0x01
    1f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0f 92       	push	r0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f8e:	8c 83       	std	Y+4, r24	; 0x04
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	88 23       	and	r24, r24
    1f94:	f9 f0       	breq	.+62     	; 0x1fd4 <xQueueReceive+0x82>
    1f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f98:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	5c d1       	rcall	.+696    	; 0x225a <prvCopyDataFromQueue>
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa4:	2f ef       	ldi	r18, 0xFF	; 255
    1fa6:	28 0f       	add	r18, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	fc 01       	movw	r30, r24
    1fae:	26 8f       	std	Z+30, r18	; 0x1e
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	80 85       	ldd	r24, Z+8	; 0x08
    1fb8:	88 23       	and	r24, r24
    1fba:	41 f0       	breq	.+16     	; 0x1fcc <xQueueReceive+0x7a>
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	08 96       	adiw	r24, 0x08	; 8
    1fc2:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    1fc6:	88 23       	and	r24, r24
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <xQueueReceive+0x7a>
    1fca:	a5 dc       	rcall	.-1718   	; 0x1916 <vPortYield>
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	6a c0       	rjmp	.+212    	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    1fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd8:	a8 89       	ldd	r26, Y+16	; 0x10
    1fda:	b9 89       	ldd	r27, Y+17	; 0x11
    1fdc:	89 2b       	or	r24, r25
    1fde:	8a 2b       	or	r24, r26
    1fe0:	8b 2b       	or	r24, r27
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <xQueueReceive+0x9a>
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	5e c0       	rjmp	.+188    	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	88 23       	and	r24, r24
    1ff0:	31 f4       	brne	.+12     	; 0x1ffe <xQueueReceive+0xac>
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	05 96       	adiw	r24, 0x05	; 5
    1ff6:	0e 94 ce 23 	call	0x479c	; 0x479c <vTaskInternalSetTimeOutState>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	0f 92       	push	r0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	fc 01       	movw	r30, r24
    2012:	81 a1       	ldd	r24, Z+33	; 0x21
    2014:	8f 3f       	cpi	r24, 0xFF	; 255
    2016:	21 f4       	brne	.+8      	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	fc 01       	movw	r30, r24
    201e:	11 a2       	std	Z+33, r1	; 0x21
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	fc 01       	movw	r30, r24
    2026:	82 a1       	ldd	r24, Z+34	; 0x22
    2028:	8f 3f       	cpi	r24, 0xFF	; 255
    202a:	21 f4       	brne	.+8      	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	fc 01       	movw	r30, r24
    2032:	12 a2       	std	Z+34, r1	; 0x22
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	9e 01       	movw	r18, r28
    203a:	22 5f       	subi	r18, 0xF2	; 242
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	ce 01       	movw	r24, r28
    2040:	05 96       	adiw	r24, 0x05	; 5
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <xTaskCheckForTimeOut>
    2048:	88 23       	and	r24, r24
    204a:	11 f5       	brne	.+68     	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	b3 d1       	rcall	.+870    	; 0x23b8 <prvIsQueueEmpty>
    2052:	88 23       	and	r24, r24
    2054:	b9 f0       	breq	.+46     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    2056:	8e 85       	ldd	r24, Y+14	; 0x0e
    2058:	9f 85       	ldd	r25, Y+15	; 0x0f
    205a:	a8 89       	ldd	r26, Y+16	; 0x10
    205c:	b9 89       	ldd	r27, Y+17	; 0x11
    205e:	2a 81       	ldd	r18, Y+2	; 0x02
    2060:	3b 81       	ldd	r19, Y+3	; 0x03
    2062:	2d 5e       	subi	r18, 0xED	; 237
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	ac 01       	movw	r20, r24
    2068:	bd 01       	movw	r22, r26
    206a:	c9 01       	movw	r24, r18
    206c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <vTaskPlaceOnEventList>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	43 d1       	rcall	.+646    	; 0x22fc <prvUnlockQueue>
    2076:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    207a:	88 23       	and	r24, r24
    207c:	09 f0       	breq	.+2      	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    207e:	80 cf       	rjmp	.-256    	; 0x1f80 <xQueueReceive+0x2e>
    2080:	4a dc       	rcall	.-1900   	; 0x1916 <vPortYield>
    2082:	7e cf       	rjmp	.-260    	; 0x1f80 <xQueueReceive+0x2e>
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	9b 81       	ldd	r25, Y+3	; 0x03
    2088:	39 d1       	rcall	.+626    	; 0x22fc <prvUnlockQueue>
    208a:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    208e:	78 cf       	rjmp	.-272    	; 0x1f80 <xQueueReceive+0x2e>
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	33 d1       	rcall	.+614    	; 0x22fc <prvUnlockQueue>
    2096:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	8c d1       	rcall	.+792    	; 0x23b8 <prvIsQueueEmpty>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    20a4:	6d cf       	rjmp	.-294    	; 0x1f80 <xQueueReceive+0x2e>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	61 96       	adiw	r28, 0x11	; 17
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <prvCopyDataToQueue>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	27 97       	sbiw	r28, 0x07	; 7
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	7e 83       	std	Y+6, r23	; 0x06
    20d4:	6d 83       	std	Y+5, r22	; 0x05
    20d6:	4f 83       	std	Y+7, r20	; 0x07
    20d8:	19 82       	std	Y+1, r1	; 0x01
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	fc 01       	movw	r30, r24
    20e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	80 a1       	ldd	r24, Z+32	; 0x20
    20ec:	88 23       	and	r24, r24
    20ee:	b1 f4       	brne	.+44     	; 0x211c <prvCopyDataToQueue+0x62>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	89 2b       	or	r24, r25
    20fc:	09 f0       	breq	.+2      	; 0x2100 <prvCopyDataToQueue+0x46>
    20fe:	9c c0       	rjmp	.+312    	; 0x2238 <__stack+0x39>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	fc 01       	movw	r30, r24
    2106:	84 81       	ldd	r24, Z+4	; 0x04
    2108:	95 81       	ldd	r25, Z+5	; 0x05
    210a:	0e 94 7f 25 	call	0x4afe	; 0x4afe <xTaskPriorityDisinherit>
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	fc 01       	movw	r30, r24
    2116:	15 82       	std	Z+5, r1	; 0x05
    2118:	14 82       	std	Z+4, r1	; 0x04
    211a:	8e c0       	rjmp	.+284    	; 0x2238 <__stack+0x39>
    211c:	8f 81       	ldd	r24, Y+7	; 0x07
    211e:	88 23       	and	r24, r24
    2120:	d9 f5       	brne	.+118    	; 0x2198 <prvCopyDataToQueue+0xde>
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	fc 01       	movw	r30, r24
    2128:	80 a1       	ldd	r24, Z+32	; 0x20
    212a:	48 2f       	mov	r20, r24
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	fc 01       	movw	r30, r24
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	2d 81       	ldd	r18, Y+5	; 0x05
    213a:	3e 81       	ldd	r19, Y+6	; 0x06
    213c:	b9 01       	movw	r22, r18
    213e:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	fc 01       	movw	r30, r24
    2148:	22 81       	ldd	r18, Z+2	; 0x02
    214a:	33 81       	ldd	r19, Z+3	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	fc 01       	movw	r30, r24
    2152:	80 a1       	ldd	r24, Z+32	; 0x20
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	28 0f       	add	r18, r24
    215a:	39 1f       	adc	r19, r25
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	fc 01       	movw	r30, r24
    2162:	33 83       	std	Z+3, r19	; 0x03
    2164:	22 83       	std	Z+2, r18	; 0x02
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	fc 01       	movw	r30, r24
    216c:	22 81       	ldd	r18, Z+2	; 0x02
    216e:	33 81       	ldd	r19, Z+3	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	fc 01       	movw	r30, r24
    2176:	84 81       	ldd	r24, Z+4	; 0x04
    2178:	95 81       	ldd	r25, Z+5	; 0x05
    217a:	28 17       	cp	r18, r24
    217c:	39 07       	cpc	r19, r25
    217e:	08 f4       	brcc	.+2      	; 0x2182 <prvCopyDataToQueue+0xc8>
    2180:	5b c0       	rjmp	.+182    	; 0x2238 <__stack+0x39>
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	fc 01       	movw	r30, r24
    2188:	20 81       	ld	r18, Z
    218a:	31 81       	ldd	r19, Z+1	; 0x01
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	fc 01       	movw	r30, r24
    2192:	33 83       	std	Z+3, r19	; 0x03
    2194:	22 83       	std	Z+2, r18	; 0x02
    2196:	50 c0       	rjmp	.+160    	; 0x2238 <__stack+0x39>
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	fc 01       	movw	r30, r24
    219e:	80 a1       	ldd	r24, Z+32	; 0x20
    21a0:	48 2f       	mov	r20, r24
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	fc 01       	movw	r30, r24
    21aa:	86 81       	ldd	r24, Z+6	; 0x06
    21ac:	97 81       	ldd	r25, Z+7	; 0x07
    21ae:	2d 81       	ldd	r18, Y+5	; 0x05
    21b0:	3e 81       	ldd	r19, Y+6	; 0x06
    21b2:	b9 01       	movw	r22, r18
    21b4:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	fc 01       	movw	r30, r24
    21be:	26 81       	ldd	r18, Z+6	; 0x06
    21c0:	37 81       	ldd	r19, Z+7	; 0x07
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	fc 01       	movw	r30, r24
    21c8:	80 a1       	ldd	r24, Z+32	; 0x20
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	91 95       	neg	r25
    21d0:	81 95       	neg	r24
    21d2:	91 09       	sbc	r25, r1
    21d4:	28 0f       	add	r18, r24
    21d6:	39 1f       	adc	r19, r25
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	fc 01       	movw	r30, r24
    21de:	37 83       	std	Z+7, r19	; 0x07
    21e0:	26 83       	std	Z+6, r18	; 0x06
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	fc 01       	movw	r30, r24
    21e8:	26 81       	ldd	r18, Z+6	; 0x06
    21ea:	37 81       	ldd	r19, Z+7	; 0x07
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	28 17       	cp	r18, r24
    21f8:	39 07       	cpc	r19, r25
    21fa:	a8 f4       	brcc	.+42     	; 0x2226 <__stack+0x27>
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	fc 01       	movw	r30, r24
    2202:	24 81       	ldd	r18, Z+4	; 0x04
    2204:	35 81       	ldd	r19, Z+5	; 0x05
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	fc 01       	movw	r30, r24
    220c:	80 a1       	ldd	r24, Z+32	; 0x20
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	91 95       	neg	r25
    2214:	81 95       	neg	r24
    2216:	91 09       	sbc	r25, r1
    2218:	28 0f       	add	r18, r24
    221a:	39 1f       	adc	r19, r25
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	fc 01       	movw	r30, r24
    2222:	37 83       	std	Z+7, r19	; 0x07
    2224:	26 83       	std	Z+6, r18	; 0x06
    2226:	8f 81       	ldd	r24, Y+7	; 0x07
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	31 f4       	brne	.+12     	; 0x2238 <__stack+0x39>
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	88 23       	and	r24, r24
    2230:	19 f0       	breq	.+6      	; 0x2238 <__stack+0x39>
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	81 50       	subi	r24, 0x01	; 1
    2236:	8a 83       	std	Y+2, r24	; 0x02
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	28 0f       	add	r18, r24
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	fc 01       	movw	r30, r24
    2244:	26 8f       	std	Z+30, r18	; 0x1e
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	27 96       	adiw	r28, 0x07	; 7
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <prvCopyDataFromQueue>:
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	00 d0       	rcall	.+0      	; 0x2260 <prvCopyDataFromQueue+0x6>
    2260:	1f 92       	push	r1
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	7c 83       	std	Y+4, r23	; 0x04
    226c:	6b 83       	std	Y+3, r22	; 0x03
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	fc 01       	movw	r30, r24
    2274:	80 a1       	ldd	r24, Z+32	; 0x20
    2276:	88 23       	and	r24, r24
    2278:	c9 f1       	breq	.+114    	; 0x22ec <prvCopyDataFromQueue+0x92>
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	fc 01       	movw	r30, r24
    2280:	26 81       	ldd	r18, Z+6	; 0x06
    2282:	37 81       	ldd	r19, Z+7	; 0x07
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	fc 01       	movw	r30, r24
    228a:	80 a1       	ldd	r24, Z+32	; 0x20
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	28 0f       	add	r18, r24
    2292:	39 1f       	adc	r19, r25
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	fc 01       	movw	r30, r24
    229a:	37 83       	std	Z+7, r19	; 0x07
    229c:	26 83       	std	Z+6, r18	; 0x06
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	fc 01       	movw	r30, r24
    22a4:	26 81       	ldd	r18, Z+6	; 0x06
    22a6:	37 81       	ldd	r19, Z+7	; 0x07
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	fc 01       	movw	r30, r24
    22ae:	84 81       	ldd	r24, Z+4	; 0x04
    22b0:	95 81       	ldd	r25, Z+5	; 0x05
    22b2:	28 17       	cp	r18, r24
    22b4:	39 07       	cpc	r19, r25
    22b6:	50 f0       	brcs	.+20     	; 0x22cc <prvCopyDataFromQueue+0x72>
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	fc 01       	movw	r30, r24
    22be:	20 81       	ld	r18, Z
    22c0:	31 81       	ldd	r19, Z+1	; 0x01
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	fc 01       	movw	r30, r24
    22c8:	37 83       	std	Z+7, r19	; 0x07
    22ca:	26 83       	std	Z+6, r18	; 0x06
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	fc 01       	movw	r30, r24
    22d2:	80 a1       	ldd	r24, Z+32	; 0x20
    22d4:	48 2f       	mov	r20, r24
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	fc 01       	movw	r30, r24
    22de:	26 81       	ldd	r18, Z+6	; 0x06
    22e0:	37 81       	ldd	r19, Z+7	; 0x07
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>
    22ec:	00 00       	nop
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <prvUnlockQueue>:
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	00 d0       	rcall	.+0      	; 0x2302 <prvUnlockQueue+0x6>
    2302:	1f 92       	push	r1
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	0f 92       	push	r0
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	fc 01       	movw	r30, r24
    2318:	82 a1       	ldd	r24, Z+34	; 0x22
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	12 c0       	rjmp	.+36     	; 0x2342 <prvUnlockQueue+0x46>
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	fc 01       	movw	r30, r24
    2324:	83 89       	ldd	r24, Z+19	; 0x13
    2326:	88 23       	and	r24, r24
    2328:	81 f0       	breq	.+32     	; 0x234a <prvUnlockQueue+0x4e>
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	43 96       	adiw	r24, 0x13	; 19
    2330:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    2334:	88 23       	and	r24, r24
    2336:	11 f0       	breq	.+4      	; 0x233c <prvUnlockQueue+0x40>
    2338:	0e 94 93 24 	call	0x4926	; 0x4926 <vTaskMissedYield>
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	81 50       	subi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	18 16       	cp	r1, r24
    2346:	5c f3       	brlt	.-42     	; 0x231e <prvUnlockQueue+0x22>
    2348:	01 c0       	rjmp	.+2      	; 0x234c <prvUnlockQueue+0x50>
    234a:	00 00       	nop
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	2f ef       	ldi	r18, 0xFF	; 255
    2352:	fc 01       	movw	r30, r24
    2354:	22 a3       	std	Z+34, r18	; 0x22
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	0f 92       	push	r0
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	fc 01       	movw	r30, r24
    2366:	81 a1       	ldd	r24, Z+33	; 0x21
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	12 c0       	rjmp	.+36     	; 0x2390 <prvUnlockQueue+0x94>
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	fc 01       	movw	r30, r24
    2372:	80 85       	ldd	r24, Z+8	; 0x08
    2374:	88 23       	and	r24, r24
    2376:	81 f0       	breq	.+32     	; 0x2398 <prvUnlockQueue+0x9c>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	08 96       	adiw	r24, 0x08	; 8
    237e:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <xTaskRemoveFromEventList>
    2382:	88 23       	and	r24, r24
    2384:	11 f0       	breq	.+4      	; 0x238a <prvUnlockQueue+0x8e>
    2386:	0e 94 93 24 	call	0x4926	; 0x4926 <vTaskMissedYield>
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	81 50       	subi	r24, 0x01	; 1
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	18 16       	cp	r1, r24
    2394:	5c f3       	brlt	.-42     	; 0x236c <prvUnlockQueue+0x70>
    2396:	01 c0       	rjmp	.+2      	; 0x239a <prvUnlockQueue+0x9e>
    2398:	00 00       	nop
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	2f ef       	ldi	r18, 0xFF	; 255
    23a0:	fc 01       	movw	r30, r24
    23a2:	21 a3       	std	Z+33, r18	; 0x21
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	00 00       	nop
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <prvIsQueueEmpty>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <prvIsQueueEmpty+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9b 83       	std	Y+3, r25	; 0x03
    23c4:	8a 83       	std	Y+2, r24	; 0x02
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	0f 92       	push	r0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	9b 81       	ldd	r25, Y+3	; 0x03
    23d0:	fc 01       	movw	r30, r24
    23d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    23d4:	88 23       	and	r24, r24
    23d6:	19 f4       	brne	.+6      	; 0x23de <prvIsQueueEmpty+0x26>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <prvIsQueueEmpty+0x28>
    23de:	19 82       	std	Y+1, r1	; 0x01
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <prvIsQueueFull>:
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <prvIsQueueFull+0x6>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	0f 92       	push	r0
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	fc 01       	movw	r30, r24
    240c:	26 8d       	ldd	r18, Z+30	; 0x1e
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	9b 81       	ldd	r25, Y+3	; 0x03
    2412:	fc 01       	movw	r30, r24
    2414:	87 8d       	ldd	r24, Z+31	; 0x1f
    2416:	28 17       	cp	r18, r24
    2418:	19 f4       	brne	.+6      	; 0x2420 <prvIsQueueFull+0x2e>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <prvIsQueueFull+0x30>
    2420:	19 82       	std	Y+1, r1	; 0x01
    2422:	0f 90       	pop	r0
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	29 97       	sbiw	r28, 0x09	; 9
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	4d 83       	std	Y+5, r20	; 0x05
    244e:	5e 83       	std	Y+6, r21	; 0x06
    2450:	6f 83       	std	Y+7, r22	; 0x07
    2452:	78 87       	std	Y+8, r23	; 0x08
    2454:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	0f 92       	push	r0
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	fc 01       	movw	r30, r24
    246a:	81 a1       	ldd	r24, Z+33	; 0x21
    246c:	8f 3f       	cpi	r24, 0xFF	; 255
    246e:	21 f4       	brne	.+8      	; 0x2478 <vQueueWaitForMessageRestricted+0x44>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	fc 01       	movw	r30, r24
    2476:	11 a2       	std	Z+33, r1	; 0x21
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	fc 01       	movw	r30, r24
    247e:	82 a1       	ldd	r24, Z+34	; 0x22
    2480:	8f 3f       	cpi	r24, 0xFF	; 255
    2482:	21 f4       	brne	.+8      	; 0x248c <vQueueWaitForMessageRestricted+0x58>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	fc 01       	movw	r30, r24
    248a:	12 a2       	std	Z+34, r1	; 0x22
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	fc 01       	movw	r30, r24
    2496:	86 8d       	ldd	r24, Z+30	; 0x1e
    2498:	88 23       	and	r24, r24
    249a:	71 f4       	brne	.+28     	; 0x24b8 <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	fc 01       	movw	r30, r24
    24a2:	73 96       	adiw	r30, 0x13	; 19
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	af 81       	ldd	r26, Y+7	; 0x07
    24aa:	b8 85       	ldd	r27, Y+8	; 0x08
    24ac:	29 85       	ldd	r18, Y+9	; 0x09
    24ae:	ac 01       	movw	r20, r24
    24b0:	bd 01       	movw	r22, r26
    24b2:	cf 01       	movw	r24, r30
    24b4:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	1f df       	rcall	.-450    	; 0x22fc <prvUnlockQueue>
    }
    24be:	00 00       	nop
    24c0:	29 96       	adiw	r28, 0x09	; 9
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    24d2:	0f 93       	push	r16
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	28 97       	sbiw	r28, 0x08	; 8
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	9d 83       	std	Y+5, r25	; 0x05
    24ea:	8c 83       	std	Y+4, r24	; 0x04
    24ec:	7f 83       	std	Y+7, r23	; 0x07
    24ee:	6e 83       	std	Y+6, r22	; 0x06
    24f0:	48 87       	std	Y+8, r20	; 0x08
    24f2:	88 85       	ldd	r24, Y+8	; 0x08
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	19 f4       	brne	.+6      	; 0x24fe <xStreamBufferGenericCreate+0x2c>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8b 83       	std	Y+3, r24	; 0x03
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <xStreamBufferGenericCreate+0x2e>
    24fe:	1b 82       	std	Y+3, r1	; 0x03
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	9f 81       	ldd	r25, Y+7	; 0x07
    2504:	89 2b       	or	r24, r25
    2506:	21 f4       	brne	.+8      	; 0x2510 <xStreamBufferGenericCreate+0x3e>
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9f 83       	std	Y+7, r25	; 0x07
    250e:	8e 83       	std	Y+6, r24	; 0x06
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	9c 01       	movw	r18, r24
    2516:	20 5f       	subi	r18, 0xF0	; 240
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	82 17       	cp	r24, r18
    2520:	93 07       	cpc	r25, r19
    2522:	68 f4       	brcc	.+26     	; 0x253e <xStreamBufferGenericCreate+0x6c>
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	9d 81       	ldd	r25, Y+5	; 0x05
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	0f 96       	adiw	r24, 0x0f	; 15
    2534:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pvPortMalloc>
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <xStreamBufferGenericCreate+0x70>
    253e:	1a 82       	std	Y+2, r1	; 0x02
    2540:	19 82       	std	Y+1, r1	; 0x01
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	89 2b       	or	r24, r25
    2548:	69 f0       	breq	.+26     	; 0x2564 <xStreamBufferGenericCreate+0x92>
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	bc 01       	movw	r22, r24
    2550:	61 5f       	subi	r22, 0xF1	; 241
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	2e 81       	ldd	r18, Y+6	; 0x06
    2556:	3f 81       	ldd	r19, Y+7	; 0x07
    2558:	4c 81       	ldd	r20, Y+4	; 0x04
    255a:	5d 81       	ldd	r21, Y+5	; 0x05
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	0b 81       	ldd	r16, Y+3	; 0x03
    2562:	38 d5       	rcall	.+2672   	; 0x2fd4 <prvInitialiseNewStreamBuffer>
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	28 96       	adiw	r28, 0x08	; 8
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <xStreamBufferReset>:
    257c:	0f 93       	push	r16
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 d0       	rcall	.+0      	; 0x2584 <xStreamBufferReset+0x8>
    2584:	1f 92       	push	r1
    2586:	1f 92       	push	r1
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9d 83       	std	Y+5, r25	; 0x05
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	9d 81       	ldd	r25, Y+5	; 0x05
    2594:	9b 83       	std	Y+3, r25	; 0x03
    2596:	8a 83       	std	Y+2, r24	; 0x02
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	0f 92       	push	r0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	dc 01       	movw	r26, r24
    25a6:	18 96       	adiw	r26, 0x08	; 8
    25a8:	8d 91       	ld	r24, X+
    25aa:	9c 91       	ld	r25, X
    25ac:	19 97       	sbiw	r26, 0x09	; 9
    25ae:	89 2b       	or	r24, r25
    25b0:	39 f5       	brne	.+78     	; 0x2600 <xStreamBufferReset+0x84>
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	fc 01       	movw	r30, r24
    25b8:	82 85       	ldd	r24, Z+10	; 0x0a
    25ba:	93 85       	ldd	r25, Z+11	; 0x0b
    25bc:	89 2b       	or	r24, r25
    25be:	01 f5       	brne	.+64     	; 0x2600 <xStreamBufferReset+0x84>
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	9b 81       	ldd	r25, Y+3	; 0x03
    25c4:	dc 01       	movw	r26, r24
    25c6:	1e 96       	adiw	r26, 0x0e	; 14
    25c8:	ec 91       	ld	r30, X
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	dc 01       	movw	r26, r24
    25d0:	16 96       	adiw	r26, 0x06	; 6
    25d2:	2d 91       	ld	r18, X+
    25d4:	3c 91       	ld	r19, X
    25d6:	17 97       	sbiw	r26, 0x07	; 7
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	dc 01       	movw	r26, r24
    25de:	14 96       	adiw	r26, 0x04	; 4
    25e0:	4d 91       	ld	r20, X+
    25e2:	5c 91       	ld	r21, X
    25e4:	15 97       	sbiw	r26, 0x05	; 5
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	dc 01       	movw	r26, r24
    25ec:	1c 96       	adiw	r26, 0x0c	; 12
    25ee:	6d 91       	ld	r22, X+
    25f0:	7c 91       	ld	r23, X
    25f2:	1d 97       	sbiw	r26, 0x0d	; 13
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	0e 2f       	mov	r16, r30
    25fa:	ec d4       	rcall	.+2520   	; 0x2fd4 <prvInitialiseNewStreamBuffer>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <xStreamBufferSpacesAvailable>:
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 d0       	rcall	.+0      	; 0x261e <xStreamBufferSpacesAvailable+0x6>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <xStreamBufferSpacesAvailable+0x8>
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	fc 01       	movw	r30, r24
    2636:	24 81       	ldd	r18, Z+4	; 0x04
    2638:	35 81       	ldd	r19, Z+5	; 0x05
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	fc 01       	movw	r30, r24
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	29 81       	ldd	r18, Y+1	; 0x01
    2658:	3a 81       	ldd	r19, Y+2	; 0x02
    265a:	a9 01       	movw	r20, r18
    265c:	48 1b       	sub	r20, r24
    265e:	59 0b       	sbc	r21, r25
    2660:	ca 01       	movw	r24, r20
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	fc 01       	movw	r30, r24
    2676:	24 81       	ldd	r18, Z+4	; 0x04
    2678:	35 81       	ldd	r19, Z+5	; 0x05
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	82 17       	cp	r24, r18
    2680:	93 07       	cpc	r25, r19
    2682:	68 f0       	brcs	.+26     	; 0x269e <xStreamBufferSpacesAvailable+0x86>
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	fc 01       	movw	r30, r24
    268a:	84 81       	ldd	r24, Z+4	; 0x04
    268c:	95 81       	ldd	r25, Z+5	; 0x05
    268e:	29 81       	ldd	r18, Y+1	; 0x01
    2690:	3a 81       	ldd	r19, Y+2	; 0x02
    2692:	a9 01       	movw	r20, r18
    2694:	48 1b       	sub	r20, r24
    2696:	59 0b       	sbc	r21, r25
    2698:	ca 01       	movw	r24, r20
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	26 96       	adiw	r28, 0x06	; 6
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <xStreamBufferSend>:
    26b4:	af 92       	push	r10
    26b6:	bf 92       	push	r11
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	69 97       	sbiw	r28, 0x19	; 25
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	99 8b       	std	Y+17, r25	; 0x11
    26da:	88 8b       	std	Y+16, r24	; 0x10
    26dc:	7b 8b       	std	Y+19, r23	; 0x13
    26de:	6a 8b       	std	Y+18, r22	; 0x12
    26e0:	5d 8b       	std	Y+21, r21	; 0x15
    26e2:	4c 8b       	std	Y+20, r20	; 0x14
    26e4:	0e 8b       	std	Y+22, r16	; 0x16
    26e6:	1f 8b       	std	Y+23, r17	; 0x17
    26e8:	28 8f       	std	Y+24, r18	; 0x18
    26ea:	39 8f       	std	Y+25, r19	; 0x19
    26ec:	88 89       	ldd	r24, Y+16	; 0x10
    26ee:	99 89       	ldd	r25, Y+17	; 0x11
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	1a 82       	std	Y+2, r1	; 0x02
    26f6:	19 82       	std	Y+1, r1	; 0x01
    26f8:	8c 89       	ldd	r24, Y+20	; 0x14
    26fa:	9d 89       	ldd	r25, Y+21	; 0x15
    26fc:	9c 83       	std	Y+4, r25	; 0x04
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	fc 01       	movw	r30, r24
    2706:	84 81       	ldd	r24, Z+4	; 0x04
    2708:	95 81       	ldd	r25, Z+5	; 0x05
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	98 87       	std	Y+8, r25	; 0x08
    270e:	8f 83       	std	Y+7, r24	; 0x07
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	fc 01       	movw	r30, r24
    2716:	86 85       	ldd	r24, Z+14	; 0x0e
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	99 27       	eor	r25, r25
    2720:	89 2b       	or	r24, r25
    2722:	89 f0       	breq	.+34     	; 0x2746 <xStreamBufferSend+0x92>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	2b 81       	ldd	r18, Y+3	; 0x03
    2730:	3c 81       	ldd	r19, Y+4	; 0x04
    2732:	8f 81       	ldd	r24, Y+7	; 0x07
    2734:	98 85       	ldd	r25, Y+8	; 0x08
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	80 f4       	brcc	.+32     	; 0x275c <xStreamBufferSend+0xa8>
    273c:	1e 8a       	std	Y+22, r1	; 0x16
    273e:	1f 8a       	std	Y+23, r1	; 0x17
    2740:	18 8e       	std	Y+24, r1	; 0x18
    2742:	19 8e       	std	Y+25, r1	; 0x19
    2744:	0b c0       	rjmp	.+22     	; 0x275c <xStreamBufferSend+0xa8>
    2746:	2b 81       	ldd	r18, Y+3	; 0x03
    2748:	3c 81       	ldd	r19, Y+4	; 0x04
    274a:	8f 81       	ldd	r24, Y+7	; 0x07
    274c:	98 85       	ldd	r25, Y+8	; 0x08
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	20 f4       	brcc	.+8      	; 0x275c <xStreamBufferSend+0xa8>
    2754:	8f 81       	ldd	r24, Y+7	; 0x07
    2756:	98 85       	ldd	r25, Y+8	; 0x08
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	8e 89       	ldd	r24, Y+22	; 0x16
    275e:	9f 89       	ldd	r25, Y+23	; 0x17
    2760:	a8 8d       	ldd	r26, Y+24	; 0x18
    2762:	b9 8d       	ldd	r27, Y+25	; 0x19
    2764:	89 2b       	or	r24, r25
    2766:	8a 2b       	or	r24, r26
    2768:	8b 2b       	or	r24, r27
    276a:	09 f4       	brne	.+2      	; 0x276e <xStreamBufferSend+0xba>
    276c:	47 c0       	rjmp	.+142    	; 0x27fc <xStreamBufferSend+0x148>
    276e:	ce 01       	movw	r24, r28
    2770:	0b 96       	adiw	r24, 0x0b	; 11
    2772:	0e 94 a6 23 	call	0x474c	; 0x474c <vTaskSetTimeOutState>
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	0f 92       	push	r0
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	4b df       	rcall	.-362    	; 0x2618 <xStreamBufferSpacesAvailable>
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	29 81       	ldd	r18, Y+1	; 0x01
    2788:	3a 81       	ldd	r19, Y+2	; 0x02
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	28 17       	cp	r18, r24
    2790:	39 07       	cpc	r19, r25
    2792:	70 f4       	brcc	.+28     	; 0x27b0 <xStreamBufferSend+0xfc>
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <xTaskGenericNotifyStateClear>
    279e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <xTaskGetCurrentTaskHandle>
    27a2:	9c 01       	movw	r18, r24
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	fc 01       	movw	r30, r24
    27aa:	33 87       	std	Z+11, r19	; 0x0b
    27ac:	22 87       	std	Z+10, r18	; 0x0a
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <xStreamBufferSend+0x102>
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	23 c0       	rjmp	.+70     	; 0x27fc <xStreamBufferSend+0x148>
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	8e 89       	ldd	r24, Y+22	; 0x16
    27bc:	9f 89       	ldd	r25, Y+23	; 0x17
    27be:	a8 8d       	ldd	r26, Y+24	; 0x18
    27c0:	b9 8d       	ldd	r27, Y+25	; 0x19
    27c2:	5c 01       	movw	r10, r24
    27c4:	6d 01       	movw	r12, r26
    27c6:	e1 2c       	mov	r14, r1
    27c8:	f1 2c       	mov	r15, r1
    27ca:	00 e0       	ldi	r16, 0x00	; 0
    27cc:	10 e0       	ldi	r17, 0x00	; 0
    27ce:	98 01       	movw	r18, r16
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	ba 01       	movw	r22, r20
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericNotifyWait>
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	fc 01       	movw	r30, r24
    27e2:	13 86       	std	Z+11, r1	; 0x0b
    27e4:	12 86       	std	Z+10, r1	; 0x0a
    27e6:	9e 01       	movw	r18, r28
    27e8:	2a 5e       	subi	r18, 0xEA	; 234
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	ce 01       	movw	r24, r28
    27ee:	0b 96       	adiw	r24, 0x0b	; 11
    27f0:	b9 01       	movw	r22, r18
    27f2:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <xTaskCheckForTimeOut>
    27f6:	88 23       	and	r24, r24
    27f8:	09 f4       	brne	.+2      	; 0x27fc <xStreamBufferSend+0x148>
    27fa:	bd cf       	rjmp	.-134    	; 0x2776 <xStreamBufferSend+0xc2>
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2800:	89 2b       	or	r24, r25
    2802:	29 f4       	brne	.+10     	; 0x280e <xStreamBufferSend+0x15a>
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	07 df       	rcall	.-498    	; 0x2618 <xStreamBufferSpacesAvailable>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	eb 81       	ldd	r30, Y+3	; 0x03
    2810:	fc 81       	ldd	r31, Y+4	; 0x04
    2812:	29 81       	ldd	r18, Y+1	; 0x01
    2814:	3a 81       	ldd	r19, Y+2	; 0x02
    2816:	4c 89       	ldd	r20, Y+20	; 0x14
    2818:	5d 89       	ldd	r21, Y+21	; 0x15
    281a:	6a 89       	ldd	r22, Y+18	; 0x12
    281c:	7b 89       	ldd	r23, Y+19	; 0x13
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	8f 01       	movw	r16, r30
    2824:	c2 d0       	rcall	.+388    	; 0x29aa <prvWriteMessageToBuffer>
    2826:	9a 87       	std	Y+10, r25	; 0x0a
    2828:	89 87       	std	Y+9, r24	; 0x09
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	89 2b       	or	r24, r25
    2830:	41 f1       	breq	.+80     	; 0x2882 <xStreamBufferSend+0x1ce>
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	8b d3       	rcall	.+1814   	; 0x2f4e <prvBytesInBuffer>
    2838:	9c 01       	movw	r18, r24
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	fc 01       	movw	r30, r24
    2840:	86 81       	ldd	r24, Z+6	; 0x06
    2842:	97 81       	ldd	r25, Z+7	; 0x07
    2844:	28 17       	cp	r18, r24
    2846:	39 07       	cpc	r19, r25
    2848:	e0 f0       	brcs	.+56     	; 0x2882 <xStreamBufferSend+0x1ce>
    284a:	64 d7       	rcall	.+3784   	; 0x3714 <vTaskSuspendAll>
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	fc 01       	movw	r30, r24
    2852:	80 85       	ldd	r24, Z+8	; 0x08
    2854:	91 85       	ldd	r25, Z+9	; 0x09
    2856:	89 2b       	or	r24, r25
    2858:	99 f0       	breq	.+38     	; 0x2880 <xStreamBufferSend+0x1cc>
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	fc 01       	movw	r30, r24
    2860:	80 85       	ldd	r24, Z+8	; 0x08
    2862:	91 85       	ldd	r25, Z+9	; 0x09
    2864:	e1 2c       	mov	r14, r1
    2866:	f1 2c       	mov	r15, r1
    2868:	00 e0       	ldi	r16, 0x00	; 0
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	a9 01       	movw	r20, r18
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <xTaskGenericNotify>
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	fc 01       	movw	r30, r24
    287c:	11 86       	std	Z+9, r1	; 0x09
    287e:	10 86       	std	Z+8, r1	; 0x08
    2880:	56 d7       	rcall	.+3756   	; 0x372e <xTaskResumeAll>
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	69 96       	adiw	r28, 0x19	; 25
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
    28a4:	af 90       	pop	r10
    28a6:	08 95       	ret

000028a8 <xStreamBufferSendFromISR>:
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	61 97       	sbiw	r28, 0x11	; 17
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	9b 87       	std	Y+11, r25	; 0x0b
    28ca:	8a 87       	std	Y+10, r24	; 0x0a
    28cc:	7d 87       	std	Y+13, r23	; 0x0d
    28ce:	6c 87       	std	Y+12, r22	; 0x0c
    28d0:	5f 87       	std	Y+15, r21	; 0x0f
    28d2:	4e 87       	std	Y+14, r20	; 0x0e
    28d4:	39 8b       	std	Y+17, r19	; 0x11
    28d6:	28 8b       	std	Y+16, r18	; 0x10
    28d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28da:	9b 85       	ldd	r25, Y+11	; 0x0b
    28dc:	9c 83       	std	Y+4, r25	; 0x04
    28de:	8b 83       	std	Y+3, r24	; 0x03
    28e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	fc 01       	movw	r30, r24
    28ee:	86 85       	ldd	r24, Z+14	; 0x0e
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	81 70       	andi	r24, 0x01	; 1
    28f6:	99 27       	eor	r25, r25
    28f8:	89 2b       	or	r24, r25
    28fa:	29 f0       	breq	.+10     	; 0x2906 <xStreamBufferSendFromISR+0x5e>
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	02 96       	adiw	r24, 0x02	; 2
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	86 de       	rcall	.-756    	; 0x2618 <xStreamBufferSpacesAvailable>
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	2d 81       	ldd	r18, Y+5	; 0x05
    2916:	3e 81       	ldd	r19, Y+6	; 0x06
    2918:	4e 85       	ldd	r20, Y+14	; 0x0e
    291a:	5f 85       	ldd	r21, Y+15	; 0x0f
    291c:	6c 85       	ldd	r22, Y+12	; 0x0c
    291e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	8f 01       	movw	r16, r30
    2926:	41 d0       	rcall	.+130    	; 0x29aa <prvWriteMessageToBuffer>
    2928:	98 87       	std	Y+8, r25	; 0x08
    292a:	8f 83       	std	Y+7, r24	; 0x07
    292c:	8f 81       	ldd	r24, Y+7	; 0x07
    292e:	98 85       	ldd	r25, Y+8	; 0x08
    2930:	89 2b       	or	r24, r25
    2932:	51 f1       	breq	.+84     	; 0x2988 <xStreamBufferSendFromISR+0xe0>
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	0a d3       	rcall	.+1556   	; 0x2f4e <prvBytesInBuffer>
    293a:	9c 01       	movw	r18, r24
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	9c 81       	ldd	r25, Y+4	; 0x04
    2940:	fc 01       	movw	r30, r24
    2942:	86 81       	ldd	r24, Z+6	; 0x06
    2944:	97 81       	ldd	r25, Z+7	; 0x07
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	f0 f0       	brcs	.+60     	; 0x2988 <xStreamBufferSendFromISR+0xe0>
    294c:	19 86       	std	Y+9, r1	; 0x09
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	fc 01       	movw	r30, r24
    2954:	80 85       	ldd	r24, Z+8	; 0x08
    2956:	91 85       	ldd	r25, Z+9	; 0x09
    2958:	89 2b       	or	r24, r25
    295a:	b1 f0       	breq	.+44     	; 0x2988 <xStreamBufferSendFromISR+0xe0>
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	fc 01       	movw	r30, r24
    2962:	80 85       	ldd	r24, Z+8	; 0x08
    2964:	91 85       	ldd	r25, Z+9	; 0x09
    2966:	28 89       	ldd	r18, Y+16	; 0x10
    2968:	39 89       	ldd	r19, Y+17	; 0x11
    296a:	69 01       	movw	r12, r18
    296c:	e1 2c       	mov	r14, r1
    296e:	f1 2c       	mov	r15, r1
    2970:	00 e0       	ldi	r16, 0x00	; 0
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	a9 01       	movw	r20, r18
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	0e 94 85 29 	call	0x530a	; 0x530a <xTaskGenericNotifyFromISR>
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	fc 01       	movw	r30, r24
    2984:	11 86       	std	Z+9, r1	; 0x09
    2986:	10 86       	std	Z+8, r1	; 0x08
    2988:	8f 81       	ldd	r24, Y+7	; 0x07
    298a:	98 85       	ldd	r25, Y+8	; 0x08
    298c:	61 96       	adiw	r28, 0x11	; 17
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	08 95       	ret

000029aa <prvWriteMessageToBuffer>:
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	61 97       	sbiw	r28, 0x11	; 17
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	99 87       	std	Y+9, r25	; 0x09
    29c4:	88 87       	std	Y+8, r24	; 0x08
    29c6:	7b 87       	std	Y+11, r23	; 0x0b
    29c8:	6a 87       	std	Y+10, r22	; 0x0a
    29ca:	5d 87       	std	Y+13, r21	; 0x0d
    29cc:	4c 87       	std	Y+12, r20	; 0x0c
    29ce:	3f 87       	std	Y+15, r19	; 0x0f
    29d0:	2e 87       	std	Y+14, r18	; 0x0e
    29d2:	19 8b       	std	Y+17, r17	; 0x11
    29d4:	08 8b       	std	Y+16, r16	; 0x10
    29d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    29d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    29da:	89 2b       	or	r24, r25
    29dc:	11 f4       	brne	.+4      	; 0x29e2 <prvWriteMessageToBuffer+0x38>
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	33 c0       	rjmp	.+102    	; 0x2a48 <prvWriteMessageToBuffer+0x9e>
    29e2:	88 85       	ldd	r24, Y+8	; 0x08
    29e4:	99 85       	ldd	r25, Y+9	; 0x09
    29e6:	fc 01       	movw	r30, r24
    29e8:	86 85       	ldd	r24, Z+14	; 0x0e
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	81 70       	andi	r24, 0x01	; 1
    29f0:	99 27       	eor	r25, r25
    29f2:	89 2b       	or	r24, r25
    29f4:	a9 f4       	brne	.+42     	; 0x2a20 <prvWriteMessageToBuffer+0x76>
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    29fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    29fe:	9d 83       	std	Y+5, r25	; 0x05
    2a00:	8c 83       	std	Y+4, r24	; 0x04
    2a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a06:	9f 83       	std	Y+7, r25	; 0x07
    2a08:	8e 83       	std	Y+6, r24	; 0x06
    2a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a10:	9f 81       	ldd	r25, Y+7	; 0x07
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	08 f4       	brcc	.+2      	; 0x2a1a <prvWriteMessageToBuffer+0x70>
    2a18:	c9 01       	movw	r24, r18
    2a1a:	9d 87       	std	Y+13, r25	; 0x0d
    2a1c:	8c 87       	std	Y+12, r24	; 0x0c
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <prvWriteMessageToBuffer+0x9e>
    2a20:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a22:	3f 85       	ldd	r19, Y+15	; 0x0f
    2a24:	88 89       	ldd	r24, Y+16	; 0x10
    2a26:	99 89       	ldd	r25, Y+17	; 0x11
    2a28:	28 17       	cp	r18, r24
    2a2a:	39 07       	cpc	r19, r25
    2a2c:	60 f0       	brcs	.+24     	; 0x2a46 <prvWriteMessageToBuffer+0x9c>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	9e 01       	movw	r18, r28
    2a34:	24 5f       	subi	r18, 0xF4	; 244
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	88 85       	ldd	r24, Y+8	; 0x08
    2a3a:	99 85       	ldd	r25, Y+9	; 0x09
    2a3c:	42 e0       	ldi	r20, 0x02	; 2
    2a3e:	50 e0       	ldi	r21, 0x00	; 0
    2a40:	b9 01       	movw	r22, r18
    2a42:	4f d1       	rcall	.+670    	; 0x2ce2 <prvWriteBytesToBuffer>
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <prvWriteMessageToBuffer+0x9e>
    2a46:	19 82       	std	Y+1, r1	; 0x01
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	88 23       	and	r24, r24
    2a4c:	59 f0       	breq	.+22     	; 0x2a64 <prvWriteMessageToBuffer+0xba>
    2a4e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a50:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a52:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a54:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a56:	88 85       	ldd	r24, Y+8	; 0x08
    2a58:	99 85       	ldd	r25, Y+9	; 0x09
    2a5a:	b9 01       	movw	r22, r18
    2a5c:	42 d1       	rcall	.+644    	; 0x2ce2 <prvWriteBytesToBuffer>
    2a5e:	9b 83       	std	Y+3, r25	; 0x03
    2a60:	8a 83       	std	Y+2, r24	; 0x02
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <prvWriteMessageToBuffer+0xbe>
    2a64:	1b 82       	std	Y+3, r1	; 0x03
    2a66:	1a 82       	std	Y+2, r1	; 0x02
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6c:	61 96       	adiw	r28, 0x11	; 17
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	08 95       	ret

00002a82 <xStreamBufferReceive>:
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	62 97       	sbiw	r28, 0x12	; 18
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	9a 87       	std	Y+10, r25	; 0x0a
    2aa8:	89 87       	std	Y+9, r24	; 0x09
    2aaa:	7c 87       	std	Y+12, r23	; 0x0c
    2aac:	6b 87       	std	Y+11, r22	; 0x0b
    2aae:	5e 87       	std	Y+14, r21	; 0x0e
    2ab0:	4d 87       	std	Y+13, r20	; 0x0d
    2ab2:	0f 87       	std	Y+15, r16	; 0x0f
    2ab4:	18 8b       	std	Y+16, r17	; 0x10
    2ab6:	29 8b       	std	Y+17, r18	; 0x11
    2ab8:	3a 8b       	std	Y+18, r19	; 0x12
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	98 87       	std	Y+8, r25	; 0x08
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	1a 82       	std	Y+2, r1	; 0x02
    2ac4:	19 82       	std	Y+1, r1	; 0x01
    2ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac8:	98 85       	ldd	r25, Y+8	; 0x08
    2aca:	fc 01       	movw	r30, r24
    2acc:	86 85       	ldd	r24, Z+14	; 0x0e
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	81 70       	andi	r24, 0x01	; 1
    2ad4:	99 27       	eor	r25, r25
    2ad6:	89 2b       	or	r24, r25
    2ad8:	29 f0       	breq	.+10     	; 0x2ae4 <xStreamBufferReceive+0x62>
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <xStreamBufferReceive+0x66>
    2ae4:	1e 82       	std	Y+6, r1	; 0x06
    2ae6:	1d 82       	std	Y+5, r1	; 0x05
    2ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aea:	98 89       	ldd	r25, Y+16	; 0x10
    2aec:	a9 89       	ldd	r26, Y+17	; 0x11
    2aee:	ba 89       	ldd	r27, Y+18	; 0x12
    2af0:	89 2b       	or	r24, r25
    2af2:	8a 2b       	or	r24, r26
    2af4:	8b 2b       	or	r24, r27
    2af6:	09 f4       	brne	.+2      	; 0x2afa <xStreamBufferReceive+0x78>
    2af8:	41 c0       	rjmp	.+130    	; 0x2b7c <xStreamBufferReceive+0xfa>
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	0f 92       	push	r0
    2b00:	8f 81       	ldd	r24, Y+7	; 0x07
    2b02:	98 85       	ldd	r25, Y+8	; 0x08
    2b04:	24 d2       	rcall	.+1096   	; 0x2f4e <prvBytesInBuffer>
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	82 17       	cp	r24, r18
    2b14:	93 07       	cpc	r25, r19
    2b16:	68 f0       	brcs	.+26     	; 0x2b32 <xStreamBufferReceive+0xb0>
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <xTaskGenericNotifyStateClear>
    2b22:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <xTaskGetCurrentTaskHandle>
    2b26:	9c 01       	movw	r18, r24
    2b28:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2a:	98 85       	ldd	r25, Y+8	; 0x08
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	31 87       	std	Z+9, r19	; 0x09
    2b30:	20 87       	std	Z+8, r18	; 0x08
    2b32:	0f 90       	pop	r0
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	2b 81       	ldd	r18, Y+3	; 0x03
    2b38:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	82 17       	cp	r24, r18
    2b40:	93 07       	cpc	r25, r19
    2b42:	08 f1       	brcs	.+66     	; 0x2b86 <xStreamBufferReceive+0x104>
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	98 89       	ldd	r25, Y+16	; 0x10
    2b48:	a9 89       	ldd	r26, Y+17	; 0x11
    2b4a:	ba 89       	ldd	r27, Y+18	; 0x12
    2b4c:	5c 01       	movw	r10, r24
    2b4e:	6d 01       	movw	r12, r26
    2b50:	e1 2c       	mov	r14, r1
    2b52:	f1 2c       	mov	r15, r1
    2b54:	00 e0       	ldi	r16, 0x00	; 0
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	98 01       	movw	r18, r16
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	ba 01       	movw	r22, r20
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericNotifyWait>
    2b66:	8f 81       	ldd	r24, Y+7	; 0x07
    2b68:	98 85       	ldd	r25, Y+8	; 0x08
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	11 86       	std	Z+9, r1	; 0x09
    2b6e:	10 86       	std	Z+8, r1	; 0x08
    2b70:	8f 81       	ldd	r24, Y+7	; 0x07
    2b72:	98 85       	ldd	r25, Y+8	; 0x08
    2b74:	ec d1       	rcall	.+984    	; 0x2f4e <prvBytesInBuffer>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
    2b7a:	05 c0       	rjmp	.+10     	; 0x2b86 <xStreamBufferReceive+0x104>
    2b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7e:	98 85       	ldd	r25, Y+8	; 0x08
    2b80:	e6 d1       	rcall	.+972    	; 0x2f4e <prvBytesInBuffer>
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
    2b86:	2b 81       	ldd	r18, Y+3	; 0x03
    2b88:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	82 17       	cp	r24, r18
    2b90:	93 07       	cpc	r25, r19
    2b92:	70 f5       	brcc	.+92     	; 0x2bf0 <xStreamBufferReceive+0x16e>
    2b94:	ed 81       	ldd	r30, Y+5	; 0x05
    2b96:	fe 81       	ldd	r31, Y+6	; 0x06
    2b98:	2b 81       	ldd	r18, Y+3	; 0x03
    2b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b9e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba6:	98 85       	ldd	r25, Y+8	; 0x08
    2ba8:	8f 01       	movw	r16, r30
    2baa:	35 d0       	rcall	.+106    	; 0x2c16 <prvReadMessageFromBuffer>
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	89 2b       	or	r24, r25
    2bb6:	e1 f0       	breq	.+56     	; 0x2bf0 <xStreamBufferReceive+0x16e>
    2bb8:	ad d5       	rcall	.+2906   	; 0x3714 <vTaskSuspendAll>
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	98 85       	ldd	r25, Y+8	; 0x08
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	82 85       	ldd	r24, Z+10	; 0x0a
    2bc2:	93 85       	ldd	r25, Z+11	; 0x0b
    2bc4:	89 2b       	or	r24, r25
    2bc6:	99 f0       	breq	.+38     	; 0x2bee <xStreamBufferReceive+0x16c>
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	fc 01       	movw	r30, r24
    2bce:	82 85       	ldd	r24, Z+10	; 0x0a
    2bd0:	93 85       	ldd	r25, Z+11	; 0x0b
    2bd2:	e1 2c       	mov	r14, r1
    2bd4:	f1 2c       	mov	r15, r1
    2bd6:	00 e0       	ldi	r16, 0x00	; 0
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	a9 01       	movw	r20, r18
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <xTaskGenericNotify>
    2be4:	8f 81       	ldd	r24, Y+7	; 0x07
    2be6:	98 85       	ldd	r25, Y+8	; 0x08
    2be8:	fc 01       	movw	r30, r24
    2bea:	13 86       	std	Z+11, r1	; 0x0b
    2bec:	12 86       	std	Z+10, r1	; 0x0a
    2bee:	9f d5       	rcall	.+2878   	; 0x372e <xTaskResumeAll>
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	62 96       	adiw	r28, 0x12	; 18
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
    2c10:	bf 90       	pop	r11
    2c12:	af 90       	pop	r10
    2c14:	08 95       	ret

00002c16 <prvReadMessageFromBuffer>:
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	62 97       	sbiw	r28, 0x12	; 18
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	9a 87       	std	Y+10, r25	; 0x0a
    2c30:	89 87       	std	Y+9, r24	; 0x09
    2c32:	7c 87       	std	Y+12, r23	; 0x0c
    2c34:	6b 87       	std	Y+11, r22	; 0x0b
    2c36:	5e 87       	std	Y+14, r21	; 0x0e
    2c38:	4d 87       	std	Y+13, r20	; 0x0d
    2c3a:	38 8b       	std	Y+16, r19	; 0x10
    2c3c:	2f 87       	std	Y+15, r18	; 0x0f
    2c3e:	1a 8b       	std	Y+18, r17	; 0x12
    2c40:	09 8b       	std	Y+17, r16	; 0x11
    2c42:	89 89       	ldd	r24, Y+17	; 0x11
    2c44:	9a 89       	ldd	r25, Y+18	; 0x12
    2c46:	89 2b       	or	r24, r25
    2c48:	81 f1       	breq	.+96     	; 0x2caa <prvReadMessageFromBuffer+0x94>
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	fc 01       	movw	r30, r24
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03
    2c58:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c5a:	38 89       	ldd	r19, Y+16	; 0x10
    2c5c:	49 89       	ldd	r20, Y+17	; 0x11
    2c5e:	5a 89       	ldd	r21, Y+18	; 0x12
    2c60:	be 01       	movw	r22, r28
    2c62:	69 5f       	subi	r22, 0xF9	; 249
    2c64:	7f 4f       	sbci	r23, 0xFF	; 255
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	ca d0       	rcall	.+404    	; 0x2e00 <prvReadBytesFromBuffer>
    2c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6e:	98 85       	ldd	r25, Y+8	; 0x08
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c76:	38 89       	ldd	r19, Y+16	; 0x10
    2c78:	89 89       	ldd	r24, Y+17	; 0x11
    2c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	48 1b       	sub	r20, r24
    2c80:	59 0b       	sbc	r21, r25
    2c82:	ca 01       	movw	r24, r20
    2c84:	98 8b       	std	Y+16, r25	; 0x10
    2c86:	8f 87       	std	Y+15, r24	; 0x0f
    2c88:	29 81       	ldd	r18, Y+1	; 0x01
    2c8a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	70 f4       	brcc	.+28     	; 0x2cb2 <prvReadMessageFromBuffer+0x9c>
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	31 83       	std	Z+1, r19	; 0x01
    2ca2:	20 83       	st	Z, r18
    2ca4:	1a 82       	std	Y+2, r1	; 0x02
    2ca6:	19 82       	std	Y+1, r1	; 0x01
    2ca8:	04 c0       	rjmp	.+8      	; 0x2cb2 <prvReadMessageFromBuffer+0x9c>
    2caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cb4:	38 89       	ldd	r19, Y+16	; 0x10
    2cb6:	49 81       	ldd	r20, Y+1	; 0x01
    2cb8:	5a 81       	ldd	r21, Y+2	; 0x02
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	89 85       	ldd	r24, Y+9	; 0x09
    2cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc2:	9e d0       	rcall	.+316    	; 0x2e00 <prvReadBytesFromBuffer>
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	62 96       	adiw	r28, 0x12	; 18
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	2e 97       	sbiw	r28, 0x0e	; 14
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	9a 87       	std	Y+10, r25	; 0x0a
    2cf8:	89 87       	std	Y+9, r24	; 0x09
    2cfa:	7c 87       	std	Y+12, r23	; 0x0c
    2cfc:	6b 87       	std	Y+11, r22	; 0x0b
    2cfe:	5e 87       	std	Y+14, r21	; 0x0e
    2d00:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	fc 01       	movw	r30, r24
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	fc 01       	movw	r30, r24
    2d16:	24 81       	ldd	r18, Z+4	; 0x04
    2d18:	35 81       	ldd	r19, Z+5	; 0x05
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	a9 01       	movw	r20, r18
    2d20:	48 1b       	sub	r20, r24
    2d22:	59 0b       	sbc	r21, r25
    2d24:	ca 01       	movw	r24, r20
    2d26:	9c 83       	std	Y+4, r25	; 0x04
    2d28:	8b 83       	std	Y+3, r24	; 0x03
    2d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
    2d32:	2b 81       	ldd	r18, Y+3	; 0x03
    2d34:	3c 81       	ldd	r19, Y+4	; 0x04
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	28 17       	cp	r18, r24
    2d3c:	39 07       	cpc	r19, r25
    2d3e:	08 f4       	brcc	.+2      	; 0x2d42 <prvWriteBytesToBuffer+0x60>
    2d40:	c9 01       	movw	r24, r18
    2d42:	98 87       	std	Y+8, r25	; 0x08
    2d44:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	24 85       	ldd	r18, Z+12	; 0x0c
    2d4e:	35 85       	ldd	r19, Z+13	; 0x0d
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	9a 81       	ldd	r25, Y+2	; 0x02
    2d54:	82 0f       	add	r24, r18
    2d56:	93 1f       	adc	r25, r19
    2d58:	4f 81       	ldd	r20, Y+7	; 0x07
    2d5a:	58 85       	ldd	r21, Y+8	; 0x08
    2d5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d60:	b9 01       	movw	r22, r18
    2d62:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2d66:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d68:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d6c:	98 85       	ldd	r25, Y+8	; 0x08
    2d6e:	82 17       	cp	r24, r18
    2d70:	93 07       	cpc	r25, r19
    2d72:	a8 f4       	brcc	.+42     	; 0x2d9e <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2d74:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d76:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d78:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7a:	98 85       	ldd	r25, Y+8	; 0x08
    2d7c:	a9 01       	movw	r20, r18
    2d7e:	48 1b       	sub	r20, r24
    2d80:	59 0b       	sbc	r21, r25
    2d82:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d84:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d86:	8f 81       	ldd	r24, Y+7	; 0x07
    2d88:	98 85       	ldd	r25, Y+8	; 0x08
    2d8a:	28 0f       	add	r18, r24
    2d8c:	39 1f       	adc	r19, r25
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	fc 01       	movw	r30, r24
    2d94:	84 85       	ldd	r24, Z+12	; 0x0c
    2d96:	95 85       	ldd	r25, Z+13	; 0x0d
    2d98:	b9 01       	movw	r22, r18
    2d9a:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2d9e:	29 81       	ldd	r18, Y+1	; 0x01
    2da0:	3a 81       	ldd	r19, Y+2	; 0x02
    2da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	fc 01       	movw	r30, r24
    2db4:	24 81       	ldd	r18, Z+4	; 0x04
    2db6:	35 81       	ldd	r19, Z+5	; 0x05
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	82 17       	cp	r24, r18
    2dbe:	93 07       	cpc	r25, r19
    2dc0:	68 f0       	brcs	.+26     	; 0x2ddc <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	84 81       	ldd	r24, Z+4	; 0x04
    2dca:	95 81       	ldd	r25, Z+5	; 0x05
    2dcc:	29 81       	ldd	r18, Y+1	; 0x01
    2dce:	3a 81       	ldd	r19, Y+2	; 0x02
    2dd0:	a9 01       	movw	r20, r18
    2dd2:	48 1b       	sub	r20, r24
    2dd4:	59 0b       	sbc	r21, r25
    2dd6:	ca 01       	movw	r24, r20
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	29 81       	ldd	r18, Y+1	; 0x01
    2de2:	3a 81       	ldd	r19, Y+2	; 0x02
    2de4:	fc 01       	movw	r30, r24
    2de6:	33 83       	std	Z+3, r19	; 0x03
    2de8:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2dee:	2e 96       	adiw	r28, 0x0e	; 14
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	08 95       	ret

00002e00 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	66 97       	sbiw	r28, 0x16	; 22
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	98 8b       	std	Y+16, r25	; 0x10
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
    2e18:	7a 8b       	std	Y+18, r23	; 0x12
    2e1a:	69 8b       	std	Y+17, r22	; 0x11
    2e1c:	5c 8b       	std	Y+20, r21	; 0x14
    2e1e:	4b 8b       	std	Y+19, r20	; 0x13
    2e20:	3e 8b       	std	Y+22, r19	; 0x16
    2e22:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    2e24:	8d 89       	ldd	r24, Y+21	; 0x15
    2e26:	9e 89       	ldd	r25, Y+22	; 0x16
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	2b 81       	ldd	r18, Y+3	; 0x03
    2e36:	3c 81       	ldd	r19, Y+4	; 0x04
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	28 17       	cp	r18, r24
    2e3e:	39 07       	cpc	r19, r25
    2e40:	08 f4       	brcc	.+2      	; 0x2e44 <prvReadBytesFromBuffer+0x44>
    2e42:	c9 01       	movw	r24, r18
    2e44:	98 87       	std	Y+8, r25	; 0x08
    2e46:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2e48:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4a:	98 85       	ldd	r25, Y+8	; 0x08
    2e4c:	89 2b       	or	r24, r25
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <prvReadBytesFromBuffer+0x52>
    2e50:	73 c0       	rjmp	.+230    	; 0x2f38 <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    2e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e54:	98 89       	ldd	r25, Y+16	; 0x10
    2e56:	fc 01       	movw	r30, r24
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e62:	98 89       	ldd	r25, Y+16	; 0x10
    2e64:	fc 01       	movw	r30, r24
    2e66:	24 81       	ldd	r18, Z+4	; 0x04
    2e68:	35 81       	ldd	r19, Z+5	; 0x05
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	a9 01       	movw	r20, r18
    2e70:	48 1b       	sub	r20, r24
    2e72:	59 0b       	sbc	r21, r25
    2e74:	ca 01       	movw	r24, r20
    2e76:	9a 87       	std	Y+10, r25	; 0x0a
    2e78:	89 87       	std	Y+9, r24	; 0x09
    2e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e7c:	98 85       	ldd	r25, Y+8	; 0x08
    2e7e:	9c 87       	std	Y+12, r25	; 0x0c
    2e80:	8b 87       	std	Y+11, r24	; 0x0b
    2e82:	29 85       	ldd	r18, Y+9	; 0x09
    2e84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e88:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e8a:	28 17       	cp	r18, r24
    2e8c:	39 07       	cpc	r19, r25
    2e8e:	08 f4       	brcc	.+2      	; 0x2e92 <prvReadBytesFromBuffer+0x92>
    2e90:	c9 01       	movw	r24, r18
    2e92:	9e 87       	std	Y+14, r25	; 0x0e
    2e94:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e98:	98 89       	ldd	r25, Y+16	; 0x10
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	24 85       	ldd	r18, Z+12	; 0x0c
    2e9e:	35 85       	ldd	r19, Z+13	; 0x0d
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	28 0f       	add	r18, r24
    2ea6:	39 1f       	adc	r19, r25
    2ea8:	4d 85       	ldd	r20, Y+13	; 0x0d
    2eaa:	5e 85       	ldd	r21, Y+14	; 0x0e
    2eac:	89 89       	ldd	r24, Y+17	; 0x11
    2eae:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb0:	b9 01       	movw	r22, r18
    2eb2:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    2eb6:	2f 81       	ldd	r18, Y+7	; 0x07
    2eb8:	38 85       	ldd	r19, Y+8	; 0x08
    2eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebe:	82 17       	cp	r24, r18
    2ec0:	93 07       	cpc	r25, r19
    2ec2:	a0 f4       	brcc	.+40     	; 0x2eec <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ec4:	2f 81       	ldd	r18, Y+7	; 0x07
    2ec6:	38 85       	ldd	r19, Y+8	; 0x08
    2ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ecc:	a9 01       	movw	r20, r18
    2ece:	48 1b       	sub	r20, r24
    2ed0:	59 0b       	sbc	r21, r25
    2ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed4:	98 89       	ldd	r25, Y+16	; 0x10
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	64 85       	ldd	r22, Z+12	; 0x0c
    2eda:	75 85       	ldd	r23, Z+13	; 0x0d
    2edc:	29 89       	ldd	r18, Y+17	; 0x11
    2ede:	3a 89       	ldd	r19, Y+18	; 0x12
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	82 0f       	add	r24, r18
    2ee6:	93 1f       	adc	r25, r19
    2ee8:	0e 94 a7 42 	call	0x854e	; 0x854e <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    2eec:	29 81       	ldd	r18, Y+1	; 0x01
    2eee:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef2:	98 85       	ldd	r25, Y+8	; 0x08
    2ef4:	82 0f       	add	r24, r18
    2ef6:	93 1f       	adc	r25, r19
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2efe:	98 89       	ldd	r25, Y+16	; 0x10
    2f00:	fc 01       	movw	r30, r24
    2f02:	24 81       	ldd	r18, Z+4	; 0x04
    2f04:	35 81       	ldd	r19, Z+5	; 0x05
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	82 17       	cp	r24, r18
    2f0c:	93 07       	cpc	r25, r19
    2f0e:	68 f0       	brcs	.+26     	; 0x2f2a <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	98 89       	ldd	r25, Y+16	; 0x10
    2f14:	fc 01       	movw	r30, r24
    2f16:	84 81       	ldd	r24, Z+4	; 0x04
    2f18:	95 81       	ldd	r25, Z+5	; 0x05
    2f1a:	29 81       	ldd	r18, Y+1	; 0x01
    2f1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f1e:	a9 01       	movw	r20, r18
    2f20:	48 1b       	sub	r20, r24
    2f22:	59 0b       	sbc	r21, r25
    2f24:	ca 01       	movw	r24, r20
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2c:	98 89       	ldd	r25, Y+16	; 0x10
    2f2e:	29 81       	ldd	r18, Y+1	; 0x01
    2f30:	3a 81       	ldd	r19, Y+2	; 0x02
    2f32:	fc 01       	movw	r30, r24
    2f34:	31 83       	std	Z+1, r19	; 0x01
    2f36:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2f38:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3a:	98 85       	ldd	r25, Y+8	; 0x08
}
    2f3c:	66 96       	adiw	r28, 0x16	; 22
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	08 95       	ret

00002f4e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <prvBytesInBuffer+0x6>
    2f54:	1f 92       	push	r1
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	fc 01       	movw	r30, r24
    2f64:	24 81       	ldd	r18, Z+4	; 0x04
    2f66:	35 81       	ldd	r19, Z+5	; 0x05
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	82 0f       	add	r24, r18
    2f74:	93 1f       	adc	r25, r19
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7e:	fc 01       	movw	r30, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	29 81       	ldd	r18, Y+1	; 0x01
    2f86:	3a 81       	ldd	r19, Y+2	; 0x02
    2f88:	a9 01       	movw	r20, r18
    2f8a:	48 1b       	sub	r20, r24
    2f8c:	59 0b       	sbc	r21, r25
    2f8e:	ca 01       	movw	r24, r20
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	fc 01       	movw	r30, r24
    2f9a:	24 81       	ldd	r18, Z+4	; 0x04
    2f9c:	35 81       	ldd	r19, Z+5	; 0x05
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	82 17       	cp	r24, r18
    2fa4:	93 07       	cpc	r25, r19
    2fa6:	68 f0       	brcs	.+26     	; 0x2fc2 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	9c 81       	ldd	r25, Y+4	; 0x04
    2fac:	fc 01       	movw	r30, r24
    2fae:	84 81       	ldd	r24, Z+4	; 0x04
    2fb0:	95 81       	ldd	r25, Z+5	; 0x05
    2fb2:	29 81       	ldd	r18, Y+1	; 0x01
    2fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	48 1b       	sub	r20, r24
    2fba:	59 0b       	sbc	r21, r25
    2fbc:	ca 01       	movw	r24, r20
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2fd4:	0f 93       	push	r16
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	29 97       	sbiw	r28, 0x09	; 9
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
    2fee:	7c 83       	std	Y+4, r23	; 0x04
    2ff0:	6b 83       	std	Y+3, r22	; 0x03
    2ff2:	5e 83       	std	Y+6, r21	; 0x06
    2ff4:	4d 83       	std	Y+5, r20	; 0x05
    2ff6:	38 87       	std	Y+8, r19	; 0x08
    2ff8:	2f 83       	std	Y+7, r18	; 0x07
    2ffa:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	4f e0       	ldi	r20, 0x0F	; 15
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	70 e0       	ldi	r23, 0x00	; 0
    3008:	0e 94 b0 42 	call	0x8560	; 0x8560 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	2b 81       	ldd	r18, Y+3	; 0x03
    3012:	3c 81       	ldd	r19, Y+4	; 0x04
    3014:	fc 01       	movw	r30, r24
    3016:	35 87       	std	Z+13, r19	; 0x0d
    3018:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	2d 81       	ldd	r18, Y+5	; 0x05
    3020:	3e 81       	ldd	r19, Y+6	; 0x06
    3022:	fc 01       	movw	r30, r24
    3024:	35 83       	std	Z+5, r19	; 0x05
    3026:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	2f 81       	ldd	r18, Y+7	; 0x07
    302e:	38 85       	ldd	r19, Y+8	; 0x08
    3030:	fc 01       	movw	r30, r24
    3032:	37 83       	std	Z+7, r19	; 0x07
    3034:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	29 85       	ldd	r18, Y+9	; 0x09
    303c:	fc 01       	movw	r30, r24
    303e:	26 87       	std	Z+14, r18	; 0x0e
}
    3040:	00 00       	nop
    3042:	29 96       	adiw	r28, 0x09	; 9
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	0f 91       	pop	r16
    3054:	08 95       	ret

00003056 <xTaskCreate>:
    3056:	af 92       	push	r10
    3058:	bf 92       	push	r11
    305a:	cf 92       	push	r12
    305c:	df 92       	push	r13
    305e:	ef 92       	push	r14
    3060:	ff 92       	push	r15
    3062:	0f 93       	push	r16
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	60 97       	sbiw	r28, 0x10	; 16
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	9f 83       	std	Y+7, r25	; 0x07
    307a:	8e 83       	std	Y+6, r24	; 0x06
    307c:	79 87       	std	Y+9, r23	; 0x09
    307e:	68 87       	std	Y+8, r22	; 0x08
    3080:	5b 87       	std	Y+11, r21	; 0x0b
    3082:	4a 87       	std	Y+10, r20	; 0x0a
    3084:	3d 87       	std	Y+13, r19	; 0x0d
    3086:	2c 87       	std	Y+12, r18	; 0x0c
    3088:	0e 87       	std	Y+14, r16	; 0x0e
    308a:	f8 8a       	std	Y+16, r15	; 0x10
    308c:	ef 86       	std	Y+15, r14	; 0x0f
    308e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3090:	9b 85       	ldd	r25, Y+11	; 0x0b
    3092:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pvPortMalloc>
    3096:	9d 83       	std	Y+5, r25	; 0x05
    3098:	8c 83       	std	Y+4, r24	; 0x04
    309a:	8c 81       	ldd	r24, Y+4	; 0x04
    309c:	9d 81       	ldd	r25, Y+5	; 0x05
    309e:	89 2b       	or	r24, r25
    30a0:	b9 f0       	breq	.+46     	; 0x30d0 <xTaskCreate+0x7a>
    30a2:	84 e3       	ldi	r24, 0x34	; 52
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pvPortMalloc>
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	89 2b       	or	r24, r25
    30b4:	41 f0       	breq	.+16     	; 0x30c6 <xTaskCreate+0x70>
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	2c 81       	ldd	r18, Y+4	; 0x04
    30bc:	3d 81       	ldd	r19, Y+5	; 0x05
    30be:	fc 01       	movw	r30, r24
    30c0:	34 8f       	std	Z+28, r19	; 0x1c
    30c2:	23 8f       	std	Z+27, r18	; 0x1b
    30c4:	07 c0       	rjmp	.+14     	; 0x30d4 <xTaskCreate+0x7e>
    30c6:	8c 81       	ldd	r24, Y+4	; 0x04
    30c8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ca:	0e 94 f7 08 	call	0x11ee	; 0x11ee <vPortFree>
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <xTaskCreate+0x7e>
    30d0:	1a 82       	std	Y+2, r1	; 0x02
    30d2:	19 82       	std	Y+1, r1	; 0x01
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	89 2b       	or	r24, r25
    30da:	c1 f0       	breq	.+48     	; 0x310c <xTaskCreate+0xb6>
    30dc:	a9 81       	ldd	r26, Y+1	; 0x01
    30de:	ba 81       	ldd	r27, Y+2	; 0x02
    30e0:	ef 85       	ldd	r30, Y+15	; 0x0f
    30e2:	f8 89       	ldd	r31, Y+16	; 0x10
    30e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    30e8:	4a 85       	ldd	r20, Y+10	; 0x0a
    30ea:	5b 85       	ldd	r21, Y+11	; 0x0b
    30ec:	68 85       	ldd	r22, Y+8	; 0x08
    30ee:	79 85       	ldd	r23, Y+9	; 0x09
    30f0:	8e 81       	ldd	r24, Y+6	; 0x06
    30f2:	9f 81       	ldd	r25, Y+7	; 0x07
    30f4:	a1 2c       	mov	r10, r1
    30f6:	b1 2c       	mov	r11, r1
    30f8:	6d 01       	movw	r12, r26
    30fa:	7f 01       	movw	r14, r30
    30fc:	0e 85       	ldd	r16, Y+14	; 0x0e
    30fe:	19 d0       	rcall	.+50     	; 0x3132 <prvInitialiseNewTask>
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	9a 81       	ldd	r25, Y+2	; 0x02
    3104:	05 d1       	rcall	.+522    	; 0x3310 <prvAddNewTaskToReadyList>
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	8b 83       	std	Y+3, r24	; 0x03
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <xTaskCreate+0xba>
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	8b 83       	std	Y+3, r24	; 0x03
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	60 96       	adiw	r28, 0x10	; 16
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	0f 91       	pop	r16
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	df 90       	pop	r13
    312a:	cf 90       	pop	r12
    312c:	bf 90       	pop	r11
    312e:	af 90       	pop	r10
    3130:	08 95       	ret

00003132 <prvInitialiseNewTask>:
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	cf 92       	push	r12
    3138:	df 92       	push	r13
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	62 97       	sbiw	r28, 0x12	; 18
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	9d 83       	std	Y+5, r25	; 0x05
    3158:	8c 83       	std	Y+4, r24	; 0x04
    315a:	7f 83       	std	Y+7, r23	; 0x07
    315c:	6e 83       	std	Y+6, r22	; 0x06
    315e:	59 87       	std	Y+9, r21	; 0x09
    3160:	48 87       	std	Y+8, r20	; 0x08
    3162:	3b 87       	std	Y+11, r19	; 0x0b
    3164:	2a 87       	std	Y+10, r18	; 0x0a
    3166:	0c 87       	std	Y+12, r16	; 0x0c
    3168:	fe 86       	std	Y+14, r15	; 0x0e
    316a:	ed 86       	std	Y+13, r14	; 0x0d
    316c:	d8 8a       	std	Y+16, r13	; 0x10
    316e:	cf 86       	std	Y+15, r12	; 0x0f
    3170:	ba 8a       	std	Y+18, r11	; 0x12
    3172:	a9 8a       	std	Y+17, r10	; 0x11
    3174:	8f 85       	ldd	r24, Y+15	; 0x0f
    3176:	98 89       	ldd	r25, Y+16	; 0x10
    3178:	fc 01       	movw	r30, r24
    317a:	83 8d       	ldd	r24, Z+27	; 0x1b
    317c:	94 8d       	ldd	r25, Z+28	; 0x1c
    317e:	28 85       	ldd	r18, Y+8	; 0x08
    3180:	39 85       	ldd	r19, Y+9	; 0x09
    3182:	a9 01       	movw	r20, r18
    3184:	65 ea       	ldi	r22, 0xA5	; 165
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	0e 94 b0 42 	call	0x8560	; 0x8560 <memset>
    318c:	8f 85       	ldd	r24, Y+15	; 0x0f
    318e:	98 89       	ldd	r25, Y+16	; 0x10
    3190:	fc 01       	movw	r30, r24
    3192:	23 8d       	ldd	r18, Z+27	; 0x1b
    3194:	34 8d       	ldd	r19, Z+28	; 0x1c
    3196:	88 85       	ldd	r24, Y+8	; 0x08
    3198:	99 85       	ldd	r25, Y+9	; 0x09
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	9b 83       	std	Y+3, r25	; 0x03
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	8e 81       	ldd	r24, Y+6	; 0x06
    31a6:	9f 81       	ldd	r25, Y+7	; 0x07
    31a8:	89 2b       	or	r24, r25
    31aa:	69 f1       	breq	.+90     	; 0x3206 <prvInitialiseNewTask+0xd4>
    31ac:	19 82       	std	Y+1, r1	; 0x01
    31ae:	21 c0       	rjmp	.+66     	; 0x31f2 <prvInitialiseNewTask+0xc0>
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	29 81       	ldd	r18, Y+1	; 0x01
    31b8:	22 2f       	mov	r18, r18
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	4e 81       	ldd	r20, Y+6	; 0x06
    31be:	5f 81       	ldd	r21, Y+7	; 0x07
    31c0:	24 0f       	add	r18, r20
    31c2:	35 1f       	adc	r19, r21
    31c4:	f9 01       	movw	r30, r18
    31c6:	40 81       	ld	r20, Z
    31c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    31ca:	38 89       	ldd	r19, Y+16	; 0x10
    31cc:	82 0f       	add	r24, r18
    31ce:	93 1f       	adc	r25, r19
    31d0:	4d 96       	adiw	r24, 0x1d	; 29
    31d2:	fc 01       	movw	r30, r24
    31d4:	40 83       	st	Z, r20
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	2e 81       	ldd	r18, Y+6	; 0x06
    31de:	3f 81       	ldd	r19, Y+7	; 0x07
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	fc 01       	movw	r30, r24
    31e6:	80 81       	ld	r24, Z
    31e8:	88 23       	and	r24, r24
    31ea:	39 f0       	breq	.+14     	; 0x31fa <prvInitialiseNewTask+0xc8>
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	80 31       	cpi	r24, 0x10	; 16
    31f6:	e0 f2       	brcs	.-72     	; 0x31b0 <prvInitialiseNewTask+0x7e>
    31f8:	01 c0       	rjmp	.+2      	; 0x31fc <prvInitialiseNewTask+0xca>
    31fa:	00 00       	nop
    31fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fe:	98 89       	ldd	r25, Y+16	; 0x10
    3200:	fc 01       	movw	r30, r24
    3202:	14 a6       	std	Z+44, r1	; 0x2c
    3204:	04 c0       	rjmp	.+8      	; 0x320e <prvInitialiseNewTask+0xdc>
    3206:	8f 85       	ldd	r24, Y+15	; 0x0f
    3208:	98 89       	ldd	r25, Y+16	; 0x10
    320a:	fc 01       	movw	r30, r24
    320c:	15 8e       	std	Z+29, r1	; 0x1d
    320e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3210:	8a 30       	cpi	r24, 0x0A	; 10
    3212:	10 f0       	brcs	.+4      	; 0x3218 <prvInitialiseNewTask+0xe6>
    3214:	89 e0       	ldi	r24, 0x09	; 9
    3216:	8c 87       	std	Y+12, r24	; 0x0c
    3218:	8f 85       	ldd	r24, Y+15	; 0x0f
    321a:	98 89       	ldd	r25, Y+16	; 0x10
    321c:	2c 85       	ldd	r18, Y+12	; 0x0c
    321e:	fc 01       	movw	r30, r24
    3220:	22 8f       	std	Z+26, r18	; 0x1a
    3222:	8f 85       	ldd	r24, Y+15	; 0x0f
    3224:	98 89       	ldd	r25, Y+16	; 0x10
    3226:	2c 85       	ldd	r18, Y+12	; 0x0c
    3228:	fc 01       	movw	r30, r24
    322a:	25 a7       	std	Z+45, r18	; 0x2d
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	fc 01       	movw	r30, r24
    3232:	16 a6       	std	Z+46, r1	; 0x2e
    3234:	8f 85       	ldd	r24, Y+15	; 0x0f
    3236:	98 89       	ldd	r25, Y+16	; 0x10
    3238:	02 96       	adiw	r24, 0x02	; 2
    323a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <vListInitialiseItem>
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	98 89       	ldd	r25, Y+16	; 0x10
    3242:	0e 96       	adiw	r24, 0x0e	; 14
    3244:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <vListInitialiseItem>
    3248:	8f 85       	ldd	r24, Y+15	; 0x0f
    324a:	98 89       	ldd	r25, Y+16	; 0x10
    324c:	2f 85       	ldd	r18, Y+15	; 0x0f
    324e:	38 89       	ldd	r19, Y+16	; 0x10
    3250:	fc 01       	movw	r30, r24
    3252:	33 87       	std	Z+11, r19	; 0x0b
    3254:	22 87       	std	Z+10, r18	; 0x0a
    3256:	8c 85       	ldd	r24, Y+12	; 0x0c
    3258:	88 2f       	mov	r24, r24
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a0 e0       	ldi	r26, 0x00	; 0
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	2a e0       	ldi	r18, 0x0A	; 10
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	79 01       	movw	r14, r18
    326a:	8a 01       	movw	r16, r20
    326c:	e8 1a       	sub	r14, r24
    326e:	f9 0a       	sbc	r15, r25
    3270:	0a 0b       	sbc	r16, r26
    3272:	1b 0b       	sbc	r17, r27
    3274:	d8 01       	movw	r26, r16
    3276:	c7 01       	movw	r24, r14
    3278:	2f 85       	ldd	r18, Y+15	; 0x0f
    327a:	38 89       	ldd	r19, Y+16	; 0x10
    327c:	f9 01       	movw	r30, r18
    327e:	86 87       	std	Z+14, r24	; 0x0e
    3280:	97 87       	std	Z+15, r25	; 0x0f
    3282:	a0 8b       	std	Z+16, r26	; 0x10
    3284:	b1 8b       	std	Z+17, r27	; 0x11
    3286:	8f 85       	ldd	r24, Y+15	; 0x0f
    3288:	98 89       	ldd	r25, Y+16	; 0x10
    328a:	2f 85       	ldd	r18, Y+15	; 0x0f
    328c:	38 89       	ldd	r19, Y+16	; 0x10
    328e:	fc 01       	movw	r30, r24
    3290:	37 8b       	std	Z+23, r19	; 0x17
    3292:	26 8b       	std	Z+22, r18	; 0x16
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 89       	ldd	r25, Y+16	; 0x10
    3298:	8f 96       	adiw	r24, 0x2f	; 47
    329a:	44 e0       	ldi	r20, 0x04	; 4
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	0e 94 b0 42 	call	0x8560	; 0x8560 <memset>
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	c3 96       	adiw	r24, 0x33	; 51
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	0e 94 b0 42 	call	0x8560	; 0x8560 <memset>
    32b8:	4a 85       	ldd	r20, Y+10	; 0x0a
    32ba:	5b 85       	ldd	r21, Y+11	; 0x0b
    32bc:	2c 81       	ldd	r18, Y+4	; 0x04
    32be:	3d 81       	ldd	r19, Y+5	; 0x05
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	9b 81       	ldd	r25, Y+3	; 0x03
    32c4:	b9 01       	movw	r22, r18
    32c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <pxPortInitialiseStack>
    32ca:	9c 01       	movw	r18, r24
    32cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ce:	98 89       	ldd	r25, Y+16	; 0x10
    32d0:	fc 01       	movw	r30, r24
    32d2:	31 83       	std	Z+1, r19	; 0x01
    32d4:	20 83       	st	Z, r18
    32d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32da:	89 2b       	or	r24, r25
    32dc:	39 f0       	breq	.+14     	; 0x32ec <prvInitialiseNewTask+0x1ba>
    32de:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e2:	2f 85       	ldd	r18, Y+15	; 0x0f
    32e4:	38 89       	ldd	r19, Y+16	; 0x10
    32e6:	fc 01       	movw	r30, r24
    32e8:	31 83       	std	Z+1, r19	; 0x01
    32ea:	20 83       	st	Z, r18
    32ec:	00 00       	nop
    32ee:	62 96       	adiw	r28, 0x12	; 18
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	0f 91       	pop	r16
    3302:	ff 90       	pop	r15
    3304:	ef 90       	pop	r14
    3306:	df 90       	pop	r13
    3308:	cf 90       	pop	r12
    330a:	bf 90       	pop	r11
    330c:	af 90       	pop	r10
    330e:	08 95       	ret

00003310 <prvAddNewTaskToReadyList>:
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	00 d0       	rcall	.+0      	; 0x3316 <prvAddNewTaskToReadyList+0x6>
    3316:	1f 92       	push	r1
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9c 83       	std	Y+4, r25	; 0x04
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	0f 92       	push	r0
    3326:	80 91 3b 16 	lds	r24, 0x163B	; 0x80163b <uxCurrentNumberOfTasks>
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	80 93 3b 16 	sts	0x163B, r24	; 0x80163b <uxCurrentNumberOfTasks>
    3330:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3334:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3338:	89 2b       	or	r24, r25
    333a:	69 f4       	brne	.+26     	; 0x3356 <prvAddNewTaskToReadyList+0x46>
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	90 93 9b 15 	sts	0x159B, r25	; 0x80159b <pxCurrentTCB+0x1>
    3344:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <pxCurrentTCB>
    3348:	80 91 3b 16 	lds	r24, 0x163B	; 0x80163b <uxCurrentNumberOfTasks>
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	c9 f4       	brne	.+50     	; 0x3382 <prvAddNewTaskToReadyList+0x72>
    3350:	0e 94 9e 24 	call	0x493c	; 0x493c <prvInitialiseTaskLists>
    3354:	16 c0       	rjmp	.+44     	; 0x3382 <prvAddNewTaskToReadyList+0x72>
    3356:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xSchedulerRunning>
    335a:	88 23       	and	r24, r24
    335c:	91 f4       	brne	.+36     	; 0x3382 <prvAddNewTaskToReadyList+0x72>
    335e:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3362:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3366:	fc 01       	movw	r30, r24
    3368:	22 8d       	ldd	r18, Z+26	; 0x1a
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	fc 01       	movw	r30, r24
    3370:	82 8d       	ldd	r24, Z+26	; 0x1a
    3372:	82 17       	cp	r24, r18
    3374:	30 f0       	brcs	.+12     	; 0x3382 <prvAddNewTaskToReadyList+0x72>
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	90 93 9b 15 	sts	0x159B, r25	; 0x80159b <pxCurrentTCB+0x1>
    337e:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <pxCurrentTCB>
    3382:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <uxTaskNumber>
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	80 93 48 16 	sts	0x1648, r24	; 0x801648 <uxTaskNumber>
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	9c 81       	ldd	r25, Y+4	; 0x04
    3390:	fc 01       	movw	r30, r24
    3392:	92 8d       	ldd	r25, Z+26	; 0x1a
    3394:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    3398:	89 17       	cp	r24, r25
    339a:	30 f4       	brcc	.+12     	; 0x33a8 <prvAddNewTaskToReadyList+0x98>
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	9c 81       	ldd	r25, Y+4	; 0x04
    33a0:	fc 01       	movw	r30, r24
    33a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    33a4:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	9c 81       	ldd	r25, Y+4	; 0x04
    33ac:	fc 01       	movw	r30, r24
    33ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4b e0       	ldi	r20, 0x0B	; 11
    33b6:	42 9f       	mul	r20, r18
    33b8:	c0 01       	movw	r24, r0
    33ba:	43 9f       	mul	r20, r19
    33bc:	90 0d       	add	r25, r0
    33be:	11 24       	eor	r1, r1
    33c0:	83 56       	subi	r24, 0x63	; 99
    33c2:	9a 4e       	sbci	r25, 0xEA	; 234
    33c4:	fc 01       	movw	r30, r24
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	9c 81       	ldd	r25, Y+4	; 0x04
    33d2:	29 81       	ldd	r18, Y+1	; 0x01
    33d4:	3a 81       	ldd	r19, Y+2	; 0x02
    33d6:	fc 01       	movw	r30, r24
    33d8:	37 83       	std	Z+7, r19	; 0x07
    33da:	26 83       	std	Z+6, r18	; 0x06
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	fc 01       	movw	r30, r24
    33e2:	26 81       	ldd	r18, Z+6	; 0x06
    33e4:	37 81       	ldd	r19, Z+7	; 0x07
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ea:	fc 01       	movw	r30, r24
    33ec:	31 87       	std	Z+9, r19	; 0x09
    33ee:	20 87       	std	Z+8, r18	; 0x08
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	fc 01       	movw	r30, r24
    33f6:	86 81       	ldd	r24, Z+6	; 0x06
    33f8:	97 81       	ldd	r25, Z+7	; 0x07
    33fa:	2b 81       	ldd	r18, Y+3	; 0x03
    33fc:	3c 81       	ldd	r19, Y+4	; 0x04
    33fe:	2e 5f       	subi	r18, 0xFE	; 254
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	fc 01       	movw	r30, r24
    3404:	35 83       	std	Z+5, r19	; 0x05
    3406:	24 83       	std	Z+4, r18	; 0x04
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	9c 01       	movw	r18, r24
    340e:	2e 5f       	subi	r18, 0xFE	; 254
    3410:	3f 4f       	sbci	r19, 0xFF	; 255
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	9a 81       	ldd	r25, Y+2	; 0x02
    3416:	fc 01       	movw	r30, r24
    3418:	37 83       	std	Z+7, r19	; 0x07
    341a:	26 83       	std	Z+6, r18	; 0x06
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	fc 01       	movw	r30, r24
    3422:	82 8d       	ldd	r24, Z+26	; 0x1a
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4b e0       	ldi	r20, 0x0B	; 11
    342a:	42 9f       	mul	r20, r18
    342c:	c0 01       	movw	r24, r0
    342e:	43 9f       	mul	r20, r19
    3430:	90 0d       	add	r25, r0
    3432:	11 24       	eor	r1, r1
    3434:	9c 01       	movw	r18, r24
    3436:	24 56       	subi	r18, 0x64	; 100
    3438:	3a 4e       	sbci	r19, 0xEA	; 234
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	fc 01       	movw	r30, r24
    3440:	35 87       	std	Z+13, r19	; 0x0d
    3442:	24 87       	std	Z+12, r18	; 0x0c
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	fc 01       	movw	r30, r24
    344a:	82 8d       	ldd	r24, Z+26	; 0x1a
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	4b e0       	ldi	r20, 0x0B	; 11
    3452:	48 9f       	mul	r20, r24
    3454:	90 01       	movw	r18, r0
    3456:	49 9f       	mul	r20, r25
    3458:	30 0d       	add	r19, r0
    345a:	11 24       	eor	r1, r1
    345c:	24 56       	subi	r18, 0x64	; 100
    345e:	3a 4e       	sbci	r19, 0xEA	; 234
    3460:	f9 01       	movw	r30, r18
    3462:	20 81       	ld	r18, Z
    3464:	41 e0       	ldi	r20, 0x01	; 1
    3466:	42 0f       	add	r20, r18
    3468:	5b e0       	ldi	r21, 0x0B	; 11
    346a:	58 9f       	mul	r21, r24
    346c:	90 01       	movw	r18, r0
    346e:	59 9f       	mul	r21, r25
    3470:	30 0d       	add	r19, r0
    3472:	11 24       	eor	r1, r1
    3474:	c9 01       	movw	r24, r18
    3476:	84 56       	subi	r24, 0x64	; 100
    3478:	9a 4e       	sbci	r25, 0xEA	; 234
    347a:	fc 01       	movw	r30, r24
    347c:	40 83       	st	Z, r20
    347e:	0f 90       	pop	r0
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xSchedulerRunning>
    3486:	88 23       	and	r24, r24
    3488:	71 f0       	breq	.+28     	; 0x34a6 <prvAddNewTaskToReadyList+0x196>
    348a:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    348e:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3492:	fc 01       	movw	r30, r24
    3494:	22 8d       	ldd	r18, Z+26	; 0x1a
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	9c 81       	ldd	r25, Y+4	; 0x04
    349a:	fc 01       	movw	r30, r24
    349c:	82 8d       	ldd	r24, Z+26	; 0x1a
    349e:	28 17       	cp	r18, r24
    34a0:	10 f4       	brcc	.+4      	; 0x34a6 <prvAddNewTaskToReadyList+0x196>
    34a2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    34a6:	00 00       	nop
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	08 95       	ret

000034b6 <xTaskDelayUntil>:
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	60 97       	sbiw	r28, 0x10	; 16
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	9c 87       	std	Y+12, r25	; 0x0c
    34d4:	8b 87       	std	Y+11, r24	; 0x0b
    34d6:	4d 87       	std	Y+13, r20	; 0x0d
    34d8:	5e 87       	std	Y+14, r21	; 0x0e
    34da:	6f 87       	std	Y+15, r22	; 0x0f
    34dc:	78 8b       	std	Y+16, r23	; 0x10
    34de:	19 82       	std	Y+1, r1	; 0x01
    34e0:	19 d1       	rcall	.+562    	; 0x3714 <vTaskSuspendAll>
    34e2:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    34e6:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    34ea:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    34ee:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	ac 83       	std	Y+4, r26	; 0x04
    34f8:	bd 83       	std	Y+5, r27	; 0x05
    34fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    34fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34fe:	fc 01       	movw	r30, r24
    3500:	20 81       	ld	r18, Z
    3502:	31 81       	ldd	r19, Z+1	; 0x01
    3504:	42 81       	ldd	r20, Z+2	; 0x02
    3506:	53 81       	ldd	r21, Z+3	; 0x03
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	af 85       	ldd	r26, Y+15	; 0x0f
    350e:	b8 89       	ldd	r27, Y+16	; 0x10
    3510:	82 0f       	add	r24, r18
    3512:	93 1f       	adc	r25, r19
    3514:	a4 1f       	adc	r26, r20
    3516:	b5 1f       	adc	r27, r21
    3518:	8e 83       	std	Y+6, r24	; 0x06
    351a:	9f 83       	std	Y+7, r25	; 0x07
    351c:	a8 87       	std	Y+8, r26	; 0x08
    351e:	b9 87       	std	Y+9, r27	; 0x09
    3520:	8b 85       	ldd	r24, Y+11	; 0x0b
    3522:	9c 85       	ldd	r25, Y+12	; 0x0c
    3524:	fc 01       	movw	r30, r24
    3526:	20 81       	ld	r18, Z
    3528:	31 81       	ldd	r19, Z+1	; 0x01
    352a:	42 81       	ldd	r20, Z+2	; 0x02
    352c:	53 81       	ldd	r21, Z+3	; 0x03
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	ac 81       	ldd	r26, Y+4	; 0x04
    3534:	bd 81       	ldd	r27, Y+5	; 0x05
    3536:	82 17       	cp	r24, r18
    3538:	93 07       	cpc	r25, r19
    353a:	a4 07       	cpc	r26, r20
    353c:	b5 07       	cpc	r27, r21
    353e:	00 f5       	brcc	.+64     	; 0x3580 <xTaskDelayUntil+0xca>
    3540:	8b 85       	ldd	r24, Y+11	; 0x0b
    3542:	9c 85       	ldd	r25, Y+12	; 0x0c
    3544:	fc 01       	movw	r30, r24
    3546:	20 81       	ld	r18, Z
    3548:	31 81       	ldd	r19, Z+1	; 0x01
    354a:	42 81       	ldd	r20, Z+2	; 0x02
    354c:	53 81       	ldd	r21, Z+3	; 0x03
    354e:	8e 81       	ldd	r24, Y+6	; 0x06
    3550:	9f 81       	ldd	r25, Y+7	; 0x07
    3552:	a8 85       	ldd	r26, Y+8	; 0x08
    3554:	b9 85       	ldd	r27, Y+9	; 0x09
    3556:	82 17       	cp	r24, r18
    3558:	93 07       	cpc	r25, r19
    355a:	a4 07       	cpc	r26, r20
    355c:	b5 07       	cpc	r27, r21
    355e:	78 f5       	brcc	.+94     	; 0x35be <xTaskDelayUntil+0x108>
    3560:	2e 81       	ldd	r18, Y+6	; 0x06
    3562:	3f 81       	ldd	r19, Y+7	; 0x07
    3564:	48 85       	ldd	r20, Y+8	; 0x08
    3566:	59 85       	ldd	r21, Y+9	; 0x09
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	ac 81       	ldd	r26, Y+4	; 0x04
    356e:	bd 81       	ldd	r27, Y+5	; 0x05
    3570:	82 17       	cp	r24, r18
    3572:	93 07       	cpc	r25, r19
    3574:	a4 07       	cpc	r26, r20
    3576:	b5 07       	cpc	r27, r21
    3578:	10 f5       	brcc	.+68     	; 0x35be <xTaskDelayUntil+0x108>
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	89 83       	std	Y+1, r24	; 0x01
    357e:	1f c0       	rjmp	.+62     	; 0x35be <xTaskDelayUntil+0x108>
    3580:	8b 85       	ldd	r24, Y+11	; 0x0b
    3582:	9c 85       	ldd	r25, Y+12	; 0x0c
    3584:	fc 01       	movw	r30, r24
    3586:	20 81       	ld	r18, Z
    3588:	31 81       	ldd	r19, Z+1	; 0x01
    358a:	42 81       	ldd	r20, Z+2	; 0x02
    358c:	53 81       	ldd	r21, Z+3	; 0x03
    358e:	8e 81       	ldd	r24, Y+6	; 0x06
    3590:	9f 81       	ldd	r25, Y+7	; 0x07
    3592:	a8 85       	ldd	r26, Y+8	; 0x08
    3594:	b9 85       	ldd	r27, Y+9	; 0x09
    3596:	82 17       	cp	r24, r18
    3598:	93 07       	cpc	r25, r19
    359a:	a4 07       	cpc	r26, r20
    359c:	b5 07       	cpc	r27, r21
    359e:	68 f0       	brcs	.+26     	; 0x35ba <xTaskDelayUntil+0x104>
    35a0:	2e 81       	ldd	r18, Y+6	; 0x06
    35a2:	3f 81       	ldd	r19, Y+7	; 0x07
    35a4:	48 85       	ldd	r20, Y+8	; 0x08
    35a6:	59 85       	ldd	r21, Y+9	; 0x09
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	9b 81       	ldd	r25, Y+3	; 0x03
    35ac:	ac 81       	ldd	r26, Y+4	; 0x04
    35ae:	bd 81       	ldd	r27, Y+5	; 0x05
    35b0:	82 17       	cp	r24, r18
    35b2:	93 07       	cpc	r25, r19
    35b4:	a4 07       	cpc	r26, r20
    35b6:	b5 07       	cpc	r27, r21
    35b8:	10 f4       	brcc	.+4      	; 0x35be <xTaskDelayUntil+0x108>
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	89 83       	std	Y+1, r24	; 0x01
    35be:	2b 85       	ldd	r18, Y+11	; 0x0b
    35c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    35c2:	8e 81       	ldd	r24, Y+6	; 0x06
    35c4:	9f 81       	ldd	r25, Y+7	; 0x07
    35c6:	a8 85       	ldd	r26, Y+8	; 0x08
    35c8:	b9 85       	ldd	r27, Y+9	; 0x09
    35ca:	f9 01       	movw	r30, r18
    35cc:	80 83       	st	Z, r24
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	a2 83       	std	Z+2, r26	; 0x02
    35d2:	b3 83       	std	Z+3, r27	; 0x03
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	88 23       	and	r24, r24
    35d8:	a9 f0       	breq	.+42     	; 0x3604 <xTaskDelayUntil+0x14e>
    35da:	2e 81       	ldd	r18, Y+6	; 0x06
    35dc:	3f 81       	ldd	r19, Y+7	; 0x07
    35de:	48 85       	ldd	r20, Y+8	; 0x08
    35e0:	59 85       	ldd	r21, Y+9	; 0x09
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	9b 81       	ldd	r25, Y+3	; 0x03
    35e6:	ac 81       	ldd	r26, Y+4	; 0x04
    35e8:	bd 81       	ldd	r27, Y+5	; 0x05
    35ea:	79 01       	movw	r14, r18
    35ec:	8a 01       	movw	r16, r20
    35ee:	e8 1a       	sub	r14, r24
    35f0:	f9 0a       	sbc	r15, r25
    35f2:	0a 0b       	sbc	r16, r26
    35f4:	1b 0b       	sbc	r17, r27
    35f6:	d8 01       	movw	r26, r16
    35f8:	c7 01       	movw	r24, r14
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	bc 01       	movw	r22, r24
    35fe:	cd 01       	movw	r24, r26
    3600:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    3604:	94 d0       	rcall	.+296    	; 0x372e <xTaskResumeAll>
    3606:	8a 87       	std	Y+10, r24	; 0x0a
    3608:	8a 85       	ldd	r24, Y+10	; 0x0a
    360a:	88 23       	and	r24, r24
    360c:	11 f4       	brne	.+4      	; 0x3612 <xTaskDelayUntil+0x15c>
    360e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	60 96       	adiw	r28, 0x10	; 16
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	ef 90       	pop	r14
    362c:	08 95       	ret

0000362e <vTaskDelay>:
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	00 d0       	rcall	.+0      	; 0x3634 <vTaskDelay+0x6>
    3634:	1f 92       	push	r1
    3636:	1f 92       	push	r1
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	6a 83       	std	Y+2, r22	; 0x02
    363e:	7b 83       	std	Y+3, r23	; 0x03
    3640:	8c 83       	std	Y+4, r24	; 0x04
    3642:	9d 83       	std	Y+5, r25	; 0x05
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	ac 81       	ldd	r26, Y+4	; 0x04
    364c:	bd 81       	ldd	r27, Y+5	; 0x05
    364e:	89 2b       	or	r24, r25
    3650:	8a 2b       	or	r24, r26
    3652:	8b 2b       	or	r24, r27
    3654:	61 f0       	breq	.+24     	; 0x366e <vTaskDelay+0x40>
    3656:	5e d0       	rcall	.+188    	; 0x3714 <vTaskSuspendAll>
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	ac 81       	ldd	r26, Y+4	; 0x04
    365e:	bd 81       	ldd	r27, Y+5	; 0x05
    3660:	40 e0       	ldi	r20, 0x00	; 0
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    366a:	61 d0       	rcall	.+194    	; 0x372e <xTaskResumeAll>
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	88 23       	and	r24, r24
    3672:	11 f4       	brne	.+4      	; 0x3678 <vTaskDelay+0x4a>
    3674:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    3678:	00 00       	nop
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	08 95       	ret

0000368a <vTaskStartScheduler>:
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	1f 92       	push	r1
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	0f 2e       	mov	r0, r31
    369c:	fd e4       	ldi	r31, 0x4D	; 77
    369e:	ef 2e       	mov	r14, r31
    36a0:	f6 e1       	ldi	r31, 0x16	; 22
    36a2:	ff 2e       	mov	r15, r31
    36a4:	f0 2d       	mov	r31, r0
    36a6:	00 e0       	ldi	r16, 0x00	; 0
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 ec       	ldi	r20, 0xC0	; 192
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	66 ec       	ldi	r22, 0xC6	; 198
    36b2:	74 e0       	ldi	r23, 0x04	; 4
    36b4:	8d ec       	ldi	r24, 0xCD	; 205
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	ce dc       	rcall	.-1636   	; 0x3056 <xTaskCreate>
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	81 30       	cpi	r24, 0x01	; 1
    36c0:	19 f4       	brne	.+6      	; 0x36c8 <vTaskStartScheduler+0x3e>
    36c2:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <xTimerCreateTimerTask>
    36c6:	89 83       	std	Y+1, r24	; 0x01
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	81 30       	cpi	r24, 0x01	; 1
    36cc:	c9 f4       	brne	.+50     	; 0x3700 <vTaskStartScheduler+0x76>
    36ce:	f8 94       	cli
    36d0:	8f ef       	ldi	r24, 0xFF	; 255
    36d2:	9f ef       	ldi	r25, 0xFF	; 255
    36d4:	dc 01       	movw	r26, r24
    36d6:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    36da:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    36de:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    36e2:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <xSchedulerRunning>
    36ec:	10 92 3c 16 	sts	0x163C, r1	; 0x80163c <xTickCount>
    36f0:	10 92 3d 16 	sts	0x163D, r1	; 0x80163d <xTickCount+0x1>
    36f4:	10 92 3e 16 	sts	0x163E, r1	; 0x80163e <xTickCount+0x2>
    36f8:	10 92 3f 16 	sts	0x163F, r1	; 0x80163f <xTickCount+0x3>
    36fc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xPortStartScheduler>
    3700:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    3704:	00 00       	nop
    3706:	0f 90       	pop	r0
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	08 95       	ret

00003714 <vTaskSuspendAll>:
    3714:	cf 93       	push	r28
    3716:	df 93       	push	r29
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    3720:	8f 5f       	subi	r24, 0xFF	; 255
    3722:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <uxSchedulerSuspended>
    3726:	00 00       	nop
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	08 95       	ret

0000372e <xTaskResumeAll>:
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	2d 97       	sbiw	r28, 0x0d	; 13
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	1a 82       	std	Y+2, r1	; 0x02
    3744:	19 82       	std	Y+1, r1	; 0x01
    3746:	1b 82       	std	Y+3, r1	; 0x03
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	0f 92       	push	r0
    374e:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    3752:	81 50       	subi	r24, 0x01	; 1
    3754:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <uxSchedulerSuspended>
    3758:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    375c:	88 23       	and	r24, r24
    375e:	09 f0       	breq	.+2      	; 0x3762 <xTaskResumeAll+0x34>
    3760:	69 c1       	rjmp	.+722    	; 0x3a34 <xTaskResumeAll+0x306>
    3762:	80 91 3b 16 	lds	r24, 0x163B	; 0x80163b <uxCurrentNumberOfTasks>
    3766:	88 23       	and	r24, r24
    3768:	09 f4       	brne	.+2      	; 0x376c <xTaskResumeAll+0x3e>
    376a:	64 c1       	rjmp	.+712    	; 0x3a34 <xTaskResumeAll+0x306>
    376c:	1b c1       	rjmp	.+566    	; 0x39a4 <xTaskResumeAll+0x276>
    376e:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <xPendingReadyList+0x7>
    3772:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <xPendingReadyList+0x8>
    3776:	fc 01       	movw	r30, r24
    3778:	80 85       	ldd	r24, Z+8	; 0x08
    377a:	91 85       	ldd	r25, Z+9	; 0x09
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	fc 01       	movw	r30, r24
    3786:	80 8d       	ldd	r24, Z+24	; 0x18
    3788:	91 8d       	ldd	r25, Z+25	; 0x19
    378a:	99 87       	std	Y+9, r25	; 0x09
    378c:	88 87       	std	Y+8, r24	; 0x08
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	9a 81       	ldd	r25, Y+2	; 0x02
    3792:	fc 01       	movw	r30, r24
    3794:	82 89       	ldd	r24, Z+18	; 0x12
    3796:	93 89       	ldd	r25, Z+19	; 0x13
    3798:	29 81       	ldd	r18, Y+1	; 0x01
    379a:	3a 81       	ldd	r19, Y+2	; 0x02
    379c:	f9 01       	movw	r30, r18
    379e:	24 89       	ldd	r18, Z+20	; 0x14
    37a0:	35 89       	ldd	r19, Z+21	; 0x15
    37a2:	fc 01       	movw	r30, r24
    37a4:	37 83       	std	Z+7, r19	; 0x07
    37a6:	26 83       	std	Z+6, r18	; 0x06
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	fc 01       	movw	r30, r24
    37ae:	84 89       	ldd	r24, Z+20	; 0x14
    37b0:	95 89       	ldd	r25, Z+21	; 0x15
    37b2:	29 81       	ldd	r18, Y+1	; 0x01
    37b4:	3a 81       	ldd	r19, Y+2	; 0x02
    37b6:	f9 01       	movw	r30, r18
    37b8:	22 89       	ldd	r18, Z+18	; 0x12
    37ba:	33 89       	ldd	r19, Z+19	; 0x13
    37bc:	fc 01       	movw	r30, r24
    37be:	35 83       	std	Z+5, r19	; 0x05
    37c0:	24 83       	std	Z+4, r18	; 0x04
    37c2:	88 85       	ldd	r24, Y+8	; 0x08
    37c4:	99 85       	ldd	r25, Y+9	; 0x09
    37c6:	fc 01       	movw	r30, r24
    37c8:	21 81       	ldd	r18, Z+1	; 0x01
    37ca:	32 81       	ldd	r19, Z+2	; 0x02
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	0e 96       	adiw	r24, 0x0e	; 14
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	51 f4       	brne	.+20     	; 0x37ec <xTaskResumeAll+0xbe>
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
    37dc:	fc 01       	movw	r30, r24
    37de:	24 89       	ldd	r18, Z+20	; 0x14
    37e0:	35 89       	ldd	r19, Z+21	; 0x15
    37e2:	88 85       	ldd	r24, Y+8	; 0x08
    37e4:	99 85       	ldd	r25, Y+9	; 0x09
    37e6:	fc 01       	movw	r30, r24
    37e8:	32 83       	std	Z+2, r19	; 0x02
    37ea:	21 83       	std	Z+1, r18	; 0x01
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	fc 01       	movw	r30, r24
    37f2:	11 8e       	std	Z+25, r1	; 0x19
    37f4:	10 8e       	std	Z+24, r1	; 0x18
    37f6:	88 85       	ldd	r24, Y+8	; 0x08
    37f8:	99 85       	ldd	r25, Y+9	; 0x09
    37fa:	fc 01       	movw	r30, r24
    37fc:	80 81       	ld	r24, Z
    37fe:	2f ef       	ldi	r18, 0xFF	; 255
    3800:	28 0f       	add	r18, r24
    3802:	88 85       	ldd	r24, Y+8	; 0x08
    3804:	99 85       	ldd	r25, Y+9	; 0x09
    3806:	fc 01       	movw	r30, r24
    3808:	20 83       	st	Z, r18
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	fc 01       	movw	r30, r24
    3810:	84 85       	ldd	r24, Z+12	; 0x0c
    3812:	95 85       	ldd	r25, Z+13	; 0x0d
    3814:	9b 87       	std	Y+11, r25	; 0x0b
    3816:	8a 87       	std	Y+10, r24	; 0x0a
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	9a 81       	ldd	r25, Y+2	; 0x02
    381c:	fc 01       	movw	r30, r24
    381e:	86 81       	ldd	r24, Z+6	; 0x06
    3820:	97 81       	ldd	r25, Z+7	; 0x07
    3822:	29 81       	ldd	r18, Y+1	; 0x01
    3824:	3a 81       	ldd	r19, Y+2	; 0x02
    3826:	f9 01       	movw	r30, r18
    3828:	20 85       	ldd	r18, Z+8	; 0x08
    382a:	31 85       	ldd	r19, Z+9	; 0x09
    382c:	fc 01       	movw	r30, r24
    382e:	37 83       	std	Z+7, r19	; 0x07
    3830:	26 83       	std	Z+6, r18	; 0x06
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	9a 81       	ldd	r25, Y+2	; 0x02
    3836:	fc 01       	movw	r30, r24
    3838:	80 85       	ldd	r24, Z+8	; 0x08
    383a:	91 85       	ldd	r25, Z+9	; 0x09
    383c:	29 81       	ldd	r18, Y+1	; 0x01
    383e:	3a 81       	ldd	r19, Y+2	; 0x02
    3840:	f9 01       	movw	r30, r18
    3842:	26 81       	ldd	r18, Z+6	; 0x06
    3844:	37 81       	ldd	r19, Z+7	; 0x07
    3846:	fc 01       	movw	r30, r24
    3848:	35 83       	std	Z+5, r19	; 0x05
    384a:	24 83       	std	Z+4, r18	; 0x04
    384c:	8a 85       	ldd	r24, Y+10	; 0x0a
    384e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3850:	fc 01       	movw	r30, r24
    3852:	21 81       	ldd	r18, Z+1	; 0x01
    3854:	32 81       	ldd	r19, Z+2	; 0x02
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	02 96       	adiw	r24, 0x02	; 2
    385c:	28 17       	cp	r18, r24
    385e:	39 07       	cpc	r19, r25
    3860:	51 f4       	brne	.+20     	; 0x3876 <xTaskResumeAll+0x148>
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	fc 01       	movw	r30, r24
    3868:	20 85       	ldd	r18, Z+8	; 0x08
    386a:	31 85       	ldd	r19, Z+9	; 0x09
    386c:	8a 85       	ldd	r24, Y+10	; 0x0a
    386e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3870:	fc 01       	movw	r30, r24
    3872:	32 83       	std	Z+2, r19	; 0x02
    3874:	21 83       	std	Z+1, r18	; 0x01
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	fc 01       	movw	r30, r24
    387c:	15 86       	std	Z+13, r1	; 0x0d
    387e:	14 86       	std	Z+12, r1	; 0x0c
    3880:	8a 85       	ldd	r24, Y+10	; 0x0a
    3882:	9b 85       	ldd	r25, Y+11	; 0x0b
    3884:	fc 01       	movw	r30, r24
    3886:	80 81       	ld	r24, Z
    3888:	2f ef       	ldi	r18, 0xFF	; 255
    388a:	28 0f       	add	r18, r24
    388c:	8a 85       	ldd	r24, Y+10	; 0x0a
    388e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3890:	fc 01       	movw	r30, r24
    3892:	20 83       	st	Z, r18
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	9a 81       	ldd	r25, Y+2	; 0x02
    3898:	fc 01       	movw	r30, r24
    389a:	92 8d       	ldd	r25, Z+26	; 0x1a
    389c:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    38a0:	89 17       	cp	r24, r25
    38a2:	30 f4       	brcc	.+12     	; 0x38b0 <xTaskResumeAll+0x182>
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	fc 01       	movw	r30, r24
    38aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ac:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	9a 81       	ldd	r25, Y+2	; 0x02
    38b4:	fc 01       	movw	r30, r24
    38b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	4b e0       	ldi	r20, 0x0B	; 11
    38be:	42 9f       	mul	r20, r18
    38c0:	c0 01       	movw	r24, r0
    38c2:	43 9f       	mul	r20, r19
    38c4:	90 0d       	add	r25, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	83 56       	subi	r24, 0x63	; 99
    38ca:	9a 4e       	sbci	r25, 0xEA	; 234
    38cc:	fc 01       	movw	r30, r24
    38ce:	80 81       	ld	r24, Z
    38d0:	91 81       	ldd	r25, Z+1	; 0x01
    38d2:	9d 87       	std	Y+13, r25	; 0x0d
    38d4:	8c 87       	std	Y+12, r24	; 0x0c
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	9a 81       	ldd	r25, Y+2	; 0x02
    38da:	2c 85       	ldd	r18, Y+12	; 0x0c
    38dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    38de:	fc 01       	movw	r30, r24
    38e0:	37 83       	std	Z+7, r19	; 0x07
    38e2:	26 83       	std	Z+6, r18	; 0x06
    38e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    38e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    38e8:	fc 01       	movw	r30, r24
    38ea:	26 81       	ldd	r18, Z+6	; 0x06
    38ec:	37 81       	ldd	r19, Z+7	; 0x07
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	fc 01       	movw	r30, r24
    38f4:	31 87       	std	Z+9, r19	; 0x09
    38f6:	20 87       	std	Z+8, r18	; 0x08
    38f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    38fc:	fc 01       	movw	r30, r24
    38fe:	86 81       	ldd	r24, Z+6	; 0x06
    3900:	97 81       	ldd	r25, Z+7	; 0x07
    3902:	29 81       	ldd	r18, Y+1	; 0x01
    3904:	3a 81       	ldd	r19, Y+2	; 0x02
    3906:	2e 5f       	subi	r18, 0xFE	; 254
    3908:	3f 4f       	sbci	r19, 0xFF	; 255
    390a:	fc 01       	movw	r30, r24
    390c:	35 83       	std	Z+5, r19	; 0x05
    390e:	24 83       	std	Z+4, r18	; 0x04
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	9c 01       	movw	r18, r24
    3916:	2e 5f       	subi	r18, 0xFE	; 254
    3918:	3f 4f       	sbci	r19, 0xFF	; 255
    391a:	8c 85       	ldd	r24, Y+12	; 0x0c
    391c:	9d 85       	ldd	r25, Y+13	; 0x0d
    391e:	fc 01       	movw	r30, r24
    3920:	37 83       	std	Z+7, r19	; 0x07
    3922:	26 83       	std	Z+6, r18	; 0x06
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	9a 81       	ldd	r25, Y+2	; 0x02
    3928:	fc 01       	movw	r30, r24
    392a:	82 8d       	ldd	r24, Z+26	; 0x1a
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	4b e0       	ldi	r20, 0x0B	; 11
    3932:	42 9f       	mul	r20, r18
    3934:	c0 01       	movw	r24, r0
    3936:	43 9f       	mul	r20, r19
    3938:	90 0d       	add	r25, r0
    393a:	11 24       	eor	r1, r1
    393c:	9c 01       	movw	r18, r24
    393e:	24 56       	subi	r18, 0x64	; 100
    3940:	3a 4e       	sbci	r19, 0xEA	; 234
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	fc 01       	movw	r30, r24
    3948:	35 87       	std	Z+13, r19	; 0x0d
    394a:	24 87       	std	Z+12, r18	; 0x0c
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	fc 01       	movw	r30, r24
    3952:	82 8d       	ldd	r24, Z+26	; 0x1a
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	4b e0       	ldi	r20, 0x0B	; 11
    395a:	48 9f       	mul	r20, r24
    395c:	90 01       	movw	r18, r0
    395e:	49 9f       	mul	r20, r25
    3960:	30 0d       	add	r19, r0
    3962:	11 24       	eor	r1, r1
    3964:	24 56       	subi	r18, 0x64	; 100
    3966:	3a 4e       	sbci	r19, 0xEA	; 234
    3968:	f9 01       	movw	r30, r18
    396a:	20 81       	ld	r18, Z
    396c:	41 e0       	ldi	r20, 0x01	; 1
    396e:	42 0f       	add	r20, r18
    3970:	5b e0       	ldi	r21, 0x0B	; 11
    3972:	58 9f       	mul	r21, r24
    3974:	90 01       	movw	r18, r0
    3976:	59 9f       	mul	r21, r25
    3978:	30 0d       	add	r19, r0
    397a:	11 24       	eor	r1, r1
    397c:	c9 01       	movw	r24, r18
    397e:	84 56       	subi	r24, 0x64	; 100
    3980:	9a 4e       	sbci	r25, 0xEA	; 234
    3982:	fc 01       	movw	r30, r24
    3984:	40 83       	st	Z, r20
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	fc 01       	movw	r30, r24
    398c:	22 8d       	ldd	r18, Z+26	; 0x1a
    398e:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3992:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3996:	fc 01       	movw	r30, r24
    3998:	82 8d       	ldd	r24, Z+26	; 0x1a
    399a:	28 17       	cp	r18, r24
    399c:	18 f0       	brcs	.+6      	; 0x39a4 <xTaskResumeAll+0x276>
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    39a4:	80 91 24 16 	lds	r24, 0x1624	; 0x801624 <xPendingReadyList>
    39a8:	88 23       	and	r24, r24
    39aa:	09 f0       	breq	.+2      	; 0x39ae <xTaskResumeAll+0x280>
    39ac:	e0 ce       	rjmp	.-576    	; 0x376e <xTaskResumeAll+0x40>
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	89 2b       	or	r24, r25
    39b4:	11 f0       	breq	.+4      	; 0x39ba <xTaskResumeAll+0x28c>
    39b6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <prvResetNextTaskUnblockTime>
    39ba:	80 91 42 16 	lds	r24, 0x1642	; 0x801642 <xPendedTicks>
    39be:	90 91 43 16 	lds	r25, 0x1643	; 0x801643 <xPendedTicks+0x1>
    39c2:	a0 91 44 16 	lds	r26, 0x1644	; 0x801644 <xPendedTicks+0x2>
    39c6:	b0 91 45 16 	lds	r27, 0x1645	; 0x801645 <xPendedTicks+0x3>
    39ca:	8c 83       	std	Y+4, r24	; 0x04
    39cc:	9d 83       	std	Y+5, r25	; 0x05
    39ce:	ae 83       	std	Y+6, r26	; 0x06
    39d0:	bf 83       	std	Y+7, r27	; 0x07
    39d2:	8c 81       	ldd	r24, Y+4	; 0x04
    39d4:	9d 81       	ldd	r25, Y+5	; 0x05
    39d6:	ae 81       	ldd	r26, Y+6	; 0x06
    39d8:	bf 81       	ldd	r27, Y+7	; 0x07
    39da:	89 2b       	or	r24, r25
    39dc:	8a 2b       	or	r24, r26
    39de:	8b 2b       	or	r24, r27
    39e0:	09 f1       	breq	.+66     	; 0x3a24 <xTaskResumeAll+0x2f6>
    39e2:	58 d0       	rcall	.+176    	; 0x3a94 <xTaskIncrementTick>
    39e4:	88 23       	and	r24, r24
    39e6:	19 f0       	breq	.+6      	; 0x39ee <xTaskResumeAll+0x2c0>
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    39ee:	8c 81       	ldd	r24, Y+4	; 0x04
    39f0:	9d 81       	ldd	r25, Y+5	; 0x05
    39f2:	ae 81       	ldd	r26, Y+6	; 0x06
    39f4:	bf 81       	ldd	r27, Y+7	; 0x07
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	a1 09       	sbc	r26, r1
    39fa:	b1 09       	sbc	r27, r1
    39fc:	8c 83       	std	Y+4, r24	; 0x04
    39fe:	9d 83       	std	Y+5, r25	; 0x05
    3a00:	ae 83       	std	Y+6, r26	; 0x06
    3a02:	bf 83       	std	Y+7, r27	; 0x07
    3a04:	8c 81       	ldd	r24, Y+4	; 0x04
    3a06:	9d 81       	ldd	r25, Y+5	; 0x05
    3a08:	ae 81       	ldd	r26, Y+6	; 0x06
    3a0a:	bf 81       	ldd	r27, Y+7	; 0x07
    3a0c:	89 2b       	or	r24, r25
    3a0e:	8a 2b       	or	r24, r26
    3a10:	8b 2b       	or	r24, r27
    3a12:	39 f7       	brne	.-50     	; 0x39e2 <xTaskResumeAll+0x2b4>
    3a14:	10 92 42 16 	sts	0x1642, r1	; 0x801642 <xPendedTicks>
    3a18:	10 92 43 16 	sts	0x1643, r1	; 0x801643 <xPendedTicks+0x1>
    3a1c:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <xPendedTicks+0x2>
    3a20:	10 92 45 16 	sts	0x1645, r1	; 0x801645 <xPendedTicks+0x3>
    3a24:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <xYieldPending>
    3a28:	88 23       	and	r24, r24
    3a2a:	21 f0       	breq	.+8      	; 0x3a34 <xTaskResumeAll+0x306>
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
    3a30:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    3a34:	0f 90       	pop	r0
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	2d 96       	adiw	r28, 0x0d	; 13
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	08 95       	ret

00003a4c <xTaskGetTickCount>:
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <xTaskGetTickCount+0x6>
    3a52:	1f 92       	push	r1
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	0f 92       	push	r0
    3a5e:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    3a62:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    3a66:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    3a6a:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	9a 83       	std	Y+2, r25	; 0x02
    3a72:	ab 83       	std	Y+3, r26	; 0x03
    3a74:	bc 83       	std	Y+4, r27	; 0x04
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a80:	bc 81       	ldd	r27, Y+4	; 0x04
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	08 95       	ret

00003a94 <xTaskIncrementTick>:
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	63 97       	sbiw	r28, 0x13	; 19
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	f8 94       	cli
    3aa2:	de bf       	out	0x3e, r29	; 62
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	19 82       	std	Y+1, r1	; 0x01
    3aaa:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    3aae:	88 23       	and	r24, r24
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <xTaskIncrementTick+0x20>
    3ab2:	cc c1       	rjmp	.+920    	; 0x3e4c <xTaskIncrementTick+0x3b8>
    3ab4:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    3ab8:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    3abc:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    3ac0:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    3ac4:	01 96       	adiw	r24, 0x01	; 1
    3ac6:	a1 1d       	adc	r26, r1
    3ac8:	b1 1d       	adc	r27, r1
    3aca:	8a 83       	std	Y+2, r24	; 0x02
    3acc:	9b 83       	std	Y+3, r25	; 0x03
    3ace:	ac 83       	std	Y+4, r26	; 0x04
    3ad0:	bd 83       	std	Y+5, r27	; 0x05
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad6:	ac 81       	ldd	r26, Y+4	; 0x04
    3ad8:	bd 81       	ldd	r27, Y+5	; 0x05
    3ada:	80 93 3c 16 	sts	0x163C, r24	; 0x80163c <xTickCount>
    3ade:	90 93 3d 16 	sts	0x163D, r25	; 0x80163d <xTickCount+0x1>
    3ae2:	a0 93 3e 16 	sts	0x163E, r26	; 0x80163e <xTickCount+0x2>
    3ae6:	b0 93 3f 16 	sts	0x163F, r27	; 0x80163f <xTickCount+0x3>
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	9b 81       	ldd	r25, Y+3	; 0x03
    3aee:	ac 81       	ldd	r26, Y+4	; 0x04
    3af0:	bd 81       	ldd	r27, Y+5	; 0x05
    3af2:	89 2b       	or	r24, r25
    3af4:	8a 2b       	or	r24, r26
    3af6:	8b 2b       	or	r24, r27
    3af8:	d1 f4       	brne	.+52     	; 0x3b2e <xTaskIncrementTick+0x9a>
    3afa:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    3afe:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    3b02:	9f 83       	std	Y+7, r25	; 0x07
    3b04:	8e 83       	std	Y+6, r24	; 0x06
    3b06:	80 91 22 16 	lds	r24, 0x1622	; 0x801622 <pxOverflowDelayedTaskList>
    3b0a:	90 91 23 16 	lds	r25, 0x1623	; 0x801623 <pxOverflowDelayedTaskList+0x1>
    3b0e:	90 93 21 16 	sts	0x1621, r25	; 0x801621 <pxDelayedTaskList+0x1>
    3b12:	80 93 20 16 	sts	0x1620, r24	; 0x801620 <pxDelayedTaskList>
    3b16:	8e 81       	ldd	r24, Y+6	; 0x06
    3b18:	9f 81       	ldd	r25, Y+7	; 0x07
    3b1a:	90 93 23 16 	sts	0x1623, r25	; 0x801623 <pxOverflowDelayedTaskList+0x1>
    3b1e:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <pxOverflowDelayedTaskList>
    3b22:	80 91 47 16 	lds	r24, 0x1647	; 0x801647 <xNumOfOverflows>
    3b26:	8f 5f       	subi	r24, 0xFF	; 255
    3b28:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <xNumOfOverflows>
    3b2c:	8c d7       	rcall	.+3864   	; 0x4a46 <prvResetNextTaskUnblockTime>
    3b2e:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xNextTaskUnblockTime>
    3b32:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xNextTaskUnblockTime+0x1>
    3b36:	a0 91 4b 16 	lds	r26, 0x164B	; 0x80164b <xNextTaskUnblockTime+0x2>
    3b3a:	b0 91 4c 16 	lds	r27, 0x164C	; 0x80164c <xNextTaskUnblockTime+0x3>
    3b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3b40:	3b 81       	ldd	r19, Y+3	; 0x03
    3b42:	4c 81       	ldd	r20, Y+4	; 0x04
    3b44:	5d 81       	ldd	r21, Y+5	; 0x05
    3b46:	28 17       	cp	r18, r24
    3b48:	39 07       	cpc	r19, r25
    3b4a:	4a 07       	cpc	r20, r26
    3b4c:	5b 07       	cpc	r21, r27
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <xTaskIncrementTick+0xbe>
    3b50:	60 c1       	rjmp	.+704    	; 0x3e12 <xTaskIncrementTick+0x37e>
    3b52:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    3b56:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	80 81       	ld	r24, Z
    3b5e:	88 23       	and	r24, r24
    3b60:	61 f4       	brne	.+24     	; 0x3b7a <xTaskIncrementTick+0xe6>
    3b62:	8f ef       	ldi	r24, 0xFF	; 255
    3b64:	9f ef       	ldi	r25, 0xFF	; 255
    3b66:	dc 01       	movw	r26, r24
    3b68:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    3b6c:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    3b70:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    3b74:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>
    3b78:	4c c1       	rjmp	.+664    	; 0x3e12 <xTaskIncrementTick+0x37e>
    3b7a:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    3b7e:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    3b82:	fc 01       	movw	r30, r24
    3b84:	87 81       	ldd	r24, Z+7	; 0x07
    3b86:	90 85       	ldd	r25, Z+8	; 0x08
    3b88:	fc 01       	movw	r30, r24
    3b8a:	80 85       	ldd	r24, Z+8	; 0x08
    3b8c:	91 85       	ldd	r25, Z+9	; 0x09
    3b8e:	99 87       	std	Y+9, r25	; 0x09
    3b90:	88 87       	std	Y+8, r24	; 0x08
    3b92:	88 85       	ldd	r24, Y+8	; 0x08
    3b94:	99 85       	ldd	r25, Y+9	; 0x09
    3b96:	fc 01       	movw	r30, r24
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	a4 81       	ldd	r26, Z+4	; 0x04
    3b9e:	b5 81       	ldd	r27, Z+5	; 0x05
    3ba0:	8a 87       	std	Y+10, r24	; 0x0a
    3ba2:	9b 87       	std	Y+11, r25	; 0x0b
    3ba4:	ac 87       	std	Y+12, r26	; 0x0c
    3ba6:	bd 87       	std	Y+13, r27	; 0x0d
    3ba8:	2a 81       	ldd	r18, Y+2	; 0x02
    3baa:	3b 81       	ldd	r19, Y+3	; 0x03
    3bac:	4c 81       	ldd	r20, Y+4	; 0x04
    3bae:	5d 81       	ldd	r21, Y+5	; 0x05
    3bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bb4:	ac 85       	ldd	r26, Y+12	; 0x0c
    3bb6:	bd 85       	ldd	r27, Y+13	; 0x0d
    3bb8:	28 17       	cp	r18, r24
    3bba:	39 07       	cpc	r19, r25
    3bbc:	4a 07       	cpc	r20, r26
    3bbe:	5b 07       	cpc	r21, r27
    3bc0:	68 f4       	brcc	.+26     	; 0x3bdc <xTaskIncrementTick+0x148>
    3bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bc6:	ac 85       	ldd	r26, Y+12	; 0x0c
    3bc8:	bd 85       	ldd	r27, Y+13	; 0x0d
    3bca:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    3bce:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    3bd2:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    3bd6:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>
    3bda:	1b c1       	rjmp	.+566    	; 0x3e12 <xTaskIncrementTick+0x37e>
    3bdc:	88 85       	ldd	r24, Y+8	; 0x08
    3bde:	99 85       	ldd	r25, Y+9	; 0x09
    3be0:	fc 01       	movw	r30, r24
    3be2:	84 85       	ldd	r24, Z+12	; 0x0c
    3be4:	95 85       	ldd	r25, Z+13	; 0x0d
    3be6:	9f 87       	std	Y+15, r25	; 0x0f
    3be8:	8e 87       	std	Y+14, r24	; 0x0e
    3bea:	88 85       	ldd	r24, Y+8	; 0x08
    3bec:	99 85       	ldd	r25, Y+9	; 0x09
    3bee:	fc 01       	movw	r30, r24
    3bf0:	86 81       	ldd	r24, Z+6	; 0x06
    3bf2:	97 81       	ldd	r25, Z+7	; 0x07
    3bf4:	28 85       	ldd	r18, Y+8	; 0x08
    3bf6:	39 85       	ldd	r19, Y+9	; 0x09
    3bf8:	f9 01       	movw	r30, r18
    3bfa:	20 85       	ldd	r18, Z+8	; 0x08
    3bfc:	31 85       	ldd	r19, Z+9	; 0x09
    3bfe:	fc 01       	movw	r30, r24
    3c00:	37 83       	std	Z+7, r19	; 0x07
    3c02:	26 83       	std	Z+6, r18	; 0x06
    3c04:	88 85       	ldd	r24, Y+8	; 0x08
    3c06:	99 85       	ldd	r25, Y+9	; 0x09
    3c08:	fc 01       	movw	r30, r24
    3c0a:	80 85       	ldd	r24, Z+8	; 0x08
    3c0c:	91 85       	ldd	r25, Z+9	; 0x09
    3c0e:	28 85       	ldd	r18, Y+8	; 0x08
    3c10:	39 85       	ldd	r19, Y+9	; 0x09
    3c12:	f9 01       	movw	r30, r18
    3c14:	26 81       	ldd	r18, Z+6	; 0x06
    3c16:	37 81       	ldd	r19, Z+7	; 0x07
    3c18:	fc 01       	movw	r30, r24
    3c1a:	35 83       	std	Z+5, r19	; 0x05
    3c1c:	24 83       	std	Z+4, r18	; 0x04
    3c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c22:	fc 01       	movw	r30, r24
    3c24:	21 81       	ldd	r18, Z+1	; 0x01
    3c26:	32 81       	ldd	r19, Z+2	; 0x02
    3c28:	88 85       	ldd	r24, Y+8	; 0x08
    3c2a:	99 85       	ldd	r25, Y+9	; 0x09
    3c2c:	02 96       	adiw	r24, 0x02	; 2
    3c2e:	28 17       	cp	r18, r24
    3c30:	39 07       	cpc	r19, r25
    3c32:	51 f4       	brne	.+20     	; 0x3c48 <xTaskIncrementTick+0x1b4>
    3c34:	88 85       	ldd	r24, Y+8	; 0x08
    3c36:	99 85       	ldd	r25, Y+9	; 0x09
    3c38:	fc 01       	movw	r30, r24
    3c3a:	20 85       	ldd	r18, Z+8	; 0x08
    3c3c:	31 85       	ldd	r19, Z+9	; 0x09
    3c3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c40:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c42:	fc 01       	movw	r30, r24
    3c44:	32 83       	std	Z+2, r19	; 0x02
    3c46:	21 83       	std	Z+1, r18	; 0x01
    3c48:	88 85       	ldd	r24, Y+8	; 0x08
    3c4a:	99 85       	ldd	r25, Y+9	; 0x09
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	15 86       	std	Z+13, r1	; 0x0d
    3c50:	14 86       	std	Z+12, r1	; 0x0c
    3c52:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c54:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c56:	fc 01       	movw	r30, r24
    3c58:	80 81       	ld	r24, Z
    3c5a:	2f ef       	ldi	r18, 0xFF	; 255
    3c5c:	28 0f       	add	r18, r24
    3c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c60:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c62:	fc 01       	movw	r30, r24
    3c64:	20 83       	st	Z, r18
    3c66:	88 85       	ldd	r24, Y+8	; 0x08
    3c68:	99 85       	ldd	r25, Y+9	; 0x09
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	80 8d       	ldd	r24, Z+24	; 0x18
    3c6e:	91 8d       	ldd	r25, Z+25	; 0x19
    3c70:	89 2b       	or	r24, r25
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <xTaskIncrementTick+0x1e2>
    3c74:	45 c0       	rjmp	.+138    	; 0x3d00 <xTaskIncrementTick+0x26c>
    3c76:	88 85       	ldd	r24, Y+8	; 0x08
    3c78:	99 85       	ldd	r25, Y+9	; 0x09
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	80 8d       	ldd	r24, Z+24	; 0x18
    3c7e:	91 8d       	ldd	r25, Z+25	; 0x19
    3c80:	99 8b       	std	Y+17, r25	; 0x11
    3c82:	88 8b       	std	Y+16, r24	; 0x10
    3c84:	88 85       	ldd	r24, Y+8	; 0x08
    3c86:	99 85       	ldd	r25, Y+9	; 0x09
    3c88:	fc 01       	movw	r30, r24
    3c8a:	82 89       	ldd	r24, Z+18	; 0x12
    3c8c:	93 89       	ldd	r25, Z+19	; 0x13
    3c8e:	28 85       	ldd	r18, Y+8	; 0x08
    3c90:	39 85       	ldd	r19, Y+9	; 0x09
    3c92:	f9 01       	movw	r30, r18
    3c94:	24 89       	ldd	r18, Z+20	; 0x14
    3c96:	35 89       	ldd	r19, Z+21	; 0x15
    3c98:	fc 01       	movw	r30, r24
    3c9a:	37 83       	std	Z+7, r19	; 0x07
    3c9c:	26 83       	std	Z+6, r18	; 0x06
    3c9e:	88 85       	ldd	r24, Y+8	; 0x08
    3ca0:	99 85       	ldd	r25, Y+9	; 0x09
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	84 89       	ldd	r24, Z+20	; 0x14
    3ca6:	95 89       	ldd	r25, Z+21	; 0x15
    3ca8:	28 85       	ldd	r18, Y+8	; 0x08
    3caa:	39 85       	ldd	r19, Y+9	; 0x09
    3cac:	f9 01       	movw	r30, r18
    3cae:	22 89       	ldd	r18, Z+18	; 0x12
    3cb0:	33 89       	ldd	r19, Z+19	; 0x13
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	35 83       	std	Z+5, r19	; 0x05
    3cb6:	24 83       	std	Z+4, r18	; 0x04
    3cb8:	88 89       	ldd	r24, Y+16	; 0x10
    3cba:	99 89       	ldd	r25, Y+17	; 0x11
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	21 81       	ldd	r18, Z+1	; 0x01
    3cc0:	32 81       	ldd	r19, Z+2	; 0x02
    3cc2:	88 85       	ldd	r24, Y+8	; 0x08
    3cc4:	99 85       	ldd	r25, Y+9	; 0x09
    3cc6:	0e 96       	adiw	r24, 0x0e	; 14
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	51 f4       	brne	.+20     	; 0x3ce2 <xTaskIncrementTick+0x24e>
    3cce:	88 85       	ldd	r24, Y+8	; 0x08
    3cd0:	99 85       	ldd	r25, Y+9	; 0x09
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	24 89       	ldd	r18, Z+20	; 0x14
    3cd6:	35 89       	ldd	r19, Z+21	; 0x15
    3cd8:	88 89       	ldd	r24, Y+16	; 0x10
    3cda:	99 89       	ldd	r25, Y+17	; 0x11
    3cdc:	fc 01       	movw	r30, r24
    3cde:	32 83       	std	Z+2, r19	; 0x02
    3ce0:	21 83       	std	Z+1, r18	; 0x01
    3ce2:	88 85       	ldd	r24, Y+8	; 0x08
    3ce4:	99 85       	ldd	r25, Y+9	; 0x09
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	11 8e       	std	Z+25, r1	; 0x19
    3cea:	10 8e       	std	Z+24, r1	; 0x18
    3cec:	88 89       	ldd	r24, Y+16	; 0x10
    3cee:	99 89       	ldd	r25, Y+17	; 0x11
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	80 81       	ld	r24, Z
    3cf4:	2f ef       	ldi	r18, 0xFF	; 255
    3cf6:	28 0f       	add	r18, r24
    3cf8:	88 89       	ldd	r24, Y+16	; 0x10
    3cfa:	99 89       	ldd	r25, Y+17	; 0x11
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	20 83       	st	Z, r18
    3d00:	88 85       	ldd	r24, Y+8	; 0x08
    3d02:	99 85       	ldd	r25, Y+9	; 0x09
    3d04:	fc 01       	movw	r30, r24
    3d06:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d08:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    3d0c:	89 17       	cp	r24, r25
    3d0e:	30 f4       	brcc	.+12     	; 0x3d1c <xTaskIncrementTick+0x288>
    3d10:	88 85       	ldd	r24, Y+8	; 0x08
    3d12:	99 85       	ldd	r25, Y+9	; 0x09
    3d14:	fc 01       	movw	r30, r24
    3d16:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d18:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    3d1c:	88 85       	ldd	r24, Y+8	; 0x08
    3d1e:	99 85       	ldd	r25, Y+9	; 0x09
    3d20:	fc 01       	movw	r30, r24
    3d22:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	4b e0       	ldi	r20, 0x0B	; 11
    3d2a:	42 9f       	mul	r20, r18
    3d2c:	c0 01       	movw	r24, r0
    3d2e:	43 9f       	mul	r20, r19
    3d30:	90 0d       	add	r25, r0
    3d32:	11 24       	eor	r1, r1
    3d34:	83 56       	subi	r24, 0x63	; 99
    3d36:	9a 4e       	sbci	r25, 0xEA	; 234
    3d38:	fc 01       	movw	r30, r24
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	9b 8b       	std	Y+19, r25	; 0x13
    3d40:	8a 8b       	std	Y+18, r24	; 0x12
    3d42:	88 85       	ldd	r24, Y+8	; 0x08
    3d44:	99 85       	ldd	r25, Y+9	; 0x09
    3d46:	2a 89       	ldd	r18, Y+18	; 0x12
    3d48:	3b 89       	ldd	r19, Y+19	; 0x13
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	37 83       	std	Z+7, r19	; 0x07
    3d4e:	26 83       	std	Z+6, r18	; 0x06
    3d50:	8a 89       	ldd	r24, Y+18	; 0x12
    3d52:	9b 89       	ldd	r25, Y+19	; 0x13
    3d54:	fc 01       	movw	r30, r24
    3d56:	26 81       	ldd	r18, Z+6	; 0x06
    3d58:	37 81       	ldd	r19, Z+7	; 0x07
    3d5a:	88 85       	ldd	r24, Y+8	; 0x08
    3d5c:	99 85       	ldd	r25, Y+9	; 0x09
    3d5e:	fc 01       	movw	r30, r24
    3d60:	31 87       	std	Z+9, r19	; 0x09
    3d62:	20 87       	std	Z+8, r18	; 0x08
    3d64:	8a 89       	ldd	r24, Y+18	; 0x12
    3d66:	9b 89       	ldd	r25, Y+19	; 0x13
    3d68:	fc 01       	movw	r30, r24
    3d6a:	86 81       	ldd	r24, Z+6	; 0x06
    3d6c:	97 81       	ldd	r25, Z+7	; 0x07
    3d6e:	28 85       	ldd	r18, Y+8	; 0x08
    3d70:	39 85       	ldd	r19, Y+9	; 0x09
    3d72:	2e 5f       	subi	r18, 0xFE	; 254
    3d74:	3f 4f       	sbci	r19, 0xFF	; 255
    3d76:	fc 01       	movw	r30, r24
    3d78:	35 83       	std	Z+5, r19	; 0x05
    3d7a:	24 83       	std	Z+4, r18	; 0x04
    3d7c:	88 85       	ldd	r24, Y+8	; 0x08
    3d7e:	99 85       	ldd	r25, Y+9	; 0x09
    3d80:	9c 01       	movw	r18, r24
    3d82:	2e 5f       	subi	r18, 0xFE	; 254
    3d84:	3f 4f       	sbci	r19, 0xFF	; 255
    3d86:	8a 89       	ldd	r24, Y+18	; 0x12
    3d88:	9b 89       	ldd	r25, Y+19	; 0x13
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	37 83       	std	Z+7, r19	; 0x07
    3d8e:	26 83       	std	Z+6, r18	; 0x06
    3d90:	88 85       	ldd	r24, Y+8	; 0x08
    3d92:	99 85       	ldd	r25, Y+9	; 0x09
    3d94:	fc 01       	movw	r30, r24
    3d96:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	4b e0       	ldi	r20, 0x0B	; 11
    3d9e:	42 9f       	mul	r20, r18
    3da0:	c0 01       	movw	r24, r0
    3da2:	43 9f       	mul	r20, r19
    3da4:	90 0d       	add	r25, r0
    3da6:	11 24       	eor	r1, r1
    3da8:	9c 01       	movw	r18, r24
    3daa:	24 56       	subi	r18, 0x64	; 100
    3dac:	3a 4e       	sbci	r19, 0xEA	; 234
    3dae:	88 85       	ldd	r24, Y+8	; 0x08
    3db0:	99 85       	ldd	r25, Y+9	; 0x09
    3db2:	fc 01       	movw	r30, r24
    3db4:	35 87       	std	Z+13, r19	; 0x0d
    3db6:	24 87       	std	Z+12, r18	; 0x0c
    3db8:	88 85       	ldd	r24, Y+8	; 0x08
    3dba:	99 85       	ldd	r25, Y+9	; 0x09
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dc0:	88 2f       	mov	r24, r24
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	4b e0       	ldi	r20, 0x0B	; 11
    3dc6:	48 9f       	mul	r20, r24
    3dc8:	90 01       	movw	r18, r0
    3dca:	49 9f       	mul	r20, r25
    3dcc:	30 0d       	add	r19, r0
    3dce:	11 24       	eor	r1, r1
    3dd0:	24 56       	subi	r18, 0x64	; 100
    3dd2:	3a 4e       	sbci	r19, 0xEA	; 234
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	20 81       	ld	r18, Z
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	42 0f       	add	r20, r18
    3ddc:	5b e0       	ldi	r21, 0x0B	; 11
    3dde:	58 9f       	mul	r21, r24
    3de0:	90 01       	movw	r18, r0
    3de2:	59 9f       	mul	r21, r25
    3de4:	30 0d       	add	r19, r0
    3de6:	11 24       	eor	r1, r1
    3de8:	c9 01       	movw	r24, r18
    3dea:	84 56       	subi	r24, 0x64	; 100
    3dec:	9a 4e       	sbci	r25, 0xEA	; 234
    3dee:	fc 01       	movw	r30, r24
    3df0:	40 83       	st	Z, r20
    3df2:	88 85       	ldd	r24, Y+8	; 0x08
    3df4:	99 85       	ldd	r25, Y+9	; 0x09
    3df6:	fc 01       	movw	r30, r24
    3df8:	22 8d       	ldd	r18, Z+26	; 0x1a
    3dfa:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3dfe:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3e02:	fc 01       	movw	r30, r24
    3e04:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e06:	28 17       	cp	r18, r24
    3e08:	08 f4       	brcc	.+2      	; 0x3e0c <xTaskIncrementTick+0x378>
    3e0a:	a3 ce       	rjmp	.-698    	; 0x3b52 <xTaskIncrementTick+0xbe>
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	a0 ce       	rjmp	.-704    	; 0x3b52 <xTaskIncrementTick+0xbe>
    3e12:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3e16:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e1e:	28 2f       	mov	r18, r24
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	4b e0       	ldi	r20, 0x0B	; 11
    3e24:	42 9f       	mul	r20, r18
    3e26:	c0 01       	movw	r24, r0
    3e28:	43 9f       	mul	r20, r19
    3e2a:	90 0d       	add	r25, r0
    3e2c:	11 24       	eor	r1, r1
    3e2e:	84 56       	subi	r24, 0x64	; 100
    3e30:	9a 4e       	sbci	r25, 0xEA	; 234
    3e32:	fc 01       	movw	r30, r24
    3e34:	80 81       	ld	r24, Z
    3e36:	82 30       	cpi	r24, 0x02	; 2
    3e38:	10 f0       	brcs	.+4      	; 0x3e3e <xTaskIncrementTick+0x3aa>
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	89 83       	std	Y+1, r24	; 0x01
    3e3e:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <xYieldPending>
    3e42:	88 23       	and	r24, r24
    3e44:	b1 f0       	breq	.+44     	; 0x3e72 <xTaskIncrementTick+0x3de>
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	13 c0       	rjmp	.+38     	; 0x3e72 <xTaskIncrementTick+0x3de>
    3e4c:	80 91 42 16 	lds	r24, 0x1642	; 0x801642 <xPendedTicks>
    3e50:	90 91 43 16 	lds	r25, 0x1643	; 0x801643 <xPendedTicks+0x1>
    3e54:	a0 91 44 16 	lds	r26, 0x1644	; 0x801644 <xPendedTicks+0x2>
    3e58:	b0 91 45 16 	lds	r27, 0x1645	; 0x801645 <xPendedTicks+0x3>
    3e5c:	01 96       	adiw	r24, 0x01	; 1
    3e5e:	a1 1d       	adc	r26, r1
    3e60:	b1 1d       	adc	r27, r1
    3e62:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <xPendedTicks>
    3e66:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <xPendedTicks+0x1>
    3e6a:	a0 93 44 16 	sts	0x1644, r26	; 0x801644 <xPendedTicks+0x2>
    3e6e:	b0 93 45 16 	sts	0x1645, r27	; 0x801645 <xPendedTicks+0x3>
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	63 96       	adiw	r28, 0x13	; 19
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	08 95       	ret

00003e86 <vTaskSwitchContext>:
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <vTaskSwitchContext+0x6>
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    3e94:	88 23       	and	r24, r24
    3e96:	21 f0       	breq	.+8      	; 0x3ea0 <vTaskSwitchContext+0x1a>
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    3e9e:	78 c0       	rjmp	.+240    	; 0x3f90 <vTaskSwitchContext+0x10a>
    3ea0:	10 92 46 16 	sts	0x1646, r1	; 0x801646 <xYieldPending>
    3ea4:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3ea8:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3eac:	fc 01       	movw	r30, r24
    3eae:	20 81       	ld	r18, Z
    3eb0:	31 81       	ldd	r19, Z+1	; 0x01
    3eb2:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3eb6:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3eba:	fc 01       	movw	r30, r24
    3ebc:	83 8d       	ldd	r24, Z+27	; 0x1b
    3ebe:	94 8d       	ldd	r25, Z+28	; 0x1c
    3ec0:	82 17       	cp	r24, r18
    3ec2:	93 07       	cpc	r25, r19
    3ec4:	70 f0       	brcs	.+28     	; 0x3ee2 <vTaskSwitchContext+0x5c>
    3ec6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3eca:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3ece:	9c 01       	movw	r18, r24
    3ed0:	23 5e       	subi	r18, 0xE3	; 227
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed4:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3ed8:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3edc:	b9 01       	movw	r22, r18
    3ede:	0e 94 04 32 	call	0x6408	; 0x6408 <vApplicationStackOverflowHook>
    3ee2:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    3ee6:	89 83       	std	Y+1, r24	; 0x01
    3ee8:	03 c0       	rjmp	.+6      	; 0x3ef0 <vTaskSwitchContext+0x6a>
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	81 50       	subi	r24, 0x01	; 1
    3eee:	89 83       	std	Y+1, r24	; 0x01
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	4b e0       	ldi	r20, 0x0B	; 11
    3ef8:	42 9f       	mul	r20, r18
    3efa:	c0 01       	movw	r24, r0
    3efc:	43 9f       	mul	r20, r19
    3efe:	90 0d       	add	r25, r0
    3f00:	11 24       	eor	r1, r1
    3f02:	84 56       	subi	r24, 0x64	; 100
    3f04:	9a 4e       	sbci	r25, 0xEA	; 234
    3f06:	fc 01       	movw	r30, r24
    3f08:	80 81       	ld	r24, Z
    3f0a:	88 23       	and	r24, r24
    3f0c:	71 f3       	breq	.-36     	; 0x3eea <vTaskSwitchContext+0x64>
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	28 2f       	mov	r18, r24
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	4b e0       	ldi	r20, 0x0B	; 11
    3f16:	42 9f       	mul	r20, r18
    3f18:	c0 01       	movw	r24, r0
    3f1a:	43 9f       	mul	r20, r19
    3f1c:	90 0d       	add	r25, r0
    3f1e:	11 24       	eor	r1, r1
    3f20:	84 56       	subi	r24, 0x64	; 100
    3f22:	9a 4e       	sbci	r25, 0xEA	; 234
    3f24:	9b 83       	std	Y+3, r25	; 0x03
    3f26:	8a 83       	std	Y+2, r24	; 0x02
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	81 81       	ldd	r24, Z+1	; 0x01
    3f30:	92 81       	ldd	r25, Z+2	; 0x02
    3f32:	fc 01       	movw	r30, r24
    3f34:	24 81       	ldd	r18, Z+4	; 0x04
    3f36:	35 81       	ldd	r19, Z+5	; 0x05
    3f38:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	32 83       	std	Z+2, r19	; 0x02
    3f40:	21 83       	std	Z+1, r18	; 0x01
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	9b 81       	ldd	r25, Y+3	; 0x03
    3f46:	fc 01       	movw	r30, r24
    3f48:	21 81       	ldd	r18, Z+1	; 0x01
    3f4a:	32 81       	ldd	r19, Z+2	; 0x02
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f50:	03 96       	adiw	r24, 0x03	; 3
    3f52:	28 17       	cp	r18, r24
    3f54:	39 07       	cpc	r19, r25
    3f56:	69 f4       	brne	.+26     	; 0x3f72 <vTaskSwitchContext+0xec>
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	81 81       	ldd	r24, Z+1	; 0x01
    3f60:	92 81       	ldd	r25, Z+2	; 0x02
    3f62:	fc 01       	movw	r30, r24
    3f64:	24 81       	ldd	r18, Z+4	; 0x04
    3f66:	35 81       	ldd	r19, Z+5	; 0x05
    3f68:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	32 83       	std	Z+2, r19	; 0x02
    3f70:	21 83       	std	Z+1, r18	; 0x01
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	9b 81       	ldd	r25, Y+3	; 0x03
    3f76:	fc 01       	movw	r30, r24
    3f78:	81 81       	ldd	r24, Z+1	; 0x01
    3f7a:	92 81       	ldd	r25, Z+2	; 0x02
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	80 85       	ldd	r24, Z+8	; 0x08
    3f80:	91 85       	ldd	r25, Z+9	; 0x09
    3f82:	90 93 9b 15 	sts	0x159B, r25	; 0x80159b <pxCurrentTCB+0x1>
    3f86:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <pxCurrentTCB>
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    3f90:	00 00       	nop
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	08 95       	ret

00003f9e <vTaskPlaceOnEventList>:
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <vTaskPlaceOnEventList+0x6>
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <vTaskPlaceOnEventList+0x8>
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	9a 83       	std	Y+2, r25	; 0x02
    3fac:	89 83       	std	Y+1, r24	; 0x01
    3fae:	4b 83       	std	Y+3, r20	; 0x03
    3fb0:	5c 83       	std	Y+4, r21	; 0x04
    3fb2:	6d 83       	std	Y+5, r22	; 0x05
    3fb4:	7e 83       	std	Y+6, r23	; 0x06
    3fb6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    3fba:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    3fbe:	9c 01       	movw	r18, r24
    3fc0:	22 5f       	subi	r18, 0xF2	; 242
    3fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	b9 01       	movw	r22, r18
    3fca:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>
    3fce:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd2:	ad 81       	ldd	r26, Y+5	; 0x05
    3fd4:	be 81       	ldd	r27, Y+6	; 0x06
    3fd6:	41 e0       	ldi	r20, 0x01	; 1
    3fd8:	bc 01       	movw	r22, r24
    3fda:	cd 01       	movw	r24, r26
    3fdc:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    3fe0:	00 00       	nop
    3fe2:	26 96       	adiw	r28, 0x06	; 6
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	08 95       	ret

00003ff4 <vTaskPlaceOnUnorderedEventList>:
    3ff4:	0f 93       	push	r16
    3ff6:	1f 93       	push	r17
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	2c 97       	sbiw	r28, 0x0c	; 12
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	9c 83       	std	Y+4, r25	; 0x04
    400e:	8b 83       	std	Y+3, r24	; 0x03
    4010:	4d 83       	std	Y+5, r20	; 0x05
    4012:	5e 83       	std	Y+6, r21	; 0x06
    4014:	6f 83       	std	Y+7, r22	; 0x07
    4016:	78 87       	std	Y+8, r23	; 0x08
    4018:	09 87       	std	Y+9, r16	; 0x09
    401a:	1a 87       	std	Y+10, r17	; 0x0a
    401c:	2b 87       	std	Y+11, r18	; 0x0b
    401e:	3c 87       	std	Y+12, r19	; 0x0c
    4020:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4024:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4028:	8d 81       	ldd	r24, Y+5	; 0x05
    402a:	9e 81       	ldd	r25, Y+6	; 0x06
    402c:	af 81       	ldd	r26, Y+7	; 0x07
    402e:	b8 85       	ldd	r27, Y+8	; 0x08
    4030:	b0 68       	ori	r27, 0x80	; 128
    4032:	f9 01       	movw	r30, r18
    4034:	86 87       	std	Z+14, r24	; 0x0e
    4036:	97 87       	std	Z+15, r25	; 0x0f
    4038:	a0 8b       	std	Z+16, r26	; 0x10
    403a:	b1 8b       	std	Z+17, r27	; 0x11
    403c:	8b 81       	ldd	r24, Y+3	; 0x03
    403e:	9c 81       	ldd	r25, Y+4	; 0x04
    4040:	fc 01       	movw	r30, r24
    4042:	81 81       	ldd	r24, Z+1	; 0x01
    4044:	92 81       	ldd	r25, Z+2	; 0x02
    4046:	9a 83       	std	Y+2, r25	; 0x02
    4048:	89 83       	std	Y+1, r24	; 0x01
    404a:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    404e:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4052:	29 81       	ldd	r18, Y+1	; 0x01
    4054:	3a 81       	ldd	r19, Y+2	; 0x02
    4056:	fc 01       	movw	r30, r24
    4058:	33 8b       	std	Z+19, r19	; 0x13
    405a:	22 8b       	std	Z+18, r18	; 0x12
    405c:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4060:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4064:	29 81       	ldd	r18, Y+1	; 0x01
    4066:	3a 81       	ldd	r19, Y+2	; 0x02
    4068:	f9 01       	movw	r30, r18
    406a:	26 81       	ldd	r18, Z+6	; 0x06
    406c:	37 81       	ldd	r19, Z+7	; 0x07
    406e:	fc 01       	movw	r30, r24
    4070:	35 8b       	std	Z+21, r19	; 0x15
    4072:	24 8b       	std	Z+20, r18	; 0x14
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	9a 81       	ldd	r25, Y+2	; 0x02
    4078:	fc 01       	movw	r30, r24
    407a:	86 81       	ldd	r24, Z+6	; 0x06
    407c:	97 81       	ldd	r25, Z+7	; 0x07
    407e:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4082:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4086:	22 5f       	subi	r18, 0xF2	; 242
    4088:	3f 4f       	sbci	r19, 0xFF	; 255
    408a:	fc 01       	movw	r30, r24
    408c:	35 83       	std	Z+5, r19	; 0x05
    408e:	24 83       	std	Z+4, r18	; 0x04
    4090:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4094:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4098:	9c 01       	movw	r18, r24
    409a:	22 5f       	subi	r18, 0xF2	; 242
    409c:	3f 4f       	sbci	r19, 0xFF	; 255
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	fc 01       	movw	r30, r24
    40a4:	37 83       	std	Z+7, r19	; 0x07
    40a6:	26 83       	std	Z+6, r18	; 0x06
    40a8:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    40ac:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    40b0:	2b 81       	ldd	r18, Y+3	; 0x03
    40b2:	3c 81       	ldd	r19, Y+4	; 0x04
    40b4:	fc 01       	movw	r30, r24
    40b6:	31 8f       	std	Z+25, r19	; 0x19
    40b8:	20 8f       	std	Z+24, r18	; 0x18
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	fc 01       	movw	r30, r24
    40c0:	80 81       	ld	r24, Z
    40c2:	21 e0       	ldi	r18, 0x01	; 1
    40c4:	28 0f       	add	r18, r24
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ca:	fc 01       	movw	r30, r24
    40cc:	20 83       	st	Z, r18
    40ce:	89 85       	ldd	r24, Y+9	; 0x09
    40d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    40d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	bc 01       	movw	r22, r24
    40da:	cd 01       	movw	r24, r26
    40dc:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    40e0:	00 00       	nop
    40e2:	2c 96       	adiw	r28, 0x0c	; 12
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	f8 94       	cli
    40e8:	de bf       	out	0x3e, r29	; 62
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	cd bf       	out	0x3d, r28	; 61
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	1f 91       	pop	r17
    40f4:	0f 91       	pop	r16
    40f6:	08 95       	ret

000040f8 <vTaskPlaceOnEventListRestricted>:
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	29 97       	sbiw	r28, 0x09	; 9
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	9c 83       	std	Y+4, r25	; 0x04
    410e:	8b 83       	std	Y+3, r24	; 0x03
    4110:	4d 83       	std	Y+5, r20	; 0x05
    4112:	5e 83       	std	Y+6, r21	; 0x06
    4114:	6f 83       	std	Y+7, r22	; 0x07
    4116:	78 87       	std	Y+8, r23	; 0x08
    4118:	29 87       	std	Y+9, r18	; 0x09
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	9c 81       	ldd	r25, Y+4	; 0x04
    411e:	fc 01       	movw	r30, r24
    4120:	81 81       	ldd	r24, Z+1	; 0x01
    4122:	92 81       	ldd	r25, Z+2	; 0x02
    4124:	9a 83       	std	Y+2, r25	; 0x02
    4126:	89 83       	std	Y+1, r24	; 0x01
    4128:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    412c:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4130:	29 81       	ldd	r18, Y+1	; 0x01
    4132:	3a 81       	ldd	r19, Y+2	; 0x02
    4134:	fc 01       	movw	r30, r24
    4136:	33 8b       	std	Z+19, r19	; 0x13
    4138:	22 8b       	std	Z+18, r18	; 0x12
    413a:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    413e:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4142:	29 81       	ldd	r18, Y+1	; 0x01
    4144:	3a 81       	ldd	r19, Y+2	; 0x02
    4146:	f9 01       	movw	r30, r18
    4148:	26 81       	ldd	r18, Z+6	; 0x06
    414a:	37 81       	ldd	r19, Z+7	; 0x07
    414c:	fc 01       	movw	r30, r24
    414e:	35 8b       	std	Z+21, r19	; 0x15
    4150:	24 8b       	std	Z+20, r18	; 0x14
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	9a 81       	ldd	r25, Y+2	; 0x02
    4156:	fc 01       	movw	r30, r24
    4158:	86 81       	ldd	r24, Z+6	; 0x06
    415a:	97 81       	ldd	r25, Z+7	; 0x07
    415c:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4160:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4164:	22 5f       	subi	r18, 0xF2	; 242
    4166:	3f 4f       	sbci	r19, 0xFF	; 255
    4168:	fc 01       	movw	r30, r24
    416a:	35 83       	std	Z+5, r19	; 0x05
    416c:	24 83       	std	Z+4, r18	; 0x04
    416e:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4172:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4176:	9c 01       	movw	r18, r24
    4178:	22 5f       	subi	r18, 0xF2	; 242
    417a:	3f 4f       	sbci	r19, 0xFF	; 255
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	9a 81       	ldd	r25, Y+2	; 0x02
    4180:	fc 01       	movw	r30, r24
    4182:	37 83       	std	Z+7, r19	; 0x07
    4184:	26 83       	std	Z+6, r18	; 0x06
    4186:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    418a:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    418e:	2b 81       	ldd	r18, Y+3	; 0x03
    4190:	3c 81       	ldd	r19, Y+4	; 0x04
    4192:	fc 01       	movw	r30, r24
    4194:	31 8f       	std	Z+25, r19	; 0x19
    4196:	20 8f       	std	Z+24, r18	; 0x18
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	9c 81       	ldd	r25, Y+4	; 0x04
    419c:	fc 01       	movw	r30, r24
    419e:	80 81       	ld	r24, Z
    41a0:	21 e0       	ldi	r18, 0x01	; 1
    41a2:	28 0f       	add	r18, r24
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	9c 81       	ldd	r25, Y+4	; 0x04
    41a8:	fc 01       	movw	r30, r24
    41aa:	20 83       	st	Z, r18
    41ac:	89 85       	ldd	r24, Y+9	; 0x09
    41ae:	88 23       	and	r24, r24
    41b0:	39 f0       	breq	.+14     	; 0x41c0 <vTaskPlaceOnEventListRestricted+0xc8>
    41b2:	8f ef       	ldi	r24, 0xFF	; 255
    41b4:	9f ef       	ldi	r25, 0xFF	; 255
    41b6:	dc 01       	movw	r26, r24
    41b8:	8d 83       	std	Y+5, r24	; 0x05
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	af 83       	std	Y+7, r26	; 0x07
    41be:	b8 87       	std	Y+8, r27	; 0x08
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	af 81       	ldd	r26, Y+7	; 0x07
    41c6:	b8 85       	ldd	r27, Y+8	; 0x08
    41c8:	49 85       	ldd	r20, Y+9	; 0x09
    41ca:	bc 01       	movw	r22, r24
    41cc:	cd 01       	movw	r24, r26
    41ce:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    41d2:	00 00       	nop
    41d4:	29 96       	adiw	r28, 0x09	; 9
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	08 95       	ret

000041e6 <xTaskRemoveFromEventList>:
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	2d 97       	sbiw	r28, 0x0d	; 13
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	9d 87       	std	Y+13, r25	; 0x0d
    41fc:	8c 87       	std	Y+12, r24	; 0x0c
    41fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4200:	9d 85       	ldd	r25, Y+13	; 0x0d
    4202:	fc 01       	movw	r30, r24
    4204:	87 81       	ldd	r24, Z+7	; 0x07
    4206:	90 85       	ldd	r25, Z+8	; 0x08
    4208:	fc 01       	movw	r30, r24
    420a:	80 85       	ldd	r24, Z+8	; 0x08
    420c:	91 85       	ldd	r25, Z+9	; 0x09
    420e:	9b 83       	std	Y+3, r25	; 0x03
    4210:	8a 83       	std	Y+2, r24	; 0x02
    4212:	8a 81       	ldd	r24, Y+2	; 0x02
    4214:	9b 81       	ldd	r25, Y+3	; 0x03
    4216:	fc 01       	movw	r30, r24
    4218:	80 8d       	ldd	r24, Z+24	; 0x18
    421a:	91 8d       	ldd	r25, Z+25	; 0x19
    421c:	9d 83       	std	Y+5, r25	; 0x05
    421e:	8c 83       	std	Y+4, r24	; 0x04
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	9b 81       	ldd	r25, Y+3	; 0x03
    4224:	fc 01       	movw	r30, r24
    4226:	82 89       	ldd	r24, Z+18	; 0x12
    4228:	93 89       	ldd	r25, Z+19	; 0x13
    422a:	2a 81       	ldd	r18, Y+2	; 0x02
    422c:	3b 81       	ldd	r19, Y+3	; 0x03
    422e:	f9 01       	movw	r30, r18
    4230:	24 89       	ldd	r18, Z+20	; 0x14
    4232:	35 89       	ldd	r19, Z+21	; 0x15
    4234:	fc 01       	movw	r30, r24
    4236:	37 83       	std	Z+7, r19	; 0x07
    4238:	26 83       	std	Z+6, r18	; 0x06
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	fc 01       	movw	r30, r24
    4240:	84 89       	ldd	r24, Z+20	; 0x14
    4242:	95 89       	ldd	r25, Z+21	; 0x15
    4244:	2a 81       	ldd	r18, Y+2	; 0x02
    4246:	3b 81       	ldd	r19, Y+3	; 0x03
    4248:	f9 01       	movw	r30, r18
    424a:	22 89       	ldd	r18, Z+18	; 0x12
    424c:	33 89       	ldd	r19, Z+19	; 0x13
    424e:	fc 01       	movw	r30, r24
    4250:	35 83       	std	Z+5, r19	; 0x05
    4252:	24 83       	std	Z+4, r18	; 0x04
    4254:	8c 81       	ldd	r24, Y+4	; 0x04
    4256:	9d 81       	ldd	r25, Y+5	; 0x05
    4258:	fc 01       	movw	r30, r24
    425a:	21 81       	ldd	r18, Z+1	; 0x01
    425c:	32 81       	ldd	r19, Z+2	; 0x02
    425e:	8a 81       	ldd	r24, Y+2	; 0x02
    4260:	9b 81       	ldd	r25, Y+3	; 0x03
    4262:	0e 96       	adiw	r24, 0x0e	; 14
    4264:	28 17       	cp	r18, r24
    4266:	39 07       	cpc	r19, r25
    4268:	51 f4       	brne	.+20     	; 0x427e <xTaskRemoveFromEventList+0x98>
    426a:	8a 81       	ldd	r24, Y+2	; 0x02
    426c:	9b 81       	ldd	r25, Y+3	; 0x03
    426e:	fc 01       	movw	r30, r24
    4270:	24 89       	ldd	r18, Z+20	; 0x14
    4272:	35 89       	ldd	r19, Z+21	; 0x15
    4274:	8c 81       	ldd	r24, Y+4	; 0x04
    4276:	9d 81       	ldd	r25, Y+5	; 0x05
    4278:	fc 01       	movw	r30, r24
    427a:	32 83       	std	Z+2, r19	; 0x02
    427c:	21 83       	std	Z+1, r18	; 0x01
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	9b 81       	ldd	r25, Y+3	; 0x03
    4282:	fc 01       	movw	r30, r24
    4284:	11 8e       	std	Z+25, r1	; 0x19
    4286:	10 8e       	std	Z+24, r1	; 0x18
    4288:	8c 81       	ldd	r24, Y+4	; 0x04
    428a:	9d 81       	ldd	r25, Y+5	; 0x05
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	2f ef       	ldi	r18, 0xFF	; 255
    4292:	28 0f       	add	r18, r24
    4294:	8c 81       	ldd	r24, Y+4	; 0x04
    4296:	9d 81       	ldd	r25, Y+5	; 0x05
    4298:	fc 01       	movw	r30, r24
    429a:	20 83       	st	Z, r18
    429c:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    42a0:	88 23       	and	r24, r24
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <xTaskRemoveFromEventList+0xc0>
    42a4:	bf c0       	rjmp	.+382    	; 0x4424 <xTaskRemoveFromEventList+0x23e>
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	9b 81       	ldd	r25, Y+3	; 0x03
    42aa:	fc 01       	movw	r30, r24
    42ac:	84 85       	ldd	r24, Z+12	; 0x0c
    42ae:	95 85       	ldd	r25, Z+13	; 0x0d
    42b0:	9f 83       	std	Y+7, r25	; 0x07
    42b2:	8e 83       	std	Y+6, r24	; 0x06
    42b4:	8a 81       	ldd	r24, Y+2	; 0x02
    42b6:	9b 81       	ldd	r25, Y+3	; 0x03
    42b8:	fc 01       	movw	r30, r24
    42ba:	86 81       	ldd	r24, Z+6	; 0x06
    42bc:	97 81       	ldd	r25, Z+7	; 0x07
    42be:	2a 81       	ldd	r18, Y+2	; 0x02
    42c0:	3b 81       	ldd	r19, Y+3	; 0x03
    42c2:	f9 01       	movw	r30, r18
    42c4:	20 85       	ldd	r18, Z+8	; 0x08
    42c6:	31 85       	ldd	r19, Z+9	; 0x09
    42c8:	fc 01       	movw	r30, r24
    42ca:	37 83       	std	Z+7, r19	; 0x07
    42cc:	26 83       	std	Z+6, r18	; 0x06
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	9b 81       	ldd	r25, Y+3	; 0x03
    42d2:	fc 01       	movw	r30, r24
    42d4:	80 85       	ldd	r24, Z+8	; 0x08
    42d6:	91 85       	ldd	r25, Z+9	; 0x09
    42d8:	2a 81       	ldd	r18, Y+2	; 0x02
    42da:	3b 81       	ldd	r19, Y+3	; 0x03
    42dc:	f9 01       	movw	r30, r18
    42de:	26 81       	ldd	r18, Z+6	; 0x06
    42e0:	37 81       	ldd	r19, Z+7	; 0x07
    42e2:	fc 01       	movw	r30, r24
    42e4:	35 83       	std	Z+5, r19	; 0x05
    42e6:	24 83       	std	Z+4, r18	; 0x04
    42e8:	8e 81       	ldd	r24, Y+6	; 0x06
    42ea:	9f 81       	ldd	r25, Y+7	; 0x07
    42ec:	fc 01       	movw	r30, r24
    42ee:	21 81       	ldd	r18, Z+1	; 0x01
    42f0:	32 81       	ldd	r19, Z+2	; 0x02
    42f2:	8a 81       	ldd	r24, Y+2	; 0x02
    42f4:	9b 81       	ldd	r25, Y+3	; 0x03
    42f6:	02 96       	adiw	r24, 0x02	; 2
    42f8:	28 17       	cp	r18, r24
    42fa:	39 07       	cpc	r19, r25
    42fc:	51 f4       	brne	.+20     	; 0x4312 <xTaskRemoveFromEventList+0x12c>
    42fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4300:	9b 81       	ldd	r25, Y+3	; 0x03
    4302:	fc 01       	movw	r30, r24
    4304:	20 85       	ldd	r18, Z+8	; 0x08
    4306:	31 85       	ldd	r19, Z+9	; 0x09
    4308:	8e 81       	ldd	r24, Y+6	; 0x06
    430a:	9f 81       	ldd	r25, Y+7	; 0x07
    430c:	fc 01       	movw	r30, r24
    430e:	32 83       	std	Z+2, r19	; 0x02
    4310:	21 83       	std	Z+1, r18	; 0x01
    4312:	8a 81       	ldd	r24, Y+2	; 0x02
    4314:	9b 81       	ldd	r25, Y+3	; 0x03
    4316:	fc 01       	movw	r30, r24
    4318:	15 86       	std	Z+13, r1	; 0x0d
    431a:	14 86       	std	Z+12, r1	; 0x0c
    431c:	8e 81       	ldd	r24, Y+6	; 0x06
    431e:	9f 81       	ldd	r25, Y+7	; 0x07
    4320:	fc 01       	movw	r30, r24
    4322:	80 81       	ld	r24, Z
    4324:	2f ef       	ldi	r18, 0xFF	; 255
    4326:	28 0f       	add	r18, r24
    4328:	8e 81       	ldd	r24, Y+6	; 0x06
    432a:	9f 81       	ldd	r25, Y+7	; 0x07
    432c:	fc 01       	movw	r30, r24
    432e:	20 83       	st	Z, r18
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	9b 81       	ldd	r25, Y+3	; 0x03
    4334:	fc 01       	movw	r30, r24
    4336:	92 8d       	ldd	r25, Z+26	; 0x1a
    4338:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    433c:	89 17       	cp	r24, r25
    433e:	30 f4       	brcc	.+12     	; 0x434c <xTaskRemoveFromEventList+0x166>
    4340:	8a 81       	ldd	r24, Y+2	; 0x02
    4342:	9b 81       	ldd	r25, Y+3	; 0x03
    4344:	fc 01       	movw	r30, r24
    4346:	82 8d       	ldd	r24, Z+26	; 0x1a
    4348:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    434c:	8a 81       	ldd	r24, Y+2	; 0x02
    434e:	9b 81       	ldd	r25, Y+3	; 0x03
    4350:	fc 01       	movw	r30, r24
    4352:	82 8d       	ldd	r24, Z+26	; 0x1a
    4354:	28 2f       	mov	r18, r24
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	4b e0       	ldi	r20, 0x0B	; 11
    435a:	42 9f       	mul	r20, r18
    435c:	c0 01       	movw	r24, r0
    435e:	43 9f       	mul	r20, r19
    4360:	90 0d       	add	r25, r0
    4362:	11 24       	eor	r1, r1
    4364:	83 56       	subi	r24, 0x63	; 99
    4366:	9a 4e       	sbci	r25, 0xEA	; 234
    4368:	fc 01       	movw	r30, r24
    436a:	80 81       	ld	r24, Z
    436c:	91 81       	ldd	r25, Z+1	; 0x01
    436e:	99 87       	std	Y+9, r25	; 0x09
    4370:	88 87       	std	Y+8, r24	; 0x08
    4372:	8a 81       	ldd	r24, Y+2	; 0x02
    4374:	9b 81       	ldd	r25, Y+3	; 0x03
    4376:	28 85       	ldd	r18, Y+8	; 0x08
    4378:	39 85       	ldd	r19, Y+9	; 0x09
    437a:	fc 01       	movw	r30, r24
    437c:	37 83       	std	Z+7, r19	; 0x07
    437e:	26 83       	std	Z+6, r18	; 0x06
    4380:	88 85       	ldd	r24, Y+8	; 0x08
    4382:	99 85       	ldd	r25, Y+9	; 0x09
    4384:	fc 01       	movw	r30, r24
    4386:	26 81       	ldd	r18, Z+6	; 0x06
    4388:	37 81       	ldd	r19, Z+7	; 0x07
    438a:	8a 81       	ldd	r24, Y+2	; 0x02
    438c:	9b 81       	ldd	r25, Y+3	; 0x03
    438e:	fc 01       	movw	r30, r24
    4390:	31 87       	std	Z+9, r19	; 0x09
    4392:	20 87       	std	Z+8, r18	; 0x08
    4394:	88 85       	ldd	r24, Y+8	; 0x08
    4396:	99 85       	ldd	r25, Y+9	; 0x09
    4398:	fc 01       	movw	r30, r24
    439a:	86 81       	ldd	r24, Z+6	; 0x06
    439c:	97 81       	ldd	r25, Z+7	; 0x07
    439e:	2a 81       	ldd	r18, Y+2	; 0x02
    43a0:	3b 81       	ldd	r19, Y+3	; 0x03
    43a2:	2e 5f       	subi	r18, 0xFE	; 254
    43a4:	3f 4f       	sbci	r19, 0xFF	; 255
    43a6:	fc 01       	movw	r30, r24
    43a8:	35 83       	std	Z+5, r19	; 0x05
    43aa:	24 83       	std	Z+4, r18	; 0x04
    43ac:	8a 81       	ldd	r24, Y+2	; 0x02
    43ae:	9b 81       	ldd	r25, Y+3	; 0x03
    43b0:	9c 01       	movw	r18, r24
    43b2:	2e 5f       	subi	r18, 0xFE	; 254
    43b4:	3f 4f       	sbci	r19, 0xFF	; 255
    43b6:	88 85       	ldd	r24, Y+8	; 0x08
    43b8:	99 85       	ldd	r25, Y+9	; 0x09
    43ba:	fc 01       	movw	r30, r24
    43bc:	37 83       	std	Z+7, r19	; 0x07
    43be:	26 83       	std	Z+6, r18	; 0x06
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	fc 01       	movw	r30, r24
    43c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    43c8:	28 2f       	mov	r18, r24
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	4b e0       	ldi	r20, 0x0B	; 11
    43ce:	42 9f       	mul	r20, r18
    43d0:	c0 01       	movw	r24, r0
    43d2:	43 9f       	mul	r20, r19
    43d4:	90 0d       	add	r25, r0
    43d6:	11 24       	eor	r1, r1
    43d8:	9c 01       	movw	r18, r24
    43da:	24 56       	subi	r18, 0x64	; 100
    43dc:	3a 4e       	sbci	r19, 0xEA	; 234
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	9b 81       	ldd	r25, Y+3	; 0x03
    43e2:	fc 01       	movw	r30, r24
    43e4:	35 87       	std	Z+13, r19	; 0x0d
    43e6:	24 87       	std	Z+12, r18	; 0x0c
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	9b 81       	ldd	r25, Y+3	; 0x03
    43ec:	fc 01       	movw	r30, r24
    43ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    43f0:	88 2f       	mov	r24, r24
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	4b e0       	ldi	r20, 0x0B	; 11
    43f6:	48 9f       	mul	r20, r24
    43f8:	90 01       	movw	r18, r0
    43fa:	49 9f       	mul	r20, r25
    43fc:	30 0d       	add	r19, r0
    43fe:	11 24       	eor	r1, r1
    4400:	24 56       	subi	r18, 0x64	; 100
    4402:	3a 4e       	sbci	r19, 0xEA	; 234
    4404:	f9 01       	movw	r30, r18
    4406:	20 81       	ld	r18, Z
    4408:	41 e0       	ldi	r20, 0x01	; 1
    440a:	42 0f       	add	r20, r18
    440c:	5b e0       	ldi	r21, 0x0B	; 11
    440e:	58 9f       	mul	r21, r24
    4410:	90 01       	movw	r18, r0
    4412:	59 9f       	mul	r21, r25
    4414:	30 0d       	add	r19, r0
    4416:	11 24       	eor	r1, r1
    4418:	c9 01       	movw	r24, r18
    441a:	84 56       	subi	r24, 0x64	; 100
    441c:	9a 4e       	sbci	r25, 0xEA	; 234
    441e:	fc 01       	movw	r30, r24
    4420:	40 83       	st	Z, r20
    4422:	39 c0       	rjmp	.+114    	; 0x4496 <xTaskRemoveFromEventList+0x2b0>
    4424:	80 91 25 16 	lds	r24, 0x1625	; 0x801625 <xPendingReadyList+0x1>
    4428:	90 91 26 16 	lds	r25, 0x1626	; 0x801626 <xPendingReadyList+0x2>
    442c:	9b 87       	std	Y+11, r25	; 0x0b
    442e:	8a 87       	std	Y+10, r24	; 0x0a
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	9b 81       	ldd	r25, Y+3	; 0x03
    4434:	2a 85       	ldd	r18, Y+10	; 0x0a
    4436:	3b 85       	ldd	r19, Y+11	; 0x0b
    4438:	fc 01       	movw	r30, r24
    443a:	33 8b       	std	Z+19, r19	; 0x13
    443c:	22 8b       	std	Z+18, r18	; 0x12
    443e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4440:	9b 85       	ldd	r25, Y+11	; 0x0b
    4442:	fc 01       	movw	r30, r24
    4444:	26 81       	ldd	r18, Z+6	; 0x06
    4446:	37 81       	ldd	r19, Z+7	; 0x07
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	9b 81       	ldd	r25, Y+3	; 0x03
    444c:	fc 01       	movw	r30, r24
    444e:	35 8b       	std	Z+21, r19	; 0x15
    4450:	24 8b       	std	Z+20, r18	; 0x14
    4452:	8a 85       	ldd	r24, Y+10	; 0x0a
    4454:	9b 85       	ldd	r25, Y+11	; 0x0b
    4456:	fc 01       	movw	r30, r24
    4458:	86 81       	ldd	r24, Z+6	; 0x06
    445a:	97 81       	ldd	r25, Z+7	; 0x07
    445c:	2a 81       	ldd	r18, Y+2	; 0x02
    445e:	3b 81       	ldd	r19, Y+3	; 0x03
    4460:	22 5f       	subi	r18, 0xF2	; 242
    4462:	3f 4f       	sbci	r19, 0xFF	; 255
    4464:	fc 01       	movw	r30, r24
    4466:	35 83       	std	Z+5, r19	; 0x05
    4468:	24 83       	std	Z+4, r18	; 0x04
    446a:	8a 81       	ldd	r24, Y+2	; 0x02
    446c:	9b 81       	ldd	r25, Y+3	; 0x03
    446e:	9c 01       	movw	r18, r24
    4470:	22 5f       	subi	r18, 0xF2	; 242
    4472:	3f 4f       	sbci	r19, 0xFF	; 255
    4474:	8a 85       	ldd	r24, Y+10	; 0x0a
    4476:	9b 85       	ldd	r25, Y+11	; 0x0b
    4478:	fc 01       	movw	r30, r24
    447a:	37 83       	std	Z+7, r19	; 0x07
    447c:	26 83       	std	Z+6, r18	; 0x06
    447e:	8a 81       	ldd	r24, Y+2	; 0x02
    4480:	9b 81       	ldd	r25, Y+3	; 0x03
    4482:	24 e2       	ldi	r18, 0x24	; 36
    4484:	36 e1       	ldi	r19, 0x16	; 22
    4486:	fc 01       	movw	r30, r24
    4488:	31 8f       	std	Z+25, r19	; 0x19
    448a:	20 8f       	std	Z+24, r18	; 0x18
    448c:	80 91 24 16 	lds	r24, 0x1624	; 0x801624 <xPendingReadyList>
    4490:	8f 5f       	subi	r24, 0xFF	; 255
    4492:	80 93 24 16 	sts	0x1624, r24	; 0x801624 <xPendingReadyList>
    4496:	8a 81       	ldd	r24, Y+2	; 0x02
    4498:	9b 81       	ldd	r25, Y+3	; 0x03
    449a:	fc 01       	movw	r30, r24
    449c:	22 8d       	ldd	r18, Z+26	; 0x1a
    449e:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    44a2:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    44a6:	fc 01       	movw	r30, r24
    44a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    44aa:	82 17       	cp	r24, r18
    44ac:	30 f4       	brcc	.+12     	; 0x44ba <xTaskRemoveFromEventList+0x2d4>
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	89 83       	std	Y+1, r24	; 0x01
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <xTaskRemoveFromEventList+0x2d6>
    44ba:	19 82       	std	Y+1, r1	; 0x01
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	2d 96       	adiw	r28, 0x0d	; 13
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	df 91       	pop	r29
    44cc:	cf 91       	pop	r28
    44ce:	08 95       	ret

000044d0 <vTaskRemoveFromUnorderedEventList>:
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	2e 97       	sbiw	r28, 0x0e	; 14
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	9a 87       	std	Y+10, r25	; 0x0a
    44e6:	89 87       	std	Y+9, r24	; 0x09
    44e8:	4b 87       	std	Y+11, r20	; 0x0b
    44ea:	5c 87       	std	Y+12, r21	; 0x0c
    44ec:	6d 87       	std	Y+13, r22	; 0x0d
    44ee:	7e 87       	std	Y+14, r23	; 0x0e
    44f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    44f4:	ad 85       	ldd	r26, Y+13	; 0x0d
    44f6:	be 85       	ldd	r27, Y+14	; 0x0e
    44f8:	b0 68       	ori	r27, 0x80	; 128
    44fa:	29 85       	ldd	r18, Y+9	; 0x09
    44fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    44fe:	f9 01       	movw	r30, r18
    4500:	80 83       	st	Z, r24
    4502:	91 83       	std	Z+1, r25	; 0x01
    4504:	a2 83       	std	Z+2, r26	; 0x02
    4506:	b3 83       	std	Z+3, r27	; 0x03
    4508:	89 85       	ldd	r24, Y+9	; 0x09
    450a:	9a 85       	ldd	r25, Y+10	; 0x0a
    450c:	fc 01       	movw	r30, r24
    450e:	80 85       	ldd	r24, Z+8	; 0x08
    4510:	91 85       	ldd	r25, Z+9	; 0x09
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	89 83       	std	Y+1, r24	; 0x01
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	fc 01       	movw	r30, r24
    451c:	82 85       	ldd	r24, Z+10	; 0x0a
    451e:	93 85       	ldd	r25, Z+11	; 0x0b
    4520:	9c 83       	std	Y+4, r25	; 0x04
    4522:	8b 83       	std	Y+3, r24	; 0x03
    4524:	89 85       	ldd	r24, Y+9	; 0x09
    4526:	9a 85       	ldd	r25, Y+10	; 0x0a
    4528:	fc 01       	movw	r30, r24
    452a:	84 81       	ldd	r24, Z+4	; 0x04
    452c:	95 81       	ldd	r25, Z+5	; 0x05
    452e:	29 85       	ldd	r18, Y+9	; 0x09
    4530:	3a 85       	ldd	r19, Y+10	; 0x0a
    4532:	f9 01       	movw	r30, r18
    4534:	26 81       	ldd	r18, Z+6	; 0x06
    4536:	37 81       	ldd	r19, Z+7	; 0x07
    4538:	fc 01       	movw	r30, r24
    453a:	37 83       	std	Z+7, r19	; 0x07
    453c:	26 83       	std	Z+6, r18	; 0x06
    453e:	89 85       	ldd	r24, Y+9	; 0x09
    4540:	9a 85       	ldd	r25, Y+10	; 0x0a
    4542:	fc 01       	movw	r30, r24
    4544:	86 81       	ldd	r24, Z+6	; 0x06
    4546:	97 81       	ldd	r25, Z+7	; 0x07
    4548:	29 85       	ldd	r18, Y+9	; 0x09
    454a:	3a 85       	ldd	r19, Y+10	; 0x0a
    454c:	f9 01       	movw	r30, r18
    454e:	24 81       	ldd	r18, Z+4	; 0x04
    4550:	35 81       	ldd	r19, Z+5	; 0x05
    4552:	fc 01       	movw	r30, r24
    4554:	35 83       	std	Z+5, r19	; 0x05
    4556:	24 83       	std	Z+4, r18	; 0x04
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	9c 81       	ldd	r25, Y+4	; 0x04
    455c:	fc 01       	movw	r30, r24
    455e:	21 81       	ldd	r18, Z+1	; 0x01
    4560:	32 81       	ldd	r19, Z+2	; 0x02
    4562:	89 85       	ldd	r24, Y+9	; 0x09
    4564:	9a 85       	ldd	r25, Y+10	; 0x0a
    4566:	28 17       	cp	r18, r24
    4568:	39 07       	cpc	r19, r25
    456a:	51 f4       	brne	.+20     	; 0x4580 <vTaskRemoveFromUnorderedEventList+0xb0>
    456c:	89 85       	ldd	r24, Y+9	; 0x09
    456e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4570:	fc 01       	movw	r30, r24
    4572:	26 81       	ldd	r18, Z+6	; 0x06
    4574:	37 81       	ldd	r19, Z+7	; 0x07
    4576:	8b 81       	ldd	r24, Y+3	; 0x03
    4578:	9c 81       	ldd	r25, Y+4	; 0x04
    457a:	fc 01       	movw	r30, r24
    457c:	32 83       	std	Z+2, r19	; 0x02
    457e:	21 83       	std	Z+1, r18	; 0x01
    4580:	89 85       	ldd	r24, Y+9	; 0x09
    4582:	9a 85       	ldd	r25, Y+10	; 0x0a
    4584:	fc 01       	movw	r30, r24
    4586:	13 86       	std	Z+11, r1	; 0x0b
    4588:	12 86       	std	Z+10, r1	; 0x0a
    458a:	8b 81       	ldd	r24, Y+3	; 0x03
    458c:	9c 81       	ldd	r25, Y+4	; 0x04
    458e:	fc 01       	movw	r30, r24
    4590:	80 81       	ld	r24, Z
    4592:	2f ef       	ldi	r18, 0xFF	; 255
    4594:	28 0f       	add	r18, r24
    4596:	8b 81       	ldd	r24, Y+3	; 0x03
    4598:	9c 81       	ldd	r25, Y+4	; 0x04
    459a:	fc 01       	movw	r30, r24
    459c:	20 83       	st	Z, r18
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	9a 81       	ldd	r25, Y+2	; 0x02
    45a2:	fc 01       	movw	r30, r24
    45a4:	84 85       	ldd	r24, Z+12	; 0x0c
    45a6:	95 85       	ldd	r25, Z+13	; 0x0d
    45a8:	9e 83       	std	Y+6, r25	; 0x06
    45aa:	8d 83       	std	Y+5, r24	; 0x05
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
    45ae:	9a 81       	ldd	r25, Y+2	; 0x02
    45b0:	fc 01       	movw	r30, r24
    45b2:	86 81       	ldd	r24, Z+6	; 0x06
    45b4:	97 81       	ldd	r25, Z+7	; 0x07
    45b6:	29 81       	ldd	r18, Y+1	; 0x01
    45b8:	3a 81       	ldd	r19, Y+2	; 0x02
    45ba:	f9 01       	movw	r30, r18
    45bc:	20 85       	ldd	r18, Z+8	; 0x08
    45be:	31 85       	ldd	r19, Z+9	; 0x09
    45c0:	fc 01       	movw	r30, r24
    45c2:	37 83       	std	Z+7, r19	; 0x07
    45c4:	26 83       	std	Z+6, r18	; 0x06
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	9a 81       	ldd	r25, Y+2	; 0x02
    45ca:	fc 01       	movw	r30, r24
    45cc:	80 85       	ldd	r24, Z+8	; 0x08
    45ce:	91 85       	ldd	r25, Z+9	; 0x09
    45d0:	29 81       	ldd	r18, Y+1	; 0x01
    45d2:	3a 81       	ldd	r19, Y+2	; 0x02
    45d4:	f9 01       	movw	r30, r18
    45d6:	26 81       	ldd	r18, Z+6	; 0x06
    45d8:	37 81       	ldd	r19, Z+7	; 0x07
    45da:	fc 01       	movw	r30, r24
    45dc:	35 83       	std	Z+5, r19	; 0x05
    45de:	24 83       	std	Z+4, r18	; 0x04
    45e0:	8d 81       	ldd	r24, Y+5	; 0x05
    45e2:	9e 81       	ldd	r25, Y+6	; 0x06
    45e4:	fc 01       	movw	r30, r24
    45e6:	21 81       	ldd	r18, Z+1	; 0x01
    45e8:	32 81       	ldd	r19, Z+2	; 0x02
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	9a 81       	ldd	r25, Y+2	; 0x02
    45ee:	02 96       	adiw	r24, 0x02	; 2
    45f0:	28 17       	cp	r18, r24
    45f2:	39 07       	cpc	r19, r25
    45f4:	51 f4       	brne	.+20     	; 0x460a <vTaskRemoveFromUnorderedEventList+0x13a>
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	fc 01       	movw	r30, r24
    45fc:	20 85       	ldd	r18, Z+8	; 0x08
    45fe:	31 85       	ldd	r19, Z+9	; 0x09
    4600:	8d 81       	ldd	r24, Y+5	; 0x05
    4602:	9e 81       	ldd	r25, Y+6	; 0x06
    4604:	fc 01       	movw	r30, r24
    4606:	32 83       	std	Z+2, r19	; 0x02
    4608:	21 83       	std	Z+1, r18	; 0x01
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	fc 01       	movw	r30, r24
    4610:	15 86       	std	Z+13, r1	; 0x0d
    4612:	14 86       	std	Z+12, r1	; 0x0c
    4614:	8d 81       	ldd	r24, Y+5	; 0x05
    4616:	9e 81       	ldd	r25, Y+6	; 0x06
    4618:	fc 01       	movw	r30, r24
    461a:	80 81       	ld	r24, Z
    461c:	2f ef       	ldi	r18, 0xFF	; 255
    461e:	28 0f       	add	r18, r24
    4620:	8d 81       	ldd	r24, Y+5	; 0x05
    4622:	9e 81       	ldd	r25, Y+6	; 0x06
    4624:	fc 01       	movw	r30, r24
    4626:	20 83       	st	Z, r18
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	fc 01       	movw	r30, r24
    462e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4630:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    4634:	89 17       	cp	r24, r25
    4636:	30 f4       	brcc	.+12     	; 0x4644 <vTaskRemoveFromUnorderedEventList+0x174>
    4638:	89 81       	ldd	r24, Y+1	; 0x01
    463a:	9a 81       	ldd	r25, Y+2	; 0x02
    463c:	fc 01       	movw	r30, r24
    463e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4640:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    4644:	89 81       	ldd	r24, Y+1	; 0x01
    4646:	9a 81       	ldd	r25, Y+2	; 0x02
    4648:	fc 01       	movw	r30, r24
    464a:	82 8d       	ldd	r24, Z+26	; 0x1a
    464c:	28 2f       	mov	r18, r24
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	4b e0       	ldi	r20, 0x0B	; 11
    4652:	42 9f       	mul	r20, r18
    4654:	c0 01       	movw	r24, r0
    4656:	43 9f       	mul	r20, r19
    4658:	90 0d       	add	r25, r0
    465a:	11 24       	eor	r1, r1
    465c:	83 56       	subi	r24, 0x63	; 99
    465e:	9a 4e       	sbci	r25, 0xEA	; 234
    4660:	fc 01       	movw	r30, r24
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	98 87       	std	Y+8, r25	; 0x08
    4668:	8f 83       	std	Y+7, r24	; 0x07
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	9a 81       	ldd	r25, Y+2	; 0x02
    466e:	2f 81       	ldd	r18, Y+7	; 0x07
    4670:	38 85       	ldd	r19, Y+8	; 0x08
    4672:	fc 01       	movw	r30, r24
    4674:	37 83       	std	Z+7, r19	; 0x07
    4676:	26 83       	std	Z+6, r18	; 0x06
    4678:	8f 81       	ldd	r24, Y+7	; 0x07
    467a:	98 85       	ldd	r25, Y+8	; 0x08
    467c:	fc 01       	movw	r30, r24
    467e:	26 81       	ldd	r18, Z+6	; 0x06
    4680:	37 81       	ldd	r19, Z+7	; 0x07
    4682:	89 81       	ldd	r24, Y+1	; 0x01
    4684:	9a 81       	ldd	r25, Y+2	; 0x02
    4686:	fc 01       	movw	r30, r24
    4688:	31 87       	std	Z+9, r19	; 0x09
    468a:	20 87       	std	Z+8, r18	; 0x08
    468c:	8f 81       	ldd	r24, Y+7	; 0x07
    468e:	98 85       	ldd	r25, Y+8	; 0x08
    4690:	fc 01       	movw	r30, r24
    4692:	86 81       	ldd	r24, Z+6	; 0x06
    4694:	97 81       	ldd	r25, Z+7	; 0x07
    4696:	29 81       	ldd	r18, Y+1	; 0x01
    4698:	3a 81       	ldd	r19, Y+2	; 0x02
    469a:	2e 5f       	subi	r18, 0xFE	; 254
    469c:	3f 4f       	sbci	r19, 0xFF	; 255
    469e:	fc 01       	movw	r30, r24
    46a0:	35 83       	std	Z+5, r19	; 0x05
    46a2:	24 83       	std	Z+4, r18	; 0x04
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	9c 01       	movw	r18, r24
    46aa:	2e 5f       	subi	r18, 0xFE	; 254
    46ac:	3f 4f       	sbci	r19, 0xFF	; 255
    46ae:	8f 81       	ldd	r24, Y+7	; 0x07
    46b0:	98 85       	ldd	r25, Y+8	; 0x08
    46b2:	fc 01       	movw	r30, r24
    46b4:	37 83       	std	Z+7, r19	; 0x07
    46b6:	26 83       	std	Z+6, r18	; 0x06
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	9a 81       	ldd	r25, Y+2	; 0x02
    46bc:	fc 01       	movw	r30, r24
    46be:	82 8d       	ldd	r24, Z+26	; 0x1a
    46c0:	28 2f       	mov	r18, r24
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	4b e0       	ldi	r20, 0x0B	; 11
    46c6:	42 9f       	mul	r20, r18
    46c8:	c0 01       	movw	r24, r0
    46ca:	43 9f       	mul	r20, r19
    46cc:	90 0d       	add	r25, r0
    46ce:	11 24       	eor	r1, r1
    46d0:	9c 01       	movw	r18, r24
    46d2:	24 56       	subi	r18, 0x64	; 100
    46d4:	3a 4e       	sbci	r19, 0xEA	; 234
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	9a 81       	ldd	r25, Y+2	; 0x02
    46da:	fc 01       	movw	r30, r24
    46dc:	35 87       	std	Z+13, r19	; 0x0d
    46de:	24 87       	std	Z+12, r18	; 0x0c
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	fc 01       	movw	r30, r24
    46e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    46e8:	88 2f       	mov	r24, r24
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	4b e0       	ldi	r20, 0x0B	; 11
    46ee:	48 9f       	mul	r20, r24
    46f0:	90 01       	movw	r18, r0
    46f2:	49 9f       	mul	r20, r25
    46f4:	30 0d       	add	r19, r0
    46f6:	11 24       	eor	r1, r1
    46f8:	24 56       	subi	r18, 0x64	; 100
    46fa:	3a 4e       	sbci	r19, 0xEA	; 234
    46fc:	f9 01       	movw	r30, r18
    46fe:	20 81       	ld	r18, Z
    4700:	41 e0       	ldi	r20, 0x01	; 1
    4702:	42 0f       	add	r20, r18
    4704:	5b e0       	ldi	r21, 0x0B	; 11
    4706:	58 9f       	mul	r21, r24
    4708:	90 01       	movw	r18, r0
    470a:	59 9f       	mul	r21, r25
    470c:	30 0d       	add	r19, r0
    470e:	11 24       	eor	r1, r1
    4710:	c9 01       	movw	r24, r18
    4712:	84 56       	subi	r24, 0x64	; 100
    4714:	9a 4e       	sbci	r25, 0xEA	; 234
    4716:	fc 01       	movw	r30, r24
    4718:	40 83       	st	Z, r20
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	9a 81       	ldd	r25, Y+2	; 0x02
    471e:	fc 01       	movw	r30, r24
    4720:	22 8d       	ldd	r18, Z+26	; 0x1a
    4722:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4726:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    472a:	fc 01       	movw	r30, r24
    472c:	82 8d       	ldd	r24, Z+26	; 0x1a
    472e:	82 17       	cp	r24, r18
    4730:	18 f4       	brcc	.+6      	; 0x4738 <vTaskRemoveFromUnorderedEventList+0x268>
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    4738:	00 00       	nop
    473a:	2e 96       	adiw	r28, 0x0e	; 14
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	f8 94       	cli
    4740:	de bf       	out	0x3e, r29	; 62
    4742:	0f be       	out	0x3f, r0	; 63
    4744:	cd bf       	out	0x3d, r28	; 61
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <vTaskSetTimeOutState>:
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	1f 92       	push	r1
    4752:	1f 92       	push	r1
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	9a 83       	std	Y+2, r25	; 0x02
    475a:	89 83       	std	Y+1, r24	; 0x01
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	0f 92       	push	r0
    4762:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <xNumOfOverflows>
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	9a 81       	ldd	r25, Y+2	; 0x02
    476a:	fc 01       	movw	r30, r24
    476c:	20 83       	st	Z, r18
    476e:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    4772:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    4776:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    477a:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    477e:	29 81       	ldd	r18, Y+1	; 0x01
    4780:	3a 81       	ldd	r19, Y+2	; 0x02
    4782:	f9 01       	movw	r30, r18
    4784:	81 83       	std	Z+1, r24	; 0x01
    4786:	92 83       	std	Z+2, r25	; 0x02
    4788:	a3 83       	std	Z+3, r26	; 0x03
    478a:	b4 83       	std	Z+4, r27	; 0x04
    478c:	0f 90       	pop	r0
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	00 00       	nop
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	08 95       	ret

0000479c <vTaskInternalSetTimeOutState>:
    479c:	cf 93       	push	r28
    479e:	df 93       	push	r29
    47a0:	1f 92       	push	r1
    47a2:	1f 92       	push	r1
    47a4:	cd b7       	in	r28, 0x3d	; 61
    47a6:	de b7       	in	r29, 0x3e	; 62
    47a8:	9a 83       	std	Y+2, r25	; 0x02
    47aa:	89 83       	std	Y+1, r24	; 0x01
    47ac:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <xNumOfOverflows>
    47b0:	89 81       	ldd	r24, Y+1	; 0x01
    47b2:	9a 81       	ldd	r25, Y+2	; 0x02
    47b4:	fc 01       	movw	r30, r24
    47b6:	20 83       	st	Z, r18
    47b8:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    47bc:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    47c0:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    47c4:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    47c8:	29 81       	ldd	r18, Y+1	; 0x01
    47ca:	3a 81       	ldd	r19, Y+2	; 0x02
    47cc:	f9 01       	movw	r30, r18
    47ce:	81 83       	std	Z+1, r24	; 0x01
    47d0:	92 83       	std	Z+2, r25	; 0x02
    47d2:	a3 83       	std	Z+3, r26	; 0x03
    47d4:	b4 83       	std	Z+4, r27	; 0x04
    47d6:	00 00       	nop
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	df 91       	pop	r29
    47de:	cf 91       	pop	r28
    47e0:	08 95       	ret

000047e2 <xTaskCheckForTimeOut>:
    47e2:	ef 92       	push	r14
    47e4:	ff 92       	push	r15
    47e6:	0f 93       	push	r16
    47e8:	1f 93       	push	r17
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
    47f2:	2d 97       	sbiw	r28, 0x0d	; 13
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	9b 87       	std	Y+11, r25	; 0x0b
    4800:	8a 87       	std	Y+10, r24	; 0x0a
    4802:	7d 87       	std	Y+13, r23	; 0x0d
    4804:	6c 87       	std	Y+12, r22	; 0x0c
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	0f 92       	push	r0
    480c:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    4810:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    4814:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    4818:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    481c:	8a 83       	std	Y+2, r24	; 0x02
    481e:	9b 83       	std	Y+3, r25	; 0x03
    4820:	ac 83       	std	Y+4, r26	; 0x04
    4822:	bd 83       	std	Y+5, r27	; 0x05
    4824:	8a 85       	ldd	r24, Y+10	; 0x0a
    4826:	9b 85       	ldd	r25, Y+11	; 0x0b
    4828:	fc 01       	movw	r30, r24
    482a:	81 81       	ldd	r24, Z+1	; 0x01
    482c:	92 81       	ldd	r25, Z+2	; 0x02
    482e:	a3 81       	ldd	r26, Z+3	; 0x03
    4830:	b4 81       	ldd	r27, Z+4	; 0x04
    4832:	2a 81       	ldd	r18, Y+2	; 0x02
    4834:	3b 81       	ldd	r19, Y+3	; 0x03
    4836:	4c 81       	ldd	r20, Y+4	; 0x04
    4838:	5d 81       	ldd	r21, Y+5	; 0x05
    483a:	79 01       	movw	r14, r18
    483c:	8a 01       	movw	r16, r20
    483e:	e8 1a       	sub	r14, r24
    4840:	f9 0a       	sbc	r15, r25
    4842:	0a 0b       	sbc	r16, r26
    4844:	1b 0b       	sbc	r17, r27
    4846:	d8 01       	movw	r26, r16
    4848:	c7 01       	movw	r24, r14
    484a:	8e 83       	std	Y+6, r24	; 0x06
    484c:	9f 83       	std	Y+7, r25	; 0x07
    484e:	a8 87       	std	Y+8, r26	; 0x08
    4850:	b9 87       	std	Y+9, r27	; 0x09
    4852:	8a 85       	ldd	r24, Y+10	; 0x0a
    4854:	9b 85       	ldd	r25, Y+11	; 0x0b
    4856:	fc 01       	movw	r30, r24
    4858:	90 81       	ld	r25, Z
    485a:	80 91 47 16 	lds	r24, 0x1647	; 0x801647 <xNumOfOverflows>
    485e:	98 17       	cp	r25, r24
    4860:	d1 f0       	breq	.+52     	; 0x4896 <xTaskCheckForTimeOut+0xb4>
    4862:	8a 85       	ldd	r24, Y+10	; 0x0a
    4864:	9b 85       	ldd	r25, Y+11	; 0x0b
    4866:	fc 01       	movw	r30, r24
    4868:	21 81       	ldd	r18, Z+1	; 0x01
    486a:	32 81       	ldd	r19, Z+2	; 0x02
    486c:	43 81       	ldd	r20, Z+3	; 0x03
    486e:	54 81       	ldd	r21, Z+4	; 0x04
    4870:	8a 81       	ldd	r24, Y+2	; 0x02
    4872:	9b 81       	ldd	r25, Y+3	; 0x03
    4874:	ac 81       	ldd	r26, Y+4	; 0x04
    4876:	bd 81       	ldd	r27, Y+5	; 0x05
    4878:	82 17       	cp	r24, r18
    487a:	93 07       	cpc	r25, r19
    487c:	a4 07       	cpc	r26, r20
    487e:	b5 07       	cpc	r27, r21
    4880:	50 f0       	brcs	.+20     	; 0x4896 <xTaskCheckForTimeOut+0xb4>
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	89 83       	std	Y+1, r24	; 0x01
    4886:	8c 85       	ldd	r24, Y+12	; 0x0c
    4888:	9d 85       	ldd	r25, Y+13	; 0x0d
    488a:	fc 01       	movw	r30, r24
    488c:	10 82       	st	Z, r1
    488e:	11 82       	std	Z+1, r1	; 0x01
    4890:	12 82       	std	Z+2, r1	; 0x02
    4892:	13 82       	std	Z+3, r1	; 0x03
    4894:	38 c0       	rjmp	.+112    	; 0x4906 <xTaskCheckForTimeOut+0x124>
    4896:	8c 85       	ldd	r24, Y+12	; 0x0c
    4898:	9d 85       	ldd	r25, Y+13	; 0x0d
    489a:	fc 01       	movw	r30, r24
    489c:	20 81       	ld	r18, Z
    489e:	31 81       	ldd	r19, Z+1	; 0x01
    48a0:	42 81       	ldd	r20, Z+2	; 0x02
    48a2:	53 81       	ldd	r21, Z+3	; 0x03
    48a4:	8e 81       	ldd	r24, Y+6	; 0x06
    48a6:	9f 81       	ldd	r25, Y+7	; 0x07
    48a8:	a8 85       	ldd	r26, Y+8	; 0x08
    48aa:	b9 85       	ldd	r27, Y+9	; 0x09
    48ac:	82 17       	cp	r24, r18
    48ae:	93 07       	cpc	r25, r19
    48b0:	a4 07       	cpc	r26, r20
    48b2:	b5 07       	cpc	r27, r21
    48b4:	f8 f4       	brcc	.+62     	; 0x48f4 <xTaskCheckForTimeOut+0x112>
    48b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    48ba:	fc 01       	movw	r30, r24
    48bc:	20 81       	ld	r18, Z
    48be:	31 81       	ldd	r19, Z+1	; 0x01
    48c0:	42 81       	ldd	r20, Z+2	; 0x02
    48c2:	53 81       	ldd	r21, Z+3	; 0x03
    48c4:	8e 81       	ldd	r24, Y+6	; 0x06
    48c6:	9f 81       	ldd	r25, Y+7	; 0x07
    48c8:	a8 85       	ldd	r26, Y+8	; 0x08
    48ca:	b9 85       	ldd	r27, Y+9	; 0x09
    48cc:	79 01       	movw	r14, r18
    48ce:	8a 01       	movw	r16, r20
    48d0:	e8 1a       	sub	r14, r24
    48d2:	f9 0a       	sbc	r15, r25
    48d4:	0a 0b       	sbc	r16, r26
    48d6:	1b 0b       	sbc	r17, r27
    48d8:	d8 01       	movw	r26, r16
    48da:	c7 01       	movw	r24, r14
    48dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    48de:	3d 85       	ldd	r19, Y+13	; 0x0d
    48e0:	f9 01       	movw	r30, r18
    48e2:	80 83       	st	Z, r24
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	a2 83       	std	Z+2, r26	; 0x02
    48e8:	b3 83       	std	Z+3, r27	; 0x03
    48ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    48ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ee:	56 df       	rcall	.-340    	; 0x479c <vTaskInternalSetTimeOutState>
    48f0:	19 82       	std	Y+1, r1	; 0x01
    48f2:	09 c0       	rjmp	.+18     	; 0x4906 <xTaskCheckForTimeOut+0x124>
    48f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    48f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    48f8:	fc 01       	movw	r30, r24
    48fa:	10 82       	st	Z, r1
    48fc:	11 82       	std	Z+1, r1	; 0x01
    48fe:	12 82       	std	Z+2, r1	; 0x02
    4900:	13 82       	std	Z+3, r1	; 0x03
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	89 83       	std	Y+1, r24	; 0x01
    4906:	0f 90       	pop	r0
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	2d 96       	adiw	r28, 0x0d	; 13
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	de bf       	out	0x3e, r29	; 62
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	cd bf       	out	0x3d, r28	; 61
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	1f 91       	pop	r17
    491e:	0f 91       	pop	r16
    4920:	ff 90       	pop	r15
    4922:	ef 90       	pop	r14
    4924:	08 95       	ret

00004926 <vTaskMissedYield>:
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    4934:	00 00       	nop
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	08 95       	ret

0000493c <prvInitialiseTaskLists>:
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
    4940:	1f 92       	push	r1
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	19 82       	std	Y+1, r1	; 0x01
    4948:	10 c0       	rjmp	.+32     	; 0x496a <prvInitialiseTaskLists+0x2e>
    494a:	89 81       	ldd	r24, Y+1	; 0x01
    494c:	28 2f       	mov	r18, r24
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	4b e0       	ldi	r20, 0x0B	; 11
    4952:	42 9f       	mul	r20, r18
    4954:	c0 01       	movw	r24, r0
    4956:	43 9f       	mul	r20, r19
    4958:	90 0d       	add	r25, r0
    495a:	11 24       	eor	r1, r1
    495c:	84 56       	subi	r24, 0x64	; 100
    495e:	9a 4e       	sbci	r25, 0xEA	; 234
    4960:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	8f 5f       	subi	r24, 0xFF	; 255
    4968:	89 83       	std	Y+1, r24	; 0x01
    496a:	89 81       	ldd	r24, Y+1	; 0x01
    496c:	8a 30       	cpi	r24, 0x0A	; 10
    496e:	68 f3       	brcs	.-38     	; 0x494a <prvInitialiseTaskLists+0xe>
    4970:	8a e0       	ldi	r24, 0x0A	; 10
    4972:	96 e1       	ldi	r25, 0x16	; 22
    4974:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    4978:	85 e1       	ldi	r24, 0x15	; 21
    497a:	96 e1       	ldi	r25, 0x16	; 22
    497c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    4980:	84 e2       	ldi	r24, 0x24	; 36
    4982:	96 e1       	ldi	r25, 0x16	; 22
    4984:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    4988:	8f e2       	ldi	r24, 0x2F	; 47
    498a:	96 e1       	ldi	r25, 0x16	; 22
    498c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    4990:	8a e0       	ldi	r24, 0x0A	; 10
    4992:	96 e1       	ldi	r25, 0x16	; 22
    4994:	90 93 21 16 	sts	0x1621, r25	; 0x801621 <pxDelayedTaskList+0x1>
    4998:	80 93 20 16 	sts	0x1620, r24	; 0x801620 <pxDelayedTaskList>
    499c:	85 e1       	ldi	r24, 0x15	; 21
    499e:	96 e1       	ldi	r25, 0x16	; 22
    49a0:	90 93 23 16 	sts	0x1623, r25	; 0x801623 <pxOverflowDelayedTaskList+0x1>
    49a4:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <pxOverflowDelayedTaskList>
    49a8:	00 00       	nop
    49aa:	0f 90       	pop	r0
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	08 95       	ret

000049b2 <prvCheckTasksWaitingTermination>:
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	1f 92       	push	r1
    49b8:	1f 92       	push	r1
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
    49be:	20 c0       	rjmp	.+64     	; 0x4a00 <prvCheckTasksWaitingTermination+0x4e>
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	0f 92       	push	r0
    49c6:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <xTasksWaitingTermination+0x7>
    49ca:	90 91 37 16 	lds	r25, 0x1637	; 0x801637 <xTasksWaitingTermination+0x8>
    49ce:	fc 01       	movw	r30, r24
    49d0:	80 85       	ldd	r24, Z+8	; 0x08
    49d2:	91 85       	ldd	r25, Z+9	; 0x09
    49d4:	9a 83       	std	Y+2, r25	; 0x02
    49d6:	89 83       	std	Y+1, r24	; 0x01
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
    49da:	9a 81       	ldd	r25, Y+2	; 0x02
    49dc:	02 96       	adiw	r24, 0x02	; 2
    49de:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
    49e2:	80 91 3b 16 	lds	r24, 0x163B	; 0x80163b <uxCurrentNumberOfTasks>
    49e6:	81 50       	subi	r24, 0x01	; 1
    49e8:	80 93 3b 16 	sts	0x163B, r24	; 0x80163b <uxCurrentNumberOfTasks>
    49ec:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxDeletedTasksWaitingCleanUp>
    49f0:	81 50       	subi	r24, 0x01	; 1
    49f2:	80 93 3a 16 	sts	0x163A, r24	; 0x80163a <uxDeletedTasksWaitingCleanUp>
    49f6:	0f 90       	pop	r0
    49f8:	0f be       	out	0x3f, r0	; 63
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	9a 81       	ldd	r25, Y+2	; 0x02
    49fe:	0a d0       	rcall	.+20     	; 0x4a14 <prvDeleteTCB>
    4a00:	80 91 3a 16 	lds	r24, 0x163A	; 0x80163a <uxDeletedTasksWaitingCleanUp>
    4a04:	88 23       	and	r24, r24
    4a06:	e1 f6       	brne	.-72     	; 0x49c0 <prvCheckTasksWaitingTermination+0xe>
    4a08:	00 00       	nop
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	df 91       	pop	r29
    4a10:	cf 91       	pop	r28
    4a12:	08 95       	ret

00004a14 <prvDeleteTCB>:
    4a14:	cf 93       	push	r28
    4a16:	df 93       	push	r29
    4a18:	1f 92       	push	r1
    4a1a:	1f 92       	push	r1
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
    4a20:	9a 83       	std	Y+2, r25	; 0x02
    4a22:	89 83       	std	Y+1, r24	; 0x01
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	9a 81       	ldd	r25, Y+2	; 0x02
    4a28:	fc 01       	movw	r30, r24
    4a2a:	83 8d       	ldd	r24, Z+27	; 0x1b
    4a2c:	94 8d       	ldd	r25, Z+28	; 0x1c
    4a2e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <vPortFree>
    4a32:	89 81       	ldd	r24, Y+1	; 0x01
    4a34:	9a 81       	ldd	r25, Y+2	; 0x02
    4a36:	0e 94 f7 08 	call	0x11ee	; 0x11ee <vPortFree>
    4a3a:	00 00       	nop
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	df 91       	pop	r29
    4a42:	cf 91       	pop	r28
    4a44:	08 95       	ret

00004a46 <prvResetNextTaskUnblockTime>:
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    4a4a:	cd b7       	in	r28, 0x3d	; 61
    4a4c:	de b7       	in	r29, 0x3e	; 62
    4a4e:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    4a52:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    4a56:	fc 01       	movw	r30, r24
    4a58:	80 81       	ld	r24, Z
    4a5a:	88 23       	and	r24, r24
    4a5c:	61 f4       	brne	.+24     	; 0x4a76 <prvResetNextTaskUnblockTime+0x30>
    4a5e:	8f ef       	ldi	r24, 0xFF	; 255
    4a60:	9f ef       	ldi	r25, 0xFF	; 255
    4a62:	dc 01       	movw	r26, r24
    4a64:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    4a68:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    4a6c:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    4a70:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>
    4a74:	14 c0       	rjmp	.+40     	; 0x4a9e <prvResetNextTaskUnblockTime+0x58>
    4a76:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    4a7a:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    4a7e:	fc 01       	movw	r30, r24
    4a80:	87 81       	ldd	r24, Z+7	; 0x07
    4a82:	90 85       	ldd	r25, Z+8	; 0x08
    4a84:	fc 01       	movw	r30, r24
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	a2 81       	ldd	r26, Z+2	; 0x02
    4a8c:	b3 81       	ldd	r27, Z+3	; 0x03
    4a8e:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    4a92:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    4a96:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    4a9a:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>
    4a9e:	00 00       	nop
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	08 95       	ret

00004aa6 <xTaskGetCurrentTaskHandle>:
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	1f 92       	push	r1
    4aac:	1f 92       	push	r1
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
    4ab2:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4ab6:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4aba:	9a 83       	std	Y+2, r25	; 0x02
    4abc:	89 83       	std	Y+1, r24	; 0x01
    4abe:	89 81       	ldd	r24, Y+1	; 0x01
    4ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac2:	0f 90       	pop	r0
    4ac4:	0f 90       	pop	r0
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	08 95       	ret

00004acc <xTaskGetSchedulerState>:
    4acc:	cf 93       	push	r28
    4ace:	df 93       	push	r29
    4ad0:	1f 92       	push	r1
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xSchedulerRunning>
    4ada:	88 23       	and	r24, r24
    4adc:	19 f4       	brne	.+6      	; 0x4ae4 <xTaskGetSchedulerState+0x18>
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	89 83       	std	Y+1, r24	; 0x01
    4ae2:	08 c0       	rjmp	.+16     	; 0x4af4 <xTaskGetSchedulerState+0x28>
    4ae4:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    4ae8:	88 23       	and	r24, r24
    4aea:	19 f4       	brne	.+6      	; 0x4af2 <xTaskGetSchedulerState+0x26>
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	89 83       	std	Y+1, r24	; 0x01
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <xTaskGetSchedulerState+0x28>
    4af2:	19 82       	std	Y+1, r1	; 0x01
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	0f 90       	pop	r0
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	08 95       	ret

00004afe <xTaskPriorityDisinherit>:
    4afe:	ef 92       	push	r14
    4b00:	ff 92       	push	r15
    4b02:	0f 93       	push	r16
    4b04:	1f 93       	push	r17
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    4b0e:	27 97       	sbiw	r28, 0x07	; 7
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	f8 94       	cli
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	cd bf       	out	0x3d, r28	; 61
    4b1a:	9f 83       	std	Y+7, r25	; 0x07
    4b1c:	8e 83       	std	Y+6, r24	; 0x06
    4b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b20:	9f 81       	ldd	r25, Y+7	; 0x07
    4b22:	9b 83       	std	Y+3, r25	; 0x03
    4b24:	8a 83       	std	Y+2, r24	; 0x02
    4b26:	19 82       	std	Y+1, r1	; 0x01
    4b28:	8e 81       	ldd	r24, Y+6	; 0x06
    4b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b2c:	89 2b       	or	r24, r25
    4b2e:	09 f4       	brne	.+2      	; 0x4b32 <xTaskPriorityDisinherit+0x34>
    4b30:	bf c0       	rjmp	.+382    	; 0x4cb0 <xTaskPriorityDisinherit+0x1b2>
    4b32:	8a 81       	ldd	r24, Y+2	; 0x02
    4b34:	9b 81       	ldd	r25, Y+3	; 0x03
    4b36:	fc 01       	movw	r30, r24
    4b38:	86 a5       	ldd	r24, Z+46	; 0x2e
    4b3a:	2f ef       	ldi	r18, 0xFF	; 255
    4b3c:	28 0f       	add	r18, r24
    4b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b40:	9b 81       	ldd	r25, Y+3	; 0x03
    4b42:	fc 01       	movw	r30, r24
    4b44:	26 a7       	std	Z+46, r18	; 0x2e
    4b46:	8a 81       	ldd	r24, Y+2	; 0x02
    4b48:	9b 81       	ldd	r25, Y+3	; 0x03
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    4b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b50:	9b 81       	ldd	r25, Y+3	; 0x03
    4b52:	fc 01       	movw	r30, r24
    4b54:	85 a5       	ldd	r24, Z+45	; 0x2d
    4b56:	28 17       	cp	r18, r24
    4b58:	09 f4       	brne	.+2      	; 0x4b5c <xTaskPriorityDisinherit+0x5e>
    4b5a:	aa c0       	rjmp	.+340    	; 0x4cb0 <xTaskPriorityDisinherit+0x1b2>
    4b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b60:	fc 01       	movw	r30, r24
    4b62:	86 a5       	ldd	r24, Z+46	; 0x2e
    4b64:	88 23       	and	r24, r24
    4b66:	09 f0       	breq	.+2      	; 0x4b6a <xTaskPriorityDisinherit+0x6c>
    4b68:	a3 c0       	rjmp	.+326    	; 0x4cb0 <xTaskPriorityDisinherit+0x1b2>
    4b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6e:	02 96       	adiw	r24, 0x02	; 2
    4b70:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
    4b74:	8a 81       	ldd	r24, Y+2	; 0x02
    4b76:	9b 81       	ldd	r25, Y+3	; 0x03
    4b78:	fc 01       	movw	r30, r24
    4b7a:	25 a5       	ldd	r18, Z+45	; 0x2d
    4b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b80:	fc 01       	movw	r30, r24
    4b82:	22 8f       	std	Z+26, r18	; 0x1a
    4b84:	8a 81       	ldd	r24, Y+2	; 0x02
    4b86:	9b 81       	ldd	r25, Y+3	; 0x03
    4b88:	fc 01       	movw	r30, r24
    4b8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b8c:	88 2f       	mov	r24, r24
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	a0 e0       	ldi	r26, 0x00	; 0
    4b92:	b0 e0       	ldi	r27, 0x00	; 0
    4b94:	2a e0       	ldi	r18, 0x0A	; 10
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	40 e0       	ldi	r20, 0x00	; 0
    4b9a:	50 e0       	ldi	r21, 0x00	; 0
    4b9c:	79 01       	movw	r14, r18
    4b9e:	8a 01       	movw	r16, r20
    4ba0:	e8 1a       	sub	r14, r24
    4ba2:	f9 0a       	sbc	r15, r25
    4ba4:	0a 0b       	sbc	r16, r26
    4ba6:	1b 0b       	sbc	r17, r27
    4ba8:	d8 01       	movw	r26, r16
    4baa:	c7 01       	movw	r24, r14
    4bac:	2a 81       	ldd	r18, Y+2	; 0x02
    4bae:	3b 81       	ldd	r19, Y+3	; 0x03
    4bb0:	f9 01       	movw	r30, r18
    4bb2:	86 87       	std	Z+14, r24	; 0x0e
    4bb4:	97 87       	std	Z+15, r25	; 0x0f
    4bb6:	a0 8b       	std	Z+16, r26	; 0x10
    4bb8:	b1 8b       	std	Z+17, r27	; 0x11
    4bba:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    4bc2:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    4bc6:	89 17       	cp	r24, r25
    4bc8:	30 f4       	brcc	.+12     	; 0x4bd6 <xTaskPriorityDisinherit+0xd8>
    4bca:	8a 81       	ldd	r24, Y+2	; 0x02
    4bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bce:	fc 01       	movw	r30, r24
    4bd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4bd2:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    4bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bda:	fc 01       	movw	r30, r24
    4bdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4bde:	28 2f       	mov	r18, r24
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	4b e0       	ldi	r20, 0x0B	; 11
    4be4:	42 9f       	mul	r20, r18
    4be6:	c0 01       	movw	r24, r0
    4be8:	43 9f       	mul	r20, r19
    4bea:	90 0d       	add	r25, r0
    4bec:	11 24       	eor	r1, r1
    4bee:	83 56       	subi	r24, 0x63	; 99
    4bf0:	9a 4e       	sbci	r25, 0xEA	; 234
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	80 81       	ld	r24, Z
    4bf6:	91 81       	ldd	r25, Z+1	; 0x01
    4bf8:	9d 83       	std	Y+5, r25	; 0x05
    4bfa:	8c 83       	std	Y+4, r24	; 0x04
    4bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    4c00:	2c 81       	ldd	r18, Y+4	; 0x04
    4c02:	3d 81       	ldd	r19, Y+5	; 0x05
    4c04:	fc 01       	movw	r30, r24
    4c06:	37 83       	std	Z+7, r19	; 0x07
    4c08:	26 83       	std	Z+6, r18	; 0x06
    4c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c0e:	fc 01       	movw	r30, r24
    4c10:	26 81       	ldd	r18, Z+6	; 0x06
    4c12:	37 81       	ldd	r19, Z+7	; 0x07
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	9b 81       	ldd	r25, Y+3	; 0x03
    4c18:	fc 01       	movw	r30, r24
    4c1a:	31 87       	std	Z+9, r19	; 0x09
    4c1c:	20 87       	std	Z+8, r18	; 0x08
    4c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c20:	9d 81       	ldd	r25, Y+5	; 0x05
    4c22:	fc 01       	movw	r30, r24
    4c24:	86 81       	ldd	r24, Z+6	; 0x06
    4c26:	97 81       	ldd	r25, Z+7	; 0x07
    4c28:	2a 81       	ldd	r18, Y+2	; 0x02
    4c2a:	3b 81       	ldd	r19, Y+3	; 0x03
    4c2c:	2e 5f       	subi	r18, 0xFE	; 254
    4c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c30:	fc 01       	movw	r30, r24
    4c32:	35 83       	std	Z+5, r19	; 0x05
    4c34:	24 83       	std	Z+4, r18	; 0x04
    4c36:	8a 81       	ldd	r24, Y+2	; 0x02
    4c38:	9b 81       	ldd	r25, Y+3	; 0x03
    4c3a:	9c 01       	movw	r18, r24
    4c3c:	2e 5f       	subi	r18, 0xFE	; 254
    4c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c40:	8c 81       	ldd	r24, Y+4	; 0x04
    4c42:	9d 81       	ldd	r25, Y+5	; 0x05
    4c44:	fc 01       	movw	r30, r24
    4c46:	37 83       	std	Z+7, r19	; 0x07
    4c48:	26 83       	std	Z+6, r18	; 0x06
    4c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c4e:	fc 01       	movw	r30, r24
    4c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c52:	28 2f       	mov	r18, r24
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	4b e0       	ldi	r20, 0x0B	; 11
    4c58:	42 9f       	mul	r20, r18
    4c5a:	c0 01       	movw	r24, r0
    4c5c:	43 9f       	mul	r20, r19
    4c5e:	90 0d       	add	r25, r0
    4c60:	11 24       	eor	r1, r1
    4c62:	9c 01       	movw	r18, r24
    4c64:	24 56       	subi	r18, 0x64	; 100
    4c66:	3a 4e       	sbci	r19, 0xEA	; 234
    4c68:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	35 87       	std	Z+13, r19	; 0x0d
    4c70:	24 87       	std	Z+12, r18	; 0x0c
    4c72:	8a 81       	ldd	r24, Y+2	; 0x02
    4c74:	9b 81       	ldd	r25, Y+3	; 0x03
    4c76:	fc 01       	movw	r30, r24
    4c78:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c7a:	88 2f       	mov	r24, r24
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	4b e0       	ldi	r20, 0x0B	; 11
    4c80:	48 9f       	mul	r20, r24
    4c82:	90 01       	movw	r18, r0
    4c84:	49 9f       	mul	r20, r25
    4c86:	30 0d       	add	r19, r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	24 56       	subi	r18, 0x64	; 100
    4c8c:	3a 4e       	sbci	r19, 0xEA	; 234
    4c8e:	f9 01       	movw	r30, r18
    4c90:	20 81       	ld	r18, Z
    4c92:	41 e0       	ldi	r20, 0x01	; 1
    4c94:	42 0f       	add	r20, r18
    4c96:	5b e0       	ldi	r21, 0x0B	; 11
    4c98:	58 9f       	mul	r21, r24
    4c9a:	90 01       	movw	r18, r0
    4c9c:	59 9f       	mul	r21, r25
    4c9e:	30 0d       	add	r19, r0
    4ca0:	11 24       	eor	r1, r1
    4ca2:	c9 01       	movw	r24, r18
    4ca4:	84 56       	subi	r24, 0x64	; 100
    4ca6:	9a 4e       	sbci	r25, 0xEA	; 234
    4ca8:	fc 01       	movw	r30, r24
    4caa:	40 83       	st	Z, r20
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	89 83       	std	Y+1, r24	; 0x01
    4cb0:	89 81       	ldd	r24, Y+1	; 0x01
    4cb2:	27 96       	adiw	r28, 0x07	; 7
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	1f 91       	pop	r17
    4cc4:	0f 91       	pop	r16
    4cc6:	ff 90       	pop	r15
    4cc8:	ef 90       	pop	r14
    4cca:	08 95       	ret

00004ccc <uxTaskResetEventItemValue>:
    4ccc:	ef 92       	push	r14
    4cce:	ff 92       	push	r15
    4cd0:	0f 93       	push	r16
    4cd2:	1f 93       	push	r17
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	00 d0       	rcall	.+0      	; 0x4cda <uxTaskResetEventItemValue+0xe>
    4cda:	1f 92       	push	r1
    4cdc:	cd b7       	in	r28, 0x3d	; 61
    4cde:	de b7       	in	r29, 0x3e	; 62
    4ce0:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4ce4:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4ce8:	fc 01       	movw	r30, r24
    4cea:	86 85       	ldd	r24, Z+14	; 0x0e
    4cec:	97 85       	ldd	r25, Z+15	; 0x0f
    4cee:	a0 89       	ldd	r26, Z+16	; 0x10
    4cf0:	b1 89       	ldd	r27, Z+17	; 0x11
    4cf2:	89 83       	std	Y+1, r24	; 0x01
    4cf4:	9a 83       	std	Y+2, r25	; 0x02
    4cf6:	ab 83       	std	Y+3, r26	; 0x03
    4cf8:	bc 83       	std	Y+4, r27	; 0x04
    4cfa:	60 91 9a 15 	lds	r22, 0x159A	; 0x80159a <pxCurrentTCB>
    4cfe:	70 91 9b 15 	lds	r23, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4d02:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    4d06:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d0e:	88 2f       	mov	r24, r24
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	a0 e0       	ldi	r26, 0x00	; 0
    4d14:	b0 e0       	ldi	r27, 0x00	; 0
    4d16:	2a e0       	ldi	r18, 0x0A	; 10
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 e0       	ldi	r20, 0x00	; 0
    4d1c:	50 e0       	ldi	r21, 0x00	; 0
    4d1e:	79 01       	movw	r14, r18
    4d20:	8a 01       	movw	r16, r20
    4d22:	e8 1a       	sub	r14, r24
    4d24:	f9 0a       	sbc	r15, r25
    4d26:	0a 0b       	sbc	r16, r26
    4d28:	1b 0b       	sbc	r17, r27
    4d2a:	d8 01       	movw	r26, r16
    4d2c:	c7 01       	movw	r24, r14
    4d2e:	fb 01       	movw	r30, r22
    4d30:	86 87       	std	Z+14, r24	; 0x0e
    4d32:	97 87       	std	Z+15, r25	; 0x0f
    4d34:	a0 8b       	std	Z+16, r26	; 0x10
    4d36:	b1 8b       	std	Z+17, r27	; 0x11
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    4d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    4d40:	bc 01       	movw	r22, r24
    4d42:	cd 01       	movw	r24, r26
    4d44:	0f 90       	pop	r0
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	08 95       	ret

00004d5a <xTaskGenericNotifyWait>:
    4d5a:	af 92       	push	r10
    4d5c:	bf 92       	push	r11
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	60 97       	sbiw	r28, 0x10	; 16
    4d74:	0f b6       	in	r0, 0x3f	; 63
    4d76:	f8 94       	cli
    4d78:	de bf       	out	0x3e, r29	; 62
    4d7a:	0f be       	out	0x3f, r0	; 63
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	8a 83       	std	Y+2, r24	; 0x02
    4d80:	4b 83       	std	Y+3, r20	; 0x03
    4d82:	5c 83       	std	Y+4, r21	; 0x04
    4d84:	6d 83       	std	Y+5, r22	; 0x05
    4d86:	7e 83       	std	Y+6, r23	; 0x06
    4d88:	0f 83       	std	Y+7, r16	; 0x07
    4d8a:	18 87       	std	Y+8, r17	; 0x08
    4d8c:	29 87       	std	Y+9, r18	; 0x09
    4d8e:	3a 87       	std	Y+10, r19	; 0x0a
    4d90:	fc 86       	std	Y+12, r15	; 0x0c
    4d92:	eb 86       	std	Y+11, r14	; 0x0b
    4d94:	ad 86       	std	Y+13, r10	; 0x0d
    4d96:	be 86       	std	Y+14, r11	; 0x0e
    4d98:	cf 86       	std	Y+15, r12	; 0x0f
    4d9a:	d8 8a       	std	Y+16, r13	; 0x10
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	0f 92       	push	r0
    4da2:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4da6:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4daa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dac:	88 2f       	mov	r24, r24
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	82 0f       	add	r24, r18
    4db2:	93 1f       	adc	r25, r19
    4db4:	c3 96       	adiw	r24, 0x33	; 51
    4db6:	dc 01       	movw	r26, r24
    4db8:	8c 91       	ld	r24, X
    4dba:	82 30       	cpi	r24, 0x02	; 2
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <xTaskGenericNotifyWait+0x66>
    4dbe:	4f c0       	rjmp	.+158    	; 0x4e5e <xTaskGenericNotifyWait+0x104>
    4dc0:	60 91 9a 15 	lds	r22, 0x159A	; 0x80159a <pxCurrentTCB>
    4dc4:	70 91 9b 15 	lds	r23, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dca:	e8 2f       	mov	r30, r24
    4dcc:	f0 e0       	ldi	r31, 0x00	; 0
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	88 2f       	mov	r24, r24
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	88 0f       	add	r24, r24
    4dd6:	99 1f       	adc	r25, r25
    4dd8:	88 0f       	add	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	86 0f       	add	r24, r22
    4dde:	97 1f       	adc	r25, r23
    4de0:	8f 96       	adiw	r24, 0x2f	; 47
    4de2:	dc 01       	movw	r26, r24
    4de4:	2d 91       	ld	r18, X+
    4de6:	3d 91       	ld	r19, X+
    4de8:	4d 91       	ld	r20, X+
    4dea:	5c 91       	ld	r21, X
    4dec:	8b 81       	ldd	r24, Y+3	; 0x03
    4dee:	9c 81       	ldd	r25, Y+4	; 0x04
    4df0:	ad 81       	ldd	r26, Y+5	; 0x05
    4df2:	be 81       	ldd	r27, Y+6	; 0x06
    4df4:	80 95       	com	r24
    4df6:	90 95       	com	r25
    4df8:	a0 95       	com	r26
    4dfa:	b0 95       	com	r27
    4dfc:	82 23       	and	r24, r18
    4dfe:	93 23       	and	r25, r19
    4e00:	a4 23       	and	r26, r20
    4e02:	b5 23       	and	r27, r21
    4e04:	9f 01       	movw	r18, r30
    4e06:	22 0f       	add	r18, r18
    4e08:	33 1f       	adc	r19, r19
    4e0a:	22 0f       	add	r18, r18
    4e0c:	33 1f       	adc	r19, r19
    4e0e:	26 0f       	add	r18, r22
    4e10:	37 1f       	adc	r19, r23
    4e12:	21 5d       	subi	r18, 0xD1	; 209
    4e14:	3f 4f       	sbci	r19, 0xFF	; 255
    4e16:	f9 01       	movw	r30, r18
    4e18:	80 83       	st	Z, r24
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	a2 83       	std	Z+2, r26	; 0x02
    4e1e:	b3 83       	std	Z+3, r27	; 0x03
    4e20:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4e24:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4e28:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2a:	88 2f       	mov	r24, r24
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	82 0f       	add	r24, r18
    4e30:	93 1f       	adc	r25, r19
    4e32:	c3 96       	adiw	r24, 0x33	; 51
    4e34:	21 e0       	ldi	r18, 0x01	; 1
    4e36:	dc 01       	movw	r26, r24
    4e38:	2c 93       	st	X, r18
    4e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3e:	af 85       	ldd	r26, Y+15	; 0x0f
    4e40:	b8 89       	ldd	r27, Y+16	; 0x10
    4e42:	89 2b       	or	r24, r25
    4e44:	8a 2b       	or	r24, r26
    4e46:	8b 2b       	or	r24, r27
    4e48:	51 f0       	breq	.+20     	; 0x4e5e <xTaskGenericNotifyWait+0x104>
    4e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4e:	af 85       	ldd	r26, Y+15	; 0x0f
    4e50:	b8 89       	ldd	r27, Y+16	; 0x10
    4e52:	41 e0       	ldi	r20, 0x01	; 1
    4e54:	bc 01       	movw	r22, r24
    4e56:	cd 01       	movw	r24, r26
    4e58:	b3 d4       	rcall	.+2406   	; 0x57c0 <prvAddCurrentTaskToDelayedList>
    4e5a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    4e5e:	0f 90       	pop	r0
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	0f 92       	push	r0
    4e68:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e6c:	89 2b       	or	r24, r25
    4e6e:	d1 f0       	breq	.+52     	; 0x4ea4 <xTaskGenericNotifyWait+0x14a>
    4e70:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4e74:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4e78:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7a:	88 2f       	mov	r24, r24
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	88 0f       	add	r24, r24
    4e80:	99 1f       	adc	r25, r25
    4e82:	88 0f       	add	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	82 0f       	add	r24, r18
    4e88:	93 1f       	adc	r25, r19
    4e8a:	8f 96       	adiw	r24, 0x2f	; 47
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	80 81       	ld	r24, Z
    4e90:	91 81       	ldd	r25, Z+1	; 0x01
    4e92:	a2 81       	ldd	r26, Z+2	; 0x02
    4e94:	b3 81       	ldd	r27, Z+3	; 0x03
    4e96:	2b 85       	ldd	r18, Y+11	; 0x0b
    4e98:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e9a:	f9 01       	movw	r30, r18
    4e9c:	80 83       	st	Z, r24
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	a2 83       	std	Z+2, r26	; 0x02
    4ea2:	b3 83       	std	Z+3, r27	; 0x03
    4ea4:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4ea8:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4eac:	8a 81       	ldd	r24, Y+2	; 0x02
    4eae:	88 2f       	mov	r24, r24
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	82 0f       	add	r24, r18
    4eb4:	93 1f       	adc	r25, r19
    4eb6:	c3 96       	adiw	r24, 0x33	; 51
    4eb8:	dc 01       	movw	r26, r24
    4eba:	8c 91       	ld	r24, X
    4ebc:	82 30       	cpi	r24, 0x02	; 2
    4ebe:	11 f0       	breq	.+4      	; 0x4ec4 <xTaskGenericNotifyWait+0x16a>
    4ec0:	19 82       	std	Y+1, r1	; 0x01
    4ec2:	32 c0       	rjmp	.+100    	; 0x4f28 <xTaskGenericNotifyWait+0x1ce>
    4ec4:	60 91 9a 15 	lds	r22, 0x159A	; 0x80159a <pxCurrentTCB>
    4ec8:	70 91 9b 15 	lds	r23, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ece:	e8 2f       	mov	r30, r24
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	88 2f       	mov	r24, r24
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	88 0f       	add	r24, r24
    4ede:	99 1f       	adc	r25, r25
    4ee0:	86 0f       	add	r24, r22
    4ee2:	97 1f       	adc	r25, r23
    4ee4:	8f 96       	adiw	r24, 0x2f	; 47
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	2d 91       	ld	r18, X+
    4eea:	3d 91       	ld	r19, X+
    4eec:	4d 91       	ld	r20, X+
    4eee:	5c 91       	ld	r21, X
    4ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ef2:	98 85       	ldd	r25, Y+8	; 0x08
    4ef4:	a9 85       	ldd	r26, Y+9	; 0x09
    4ef6:	ba 85       	ldd	r27, Y+10	; 0x0a
    4ef8:	80 95       	com	r24
    4efa:	90 95       	com	r25
    4efc:	a0 95       	com	r26
    4efe:	b0 95       	com	r27
    4f00:	82 23       	and	r24, r18
    4f02:	93 23       	and	r25, r19
    4f04:	a4 23       	and	r26, r20
    4f06:	b5 23       	and	r27, r21
    4f08:	9f 01       	movw	r18, r30
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	22 0f       	add	r18, r18
    4f10:	33 1f       	adc	r19, r19
    4f12:	26 0f       	add	r18, r22
    4f14:	37 1f       	adc	r19, r23
    4f16:	21 5d       	subi	r18, 0xD1	; 209
    4f18:	3f 4f       	sbci	r19, 0xFF	; 255
    4f1a:	f9 01       	movw	r30, r18
    4f1c:	80 83       	st	Z, r24
    4f1e:	91 83       	std	Z+1, r25	; 0x01
    4f20:	a2 83       	std	Z+2, r26	; 0x02
    4f22:	b3 83       	std	Z+3, r27	; 0x03
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	89 83       	std	Y+1, r24	; 0x01
    4f28:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    4f2c:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
    4f32:	88 2f       	mov	r24, r24
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	82 0f       	add	r24, r18
    4f38:	93 1f       	adc	r25, r19
    4f3a:	c3 96       	adiw	r24, 0x33	; 51
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	1c 92       	st	X, r1
    4f40:	0f 90       	pop	r0
    4f42:	0f be       	out	0x3f, r0	; 63
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	60 96       	adiw	r28, 0x10	; 16
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	f8 94       	cli
    4f4c:	de bf       	out	0x3e, r29	; 62
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	cd bf       	out	0x3d, r28	; 61
    4f52:	df 91       	pop	r29
    4f54:	cf 91       	pop	r28
    4f56:	1f 91       	pop	r17
    4f58:	0f 91       	pop	r16
    4f5a:	ff 90       	pop	r15
    4f5c:	ef 90       	pop	r14
    4f5e:	df 90       	pop	r13
    4f60:	cf 90       	pop	r12
    4f62:	bf 90       	pop	r11
    4f64:	af 90       	pop	r10
    4f66:	08 95       	ret

00004f68 <xTaskGenericNotify>:
    4f68:	ef 92       	push	r14
    4f6a:	ff 92       	push	r15
    4f6c:	0f 93       	push	r16
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
    4f76:	62 97       	sbiw	r28, 0x12	; 18
    4f78:	0f b6       	in	r0, 0x3f	; 63
    4f7a:	f8 94       	cli
    4f7c:	de bf       	out	0x3e, r29	; 62
    4f7e:	0f be       	out	0x3f, r0	; 63
    4f80:	cd bf       	out	0x3d, r28	; 61
    4f82:	9a 87       	std	Y+10, r25	; 0x0a
    4f84:	89 87       	std	Y+9, r24	; 0x09
    4f86:	6b 87       	std	Y+11, r22	; 0x0b
    4f88:	2c 87       	std	Y+12, r18	; 0x0c
    4f8a:	3d 87       	std	Y+13, r19	; 0x0d
    4f8c:	4e 87       	std	Y+14, r20	; 0x0e
    4f8e:	5f 87       	std	Y+15, r21	; 0x0f
    4f90:	08 8b       	std	Y+16, r16	; 0x10
    4f92:	fa 8a       	std	Y+18, r15	; 0x12
    4f94:	e9 8a       	std	Y+17, r14	; 0x11
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	89 83       	std	Y+1, r24	; 0x01
    4f9a:	89 85       	ldd	r24, Y+9	; 0x09
    4f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f9e:	9b 83       	std	Y+3, r25	; 0x03
    4fa0:	8a 83       	std	Y+2, r24	; 0x02
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	0f 92       	push	r0
    4fa8:	89 89       	ldd	r24, Y+17	; 0x11
    4faa:	9a 89       	ldd	r25, Y+18	; 0x12
    4fac:	89 2b       	or	r24, r25
    4fae:	c1 f0       	breq	.+48     	; 0x4fe0 <xTaskGenericNotify+0x78>
    4fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fb2:	88 2f       	mov	r24, r24
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	2a 81       	ldd	r18, Y+2	; 0x02
    4fb8:	3b 81       	ldd	r19, Y+3	; 0x03
    4fba:	88 0f       	add	r24, r24
    4fbc:	99 1f       	adc	r25, r25
    4fbe:	88 0f       	add	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	82 0f       	add	r24, r18
    4fc4:	93 1f       	adc	r25, r19
    4fc6:	8f 96       	adiw	r24, 0x2f	; 47
    4fc8:	fc 01       	movw	r30, r24
    4fca:	80 81       	ld	r24, Z
    4fcc:	91 81       	ldd	r25, Z+1	; 0x01
    4fce:	a2 81       	ldd	r26, Z+2	; 0x02
    4fd0:	b3 81       	ldd	r27, Z+3	; 0x03
    4fd2:	29 89       	ldd	r18, Y+17	; 0x11
    4fd4:	3a 89       	ldd	r19, Y+18	; 0x12
    4fd6:	f9 01       	movw	r30, r18
    4fd8:	80 83       	st	Z, r24
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	a2 83       	std	Z+2, r26	; 0x02
    4fde:	b3 83       	std	Z+3, r27	; 0x03
    4fe0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fe2:	88 2f       	mov	r24, r24
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	2a 81       	ldd	r18, Y+2	; 0x02
    4fe8:	3b 81       	ldd	r19, Y+3	; 0x03
    4fea:	82 0f       	add	r24, r18
    4fec:	93 1f       	adc	r25, r19
    4fee:	c3 96       	adiw	r24, 0x33	; 51
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	80 81       	ld	r24, Z
    4ff4:	8c 83       	std	Y+4, r24	; 0x04
    4ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ff8:	88 2f       	mov	r24, r24
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	2a 81       	ldd	r18, Y+2	; 0x02
    4ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    5000:	82 0f       	add	r24, r18
    5002:	93 1f       	adc	r25, r19
    5004:	c3 96       	adiw	r24, 0x33	; 51
    5006:	22 e0       	ldi	r18, 0x02	; 2
    5008:	fc 01       	movw	r30, r24
    500a:	20 83       	st	Z, r18
    500c:	88 89       	ldd	r24, Y+16	; 0x10
    500e:	88 2f       	mov	r24, r24
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	82 30       	cpi	r24, 0x02	; 2
    5014:	91 05       	cpc	r25, r1
    5016:	09 f4       	brne	.+2      	; 0x501a <xTaskGenericNotify+0xb2>
    5018:	3e c0       	rjmp	.+124    	; 0x5096 <xTaskGenericNotify+0x12e>
    501a:	83 30       	cpi	r24, 0x03	; 3
    501c:	91 05       	cpc	r25, r1
    501e:	34 f4       	brge	.+12     	; 0x502c <xTaskGenericNotify+0xc4>
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	09 f4       	brne	.+2      	; 0x5026 <xTaskGenericNotify+0xbe>
    5024:	92 c0       	rjmp	.+292    	; 0x514a <xTaskGenericNotify+0x1e2>
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	49 f0       	breq	.+18     	; 0x503c <xTaskGenericNotify+0xd4>
    502a:	90 c0       	rjmp	.+288    	; 0x514c <xTaskGenericNotify+0x1e4>
    502c:	83 30       	cpi	r24, 0x03	; 3
    502e:	91 05       	cpc	r25, r1
    5030:	09 f4       	brne	.+2      	; 0x5034 <xTaskGenericNotify+0xcc>
    5032:	56 c0       	rjmp	.+172    	; 0x50e0 <xTaskGenericNotify+0x178>
    5034:	04 97       	sbiw	r24, 0x04	; 4
    5036:	09 f4       	brne	.+2      	; 0x503a <xTaskGenericNotify+0xd2>
    5038:	6b c0       	rjmp	.+214    	; 0x5110 <xTaskGenericNotify+0x1a8>
    503a:	88 c0       	rjmp	.+272    	; 0x514c <xTaskGenericNotify+0x1e4>
    503c:	8b 85       	ldd	r24, Y+11	; 0x0b
    503e:	68 2f       	mov	r22, r24
    5040:	70 e0       	ldi	r23, 0x00	; 0
    5042:	8b 85       	ldd	r24, Y+11	; 0x0b
    5044:	88 2f       	mov	r24, r24
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	2a 81       	ldd	r18, Y+2	; 0x02
    504a:	3b 81       	ldd	r19, Y+3	; 0x03
    504c:	88 0f       	add	r24, r24
    504e:	99 1f       	adc	r25, r25
    5050:	88 0f       	add	r24, r24
    5052:	99 1f       	adc	r25, r25
    5054:	82 0f       	add	r24, r18
    5056:	93 1f       	adc	r25, r19
    5058:	8f 96       	adiw	r24, 0x2f	; 47
    505a:	fc 01       	movw	r30, r24
    505c:	20 81       	ld	r18, Z
    505e:	31 81       	ldd	r19, Z+1	; 0x01
    5060:	42 81       	ldd	r20, Z+2	; 0x02
    5062:	53 81       	ldd	r21, Z+3	; 0x03
    5064:	8c 85       	ldd	r24, Y+12	; 0x0c
    5066:	9d 85       	ldd	r25, Y+13	; 0x0d
    5068:	ae 85       	ldd	r26, Y+14	; 0x0e
    506a:	bf 85       	ldd	r27, Y+15	; 0x0f
    506c:	82 2b       	or	r24, r18
    506e:	93 2b       	or	r25, r19
    5070:	a4 2b       	or	r26, r20
    5072:	b5 2b       	or	r27, r21
    5074:	4a 81       	ldd	r20, Y+2	; 0x02
    5076:	5b 81       	ldd	r21, Y+3	; 0x03
    5078:	9b 01       	movw	r18, r22
    507a:	22 0f       	add	r18, r18
    507c:	33 1f       	adc	r19, r19
    507e:	22 0f       	add	r18, r18
    5080:	33 1f       	adc	r19, r19
    5082:	24 0f       	add	r18, r20
    5084:	35 1f       	adc	r19, r21
    5086:	21 5d       	subi	r18, 0xD1	; 209
    5088:	3f 4f       	sbci	r19, 0xFF	; 255
    508a:	f9 01       	movw	r30, r18
    508c:	80 83       	st	Z, r24
    508e:	91 83       	std	Z+1, r25	; 0x01
    5090:	a2 83       	std	Z+2, r26	; 0x02
    5092:	b3 83       	std	Z+3, r27	; 0x03
    5094:	5b c0       	rjmp	.+182    	; 0x514c <xTaskGenericNotify+0x1e4>
    5096:	8b 85       	ldd	r24, Y+11	; 0x0b
    5098:	28 2f       	mov	r18, r24
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	4a 81       	ldd	r20, Y+2	; 0x02
    509e:	5b 81       	ldd	r21, Y+3	; 0x03
    50a0:	c9 01       	movw	r24, r18
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	88 0f       	add	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	84 0f       	add	r24, r20
    50ac:	95 1f       	adc	r25, r21
    50ae:	8f 96       	adiw	r24, 0x2f	; 47
    50b0:	fc 01       	movw	r30, r24
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	a2 81       	ldd	r26, Z+2	; 0x02
    50b8:	b3 81       	ldd	r27, Z+3	; 0x03
    50ba:	01 96       	adiw	r24, 0x01	; 1
    50bc:	a1 1d       	adc	r26, r1
    50be:	b1 1d       	adc	r27, r1
    50c0:	4a 81       	ldd	r20, Y+2	; 0x02
    50c2:	5b 81       	ldd	r21, Y+3	; 0x03
    50c4:	22 0f       	add	r18, r18
    50c6:	33 1f       	adc	r19, r19
    50c8:	22 0f       	add	r18, r18
    50ca:	33 1f       	adc	r19, r19
    50cc:	24 0f       	add	r18, r20
    50ce:	35 1f       	adc	r19, r21
    50d0:	21 5d       	subi	r18, 0xD1	; 209
    50d2:	3f 4f       	sbci	r19, 0xFF	; 255
    50d4:	f9 01       	movw	r30, r18
    50d6:	80 83       	st	Z, r24
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	a2 83       	std	Z+2, r26	; 0x02
    50dc:	b3 83       	std	Z+3, r27	; 0x03
    50de:	36 c0       	rjmp	.+108    	; 0x514c <xTaskGenericNotify+0x1e4>
    50e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    50e2:	88 2f       	mov	r24, r24
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	2a 81       	ldd	r18, Y+2	; 0x02
    50e8:	3b 81       	ldd	r19, Y+3	; 0x03
    50ea:	88 0f       	add	r24, r24
    50ec:	99 1f       	adc	r25, r25
    50ee:	88 0f       	add	r24, r24
    50f0:	99 1f       	adc	r25, r25
    50f2:	82 0f       	add	r24, r18
    50f4:	93 1f       	adc	r25, r19
    50f6:	9c 01       	movw	r18, r24
    50f8:	21 5d       	subi	r18, 0xD1	; 209
    50fa:	3f 4f       	sbci	r19, 0xFF	; 255
    50fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    50fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    5100:	ae 85       	ldd	r26, Y+14	; 0x0e
    5102:	bf 85       	ldd	r27, Y+15	; 0x0f
    5104:	f9 01       	movw	r30, r18
    5106:	80 83       	st	Z, r24
    5108:	91 83       	std	Z+1, r25	; 0x01
    510a:	a2 83       	std	Z+2, r26	; 0x02
    510c:	b3 83       	std	Z+3, r27	; 0x03
    510e:	1e c0       	rjmp	.+60     	; 0x514c <xTaskGenericNotify+0x1e4>
    5110:	8c 81       	ldd	r24, Y+4	; 0x04
    5112:	82 30       	cpi	r24, 0x02	; 2
    5114:	c1 f0       	breq	.+48     	; 0x5146 <xTaskGenericNotify+0x1de>
    5116:	8b 85       	ldd	r24, Y+11	; 0x0b
    5118:	88 2f       	mov	r24, r24
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	2a 81       	ldd	r18, Y+2	; 0x02
    511e:	3b 81       	ldd	r19, Y+3	; 0x03
    5120:	88 0f       	add	r24, r24
    5122:	99 1f       	adc	r25, r25
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	82 0f       	add	r24, r18
    512a:	93 1f       	adc	r25, r19
    512c:	9c 01       	movw	r18, r24
    512e:	21 5d       	subi	r18, 0xD1	; 209
    5130:	3f 4f       	sbci	r19, 0xFF	; 255
    5132:	8c 85       	ldd	r24, Y+12	; 0x0c
    5134:	9d 85       	ldd	r25, Y+13	; 0x0d
    5136:	ae 85       	ldd	r26, Y+14	; 0x0e
    5138:	bf 85       	ldd	r27, Y+15	; 0x0f
    513a:	f9 01       	movw	r30, r18
    513c:	80 83       	st	Z, r24
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	a2 83       	std	Z+2, r26	; 0x02
    5142:	b3 83       	std	Z+3, r27	; 0x03
    5144:	03 c0       	rjmp	.+6      	; 0x514c <xTaskGenericNotify+0x1e4>
    5146:	19 82       	std	Y+1, r1	; 0x01
    5148:	01 c0       	rjmp	.+2      	; 0x514c <xTaskGenericNotify+0x1e4>
    514a:	00 00       	nop
    514c:	8c 81       	ldd	r24, Y+4	; 0x04
    514e:	81 30       	cpi	r24, 0x01	; 1
    5150:	09 f0       	breq	.+2      	; 0x5154 <xTaskGenericNotify+0x1ec>
    5152:	cc c0       	rjmp	.+408    	; 0x52ec <xTaskGenericNotify+0x384>
    5154:	8a 81       	ldd	r24, Y+2	; 0x02
    5156:	9b 81       	ldd	r25, Y+3	; 0x03
    5158:	fc 01       	movw	r30, r24
    515a:	84 85       	ldd	r24, Z+12	; 0x0c
    515c:	95 85       	ldd	r25, Z+13	; 0x0d
    515e:	9e 83       	std	Y+6, r25	; 0x06
    5160:	8d 83       	std	Y+5, r24	; 0x05
    5162:	8a 81       	ldd	r24, Y+2	; 0x02
    5164:	9b 81       	ldd	r25, Y+3	; 0x03
    5166:	fc 01       	movw	r30, r24
    5168:	86 81       	ldd	r24, Z+6	; 0x06
    516a:	97 81       	ldd	r25, Z+7	; 0x07
    516c:	2a 81       	ldd	r18, Y+2	; 0x02
    516e:	3b 81       	ldd	r19, Y+3	; 0x03
    5170:	f9 01       	movw	r30, r18
    5172:	20 85       	ldd	r18, Z+8	; 0x08
    5174:	31 85       	ldd	r19, Z+9	; 0x09
    5176:	fc 01       	movw	r30, r24
    5178:	37 83       	std	Z+7, r19	; 0x07
    517a:	26 83       	std	Z+6, r18	; 0x06
    517c:	8a 81       	ldd	r24, Y+2	; 0x02
    517e:	9b 81       	ldd	r25, Y+3	; 0x03
    5180:	fc 01       	movw	r30, r24
    5182:	80 85       	ldd	r24, Z+8	; 0x08
    5184:	91 85       	ldd	r25, Z+9	; 0x09
    5186:	2a 81       	ldd	r18, Y+2	; 0x02
    5188:	3b 81       	ldd	r19, Y+3	; 0x03
    518a:	f9 01       	movw	r30, r18
    518c:	26 81       	ldd	r18, Z+6	; 0x06
    518e:	37 81       	ldd	r19, Z+7	; 0x07
    5190:	fc 01       	movw	r30, r24
    5192:	35 83       	std	Z+5, r19	; 0x05
    5194:	24 83       	std	Z+4, r18	; 0x04
    5196:	8d 81       	ldd	r24, Y+5	; 0x05
    5198:	9e 81       	ldd	r25, Y+6	; 0x06
    519a:	fc 01       	movw	r30, r24
    519c:	21 81       	ldd	r18, Z+1	; 0x01
    519e:	32 81       	ldd	r19, Z+2	; 0x02
    51a0:	8a 81       	ldd	r24, Y+2	; 0x02
    51a2:	9b 81       	ldd	r25, Y+3	; 0x03
    51a4:	02 96       	adiw	r24, 0x02	; 2
    51a6:	28 17       	cp	r18, r24
    51a8:	39 07       	cpc	r19, r25
    51aa:	51 f4       	brne	.+20     	; 0x51c0 <xTaskGenericNotify+0x258>
    51ac:	8a 81       	ldd	r24, Y+2	; 0x02
    51ae:	9b 81       	ldd	r25, Y+3	; 0x03
    51b0:	fc 01       	movw	r30, r24
    51b2:	20 85       	ldd	r18, Z+8	; 0x08
    51b4:	31 85       	ldd	r19, Z+9	; 0x09
    51b6:	8d 81       	ldd	r24, Y+5	; 0x05
    51b8:	9e 81       	ldd	r25, Y+6	; 0x06
    51ba:	fc 01       	movw	r30, r24
    51bc:	32 83       	std	Z+2, r19	; 0x02
    51be:	21 83       	std	Z+1, r18	; 0x01
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	9b 81       	ldd	r25, Y+3	; 0x03
    51c4:	fc 01       	movw	r30, r24
    51c6:	15 86       	std	Z+13, r1	; 0x0d
    51c8:	14 86       	std	Z+12, r1	; 0x0c
    51ca:	8d 81       	ldd	r24, Y+5	; 0x05
    51cc:	9e 81       	ldd	r25, Y+6	; 0x06
    51ce:	fc 01       	movw	r30, r24
    51d0:	80 81       	ld	r24, Z
    51d2:	2f ef       	ldi	r18, 0xFF	; 255
    51d4:	28 0f       	add	r18, r24
    51d6:	8d 81       	ldd	r24, Y+5	; 0x05
    51d8:	9e 81       	ldd	r25, Y+6	; 0x06
    51da:	fc 01       	movw	r30, r24
    51dc:	20 83       	st	Z, r18
    51de:	8a 81       	ldd	r24, Y+2	; 0x02
    51e0:	9b 81       	ldd	r25, Y+3	; 0x03
    51e2:	fc 01       	movw	r30, r24
    51e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    51e6:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    51ea:	89 17       	cp	r24, r25
    51ec:	30 f4       	brcc	.+12     	; 0x51fa <xTaskGenericNotify+0x292>
    51ee:	8a 81       	ldd	r24, Y+2	; 0x02
    51f0:	9b 81       	ldd	r25, Y+3	; 0x03
    51f2:	fc 01       	movw	r30, r24
    51f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    51f6:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    51fa:	8a 81       	ldd	r24, Y+2	; 0x02
    51fc:	9b 81       	ldd	r25, Y+3	; 0x03
    51fe:	fc 01       	movw	r30, r24
    5200:	82 8d       	ldd	r24, Z+26	; 0x1a
    5202:	28 2f       	mov	r18, r24
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	4b e0       	ldi	r20, 0x0B	; 11
    5208:	42 9f       	mul	r20, r18
    520a:	c0 01       	movw	r24, r0
    520c:	43 9f       	mul	r20, r19
    520e:	90 0d       	add	r25, r0
    5210:	11 24       	eor	r1, r1
    5212:	83 56       	subi	r24, 0x63	; 99
    5214:	9a 4e       	sbci	r25, 0xEA	; 234
    5216:	fc 01       	movw	r30, r24
    5218:	80 81       	ld	r24, Z
    521a:	91 81       	ldd	r25, Z+1	; 0x01
    521c:	98 87       	std	Y+8, r25	; 0x08
    521e:	8f 83       	std	Y+7, r24	; 0x07
    5220:	8a 81       	ldd	r24, Y+2	; 0x02
    5222:	9b 81       	ldd	r25, Y+3	; 0x03
    5224:	2f 81       	ldd	r18, Y+7	; 0x07
    5226:	38 85       	ldd	r19, Y+8	; 0x08
    5228:	fc 01       	movw	r30, r24
    522a:	37 83       	std	Z+7, r19	; 0x07
    522c:	26 83       	std	Z+6, r18	; 0x06
    522e:	8f 81       	ldd	r24, Y+7	; 0x07
    5230:	98 85       	ldd	r25, Y+8	; 0x08
    5232:	fc 01       	movw	r30, r24
    5234:	26 81       	ldd	r18, Z+6	; 0x06
    5236:	37 81       	ldd	r19, Z+7	; 0x07
    5238:	8a 81       	ldd	r24, Y+2	; 0x02
    523a:	9b 81       	ldd	r25, Y+3	; 0x03
    523c:	fc 01       	movw	r30, r24
    523e:	31 87       	std	Z+9, r19	; 0x09
    5240:	20 87       	std	Z+8, r18	; 0x08
    5242:	8f 81       	ldd	r24, Y+7	; 0x07
    5244:	98 85       	ldd	r25, Y+8	; 0x08
    5246:	fc 01       	movw	r30, r24
    5248:	86 81       	ldd	r24, Z+6	; 0x06
    524a:	97 81       	ldd	r25, Z+7	; 0x07
    524c:	2a 81       	ldd	r18, Y+2	; 0x02
    524e:	3b 81       	ldd	r19, Y+3	; 0x03
    5250:	2e 5f       	subi	r18, 0xFE	; 254
    5252:	3f 4f       	sbci	r19, 0xFF	; 255
    5254:	fc 01       	movw	r30, r24
    5256:	35 83       	std	Z+5, r19	; 0x05
    5258:	24 83       	std	Z+4, r18	; 0x04
    525a:	8a 81       	ldd	r24, Y+2	; 0x02
    525c:	9b 81       	ldd	r25, Y+3	; 0x03
    525e:	9c 01       	movw	r18, r24
    5260:	2e 5f       	subi	r18, 0xFE	; 254
    5262:	3f 4f       	sbci	r19, 0xFF	; 255
    5264:	8f 81       	ldd	r24, Y+7	; 0x07
    5266:	98 85       	ldd	r25, Y+8	; 0x08
    5268:	fc 01       	movw	r30, r24
    526a:	37 83       	std	Z+7, r19	; 0x07
    526c:	26 83       	std	Z+6, r18	; 0x06
    526e:	8a 81       	ldd	r24, Y+2	; 0x02
    5270:	9b 81       	ldd	r25, Y+3	; 0x03
    5272:	fc 01       	movw	r30, r24
    5274:	82 8d       	ldd	r24, Z+26	; 0x1a
    5276:	28 2f       	mov	r18, r24
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4b e0       	ldi	r20, 0x0B	; 11
    527c:	42 9f       	mul	r20, r18
    527e:	c0 01       	movw	r24, r0
    5280:	43 9f       	mul	r20, r19
    5282:	90 0d       	add	r25, r0
    5284:	11 24       	eor	r1, r1
    5286:	9c 01       	movw	r18, r24
    5288:	24 56       	subi	r18, 0x64	; 100
    528a:	3a 4e       	sbci	r19, 0xEA	; 234
    528c:	8a 81       	ldd	r24, Y+2	; 0x02
    528e:	9b 81       	ldd	r25, Y+3	; 0x03
    5290:	fc 01       	movw	r30, r24
    5292:	35 87       	std	Z+13, r19	; 0x0d
    5294:	24 87       	std	Z+12, r18	; 0x0c
    5296:	8a 81       	ldd	r24, Y+2	; 0x02
    5298:	9b 81       	ldd	r25, Y+3	; 0x03
    529a:	fc 01       	movw	r30, r24
    529c:	82 8d       	ldd	r24, Z+26	; 0x1a
    529e:	88 2f       	mov	r24, r24
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	4b e0       	ldi	r20, 0x0B	; 11
    52a4:	48 9f       	mul	r20, r24
    52a6:	90 01       	movw	r18, r0
    52a8:	49 9f       	mul	r20, r25
    52aa:	30 0d       	add	r19, r0
    52ac:	11 24       	eor	r1, r1
    52ae:	24 56       	subi	r18, 0x64	; 100
    52b0:	3a 4e       	sbci	r19, 0xEA	; 234
    52b2:	f9 01       	movw	r30, r18
    52b4:	20 81       	ld	r18, Z
    52b6:	41 e0       	ldi	r20, 0x01	; 1
    52b8:	42 0f       	add	r20, r18
    52ba:	5b e0       	ldi	r21, 0x0B	; 11
    52bc:	58 9f       	mul	r21, r24
    52be:	90 01       	movw	r18, r0
    52c0:	59 9f       	mul	r21, r25
    52c2:	30 0d       	add	r19, r0
    52c4:	11 24       	eor	r1, r1
    52c6:	c9 01       	movw	r24, r18
    52c8:	84 56       	subi	r24, 0x64	; 100
    52ca:	9a 4e       	sbci	r25, 0xEA	; 234
    52cc:	fc 01       	movw	r30, r24
    52ce:	40 83       	st	Z, r20
    52d0:	8a 81       	ldd	r24, Y+2	; 0x02
    52d2:	9b 81       	ldd	r25, Y+3	; 0x03
    52d4:	fc 01       	movw	r30, r24
    52d6:	22 8d       	ldd	r18, Z+26	; 0x1a
    52d8:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    52dc:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    52e0:	fc 01       	movw	r30, r24
    52e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    52e4:	82 17       	cp	r24, r18
    52e6:	10 f4       	brcc	.+4      	; 0x52ec <xTaskGenericNotify+0x384>
    52e8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    52ec:	0f 90       	pop	r0
    52ee:	0f be       	out	0x3f, r0	; 63
    52f0:	89 81       	ldd	r24, Y+1	; 0x01
    52f2:	62 96       	adiw	r28, 0x12	; 18
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	f8 94       	cli
    52f8:	de bf       	out	0x3e, r29	; 62
    52fa:	0f be       	out	0x3f, r0	; 63
    52fc:	cd bf       	out	0x3d, r28	; 61
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	0f 91       	pop	r16
    5304:	ff 90       	pop	r15
    5306:	ef 90       	pop	r14
    5308:	08 95       	ret

0000530a <xTaskGenericNotifyFromISR>:
    530a:	cf 92       	push	r12
    530c:	df 92       	push	r13
    530e:	ef 92       	push	r14
    5310:	ff 92       	push	r15
    5312:	0f 93       	push	r16
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	67 97       	sbiw	r28, 0x17	; 23
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    5328:	9d 87       	std	Y+13, r25	; 0x0d
    532a:	8c 87       	std	Y+12, r24	; 0x0c
    532c:	6e 87       	std	Y+14, r22	; 0x0e
    532e:	2f 87       	std	Y+15, r18	; 0x0f
    5330:	38 8b       	std	Y+16, r19	; 0x10
    5332:	49 8b       	std	Y+17, r20	; 0x11
    5334:	5a 8b       	std	Y+18, r21	; 0x12
    5336:	0b 8b       	std	Y+19, r16	; 0x13
    5338:	fd 8a       	std	Y+21, r15	; 0x15
    533a:	ec 8a       	std	Y+20, r14	; 0x14
    533c:	df 8a       	std	Y+23, r13	; 0x17
    533e:	ce 8a       	std	Y+22, r12	; 0x16
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	89 83       	std	Y+1, r24	; 0x01
    5344:	8c 85       	ldd	r24, Y+12	; 0x0c
    5346:	9d 85       	ldd	r25, Y+13	; 0x0d
    5348:	9b 83       	std	Y+3, r25	; 0x03
    534a:	8a 83       	std	Y+2, r24	; 0x02
    534c:	1c 82       	std	Y+4, r1	; 0x04
    534e:	8c 89       	ldd	r24, Y+20	; 0x14
    5350:	9d 89       	ldd	r25, Y+21	; 0x15
    5352:	89 2b       	or	r24, r25
    5354:	c1 f0       	breq	.+48     	; 0x5386 <xTaskGenericNotifyFromISR+0x7c>
    5356:	8e 85       	ldd	r24, Y+14	; 0x0e
    5358:	88 2f       	mov	r24, r24
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	2a 81       	ldd	r18, Y+2	; 0x02
    535e:	3b 81       	ldd	r19, Y+3	; 0x03
    5360:	88 0f       	add	r24, r24
    5362:	99 1f       	adc	r25, r25
    5364:	88 0f       	add	r24, r24
    5366:	99 1f       	adc	r25, r25
    5368:	82 0f       	add	r24, r18
    536a:	93 1f       	adc	r25, r19
    536c:	8f 96       	adiw	r24, 0x2f	; 47
    536e:	fc 01       	movw	r30, r24
    5370:	80 81       	ld	r24, Z
    5372:	91 81       	ldd	r25, Z+1	; 0x01
    5374:	a2 81       	ldd	r26, Z+2	; 0x02
    5376:	b3 81       	ldd	r27, Z+3	; 0x03
    5378:	2c 89       	ldd	r18, Y+20	; 0x14
    537a:	3d 89       	ldd	r19, Y+21	; 0x15
    537c:	f9 01       	movw	r30, r18
    537e:	80 83       	st	Z, r24
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	a2 83       	std	Z+2, r26	; 0x02
    5384:	b3 83       	std	Z+3, r27	; 0x03
    5386:	8e 85       	ldd	r24, Y+14	; 0x0e
    5388:	88 2f       	mov	r24, r24
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	2a 81       	ldd	r18, Y+2	; 0x02
    538e:	3b 81       	ldd	r19, Y+3	; 0x03
    5390:	82 0f       	add	r24, r18
    5392:	93 1f       	adc	r25, r19
    5394:	c3 96       	adiw	r24, 0x33	; 51
    5396:	fc 01       	movw	r30, r24
    5398:	80 81       	ld	r24, Z
    539a:	8d 83       	std	Y+5, r24	; 0x05
    539c:	8e 85       	ldd	r24, Y+14	; 0x0e
    539e:	88 2f       	mov	r24, r24
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	2a 81       	ldd	r18, Y+2	; 0x02
    53a4:	3b 81       	ldd	r19, Y+3	; 0x03
    53a6:	82 0f       	add	r24, r18
    53a8:	93 1f       	adc	r25, r19
    53aa:	c3 96       	adiw	r24, 0x33	; 51
    53ac:	22 e0       	ldi	r18, 0x02	; 2
    53ae:	fc 01       	movw	r30, r24
    53b0:	20 83       	st	Z, r18
    53b2:	8b 89       	ldd	r24, Y+19	; 0x13
    53b4:	88 2f       	mov	r24, r24
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	82 30       	cpi	r24, 0x02	; 2
    53ba:	91 05       	cpc	r25, r1
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <xTaskGenericNotifyFromISR+0xb6>
    53be:	3e c0       	rjmp	.+124    	; 0x543c <xTaskGenericNotifyFromISR+0x132>
    53c0:	83 30       	cpi	r24, 0x03	; 3
    53c2:	91 05       	cpc	r25, r1
    53c4:	34 f4       	brge	.+12     	; 0x53d2 <xTaskGenericNotifyFromISR+0xc8>
    53c6:	00 97       	sbiw	r24, 0x00	; 0
    53c8:	09 f4       	brne	.+2      	; 0x53cc <xTaskGenericNotifyFromISR+0xc2>
    53ca:	92 c0       	rjmp	.+292    	; 0x54f0 <xTaskGenericNotifyFromISR+0x1e6>
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	49 f0       	breq	.+18     	; 0x53e2 <xTaskGenericNotifyFromISR+0xd8>
    53d0:	90 c0       	rjmp	.+288    	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    53d2:	83 30       	cpi	r24, 0x03	; 3
    53d4:	91 05       	cpc	r25, r1
    53d6:	09 f4       	brne	.+2      	; 0x53da <xTaskGenericNotifyFromISR+0xd0>
    53d8:	56 c0       	rjmp	.+172    	; 0x5486 <xTaskGenericNotifyFromISR+0x17c>
    53da:	04 97       	sbiw	r24, 0x04	; 4
    53dc:	09 f4       	brne	.+2      	; 0x53e0 <xTaskGenericNotifyFromISR+0xd6>
    53de:	6b c0       	rjmp	.+214    	; 0x54b6 <xTaskGenericNotifyFromISR+0x1ac>
    53e0:	88 c0       	rjmp	.+272    	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    53e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    53e4:	68 2f       	mov	r22, r24
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    53ea:	88 2f       	mov	r24, r24
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	2a 81       	ldd	r18, Y+2	; 0x02
    53f0:	3b 81       	ldd	r19, Y+3	; 0x03
    53f2:	88 0f       	add	r24, r24
    53f4:	99 1f       	adc	r25, r25
    53f6:	88 0f       	add	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	82 0f       	add	r24, r18
    53fc:	93 1f       	adc	r25, r19
    53fe:	8f 96       	adiw	r24, 0x2f	; 47
    5400:	fc 01       	movw	r30, r24
    5402:	20 81       	ld	r18, Z
    5404:	31 81       	ldd	r19, Z+1	; 0x01
    5406:	42 81       	ldd	r20, Z+2	; 0x02
    5408:	53 81       	ldd	r21, Z+3	; 0x03
    540a:	8f 85       	ldd	r24, Y+15	; 0x0f
    540c:	98 89       	ldd	r25, Y+16	; 0x10
    540e:	a9 89       	ldd	r26, Y+17	; 0x11
    5410:	ba 89       	ldd	r27, Y+18	; 0x12
    5412:	82 2b       	or	r24, r18
    5414:	93 2b       	or	r25, r19
    5416:	a4 2b       	or	r26, r20
    5418:	b5 2b       	or	r27, r21
    541a:	4a 81       	ldd	r20, Y+2	; 0x02
    541c:	5b 81       	ldd	r21, Y+3	; 0x03
    541e:	9b 01       	movw	r18, r22
    5420:	22 0f       	add	r18, r18
    5422:	33 1f       	adc	r19, r19
    5424:	22 0f       	add	r18, r18
    5426:	33 1f       	adc	r19, r19
    5428:	24 0f       	add	r18, r20
    542a:	35 1f       	adc	r19, r21
    542c:	21 5d       	subi	r18, 0xD1	; 209
    542e:	3f 4f       	sbci	r19, 0xFF	; 255
    5430:	f9 01       	movw	r30, r18
    5432:	80 83       	st	Z, r24
    5434:	91 83       	std	Z+1, r25	; 0x01
    5436:	a2 83       	std	Z+2, r26	; 0x02
    5438:	b3 83       	std	Z+3, r27	; 0x03
    543a:	5b c0       	rjmp	.+182    	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    543c:	8e 85       	ldd	r24, Y+14	; 0x0e
    543e:	28 2f       	mov	r18, r24
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	4a 81       	ldd	r20, Y+2	; 0x02
    5444:	5b 81       	ldd	r21, Y+3	; 0x03
    5446:	c9 01       	movw	r24, r18
    5448:	88 0f       	add	r24, r24
    544a:	99 1f       	adc	r25, r25
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	84 0f       	add	r24, r20
    5452:	95 1f       	adc	r25, r21
    5454:	8f 96       	adiw	r24, 0x2f	; 47
    5456:	fc 01       	movw	r30, r24
    5458:	80 81       	ld	r24, Z
    545a:	91 81       	ldd	r25, Z+1	; 0x01
    545c:	a2 81       	ldd	r26, Z+2	; 0x02
    545e:	b3 81       	ldd	r27, Z+3	; 0x03
    5460:	01 96       	adiw	r24, 0x01	; 1
    5462:	a1 1d       	adc	r26, r1
    5464:	b1 1d       	adc	r27, r1
    5466:	4a 81       	ldd	r20, Y+2	; 0x02
    5468:	5b 81       	ldd	r21, Y+3	; 0x03
    546a:	22 0f       	add	r18, r18
    546c:	33 1f       	adc	r19, r19
    546e:	22 0f       	add	r18, r18
    5470:	33 1f       	adc	r19, r19
    5472:	24 0f       	add	r18, r20
    5474:	35 1f       	adc	r19, r21
    5476:	21 5d       	subi	r18, 0xD1	; 209
    5478:	3f 4f       	sbci	r19, 0xFF	; 255
    547a:	f9 01       	movw	r30, r18
    547c:	80 83       	st	Z, r24
    547e:	91 83       	std	Z+1, r25	; 0x01
    5480:	a2 83       	std	Z+2, r26	; 0x02
    5482:	b3 83       	std	Z+3, r27	; 0x03
    5484:	36 c0       	rjmp	.+108    	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    5486:	8e 85       	ldd	r24, Y+14	; 0x0e
    5488:	88 2f       	mov	r24, r24
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	2a 81       	ldd	r18, Y+2	; 0x02
    548e:	3b 81       	ldd	r19, Y+3	; 0x03
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	82 0f       	add	r24, r18
    549a:	93 1f       	adc	r25, r19
    549c:	9c 01       	movw	r18, r24
    549e:	21 5d       	subi	r18, 0xD1	; 209
    54a0:	3f 4f       	sbci	r19, 0xFF	; 255
    54a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a4:	98 89       	ldd	r25, Y+16	; 0x10
    54a6:	a9 89       	ldd	r26, Y+17	; 0x11
    54a8:	ba 89       	ldd	r27, Y+18	; 0x12
    54aa:	f9 01       	movw	r30, r18
    54ac:	80 83       	st	Z, r24
    54ae:	91 83       	std	Z+1, r25	; 0x01
    54b0:	a2 83       	std	Z+2, r26	; 0x02
    54b2:	b3 83       	std	Z+3, r27	; 0x03
    54b4:	1e c0       	rjmp	.+60     	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    54b6:	8d 81       	ldd	r24, Y+5	; 0x05
    54b8:	82 30       	cpi	r24, 0x02	; 2
    54ba:	c1 f0       	breq	.+48     	; 0x54ec <xTaskGenericNotifyFromISR+0x1e2>
    54bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    54be:	88 2f       	mov	r24, r24
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	2a 81       	ldd	r18, Y+2	; 0x02
    54c4:	3b 81       	ldd	r19, Y+3	; 0x03
    54c6:	88 0f       	add	r24, r24
    54c8:	99 1f       	adc	r25, r25
    54ca:	88 0f       	add	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	82 0f       	add	r24, r18
    54d0:	93 1f       	adc	r25, r19
    54d2:	9c 01       	movw	r18, r24
    54d4:	21 5d       	subi	r18, 0xD1	; 209
    54d6:	3f 4f       	sbci	r19, 0xFF	; 255
    54d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    54da:	98 89       	ldd	r25, Y+16	; 0x10
    54dc:	a9 89       	ldd	r26, Y+17	; 0x11
    54de:	ba 89       	ldd	r27, Y+18	; 0x12
    54e0:	f9 01       	movw	r30, r18
    54e2:	80 83       	st	Z, r24
    54e4:	91 83       	std	Z+1, r25	; 0x01
    54e6:	a2 83       	std	Z+2, r26	; 0x02
    54e8:	b3 83       	std	Z+3, r27	; 0x03
    54ea:	03 c0       	rjmp	.+6      	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    54ec:	19 82       	std	Y+1, r1	; 0x01
    54ee:	01 c0       	rjmp	.+2      	; 0x54f2 <xTaskGenericNotifyFromISR+0x1e8>
    54f0:	00 00       	nop
    54f2:	8d 81       	ldd	r24, Y+5	; 0x05
    54f4:	81 30       	cpi	r24, 0x01	; 1
    54f6:	09 f0       	breq	.+2      	; 0x54fa <xTaskGenericNotifyFromISR+0x1f0>
    54f8:	15 c1       	rjmp	.+554    	; 0x5724 <xTaskGenericNotifyFromISR+0x41a>
    54fa:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <uxSchedulerSuspended>
    54fe:	88 23       	and	r24, r24
    5500:	09 f0       	breq	.+2      	; 0x5504 <xTaskGenericNotifyFromISR+0x1fa>
    5502:	bf c0       	rjmp	.+382    	; 0x5682 <xTaskGenericNotifyFromISR+0x378>
    5504:	8a 81       	ldd	r24, Y+2	; 0x02
    5506:	9b 81       	ldd	r25, Y+3	; 0x03
    5508:	fc 01       	movw	r30, r24
    550a:	84 85       	ldd	r24, Z+12	; 0x0c
    550c:	95 85       	ldd	r25, Z+13	; 0x0d
    550e:	9f 83       	std	Y+7, r25	; 0x07
    5510:	8e 83       	std	Y+6, r24	; 0x06
    5512:	8a 81       	ldd	r24, Y+2	; 0x02
    5514:	9b 81       	ldd	r25, Y+3	; 0x03
    5516:	fc 01       	movw	r30, r24
    5518:	86 81       	ldd	r24, Z+6	; 0x06
    551a:	97 81       	ldd	r25, Z+7	; 0x07
    551c:	2a 81       	ldd	r18, Y+2	; 0x02
    551e:	3b 81       	ldd	r19, Y+3	; 0x03
    5520:	f9 01       	movw	r30, r18
    5522:	20 85       	ldd	r18, Z+8	; 0x08
    5524:	31 85       	ldd	r19, Z+9	; 0x09
    5526:	fc 01       	movw	r30, r24
    5528:	37 83       	std	Z+7, r19	; 0x07
    552a:	26 83       	std	Z+6, r18	; 0x06
    552c:	8a 81       	ldd	r24, Y+2	; 0x02
    552e:	9b 81       	ldd	r25, Y+3	; 0x03
    5530:	fc 01       	movw	r30, r24
    5532:	80 85       	ldd	r24, Z+8	; 0x08
    5534:	91 85       	ldd	r25, Z+9	; 0x09
    5536:	2a 81       	ldd	r18, Y+2	; 0x02
    5538:	3b 81       	ldd	r19, Y+3	; 0x03
    553a:	f9 01       	movw	r30, r18
    553c:	26 81       	ldd	r18, Z+6	; 0x06
    553e:	37 81       	ldd	r19, Z+7	; 0x07
    5540:	fc 01       	movw	r30, r24
    5542:	35 83       	std	Z+5, r19	; 0x05
    5544:	24 83       	std	Z+4, r18	; 0x04
    5546:	8e 81       	ldd	r24, Y+6	; 0x06
    5548:	9f 81       	ldd	r25, Y+7	; 0x07
    554a:	fc 01       	movw	r30, r24
    554c:	21 81       	ldd	r18, Z+1	; 0x01
    554e:	32 81       	ldd	r19, Z+2	; 0x02
    5550:	8a 81       	ldd	r24, Y+2	; 0x02
    5552:	9b 81       	ldd	r25, Y+3	; 0x03
    5554:	02 96       	adiw	r24, 0x02	; 2
    5556:	28 17       	cp	r18, r24
    5558:	39 07       	cpc	r19, r25
    555a:	51 f4       	brne	.+20     	; 0x5570 <xTaskGenericNotifyFromISR+0x266>
    555c:	8a 81       	ldd	r24, Y+2	; 0x02
    555e:	9b 81       	ldd	r25, Y+3	; 0x03
    5560:	fc 01       	movw	r30, r24
    5562:	20 85       	ldd	r18, Z+8	; 0x08
    5564:	31 85       	ldd	r19, Z+9	; 0x09
    5566:	8e 81       	ldd	r24, Y+6	; 0x06
    5568:	9f 81       	ldd	r25, Y+7	; 0x07
    556a:	fc 01       	movw	r30, r24
    556c:	32 83       	std	Z+2, r19	; 0x02
    556e:	21 83       	std	Z+1, r18	; 0x01
    5570:	8a 81       	ldd	r24, Y+2	; 0x02
    5572:	9b 81       	ldd	r25, Y+3	; 0x03
    5574:	fc 01       	movw	r30, r24
    5576:	15 86       	std	Z+13, r1	; 0x0d
    5578:	14 86       	std	Z+12, r1	; 0x0c
    557a:	8e 81       	ldd	r24, Y+6	; 0x06
    557c:	9f 81       	ldd	r25, Y+7	; 0x07
    557e:	fc 01       	movw	r30, r24
    5580:	80 81       	ld	r24, Z
    5582:	2f ef       	ldi	r18, 0xFF	; 255
    5584:	28 0f       	add	r18, r24
    5586:	8e 81       	ldd	r24, Y+6	; 0x06
    5588:	9f 81       	ldd	r25, Y+7	; 0x07
    558a:	fc 01       	movw	r30, r24
    558c:	20 83       	st	Z, r18
    558e:	8a 81       	ldd	r24, Y+2	; 0x02
    5590:	9b 81       	ldd	r25, Y+3	; 0x03
    5592:	fc 01       	movw	r30, r24
    5594:	92 8d       	ldd	r25, Z+26	; 0x1a
    5596:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <uxTopReadyPriority>
    559a:	89 17       	cp	r24, r25
    559c:	30 f4       	brcc	.+12     	; 0x55aa <xTaskGenericNotifyFromISR+0x2a0>
    559e:	8a 81       	ldd	r24, Y+2	; 0x02
    55a0:	9b 81       	ldd	r25, Y+3	; 0x03
    55a2:	fc 01       	movw	r30, r24
    55a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    55a6:	80 93 40 16 	sts	0x1640, r24	; 0x801640 <uxTopReadyPriority>
    55aa:	8a 81       	ldd	r24, Y+2	; 0x02
    55ac:	9b 81       	ldd	r25, Y+3	; 0x03
    55ae:	fc 01       	movw	r30, r24
    55b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    55b2:	28 2f       	mov	r18, r24
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	4b e0       	ldi	r20, 0x0B	; 11
    55b8:	42 9f       	mul	r20, r18
    55ba:	c0 01       	movw	r24, r0
    55bc:	43 9f       	mul	r20, r19
    55be:	90 0d       	add	r25, r0
    55c0:	11 24       	eor	r1, r1
    55c2:	83 56       	subi	r24, 0x63	; 99
    55c4:	9a 4e       	sbci	r25, 0xEA	; 234
    55c6:	fc 01       	movw	r30, r24
    55c8:	80 81       	ld	r24, Z
    55ca:	91 81       	ldd	r25, Z+1	; 0x01
    55cc:	99 87       	std	Y+9, r25	; 0x09
    55ce:	88 87       	std	Y+8, r24	; 0x08
    55d0:	8a 81       	ldd	r24, Y+2	; 0x02
    55d2:	9b 81       	ldd	r25, Y+3	; 0x03
    55d4:	28 85       	ldd	r18, Y+8	; 0x08
    55d6:	39 85       	ldd	r19, Y+9	; 0x09
    55d8:	fc 01       	movw	r30, r24
    55da:	37 83       	std	Z+7, r19	; 0x07
    55dc:	26 83       	std	Z+6, r18	; 0x06
    55de:	88 85       	ldd	r24, Y+8	; 0x08
    55e0:	99 85       	ldd	r25, Y+9	; 0x09
    55e2:	fc 01       	movw	r30, r24
    55e4:	26 81       	ldd	r18, Z+6	; 0x06
    55e6:	37 81       	ldd	r19, Z+7	; 0x07
    55e8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ea:	9b 81       	ldd	r25, Y+3	; 0x03
    55ec:	fc 01       	movw	r30, r24
    55ee:	31 87       	std	Z+9, r19	; 0x09
    55f0:	20 87       	std	Z+8, r18	; 0x08
    55f2:	88 85       	ldd	r24, Y+8	; 0x08
    55f4:	99 85       	ldd	r25, Y+9	; 0x09
    55f6:	fc 01       	movw	r30, r24
    55f8:	86 81       	ldd	r24, Z+6	; 0x06
    55fa:	97 81       	ldd	r25, Z+7	; 0x07
    55fc:	2a 81       	ldd	r18, Y+2	; 0x02
    55fe:	3b 81       	ldd	r19, Y+3	; 0x03
    5600:	2e 5f       	subi	r18, 0xFE	; 254
    5602:	3f 4f       	sbci	r19, 0xFF	; 255
    5604:	fc 01       	movw	r30, r24
    5606:	35 83       	std	Z+5, r19	; 0x05
    5608:	24 83       	std	Z+4, r18	; 0x04
    560a:	8a 81       	ldd	r24, Y+2	; 0x02
    560c:	9b 81       	ldd	r25, Y+3	; 0x03
    560e:	9c 01       	movw	r18, r24
    5610:	2e 5f       	subi	r18, 0xFE	; 254
    5612:	3f 4f       	sbci	r19, 0xFF	; 255
    5614:	88 85       	ldd	r24, Y+8	; 0x08
    5616:	99 85       	ldd	r25, Y+9	; 0x09
    5618:	fc 01       	movw	r30, r24
    561a:	37 83       	std	Z+7, r19	; 0x07
    561c:	26 83       	std	Z+6, r18	; 0x06
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	9b 81       	ldd	r25, Y+3	; 0x03
    5622:	fc 01       	movw	r30, r24
    5624:	82 8d       	ldd	r24, Z+26	; 0x1a
    5626:	28 2f       	mov	r18, r24
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	4b e0       	ldi	r20, 0x0B	; 11
    562c:	42 9f       	mul	r20, r18
    562e:	c0 01       	movw	r24, r0
    5630:	43 9f       	mul	r20, r19
    5632:	90 0d       	add	r25, r0
    5634:	11 24       	eor	r1, r1
    5636:	9c 01       	movw	r18, r24
    5638:	24 56       	subi	r18, 0x64	; 100
    563a:	3a 4e       	sbci	r19, 0xEA	; 234
    563c:	8a 81       	ldd	r24, Y+2	; 0x02
    563e:	9b 81       	ldd	r25, Y+3	; 0x03
    5640:	fc 01       	movw	r30, r24
    5642:	35 87       	std	Z+13, r19	; 0x0d
    5644:	24 87       	std	Z+12, r18	; 0x0c
    5646:	8a 81       	ldd	r24, Y+2	; 0x02
    5648:	9b 81       	ldd	r25, Y+3	; 0x03
    564a:	fc 01       	movw	r30, r24
    564c:	82 8d       	ldd	r24, Z+26	; 0x1a
    564e:	88 2f       	mov	r24, r24
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	4b e0       	ldi	r20, 0x0B	; 11
    5654:	48 9f       	mul	r20, r24
    5656:	90 01       	movw	r18, r0
    5658:	49 9f       	mul	r20, r25
    565a:	30 0d       	add	r19, r0
    565c:	11 24       	eor	r1, r1
    565e:	24 56       	subi	r18, 0x64	; 100
    5660:	3a 4e       	sbci	r19, 0xEA	; 234
    5662:	f9 01       	movw	r30, r18
    5664:	20 81       	ld	r18, Z
    5666:	41 e0       	ldi	r20, 0x01	; 1
    5668:	42 0f       	add	r20, r18
    566a:	5b e0       	ldi	r21, 0x0B	; 11
    566c:	58 9f       	mul	r21, r24
    566e:	90 01       	movw	r18, r0
    5670:	59 9f       	mul	r21, r25
    5672:	30 0d       	add	r19, r0
    5674:	11 24       	eor	r1, r1
    5676:	c9 01       	movw	r24, r18
    5678:	84 56       	subi	r24, 0x64	; 100
    567a:	9a 4e       	sbci	r25, 0xEA	; 234
    567c:	fc 01       	movw	r30, r24
    567e:	40 83       	st	Z, r20
    5680:	39 c0       	rjmp	.+114    	; 0x56f4 <xTaskGenericNotifyFromISR+0x3ea>
    5682:	80 91 25 16 	lds	r24, 0x1625	; 0x801625 <xPendingReadyList+0x1>
    5686:	90 91 26 16 	lds	r25, 0x1626	; 0x801626 <xPendingReadyList+0x2>
    568a:	9b 87       	std	Y+11, r25	; 0x0b
    568c:	8a 87       	std	Y+10, r24	; 0x0a
    568e:	8a 81       	ldd	r24, Y+2	; 0x02
    5690:	9b 81       	ldd	r25, Y+3	; 0x03
    5692:	2a 85       	ldd	r18, Y+10	; 0x0a
    5694:	3b 85       	ldd	r19, Y+11	; 0x0b
    5696:	fc 01       	movw	r30, r24
    5698:	33 8b       	std	Z+19, r19	; 0x13
    569a:	22 8b       	std	Z+18, r18	; 0x12
    569c:	8a 85       	ldd	r24, Y+10	; 0x0a
    569e:	9b 85       	ldd	r25, Y+11	; 0x0b
    56a0:	fc 01       	movw	r30, r24
    56a2:	26 81       	ldd	r18, Z+6	; 0x06
    56a4:	37 81       	ldd	r19, Z+7	; 0x07
    56a6:	8a 81       	ldd	r24, Y+2	; 0x02
    56a8:	9b 81       	ldd	r25, Y+3	; 0x03
    56aa:	fc 01       	movw	r30, r24
    56ac:	35 8b       	std	Z+21, r19	; 0x15
    56ae:	24 8b       	std	Z+20, r18	; 0x14
    56b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    56b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    56b4:	fc 01       	movw	r30, r24
    56b6:	86 81       	ldd	r24, Z+6	; 0x06
    56b8:	97 81       	ldd	r25, Z+7	; 0x07
    56ba:	2a 81       	ldd	r18, Y+2	; 0x02
    56bc:	3b 81       	ldd	r19, Y+3	; 0x03
    56be:	22 5f       	subi	r18, 0xF2	; 242
    56c0:	3f 4f       	sbci	r19, 0xFF	; 255
    56c2:	fc 01       	movw	r30, r24
    56c4:	35 83       	std	Z+5, r19	; 0x05
    56c6:	24 83       	std	Z+4, r18	; 0x04
    56c8:	8a 81       	ldd	r24, Y+2	; 0x02
    56ca:	9b 81       	ldd	r25, Y+3	; 0x03
    56cc:	9c 01       	movw	r18, r24
    56ce:	22 5f       	subi	r18, 0xF2	; 242
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    56d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    56d6:	fc 01       	movw	r30, r24
    56d8:	37 83       	std	Z+7, r19	; 0x07
    56da:	26 83       	std	Z+6, r18	; 0x06
    56dc:	8a 81       	ldd	r24, Y+2	; 0x02
    56de:	9b 81       	ldd	r25, Y+3	; 0x03
    56e0:	24 e2       	ldi	r18, 0x24	; 36
    56e2:	36 e1       	ldi	r19, 0x16	; 22
    56e4:	fc 01       	movw	r30, r24
    56e6:	31 8f       	std	Z+25, r19	; 0x19
    56e8:	20 8f       	std	Z+24, r18	; 0x18
    56ea:	80 91 24 16 	lds	r24, 0x1624	; 0x801624 <xPendingReadyList>
    56ee:	8f 5f       	subi	r24, 0xFF	; 255
    56f0:	80 93 24 16 	sts	0x1624, r24	; 0x801624 <xPendingReadyList>
    56f4:	8a 81       	ldd	r24, Y+2	; 0x02
    56f6:	9b 81       	ldd	r25, Y+3	; 0x03
    56f8:	fc 01       	movw	r30, r24
    56fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    56fc:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    5700:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    5704:	fc 01       	movw	r30, r24
    5706:	82 8d       	ldd	r24, Z+26	; 0x1a
    5708:	82 17       	cp	r24, r18
    570a:	60 f4       	brcc	.+24     	; 0x5724 <xTaskGenericNotifyFromISR+0x41a>
    570c:	8e 89       	ldd	r24, Y+22	; 0x16
    570e:	9f 89       	ldd	r25, Y+23	; 0x17
    5710:	89 2b       	or	r24, r25
    5712:	29 f0       	breq	.+10     	; 0x571e <xTaskGenericNotifyFromISR+0x414>
    5714:	8e 89       	ldd	r24, Y+22	; 0x16
    5716:	9f 89       	ldd	r25, Y+23	; 0x17
    5718:	21 e0       	ldi	r18, 0x01	; 1
    571a:	fc 01       	movw	r30, r24
    571c:	20 83       	st	Z, r18
    571e:	81 e0       	ldi	r24, 0x01	; 1
    5720:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <xYieldPending>
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	67 96       	adiw	r28, 0x17	; 23
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	de bf       	out	0x3e, r29	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	0f 91       	pop	r16
    5738:	ff 90       	pop	r15
    573a:	ef 90       	pop	r14
    573c:	df 90       	pop	r13
    573e:	cf 90       	pop	r12
    5740:	08 95       	ret

00005742 <xTaskGenericNotifyStateClear>:
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	00 d0       	rcall	.+0      	; 0x5748 <xTaskGenericNotifyStateClear+0x6>
    5748:	00 d0       	rcall	.+0      	; 0x574a <xTaskGenericNotifyStateClear+0x8>
    574a:	cd b7       	in	r28, 0x3d	; 61
    574c:	de b7       	in	r29, 0x3e	; 62
    574e:	9d 83       	std	Y+5, r25	; 0x05
    5750:	8c 83       	std	Y+4, r24	; 0x04
    5752:	6e 83       	std	Y+6, r22	; 0x06
    5754:	8c 81       	ldd	r24, Y+4	; 0x04
    5756:	9d 81       	ldd	r25, Y+5	; 0x05
    5758:	89 2b       	or	r24, r25
    575a:	29 f4       	brne	.+10     	; 0x5766 <xTaskGenericNotifyStateClear+0x24>
    575c:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    5760:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    5764:	02 c0       	rjmp	.+4      	; 0x576a <xTaskGenericNotifyStateClear+0x28>
    5766:	8c 81       	ldd	r24, Y+4	; 0x04
    5768:	9d 81       	ldd	r25, Y+5	; 0x05
    576a:	9b 83       	std	Y+3, r25	; 0x03
    576c:	8a 83       	std	Y+2, r24	; 0x02
    576e:	0f b6       	in	r0, 0x3f	; 63
    5770:	f8 94       	cli
    5772:	0f 92       	push	r0
    5774:	8e 81       	ldd	r24, Y+6	; 0x06
    5776:	88 2f       	mov	r24, r24
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	2a 81       	ldd	r18, Y+2	; 0x02
    577c:	3b 81       	ldd	r19, Y+3	; 0x03
    577e:	82 0f       	add	r24, r18
    5780:	93 1f       	adc	r25, r19
    5782:	c3 96       	adiw	r24, 0x33	; 51
    5784:	fc 01       	movw	r30, r24
    5786:	80 81       	ld	r24, Z
    5788:	82 30       	cpi	r24, 0x02	; 2
    578a:	69 f4       	brne	.+26     	; 0x57a6 <xTaskGenericNotifyStateClear+0x64>
    578c:	8e 81       	ldd	r24, Y+6	; 0x06
    578e:	88 2f       	mov	r24, r24
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	2a 81       	ldd	r18, Y+2	; 0x02
    5794:	3b 81       	ldd	r19, Y+3	; 0x03
    5796:	82 0f       	add	r24, r18
    5798:	93 1f       	adc	r25, r19
    579a:	c3 96       	adiw	r24, 0x33	; 51
    579c:	fc 01       	movw	r30, r24
    579e:	10 82       	st	Z, r1
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	89 83       	std	Y+1, r24	; 0x01
    57a4:	01 c0       	rjmp	.+2      	; 0x57a8 <xTaskGenericNotifyStateClear+0x66>
    57a6:	19 82       	std	Y+1, r1	; 0x01
    57a8:	0f 90       	pop	r0
    57aa:	0f be       	out	0x3f, r0	; 63
    57ac:	89 81       	ldd	r24, Y+1	; 0x01
    57ae:	26 96       	adiw	r28, 0x06	; 6
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	cd bf       	out	0x3d, r28	; 61
    57ba:	df 91       	pop	r29
    57bc:	cf 91       	pop	r28
    57be:	08 95       	ret

000057c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    57c0:	cf 93       	push	r28
    57c2:	df 93       	push	r29
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	2d 97       	sbiw	r28, 0x0d	; 13
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	f8 94       	cli
    57ce:	de bf       	out	0x3e, r29	; 62
    57d0:	0f be       	out	0x3f, r0	; 63
    57d2:	cd bf       	out	0x3d, r28	; 61
    57d4:	69 87       	std	Y+9, r22	; 0x09
    57d6:	7a 87       	std	Y+10, r23	; 0x0a
    57d8:	8b 87       	std	Y+11, r24	; 0x0b
    57da:	9c 87       	std	Y+12, r25	; 0x0c
    57dc:	4d 87       	std	Y+13, r20	; 0x0d
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    57de:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <xTickCount>
    57e2:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <xTickCount+0x1>
    57e6:	a0 91 3e 16 	lds	r26, 0x163E	; 0x80163e <xTickCount+0x2>
    57ea:	b0 91 3f 16 	lds	r27, 0x163F	; 0x80163f <xTickCount+0x3>
    57ee:	89 83       	std	Y+1, r24	; 0x01
    57f0:	9a 83       	std	Y+2, r25	; 0x02
    57f2:	ab 83       	std	Y+3, r26	; 0x03
    57f4:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    57f6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    57fa:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    57fe:	02 96       	adiw	r24, 0x02	; 2
    5800:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the kernel
             * will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    5804:	29 81       	ldd	r18, Y+1	; 0x01
    5806:	3a 81       	ldd	r19, Y+2	; 0x02
    5808:	4b 81       	ldd	r20, Y+3	; 0x03
    580a:	5c 81       	ldd	r21, Y+4	; 0x04
    580c:	89 85       	ldd	r24, Y+9	; 0x09
    580e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5810:	ab 85       	ldd	r26, Y+11	; 0x0b
    5812:	bc 85       	ldd	r27, Y+12	; 0x0c
    5814:	82 0f       	add	r24, r18
    5816:	93 1f       	adc	r25, r19
    5818:	a4 1f       	adc	r26, r20
    581a:	b5 1f       	adc	r27, r21
    581c:	8d 83       	std	Y+5, r24	; 0x05
    581e:	9e 83       	std	Y+6, r25	; 0x06
    5820:	af 83       	std	Y+7, r26	; 0x07
    5822:	b8 87       	std	Y+8, r27	; 0x08

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5824:	20 91 9a 15 	lds	r18, 0x159A	; 0x80159a <pxCurrentTCB>
    5828:	30 91 9b 15 	lds	r19, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    582c:	8d 81       	ldd	r24, Y+5	; 0x05
    582e:	9e 81       	ldd	r25, Y+6	; 0x06
    5830:	af 81       	ldd	r26, Y+7	; 0x07
    5832:	b8 85       	ldd	r27, Y+8	; 0x08
    5834:	f9 01       	movw	r30, r18
    5836:	82 83       	std	Z+2, r24	; 0x02
    5838:	93 83       	std	Z+3, r25	; 0x03
    583a:	a4 83       	std	Z+4, r26	; 0x04
    583c:	b5 83       	std	Z+5, r27	; 0x05

            if( xTimeToWake < xConstTickCount )
    583e:	2d 81       	ldd	r18, Y+5	; 0x05
    5840:	3e 81       	ldd	r19, Y+6	; 0x06
    5842:	4f 81       	ldd	r20, Y+7	; 0x07
    5844:	58 85       	ldd	r21, Y+8	; 0x08
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	9a 81       	ldd	r25, Y+2	; 0x02
    584a:	ab 81       	ldd	r26, Y+3	; 0x03
    584c:	bc 81       	ldd	r27, Y+4	; 0x04
    584e:	28 17       	cp	r18, r24
    5850:	39 07       	cpc	r19, r25
    5852:	4a 07       	cpc	r20, r26
    5854:	5b 07       	cpc	r21, r27
    5856:	78 f4       	brcc	.+30     	; 0x5876 <prvAddCurrentTaskToDelayedList+0xb6>
            {
                /* Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5858:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    585c:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    5860:	9c 01       	movw	r18, r24
    5862:	2e 5f       	subi	r18, 0xFE	; 254
    5864:	3f 4f       	sbci	r19, 0xFF	; 255
    5866:	80 91 22 16 	lds	r24, 0x1622	; 0x801622 <pxOverflowDelayedTaskList>
    586a:	90 91 23 16 	lds	r25, 0x1623	; 0x801623 <pxOverflowDelayedTaskList+0x1>
    586e:	b9 01       	movw	r22, r18
    5870:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5874:	2b c0       	rjmp	.+86     	; 0x58cc <prvAddCurrentTaskToDelayedList+0x10c>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
            }
            else
            {
                /* The wake time has not overflowed, so the current block list is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5876:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <pxCurrentTCB>
    587a:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <pxCurrentTCB+0x1>
    587e:	9c 01       	movw	r18, r24
    5880:	2e 5f       	subi	r18, 0xFE	; 254
    5882:	3f 4f       	sbci	r19, 0xFF	; 255
    5884:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <pxDelayedTaskList>
    5888:	90 91 21 16 	lds	r25, 0x1621	; 0x801621 <pxDelayedTaskList+0x1>
    588c:	b9 01       	movw	r22, r18
    588e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>

                /* If the task entering the blocked state was placed at the head of the
                 * list of blocked tasks then xNextTaskUnblockTime needs to be updated
                 * too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    5892:	80 91 49 16 	lds	r24, 0x1649	; 0x801649 <xNextTaskUnblockTime>
    5896:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <xNextTaskUnblockTime+0x1>
    589a:	a0 91 4b 16 	lds	r26, 0x164B	; 0x80164b <xNextTaskUnblockTime+0x2>
    589e:	b0 91 4c 16 	lds	r27, 0x164C	; 0x80164c <xNextTaskUnblockTime+0x3>
    58a2:	2d 81       	ldd	r18, Y+5	; 0x05
    58a4:	3e 81       	ldd	r19, Y+6	; 0x06
    58a6:	4f 81       	ldd	r20, Y+7	; 0x07
    58a8:	58 85       	ldd	r21, Y+8	; 0x08
    58aa:	28 17       	cp	r18, r24
    58ac:	39 07       	cpc	r19, r25
    58ae:	4a 07       	cpc	r20, r26
    58b0:	5b 07       	cpc	r21, r27
    58b2:	60 f4       	brcc	.+24     	; 0x58cc <prvAddCurrentTaskToDelayedList+0x10c>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    58b4:	8d 81       	ldd	r24, Y+5	; 0x05
    58b6:	9e 81       	ldd	r25, Y+6	; 0x06
    58b8:	af 81       	ldd	r26, Y+7	; 0x07
    58ba:	b8 85       	ldd	r27, Y+8	; 0x08
    58bc:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <xNextTaskUnblockTime>
    58c0:	90 93 4a 16 	sts	0x164A, r25	; 0x80164a <xNextTaskUnblockTime+0x1>
    58c4:	a0 93 4b 16 	sts	0x164B, r26	; 0x80164b <xNextTaskUnblockTime+0x2>
    58c8:	b0 93 4c 16 	sts	0x164C, r27	; 0x80164c <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    58cc:	00 00       	nop
    58ce:	2d 96       	adiw	r28, 0x0d	; 13
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	de bf       	out	0x3e, r29	; 62
    58d6:	0f be       	out	0x3f, r0	; 63
    58d8:	cd bf       	out	0x3d, r28	; 61
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	08 95       	ret

000058e0 <xTimerCreateTimerTask>:
    58e0:	ef 92       	push	r14
    58e2:	ff 92       	push	r15
    58e4:	0f 93       	push	r16
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	1f 92       	push	r1
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	19 82       	std	Y+1, r1	; 0x01
    58f2:	ae d4       	rcall	.+2396   	; 0x6250 <prvCheckForValidListAndQueue>
    58f4:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    58f8:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    58fc:	89 2b       	or	r24, r25
    58fe:	91 f0       	breq	.+36     	; 0x5924 <xTimerCreateTimerTask+0x44>
    5900:	0f 2e       	mov	r0, r31
    5902:	fc e6       	ldi	r31, 0x6C	; 108
    5904:	ef 2e       	mov	r14, r31
    5906:	f6 e1       	ldi	r31, 0x16	; 22
    5908:	ff 2e       	mov	r15, r31
    590a:	f0 2d       	mov	r31, r0
    590c:	03 e0       	ldi	r16, 0x03	; 3
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	40 ec       	ldi	r20, 0xC0	; 192
    5914:	50 e0       	ldi	r21, 0x00	; 0
    5916:	6b ec       	ldi	r22, 0xCB	; 203
    5918:	74 e0       	ldi	r23, 0x04	; 4
    591a:	80 ee       	ldi	r24, 0xE0	; 224
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskCreate>
    5922:	89 83       	std	Y+1, r24	; 0x01
    5924:	89 81       	ldd	r24, Y+1	; 0x01
    5926:	0f 90       	pop	r0
    5928:	df 91       	pop	r29
    592a:	cf 91       	pop	r28
    592c:	0f 91       	pop	r16
    592e:	ff 90       	pop	r15
    5930:	ef 90       	pop	r14
    5932:	08 95       	ret

00005934 <xTimerGenericCommand>:
    5934:	cf 92       	push	r12
    5936:	df 92       	push	r13
    5938:	ef 92       	push	r14
    593a:	ff 92       	push	r15
    593c:	0f 93       	push	r16
    593e:	1f 93       	push	r17
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	cd b7       	in	r28, 0x3d	; 61
    5946:	de b7       	in	r29, 0x3e	; 62
    5948:	65 97       	sbiw	r28, 0x15	; 21
    594a:	0f b6       	in	r0, 0x3f	; 63
    594c:	f8 94       	cli
    594e:	de bf       	out	0x3e, r29	; 62
    5950:	0f be       	out	0x3f, r0	; 63
    5952:	cd bf       	out	0x3d, r28	; 61
    5954:	9a 87       	std	Y+10, r25	; 0x0a
    5956:	89 87       	std	Y+9, r24	; 0x09
    5958:	6b 87       	std	Y+11, r22	; 0x0b
    595a:	2c 87       	std	Y+12, r18	; 0x0c
    595c:	3d 87       	std	Y+13, r19	; 0x0d
    595e:	4e 87       	std	Y+14, r20	; 0x0e
    5960:	5f 87       	std	Y+15, r21	; 0x0f
    5962:	19 8b       	std	Y+17, r17	; 0x11
    5964:	08 8b       	std	Y+16, r16	; 0x10
    5966:	ca 8a       	std	Y+18, r12	; 0x12
    5968:	db 8a       	std	Y+19, r13	; 0x13
    596a:	ec 8a       	std	Y+20, r14	; 0x14
    596c:	fd 8a       	std	Y+21, r15	; 0x15
    596e:	19 82       	std	Y+1, r1	; 0x01
    5970:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    5974:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    5978:	89 2b       	or	r24, r25
    597a:	09 f4       	brne	.+2      	; 0x597e <xTimerGenericCommand+0x4a>
    597c:	43 c0       	rjmp	.+134    	; 0x5a04 <xTimerGenericCommand+0xd0>
    597e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5980:	8a 83       	std	Y+2, r24	; 0x02
    5982:	8c 85       	ldd	r24, Y+12	; 0x0c
    5984:	9d 85       	ldd	r25, Y+13	; 0x0d
    5986:	ae 85       	ldd	r26, Y+14	; 0x0e
    5988:	bf 85       	ldd	r27, Y+15	; 0x0f
    598a:	8b 83       	std	Y+3, r24	; 0x03
    598c:	9c 83       	std	Y+4, r25	; 0x04
    598e:	ad 83       	std	Y+5, r26	; 0x05
    5990:	be 83       	std	Y+6, r27	; 0x06
    5992:	89 85       	ldd	r24, Y+9	; 0x09
    5994:	9a 85       	ldd	r25, Y+10	; 0x0a
    5996:	98 87       	std	Y+8, r25	; 0x08
    5998:	8f 83       	std	Y+7, r24	; 0x07
    599a:	8b 85       	ldd	r24, Y+11	; 0x0b
    599c:	86 30       	cpi	r24, 0x06	; 6
    599e:	2c f5       	brge	.+74     	; 0x59ea <xTimerGenericCommand+0xb6>
    59a0:	95 d8       	rcall	.-3798   	; 0x4acc <xTaskGetSchedulerState>
    59a2:	82 30       	cpi	r24, 0x02	; 2
    59a4:	99 f4       	brne	.+38     	; 0x59cc <xTimerGenericCommand+0x98>
    59a6:	e0 91 6a 16 	lds	r30, 0x166A	; 0x80166a <xTimerQueue>
    59aa:	f0 91 6b 16 	lds	r31, 0x166B	; 0x80166b <xTimerQueue+0x1>
    59ae:	8a 89       	ldd	r24, Y+18	; 0x12
    59b0:	9b 89       	ldd	r25, Y+19	; 0x13
    59b2:	ac 89       	ldd	r26, Y+20	; 0x14
    59b4:	bd 89       	ldd	r27, Y+21	; 0x15
    59b6:	be 01       	movw	r22, r28
    59b8:	6e 5f       	subi	r22, 0xFE	; 254
    59ba:	7f 4f       	sbci	r23, 0xFF	; 255
    59bc:	00 e0       	ldi	r16, 0x00	; 0
    59be:	9c 01       	movw	r18, r24
    59c0:	ad 01       	movw	r20, r26
    59c2:	cf 01       	movw	r24, r30
    59c4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueGenericSend>
    59c8:	89 83       	std	Y+1, r24	; 0x01
    59ca:	1c c0       	rjmp	.+56     	; 0x5a04 <xTimerGenericCommand+0xd0>
    59cc:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    59d0:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    59d4:	be 01       	movw	r22, r28
    59d6:	6e 5f       	subi	r22, 0xFE	; 254
    59d8:	7f 4f       	sbci	r23, 0xFF	; 255
    59da:	00 e0       	ldi	r16, 0x00	; 0
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	a9 01       	movw	r20, r18
    59e2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueGenericSend>
    59e6:	89 83       	std	Y+1, r24	; 0x01
    59e8:	0d c0       	rjmp	.+26     	; 0x5a04 <xTimerGenericCommand+0xd0>
    59ea:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    59ee:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    59f2:	48 89       	ldd	r20, Y+16	; 0x10
    59f4:	59 89       	ldd	r21, Y+17	; 0x11
    59f6:	be 01       	movw	r22, r28
    59f8:	6e 5f       	subi	r22, 0xFE	; 254
    59fa:	7f 4f       	sbci	r23, 0xFF	; 255
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xQueueGenericSendFromISR>
    5a02:	89 83       	std	Y+1, r24	; 0x01
    5a04:	89 81       	ldd	r24, Y+1	; 0x01
    5a06:	65 96       	adiw	r28, 0x15	; 21
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	de bf       	out	0x3e, r29	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	cd bf       	out	0x3d, r28	; 61
    5a12:	df 91       	pop	r29
    5a14:	cf 91       	pop	r28
    5a16:	1f 91       	pop	r17
    5a18:	0f 91       	pop	r16
    5a1a:	ff 90       	pop	r15
    5a1c:	ef 90       	pop	r14
    5a1e:	df 90       	pop	r13
    5a20:	cf 90       	pop	r12
    5a22:	08 95       	ret

00005a24 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    5a24:	cf 92       	push	r12
    5a26:	df 92       	push	r13
    5a28:	ef 92       	push	r14
    5a2a:	ff 92       	push	r15
    5a2c:	0f 93       	push	r16
    5a2e:	1f 93       	push	r17
    5a30:	cf 93       	push	r28
    5a32:	df 93       	push	r29
    5a34:	cd b7       	in	r28, 0x3d	; 61
    5a36:	de b7       	in	r29, 0x3e	; 62
    5a38:	2b 97       	sbiw	r28, 0x0b	; 11
    5a3a:	0f b6       	in	r0, 0x3f	; 63
    5a3c:	f8 94       	cli
    5a3e:	de bf       	out	0x3e, r29	; 62
    5a40:	0f be       	out	0x3f, r0	; 63
    5a42:	cd bf       	out	0x3d, r28	; 61
    5a44:	6c 83       	std	Y+4, r22	; 0x04
    5a46:	7d 83       	std	Y+5, r23	; 0x05
    5a48:	8e 83       	std	Y+6, r24	; 0x06
    5a4a:	9f 83       	std	Y+7, r25	; 0x07
    5a4c:	28 87       	std	Y+8, r18	; 0x08
    5a4e:	39 87       	std	Y+9, r19	; 0x09
    5a50:	4a 87       	std	Y+10, r20	; 0x0a
    5a52:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5a54:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    5a58:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	87 81       	ldd	r24, Z+7	; 0x07
    5a60:	90 85       	ldd	r25, Z+8	; 0x08
    5a62:	fc 01       	movw	r30, r24
    5a64:	80 85       	ldd	r24, Z+8	; 0x08
    5a66:	91 85       	ldd	r25, Z+9	; 0x09
    5a68:	9a 83       	std	Y+2, r25	; 0x02
    5a6a:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5a6c:	89 81       	ldd	r24, Y+1	; 0x01
    5a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a70:	02 96       	adiw	r24, 0x02	; 2
    5a72:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	86 89       	ldd	r24, Z+22	; 0x16
    5a7e:	88 2f       	mov	r24, r24
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	84 70       	andi	r24, 0x04	; 4
    5a84:	99 27       	eor	r25, r25
    5a86:	89 2b       	or	r24, r25
    5a88:	a9 f1       	breq	.+106    	; 0x5af4 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5a8a:	89 81       	ldd	r24, Y+1	; 0x01
    5a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a8e:	fc 01       	movw	r30, r24
    5a90:	26 85       	ldd	r18, Z+14	; 0x0e
    5a92:	37 85       	ldd	r19, Z+15	; 0x0f
    5a94:	40 89       	ldd	r20, Z+16	; 0x10
    5a96:	51 89       	ldd	r21, Z+17	; 0x11
    5a98:	8c 81       	ldd	r24, Y+4	; 0x04
    5a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    5a9c:	ae 81       	ldd	r26, Y+6	; 0x06
    5a9e:	bf 81       	ldd	r27, Y+7	; 0x07
    5aa0:	82 0f       	add	r24, r18
    5aa2:	93 1f       	adc	r25, r19
    5aa4:	a4 1f       	adc	r26, r20
    5aa6:	b5 1f       	adc	r27, r21
    5aa8:	ec 80       	ldd	r14, Y+4	; 0x04
    5aaa:	fd 80       	ldd	r15, Y+5	; 0x05
    5aac:	0e 81       	ldd	r16, Y+6	; 0x06
    5aae:	1f 81       	ldd	r17, Y+7	; 0x07
    5ab0:	28 85       	ldd	r18, Y+8	; 0x08
    5ab2:	39 85       	ldd	r19, Y+9	; 0x09
    5ab4:	4a 85       	ldd	r20, Y+10	; 0x0a
    5ab6:	5b 85       	ldd	r21, Y+11	; 0x0b
    5ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    5aba:	fa 81       	ldd	r31, Y+2	; 0x02
    5abc:	67 01       	movw	r12, r14
    5abe:	78 01       	movw	r14, r16
    5ac0:	89 01       	movw	r16, r18
    5ac2:	9a 01       	movw	r18, r20
    5ac4:	ac 01       	movw	r20, r24
    5ac6:	bd 01       	movw	r22, r26
    5ac8:	cf 01       	movw	r24, r30
    5aca:	3e d1       	rcall	.+636    	; 0x5d48 <prvInsertTimerInActiveList>
    5acc:	88 23       	and	r24, r24
    5ace:	e1 f0       	breq	.+56     	; 0x5b08 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ad4:	ae 81       	ldd	r26, Y+6	; 0x06
    5ad6:	bf 81       	ldd	r27, Y+7	; 0x07
    5ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    5ada:	fa 81       	ldd	r31, Y+2	; 0x02
    5adc:	c1 2c       	mov	r12, r1
    5ade:	d1 2c       	mov	r13, r1
    5ae0:	76 01       	movw	r14, r12
    5ae2:	00 e0       	ldi	r16, 0x00	; 0
    5ae4:	10 e0       	ldi	r17, 0x00	; 0
    5ae6:	9c 01       	movw	r18, r24
    5ae8:	ad 01       	movw	r20, r26
    5aea:	60 e0       	ldi	r22, 0x00	; 0
    5aec:	cf 01       	movw	r24, r30
    5aee:	22 df       	rcall	.-444    	; 0x5934 <xTimerGenericCommand>
    5af0:	8b 83       	std	Y+3, r24	; 0x03
    5af2:	0a c0       	rjmp	.+20     	; 0x5b08 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5af4:	89 81       	ldd	r24, Y+1	; 0x01
    5af6:	9a 81       	ldd	r25, Y+2	; 0x02
    5af8:	fc 01       	movw	r30, r24
    5afa:	86 89       	ldd	r24, Z+22	; 0x16
    5afc:	28 2f       	mov	r18, r24
    5afe:	2e 7f       	andi	r18, 0xFE	; 254
    5b00:	89 81       	ldd	r24, Y+1	; 0x01
    5b02:	9a 81       	ldd	r25, Y+2	; 0x02
    5b04:	fc 01       	movw	r30, r24
    5b06:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5b08:	89 81       	ldd	r24, Y+1	; 0x01
    5b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	24 89       	ldd	r18, Z+20	; 0x14
    5b10:	35 89       	ldd	r19, Z+21	; 0x15
    5b12:	89 81       	ldd	r24, Y+1	; 0x01
    5b14:	9a 81       	ldd	r25, Y+2	; 0x02
    5b16:	f9 01       	movw	r30, r18
    5b18:	19 95       	eicall
    }
    5b1a:	00 00       	nop
    5b1c:	2b 96       	adiw	r28, 0x0b	; 11
    5b1e:	0f b6       	in	r0, 0x3f	; 63
    5b20:	f8 94       	cli
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	cd bf       	out	0x3d, r28	; 61
    5b28:	df 91       	pop	r29
    5b2a:	cf 91       	pop	r28
    5b2c:	1f 91       	pop	r17
    5b2e:	0f 91       	pop	r16
    5b30:	ff 90       	pop	r15
    5b32:	ef 90       	pop	r14
    5b34:	df 90       	pop	r13
    5b36:	cf 90       	pop	r12
    5b38:	08 95       	ret

00005b3a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    5b3a:	ef 92       	push	r14
    5b3c:	ff 92       	push	r15
    5b3e:	0f 93       	push	r16
    5b40:	1f 93       	push	r17
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	2a 97       	sbiw	r28, 0x0a	; 10
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	6e 83       	std	Y+6, r22	; 0x06
    5b58:	7f 83       	std	Y+7, r23	; 0x07
    5b5a:	88 87       	std	Y+8, r24	; 0x08
    5b5c:	99 87       	std	Y+9, r25	; 0x09
    5b5e:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    5b60:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5b64:	ce 01       	movw	r24, r28
    5b66:	05 96       	adiw	r24, 0x05	; 5
    5b68:	a8 d0       	rcall	.+336    	; 0x5cba <prvSampleTimeNow>
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	89 83       	std	Y+1, r24	; 0x01
    5b70:	9a 83       	std	Y+2, r25	; 0x02
    5b72:	ab 83       	std	Y+3, r26	; 0x03
    5b74:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    5b76:	8d 81       	ldd	r24, Y+5	; 0x05
    5b78:	88 23       	and	r24, r24
    5b7a:	09 f0       	breq	.+2      	; 0x5b7e <prvProcessTimerOrBlockTask+0x44>
    5b7c:	4d c0       	rjmp	.+154    	; 0x5c18 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b80:	88 23       	and	r24, r24
    5b82:	d9 f4       	brne	.+54     	; 0x5bba <prvProcessTimerOrBlockTask+0x80>
    5b84:	2e 81       	ldd	r18, Y+6	; 0x06
    5b86:	3f 81       	ldd	r19, Y+7	; 0x07
    5b88:	48 85       	ldd	r20, Y+8	; 0x08
    5b8a:	59 85       	ldd	r21, Y+9	; 0x09
    5b8c:	89 81       	ldd	r24, Y+1	; 0x01
    5b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b90:	ab 81       	ldd	r26, Y+3	; 0x03
    5b92:	bc 81       	ldd	r27, Y+4	; 0x04
    5b94:	82 17       	cp	r24, r18
    5b96:	93 07       	cpc	r25, r19
    5b98:	a4 07       	cpc	r26, r20
    5b9a:	b5 07       	cpc	r27, r21
    5b9c:	70 f0       	brcs	.+28     	; 0x5bba <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    5b9e:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5ba2:	29 81       	ldd	r18, Y+1	; 0x01
    5ba4:	3a 81       	ldd	r19, Y+2	; 0x02
    5ba6:	4b 81       	ldd	r20, Y+3	; 0x03
    5ba8:	5c 81       	ldd	r21, Y+4	; 0x04
    5baa:	8e 81       	ldd	r24, Y+6	; 0x06
    5bac:	9f 81       	ldd	r25, Y+7	; 0x07
    5bae:	a8 85       	ldd	r26, Y+8	; 0x08
    5bb0:	b9 85       	ldd	r27, Y+9	; 0x09
    5bb2:	bc 01       	movw	r22, r24
    5bb4:	cd 01       	movw	r24, r26
    5bb6:	36 df       	rcall	.-404    	; 0x5a24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5bb8:	31 c0       	rjmp	.+98     	; 0x5c1c <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    5bba:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bbc:	88 23       	and	r24, r24
    5bbe:	59 f0       	breq	.+22     	; 0x5bd6 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5bc0:	80 91 68 16 	lds	r24, 0x1668	; 0x801668 <pxOverflowTimerList>
    5bc4:	90 91 69 16 	lds	r25, 0x1669	; 0x801669 <pxOverflowTimerList+0x1>
    5bc8:	fc 01       	movw	r30, r24
    5bca:	90 81       	ld	r25, Z
    5bcc:	81 e0       	ldi	r24, 0x01	; 1
    5bce:	99 23       	and	r25, r25
    5bd0:	09 f0       	breq	.+2      	; 0x5bd4 <prvProcessTimerOrBlockTask+0x9a>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5bd6:	2e 81       	ldd	r18, Y+6	; 0x06
    5bd8:	3f 81       	ldd	r19, Y+7	; 0x07
    5bda:	48 85       	ldd	r20, Y+8	; 0x08
    5bdc:	59 85       	ldd	r21, Y+9	; 0x09
    5bde:	89 81       	ldd	r24, Y+1	; 0x01
    5be0:	9a 81       	ldd	r25, Y+2	; 0x02
    5be2:	ab 81       	ldd	r26, Y+3	; 0x03
    5be4:	bc 81       	ldd	r27, Y+4	; 0x04
    5be6:	79 01       	movw	r14, r18
    5be8:	8a 01       	movw	r16, r20
    5bea:	e8 1a       	sub	r14, r24
    5bec:	f9 0a       	sbc	r15, r25
    5bee:	0a 0b       	sbc	r16, r26
    5bf0:	1b 0b       	sbc	r17, r27
    5bf2:	d8 01       	movw	r26, r16
    5bf4:	c7 01       	movw	r24, r14
    5bf6:	e0 91 6a 16 	lds	r30, 0x166A	; 0x80166a <xTimerQueue>
    5bfa:	f0 91 6b 16 	lds	r31, 0x166B	; 0x80166b <xTimerQueue+0x1>
    5bfe:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c00:	ac 01       	movw	r20, r24
    5c02:	bd 01       	movw	r22, r26
    5c04:	cf 01       	movw	r24, r30
    5c06:	0e 94 1a 12 	call	0x2434	; 0x2434 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    5c0a:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
    5c0e:	88 23       	and	r24, r24
    5c10:	29 f4       	brne	.+10     	; 0x5c1c <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    5c12:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    5c18:	0e 94 97 1b 	call	0x372e	; 0x372e <xTaskResumeAll>
            }
        }
    }
    5c1c:	00 00       	nop
    5c1e:	2a 96       	adiw	r28, 0x0a	; 10
    5c20:	0f b6       	in	r0, 0x3f	; 63
    5c22:	f8 94       	cli
    5c24:	de bf       	out	0x3e, r29	; 62
    5c26:	0f be       	out	0x3f, r0	; 63
    5c28:	cd bf       	out	0x3d, r28	; 61
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	ff 90       	pop	r15
    5c34:	ef 90       	pop	r14
    5c36:	08 95       	ret

00005c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    5c38:	cf 93       	push	r28
    5c3a:	df 93       	push	r29
    5c3c:	00 d0       	rcall	.+0      	; 0x5c3e <prvGetNextExpireTime+0x6>
    5c3e:	00 d0       	rcall	.+0      	; 0x5c40 <prvGetNextExpireTime+0x8>
    5c40:	cd b7       	in	r28, 0x3d	; 61
    5c42:	de b7       	in	r29, 0x3e	; 62
    5c44:	9e 83       	std	Y+6, r25	; 0x06
    5c46:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5c48:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    5c4c:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    5c50:	fc 01       	movw	r30, r24
    5c52:	90 81       	ld	r25, Z
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	99 23       	and	r25, r25
    5c58:	09 f0       	breq	.+2      	; 0x5c5c <prvGetNextExpireTime+0x24>
    5c5a:	80 e0       	ldi	r24, 0x00	; 0
    5c5c:	28 2f       	mov	r18, r24
    5c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c60:	9e 81       	ldd	r25, Y+6	; 0x06
    5c62:	fc 01       	movw	r30, r24
    5c64:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    5c66:	8d 81       	ldd	r24, Y+5	; 0x05
    5c68:	9e 81       	ldd	r25, Y+6	; 0x06
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	80 81       	ld	r24, Z
    5c6e:	88 23       	and	r24, r24
    5c70:	89 f4       	brne	.+34     	; 0x5c94 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5c72:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    5c76:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	87 81       	ldd	r24, Z+7	; 0x07
    5c7e:	90 85       	ldd	r25, Z+8	; 0x08
    5c80:	fc 01       	movw	r30, r24
    5c82:	80 81       	ld	r24, Z
    5c84:	91 81       	ldd	r25, Z+1	; 0x01
    5c86:	a2 81       	ldd	r26, Z+2	; 0x02
    5c88:	b3 81       	ldd	r27, Z+3	; 0x03
    5c8a:	89 83       	std	Y+1, r24	; 0x01
    5c8c:	9a 83       	std	Y+2, r25	; 0x02
    5c8e:	ab 83       	std	Y+3, r26	; 0x03
    5c90:	bc 83       	std	Y+4, r27	; 0x04
    5c92:	04 c0       	rjmp	.+8      	; 0x5c9c <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    5c94:	19 82       	std	Y+1, r1	; 0x01
    5c96:	1a 82       	std	Y+2, r1	; 0x02
    5c98:	1b 82       	std	Y+3, r1	; 0x03
    5c9a:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    5c9c:	89 81       	ldd	r24, Y+1	; 0x01
    5c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    5ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5ca4:	bc 01       	movw	r22, r24
    5ca6:	cd 01       	movw	r24, r26
    5ca8:	26 96       	adiw	r28, 0x06	; 6
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	f8 94       	cli
    5cae:	de bf       	out	0x3e, r29	; 62
    5cb0:	0f be       	out	0x3f, r0	; 63
    5cb2:	cd bf       	out	0x3d, r28	; 61
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	08 95       	ret

00005cba <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29
    5cbe:	00 d0       	rcall	.+0      	; 0x5cc0 <prvSampleTimeNow+0x6>
    5cc0:	00 d0       	rcall	.+0      	; 0x5cc2 <prvSampleTimeNow+0x8>
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
    5cc6:	9e 83       	std	Y+6, r25	; 0x06
    5cc8:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    5cca:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <xTaskGetTickCount>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	89 83       	std	Y+1, r24	; 0x01
    5cd4:	9a 83       	std	Y+2, r25	; 0x02
    5cd6:	ab 83       	std	Y+3, r26	; 0x03
    5cd8:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    5cda:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <xLastTime.2436>
    5cde:	90 91 6f 16 	lds	r25, 0x166F	; 0x80166f <xLastTime.2436+0x1>
    5ce2:	a0 91 70 16 	lds	r26, 0x1670	; 0x801670 <xLastTime.2436+0x2>
    5ce6:	b0 91 71 16 	lds	r27, 0x1671	; 0x801671 <xLastTime.2436+0x3>
    5cea:	29 81       	ldd	r18, Y+1	; 0x01
    5cec:	3a 81       	ldd	r19, Y+2	; 0x02
    5cee:	4b 81       	ldd	r20, Y+3	; 0x03
    5cf0:	5c 81       	ldd	r21, Y+4	; 0x04
    5cf2:	28 17       	cp	r18, r24
    5cf4:	39 07       	cpc	r19, r25
    5cf6:	4a 07       	cpc	r20, r26
    5cf8:	5b 07       	cpc	r21, r27
    5cfa:	38 f4       	brcc	.+14     	; 0x5d0a <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    5cfc:	e6 d1       	rcall	.+972    	; 0x60ca <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    5cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    5d00:	9e 81       	ldd	r25, Y+6	; 0x06
    5d02:	21 e0       	ldi	r18, 0x01	; 1
    5d04:	fc 01       	movw	r30, r24
    5d06:	20 83       	st	Z, r18
    5d08:	04 c0       	rjmp	.+8      	; 0x5d12 <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    5d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    5d0e:	fc 01       	movw	r30, r24
    5d10:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	9a 81       	ldd	r25, Y+2	; 0x02
    5d16:	ab 81       	ldd	r26, Y+3	; 0x03
    5d18:	bc 81       	ldd	r27, Y+4	; 0x04
    5d1a:	80 93 6e 16 	sts	0x166E, r24	; 0x80166e <xLastTime.2436>
    5d1e:	90 93 6f 16 	sts	0x166F, r25	; 0x80166f <xLastTime.2436+0x1>
    5d22:	a0 93 70 16 	sts	0x1670, r26	; 0x801670 <xLastTime.2436+0x2>
    5d26:	b0 93 71 16 	sts	0x1671, r27	; 0x801671 <xLastTime.2436+0x3>

        return xTimeNow;
    5d2a:	89 81       	ldd	r24, Y+1	; 0x01
    5d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d2e:	ab 81       	ldd	r26, Y+3	; 0x03
    5d30:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5d32:	bc 01       	movw	r22, r24
    5d34:	cd 01       	movw	r24, r26
    5d36:	26 96       	adiw	r28, 0x06	; 6
    5d38:	0f b6       	in	r0, 0x3f	; 63
    5d3a:	f8 94       	cli
    5d3c:	de bf       	out	0x3e, r29	; 62
    5d3e:	0f be       	out	0x3f, r0	; 63
    5d40:	cd bf       	out	0x3d, r28	; 61
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	08 95       	ret

00005d48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    5d48:	cf 92       	push	r12
    5d4a:	df 92       	push	r13
    5d4c:	ef 92       	push	r14
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	cd b7       	in	r28, 0x3d	; 61
    5d5a:	de b7       	in	r29, 0x3e	; 62
    5d5c:	2f 97       	sbiw	r28, 0x0f	; 15
    5d5e:	0f b6       	in	r0, 0x3f	; 63
    5d60:	f8 94       	cli
    5d62:	de bf       	out	0x3e, r29	; 62
    5d64:	0f be       	out	0x3f, r0	; 63
    5d66:	cd bf       	out	0x3d, r28	; 61
    5d68:	9b 83       	std	Y+3, r25	; 0x03
    5d6a:	8a 83       	std	Y+2, r24	; 0x02
    5d6c:	4c 83       	std	Y+4, r20	; 0x04
    5d6e:	5d 83       	std	Y+5, r21	; 0x05
    5d70:	6e 83       	std	Y+6, r22	; 0x06
    5d72:	7f 83       	std	Y+7, r23	; 0x07
    5d74:	08 87       	std	Y+8, r16	; 0x08
    5d76:	19 87       	std	Y+9, r17	; 0x09
    5d78:	2a 87       	std	Y+10, r18	; 0x0a
    5d7a:	3b 87       	std	Y+11, r19	; 0x0b
    5d7c:	cc 86       	std	Y+12, r12	; 0x0c
    5d7e:	dd 86       	std	Y+13, r13	; 0x0d
    5d80:	ee 86       	std	Y+14, r14	; 0x0e
    5d82:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    5d84:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5d86:	2a 81       	ldd	r18, Y+2	; 0x02
    5d88:	3b 81       	ldd	r19, Y+3	; 0x03
    5d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    5d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    5d8e:	ae 81       	ldd	r26, Y+6	; 0x06
    5d90:	bf 81       	ldd	r27, Y+7	; 0x07
    5d92:	f9 01       	movw	r30, r18
    5d94:	82 83       	std	Z+2, r24	; 0x02
    5d96:	93 83       	std	Z+3, r25	; 0x03
    5d98:	a4 83       	std	Z+4, r26	; 0x04
    5d9a:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    5da0:	2a 81       	ldd	r18, Y+2	; 0x02
    5da2:	3b 81       	ldd	r19, Y+3	; 0x03
    5da4:	fc 01       	movw	r30, r24
    5da6:	33 87       	std	Z+11, r19	; 0x0b
    5da8:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    5daa:	2c 81       	ldd	r18, Y+4	; 0x04
    5dac:	3d 81       	ldd	r19, Y+5	; 0x05
    5dae:	4e 81       	ldd	r20, Y+6	; 0x06
    5db0:	5f 81       	ldd	r21, Y+7	; 0x07
    5db2:	88 85       	ldd	r24, Y+8	; 0x08
    5db4:	99 85       	ldd	r25, Y+9	; 0x09
    5db6:	aa 85       	ldd	r26, Y+10	; 0x0a
    5db8:	bb 85       	ldd	r27, Y+11	; 0x0b
    5dba:	82 17       	cp	r24, r18
    5dbc:	93 07       	cpc	r25, r19
    5dbe:	a4 07       	cpc	r26, r20
    5dc0:	b5 07       	cpc	r27, r21
    5dc2:	40 f1       	brcs	.+80     	; 0x5e14 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5dc4:	28 85       	ldd	r18, Y+8	; 0x08
    5dc6:	39 85       	ldd	r19, Y+9	; 0x09
    5dc8:	4a 85       	ldd	r20, Y+10	; 0x0a
    5dca:	5b 85       	ldd	r21, Y+11	; 0x0b
    5dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    5dce:	9d 85       	ldd	r25, Y+13	; 0x0d
    5dd0:	ae 85       	ldd	r26, Y+14	; 0x0e
    5dd2:	bf 85       	ldd	r27, Y+15	; 0x0f
    5dd4:	28 1b       	sub	r18, r24
    5dd6:	39 0b       	sbc	r19, r25
    5dd8:	4a 0b       	sbc	r20, r26
    5dda:	5b 0b       	sbc	r21, r27
    5ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dde:	9b 81       	ldd	r25, Y+3	; 0x03
    5de0:	fc 01       	movw	r30, r24
    5de2:	86 85       	ldd	r24, Z+14	; 0x0e
    5de4:	97 85       	ldd	r25, Z+15	; 0x0f
    5de6:	a0 89       	ldd	r26, Z+16	; 0x10
    5de8:	b1 89       	ldd	r27, Z+17	; 0x11
    5dea:	28 17       	cp	r18, r24
    5dec:	39 07       	cpc	r19, r25
    5dee:	4a 07       	cpc	r20, r26
    5df0:	5b 07       	cpc	r21, r27
    5df2:	18 f0       	brcs	.+6      	; 0x5dfa <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	89 83       	std	Y+1, r24	; 0x01
    5df8:	36 c0       	rjmp	.+108    	; 0x5e66 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    5dfe:	9c 01       	movw	r18, r24
    5e00:	2e 5f       	subi	r18, 0xFE	; 254
    5e02:	3f 4f       	sbci	r19, 0xFF	; 255
    5e04:	80 91 68 16 	lds	r24, 0x1668	; 0x801668 <pxOverflowTimerList>
    5e08:	90 91 69 16 	lds	r25, 0x1669	; 0x801669 <pxOverflowTimerList+0x1>
    5e0c:	b9 01       	movw	r22, r18
    5e0e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>
    5e12:	29 c0       	rjmp	.+82     	; 0x5e66 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5e14:	28 85       	ldd	r18, Y+8	; 0x08
    5e16:	39 85       	ldd	r19, Y+9	; 0x09
    5e18:	4a 85       	ldd	r20, Y+10	; 0x0a
    5e1a:	5b 85       	ldd	r21, Y+11	; 0x0b
    5e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e20:	ae 85       	ldd	r26, Y+14	; 0x0e
    5e22:	bf 85       	ldd	r27, Y+15	; 0x0f
    5e24:	28 17       	cp	r18, r24
    5e26:	39 07       	cpc	r19, r25
    5e28:	4a 07       	cpc	r20, r26
    5e2a:	5b 07       	cpc	r21, r27
    5e2c:	80 f4       	brcc	.+32     	; 0x5e4e <prvInsertTimerInActiveList+0x106>
    5e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    5e30:	3d 81       	ldd	r19, Y+5	; 0x05
    5e32:	4e 81       	ldd	r20, Y+6	; 0x06
    5e34:	5f 81       	ldd	r21, Y+7	; 0x07
    5e36:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e38:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e3a:	ae 85       	ldd	r26, Y+14	; 0x0e
    5e3c:	bf 85       	ldd	r27, Y+15	; 0x0f
    5e3e:	28 17       	cp	r18, r24
    5e40:	39 07       	cpc	r19, r25
    5e42:	4a 07       	cpc	r20, r26
    5e44:	5b 07       	cpc	r21, r27
    5e46:	18 f0       	brcs	.+6      	; 0x5e4e <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    5e48:	81 e0       	ldi	r24, 0x01	; 1
    5e4a:	89 83       	std	Y+1, r24	; 0x01
    5e4c:	0c c0       	rjmp	.+24     	; 0x5e66 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e50:	9b 81       	ldd	r25, Y+3	; 0x03
    5e52:	9c 01       	movw	r18, r24
    5e54:	2e 5f       	subi	r18, 0xFE	; 254
    5e56:	3f 4f       	sbci	r19, 0xFF	; 255
    5e58:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    5e5c:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    5e60:	b9 01       	movw	r22, r18
    5e62:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>
            }
        }

        return xProcessTimerNow;
    5e66:	89 81       	ldd	r24, Y+1	; 0x01
    }
    5e68:	2f 96       	adiw	r28, 0x0f	; 15
    5e6a:	0f b6       	in	r0, 0x3f	; 63
    5e6c:	f8 94       	cli
    5e6e:	de bf       	out	0x3e, r29	; 62
    5e70:	0f be       	out	0x3f, r0	; 63
    5e72:	cd bf       	out	0x3d, r28	; 61
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	1f 91       	pop	r17
    5e7a:	0f 91       	pop	r16
    5e7c:	ff 90       	pop	r15
    5e7e:	ef 90       	pop	r14
    5e80:	df 90       	pop	r13
    5e82:	cf 90       	pop	r12
    5e84:	08 95       	ret

00005e86 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    5e86:	cf 92       	push	r12
    5e88:	df 92       	push	r13
    5e8a:	ef 92       	push	r14
    5e8c:	ff 92       	push	r15
    5e8e:	0f 93       	push	r16
    5e90:	1f 93       	push	r17
    5e92:	cf 93       	push	r28
    5e94:	df 93       	push	r29
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	2f 97       	sbiw	r28, 0x0f	; 15
    5e9c:	0f b6       	in	r0, 0x3f	; 63
    5e9e:	f8 94       	cli
    5ea0:	de bf       	out	0x3e, r29	; 62
    5ea2:	0f be       	out	0x3f, r0	; 63
    5ea4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5ea6:	f2 c0       	rjmp	.+484    	; 0x608c <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    5ea8:	88 85       	ldd	r24, Y+8	; 0x08
    5eaa:	88 23       	and	r24, r24
    5eac:	0c f4       	brge	.+2      	; 0x5eb0 <prvProcessReceivedCommands+0x2a>
    5eae:	ee c0       	rjmp	.+476    	; 0x608c <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eb4:	9a 83       	std	Y+2, r25	; 0x02
    5eb6:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    5eb8:	89 81       	ldd	r24, Y+1	; 0x01
    5eba:	9a 81       	ldd	r25, Y+2	; 0x02
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	84 85       	ldd	r24, Z+12	; 0x0c
    5ec0:	95 85       	ldd	r25, Z+13	; 0x0d
    5ec2:	89 2b       	or	r24, r25
    5ec4:	29 f0       	breq	.+10     	; 0x5ed0 <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5ec6:	89 81       	ldd	r24, Y+1	; 0x01
    5ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eca:	02 96       	adiw	r24, 0x02	; 2
    5ecc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5ed0:	ce 01       	movw	r24, r28
    5ed2:	0f 96       	adiw	r24, 0x0f	; 15
    5ed4:	f2 de       	rcall	.-540    	; 0x5cba <prvSampleTimeNow>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	8b 83       	std	Y+3, r24	; 0x03
    5edc:	9c 83       	std	Y+4, r25	; 0x04
    5ede:	ad 83       	std	Y+5, r26	; 0x05
    5ee0:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    5ee2:	88 85       	ldd	r24, Y+8	; 0x08
    5ee4:	08 2e       	mov	r0, r24
    5ee6:	00 0c       	add	r0, r0
    5ee8:	99 0b       	sbc	r25, r25
    5eea:	09 2e       	mov	r0, r25
    5eec:	00 0c       	add	r0, r0
    5eee:	aa 0b       	sbc	r26, r26
    5ef0:	bb 0b       	sbc	r27, r27
    5ef2:	40 e0       	ldi	r20, 0x00	; 0
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
    5ef6:	29 e0       	ldi	r18, 0x09	; 9
    5ef8:	30 e0       	ldi	r19, 0x00	; 0
    5efa:	84 1b       	sub	r24, r20
    5efc:	95 0b       	sbc	r25, r21
    5efe:	28 17       	cp	r18, r24
    5f00:	39 07       	cpc	r19, r25
    5f02:	08 f4       	brcc	.+2      	; 0x5f06 <prvProcessReceivedCommands+0x80>
    5f04:	c2 c0       	rjmp	.+388    	; 0x608a <prvProcessReceivedCommands+0x204>
    5f06:	fc 01       	movw	r30, r24
    5f08:	88 27       	eor	r24, r24
    5f0a:	ee 58       	subi	r30, 0x8E	; 142
    5f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f10:	0c 94 7a 41 	jmp	0x82f4	; 0x82f4 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5f14:	89 81       	ldd	r24, Y+1	; 0x01
    5f16:	9a 81       	ldd	r25, Y+2	; 0x02
    5f18:	fc 01       	movw	r30, r24
    5f1a:	86 89       	ldd	r24, Z+22	; 0x16
    5f1c:	28 2f       	mov	r18, r24
    5f1e:	21 60       	ori	r18, 0x01	; 1
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	9a 81       	ldd	r25, Y+2	; 0x02
    5f24:	fc 01       	movw	r30, r24
    5f26:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5f28:	e9 84       	ldd	r14, Y+9	; 0x09
    5f2a:	fa 84       	ldd	r15, Y+10	; 0x0a
    5f2c:	0b 85       	ldd	r16, Y+11	; 0x0b
    5f2e:	1c 85       	ldd	r17, Y+12	; 0x0c
    5f30:	29 85       	ldd	r18, Y+9	; 0x09
    5f32:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f34:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f36:	5c 85       	ldd	r21, Y+12	; 0x0c
    5f38:	89 81       	ldd	r24, Y+1	; 0x01
    5f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3c:	fc 01       	movw	r30, r24
    5f3e:	86 85       	ldd	r24, Z+14	; 0x0e
    5f40:	97 85       	ldd	r25, Z+15	; 0x0f
    5f42:	a0 89       	ldd	r26, Z+16	; 0x10
    5f44:	b1 89       	ldd	r27, Z+17	; 0x11
    5f46:	82 0f       	add	r24, r18
    5f48:	93 1f       	adc	r25, r19
    5f4a:	a4 1f       	adc	r26, r20
    5f4c:	b5 1f       	adc	r27, r21
    5f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    5f50:	3c 81       	ldd	r19, Y+4	; 0x04
    5f52:	4d 81       	ldd	r20, Y+5	; 0x05
    5f54:	5e 81       	ldd	r21, Y+6	; 0x06
    5f56:	e9 81       	ldd	r30, Y+1	; 0x01
    5f58:	fa 81       	ldd	r31, Y+2	; 0x02
    5f5a:	67 01       	movw	r12, r14
    5f5c:	78 01       	movw	r14, r16
    5f5e:	89 01       	movw	r16, r18
    5f60:	9a 01       	movw	r18, r20
    5f62:	ac 01       	movw	r20, r24
    5f64:	bd 01       	movw	r22, r26
    5f66:	cf 01       	movw	r24, r30
    5f68:	ef de       	rcall	.-546    	; 0x5d48 <prvInsertTimerInActiveList>
    5f6a:	88 23       	and	r24, r24
    5f6c:	09 f4       	brne	.+2      	; 0x5f70 <prvProcessReceivedCommands+0xea>
    5f6e:	8e c0       	rjmp	.+284    	; 0x608c <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5f70:	89 81       	ldd	r24, Y+1	; 0x01
    5f72:	9a 81       	ldd	r25, Y+2	; 0x02
    5f74:	fc 01       	movw	r30, r24
    5f76:	24 89       	ldd	r18, Z+20	; 0x14
    5f78:	35 89       	ldd	r19, Z+21	; 0x15
    5f7a:	89 81       	ldd	r24, Y+1	; 0x01
    5f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7e:	f9 01       	movw	r30, r18
    5f80:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5f82:	89 81       	ldd	r24, Y+1	; 0x01
    5f84:	9a 81       	ldd	r25, Y+2	; 0x02
    5f86:	fc 01       	movw	r30, r24
    5f88:	86 89       	ldd	r24, Z+22	; 0x16
    5f8a:	88 2f       	mov	r24, r24
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	84 70       	andi	r24, 0x04	; 4
    5f90:	99 27       	eor	r25, r25
    5f92:	89 2b       	or	r24, r25
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <prvProcessReceivedCommands+0x112>
    5f96:	7a c0       	rjmp	.+244    	; 0x608c <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5f98:	29 85       	ldd	r18, Y+9	; 0x09
    5f9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f9c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f9e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5fa0:	89 81       	ldd	r24, Y+1	; 0x01
    5fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	86 85       	ldd	r24, Z+14	; 0x0e
    5fa8:	97 85       	ldd	r25, Z+15	; 0x0f
    5faa:	a0 89       	ldd	r26, Z+16	; 0x10
    5fac:	b1 89       	ldd	r27, Z+17	; 0x11
    5fae:	82 0f       	add	r24, r18
    5fb0:	93 1f       	adc	r25, r19
    5fb2:	a4 1f       	adc	r26, r20
    5fb4:	b5 1f       	adc	r27, r21
    5fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    5fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    5fba:	c1 2c       	mov	r12, r1
    5fbc:	d1 2c       	mov	r13, r1
    5fbe:	76 01       	movw	r14, r12
    5fc0:	00 e0       	ldi	r16, 0x00	; 0
    5fc2:	10 e0       	ldi	r17, 0x00	; 0
    5fc4:	9c 01       	movw	r18, r24
    5fc6:	ad 01       	movw	r20, r26
    5fc8:	60 e0       	ldi	r22, 0x00	; 0
    5fca:	cf 01       	movw	r24, r30
    5fcc:	b3 dc       	rcall	.-1690   	; 0x5934 <xTimerGenericCommand>
    5fce:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    5fd0:	5d c0       	rjmp	.+186    	; 0x608c <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5fd2:	89 81       	ldd	r24, Y+1	; 0x01
    5fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fd6:	fc 01       	movw	r30, r24
    5fd8:	86 89       	ldd	r24, Z+22	; 0x16
    5fda:	28 2f       	mov	r18, r24
    5fdc:	2e 7f       	andi	r18, 0xFE	; 254
    5fde:	89 81       	ldd	r24, Y+1	; 0x01
    5fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe2:	fc 01       	movw	r30, r24
    5fe4:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    5fe6:	52 c0       	rjmp	.+164    	; 0x608c <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5fe8:	89 81       	ldd	r24, Y+1	; 0x01
    5fea:	9a 81       	ldd	r25, Y+2	; 0x02
    5fec:	fc 01       	movw	r30, r24
    5fee:	86 89       	ldd	r24, Z+22	; 0x16
    5ff0:	28 2f       	mov	r18, r24
    5ff2:	21 60       	ori	r18, 0x01	; 1
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5ffc:	89 85       	ldd	r24, Y+9	; 0x09
    5ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6000:	ab 85       	ldd	r26, Y+11	; 0x0b
    6002:	bc 85       	ldd	r27, Y+12	; 0x0c
    6004:	29 81       	ldd	r18, Y+1	; 0x01
    6006:	3a 81       	ldd	r19, Y+2	; 0x02
    6008:	f9 01       	movw	r30, r18
    600a:	86 87       	std	Z+14, r24	; 0x0e
    600c:	97 87       	std	Z+15, r25	; 0x0f
    600e:	a0 8b       	std	Z+16, r26	; 0x10
    6010:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    6012:	89 81       	ldd	r24, Y+1	; 0x01
    6014:	9a 81       	ldd	r25, Y+2	; 0x02
    6016:	fc 01       	movw	r30, r24
    6018:	26 85       	ldd	r18, Z+14	; 0x0e
    601a:	37 85       	ldd	r19, Z+15	; 0x0f
    601c:	40 89       	ldd	r20, Z+16	; 0x10
    601e:	51 89       	ldd	r21, Z+17	; 0x11
    6020:	8b 81       	ldd	r24, Y+3	; 0x03
    6022:	9c 81       	ldd	r25, Y+4	; 0x04
    6024:	ad 81       	ldd	r26, Y+5	; 0x05
    6026:	be 81       	ldd	r27, Y+6	; 0x06
    6028:	82 0f       	add	r24, r18
    602a:	93 1f       	adc	r25, r19
    602c:	a4 1f       	adc	r26, r20
    602e:	b5 1f       	adc	r27, r21
    6030:	eb 80       	ldd	r14, Y+3	; 0x03
    6032:	fc 80       	ldd	r15, Y+4	; 0x04
    6034:	0d 81       	ldd	r16, Y+5	; 0x05
    6036:	1e 81       	ldd	r17, Y+6	; 0x06
    6038:	2b 81       	ldd	r18, Y+3	; 0x03
    603a:	3c 81       	ldd	r19, Y+4	; 0x04
    603c:	4d 81       	ldd	r20, Y+5	; 0x05
    603e:	5e 81       	ldd	r21, Y+6	; 0x06
    6040:	e9 81       	ldd	r30, Y+1	; 0x01
    6042:	fa 81       	ldd	r31, Y+2	; 0x02
    6044:	67 01       	movw	r12, r14
    6046:	78 01       	movw	r14, r16
    6048:	89 01       	movw	r16, r18
    604a:	9a 01       	movw	r18, r20
    604c:	ac 01       	movw	r20, r24
    604e:	bd 01       	movw	r22, r26
    6050:	cf 01       	movw	r24, r30
    6052:	7a de       	rcall	.-780    	; 0x5d48 <prvInsertTimerInActiveList>
                        break;
    6054:	1b c0       	rjmp	.+54     	; 0x608c <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	9a 81       	ldd	r25, Y+2	; 0x02
    605a:	fc 01       	movw	r30, r24
    605c:	86 89       	ldd	r24, Z+22	; 0x16
    605e:	88 2f       	mov	r24, r24
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	82 70       	andi	r24, 0x02	; 2
    6064:	99 27       	eor	r25, r25
    6066:	89 2b       	or	r24, r25
    6068:	29 f4       	brne	.+10     	; 0x6074 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    606a:	89 81       	ldd	r24, Y+1	; 0x01
    606c:	9a 81       	ldd	r25, Y+2	; 0x02
    606e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <vPortFree>
    6072:	0c c0       	rjmp	.+24     	; 0x608c <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6074:	89 81       	ldd	r24, Y+1	; 0x01
    6076:	9a 81       	ldd	r25, Y+2	; 0x02
    6078:	fc 01       	movw	r30, r24
    607a:	86 89       	ldd	r24, Z+22	; 0x16
    607c:	28 2f       	mov	r18, r24
    607e:	2e 7f       	andi	r18, 0xFE	; 254
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	9a 81       	ldd	r25, Y+2	; 0x02
    6084:	fc 01       	movw	r30, r24
    6086:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    6088:	01 c0       	rjmp	.+2      	; 0x608c <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    608a:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    608c:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    6090:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    6094:	be 01       	movw	r22, r28
    6096:	68 5f       	subi	r22, 0xF8	; 248
    6098:	7f 4f       	sbci	r23, 0xFF	; 255
    609a:	20 e0       	ldi	r18, 0x00	; 0
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	a9 01       	movw	r20, r18
    60a0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <xQueueReceive>
    60a4:	88 23       	and	r24, r24
    60a6:	09 f0       	breq	.+2      	; 0x60aa <prvProcessReceivedCommands+0x224>
    60a8:	ff ce       	rjmp	.-514    	; 0x5ea8 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    60aa:	00 00       	nop
    60ac:	2f 96       	adiw	r28, 0x0f	; 15
    60ae:	0f b6       	in	r0, 0x3f	; 63
    60b0:	f8 94       	cli
    60b2:	de bf       	out	0x3e, r29	; 62
    60b4:	0f be       	out	0x3f, r0	; 63
    60b6:	cd bf       	out	0x3d, r28	; 61
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	1f 91       	pop	r17
    60be:	0f 91       	pop	r16
    60c0:	ff 90       	pop	r15
    60c2:	ef 90       	pop	r14
    60c4:	df 90       	pop	r13
    60c6:	cf 90       	pop	r12
    60c8:	08 95       	ret

000060ca <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    60ca:	cf 92       	push	r12
    60cc:	df 92       	push	r13
    60ce:	ef 92       	push	r14
    60d0:	ff 92       	push	r15
    60d2:	0f 93       	push	r16
    60d4:	1f 93       	push	r17
    60d6:	cf 93       	push	r28
    60d8:	df 93       	push	r29
    60da:	cd b7       	in	r28, 0x3d	; 61
    60dc:	de b7       	in	r29, 0x3e	; 62
    60de:	2d 97       	sbiw	r28, 0x0d	; 13
    60e0:	0f b6       	in	r0, 0x3f	; 63
    60e2:	f8 94       	cli
    60e4:	de bf       	out	0x3e, r29	; 62
    60e6:	0f be       	out	0x3f, r0	; 63
    60e8:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    60ea:	85 c0       	rjmp	.+266    	; 0x61f6 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    60ec:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    60f0:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    60f4:	fc 01       	movw	r30, r24
    60f6:	87 81       	ldd	r24, Z+7	; 0x07
    60f8:	90 85       	ldd	r25, Z+8	; 0x08
    60fa:	fc 01       	movw	r30, r24
    60fc:	80 81       	ld	r24, Z
    60fe:	91 81       	ldd	r25, Z+1	; 0x01
    6100:	a2 81       	ldd	r26, Z+2	; 0x02
    6102:	b3 81       	ldd	r27, Z+3	; 0x03
    6104:	89 83       	std	Y+1, r24	; 0x01
    6106:	9a 83       	std	Y+2, r25	; 0x02
    6108:	ab 83       	std	Y+3, r26	; 0x03
    610a:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    610c:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    6110:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    6114:	fc 01       	movw	r30, r24
    6116:	87 81       	ldd	r24, Z+7	; 0x07
    6118:	90 85       	ldd	r25, Z+8	; 0x08
    611a:	fc 01       	movw	r30, r24
    611c:	80 85       	ldd	r24, Z+8	; 0x08
    611e:	91 85       	ldd	r25, Z+9	; 0x09
    6120:	9e 83       	std	Y+6, r25	; 0x06
    6122:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6124:	8d 81       	ldd	r24, Y+5	; 0x05
    6126:	9e 81       	ldd	r25, Y+6	; 0x06
    6128:	02 96       	adiw	r24, 0x02	; 2
    612a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    612e:	8d 81       	ldd	r24, Y+5	; 0x05
    6130:	9e 81       	ldd	r25, Y+6	; 0x06
    6132:	fc 01       	movw	r30, r24
    6134:	24 89       	ldd	r18, Z+20	; 0x14
    6136:	35 89       	ldd	r19, Z+21	; 0x15
    6138:	8d 81       	ldd	r24, Y+5	; 0x05
    613a:	9e 81       	ldd	r25, Y+6	; 0x06
    613c:	f9 01       	movw	r30, r18
    613e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    6140:	8d 81       	ldd	r24, Y+5	; 0x05
    6142:	9e 81       	ldd	r25, Y+6	; 0x06
    6144:	fc 01       	movw	r30, r24
    6146:	86 89       	ldd	r24, Z+22	; 0x16
    6148:	88 2f       	mov	r24, r24
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	84 70       	andi	r24, 0x04	; 4
    614e:	99 27       	eor	r25, r25
    6150:	89 2b       	or	r24, r25
    6152:	09 f4       	brne	.+2      	; 0x6156 <prvSwitchTimerLists+0x8c>
    6154:	50 c0       	rjmp	.+160    	; 0x61f6 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    6156:	8d 81       	ldd	r24, Y+5	; 0x05
    6158:	9e 81       	ldd	r25, Y+6	; 0x06
    615a:	fc 01       	movw	r30, r24
    615c:	26 85       	ldd	r18, Z+14	; 0x0e
    615e:	37 85       	ldd	r19, Z+15	; 0x0f
    6160:	40 89       	ldd	r20, Z+16	; 0x10
    6162:	51 89       	ldd	r21, Z+17	; 0x11
    6164:	89 81       	ldd	r24, Y+1	; 0x01
    6166:	9a 81       	ldd	r25, Y+2	; 0x02
    6168:	ab 81       	ldd	r26, Y+3	; 0x03
    616a:	bc 81       	ldd	r27, Y+4	; 0x04
    616c:	82 0f       	add	r24, r18
    616e:	93 1f       	adc	r25, r19
    6170:	a4 1f       	adc	r26, r20
    6172:	b5 1f       	adc	r27, r21
    6174:	8f 83       	std	Y+7, r24	; 0x07
    6176:	98 87       	std	Y+8, r25	; 0x08
    6178:	a9 87       	std	Y+9, r26	; 0x09
    617a:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    617c:	2f 81       	ldd	r18, Y+7	; 0x07
    617e:	38 85       	ldd	r19, Y+8	; 0x08
    6180:	49 85       	ldd	r20, Y+9	; 0x09
    6182:	5a 85       	ldd	r21, Y+10	; 0x0a
    6184:	89 81       	ldd	r24, Y+1	; 0x01
    6186:	9a 81       	ldd	r25, Y+2	; 0x02
    6188:	ab 81       	ldd	r26, Y+3	; 0x03
    618a:	bc 81       	ldd	r27, Y+4	; 0x04
    618c:	82 17       	cp	r24, r18
    618e:	93 07       	cpc	r25, r19
    6190:	a4 07       	cpc	r26, r20
    6192:	b5 07       	cpc	r27, r21
    6194:	f8 f4       	brcc	.+62     	; 0x61d4 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6196:	2d 81       	ldd	r18, Y+5	; 0x05
    6198:	3e 81       	ldd	r19, Y+6	; 0x06
    619a:	8f 81       	ldd	r24, Y+7	; 0x07
    619c:	98 85       	ldd	r25, Y+8	; 0x08
    619e:	a9 85       	ldd	r26, Y+9	; 0x09
    61a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    61a2:	f9 01       	movw	r30, r18
    61a4:	82 83       	std	Z+2, r24	; 0x02
    61a6:	93 83       	std	Z+3, r25	; 0x03
    61a8:	a4 83       	std	Z+4, r26	; 0x04
    61aa:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    61ac:	8d 81       	ldd	r24, Y+5	; 0x05
    61ae:	9e 81       	ldd	r25, Y+6	; 0x06
    61b0:	2d 81       	ldd	r18, Y+5	; 0x05
    61b2:	3e 81       	ldd	r19, Y+6	; 0x06
    61b4:	fc 01       	movw	r30, r24
    61b6:	33 87       	std	Z+11, r19	; 0x0b
    61b8:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    61ba:	8d 81       	ldd	r24, Y+5	; 0x05
    61bc:	9e 81       	ldd	r25, Y+6	; 0x06
    61be:	9c 01       	movw	r18, r24
    61c0:	2e 5f       	subi	r18, 0xFE	; 254
    61c2:	3f 4f       	sbci	r19, 0xFF	; 255
    61c4:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    61c8:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    61cc:	b9 01       	movw	r22, r18
    61ce:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vListInsert>
    61d2:	11 c0       	rjmp	.+34     	; 0x61f6 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    61d4:	89 81       	ldd	r24, Y+1	; 0x01
    61d6:	9a 81       	ldd	r25, Y+2	; 0x02
    61d8:	ab 81       	ldd	r26, Y+3	; 0x03
    61da:	bc 81       	ldd	r27, Y+4	; 0x04
    61dc:	ed 81       	ldd	r30, Y+5	; 0x05
    61de:	fe 81       	ldd	r31, Y+6	; 0x06
    61e0:	c1 2c       	mov	r12, r1
    61e2:	d1 2c       	mov	r13, r1
    61e4:	76 01       	movw	r14, r12
    61e6:	00 e0       	ldi	r16, 0x00	; 0
    61e8:	10 e0       	ldi	r17, 0x00	; 0
    61ea:	9c 01       	movw	r18, r24
    61ec:	ad 01       	movw	r20, r26
    61ee:	60 e0       	ldi	r22, 0x00	; 0
    61f0:	cf 01       	movw	r24, r30
    61f2:	a0 db       	rcall	.-2240   	; 0x5934 <xTimerGenericCommand>
    61f4:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    61f6:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    61fa:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    61fe:	fc 01       	movw	r30, r24
    6200:	80 81       	ld	r24, Z
    6202:	88 23       	and	r24, r24
    6204:	09 f0       	breq	.+2      	; 0x6208 <prvSwitchTimerLists+0x13e>
    6206:	72 cf       	rjmp	.-284    	; 0x60ec <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    6208:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <pxCurrentTimerList>
    620c:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <pxCurrentTimerList+0x1>
    6210:	9d 87       	std	Y+13, r25	; 0x0d
    6212:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    6214:	80 91 68 16 	lds	r24, 0x1668	; 0x801668 <pxOverflowTimerList>
    6218:	90 91 69 16 	lds	r25, 0x1669	; 0x801669 <pxOverflowTimerList+0x1>
    621c:	90 93 67 16 	sts	0x1667, r25	; 0x801667 <pxCurrentTimerList+0x1>
    6220:	80 93 66 16 	sts	0x1666, r24	; 0x801666 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    6224:	8c 85       	ldd	r24, Y+12	; 0x0c
    6226:	9d 85       	ldd	r25, Y+13	; 0x0d
    6228:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <pxOverflowTimerList+0x1>
    622c:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <pxOverflowTimerList>
    }
    6230:	00 00       	nop
    6232:	2d 96       	adiw	r28, 0x0d	; 13
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	f8 94       	cli
    6238:	de bf       	out	0x3e, r29	; 62
    623a:	0f be       	out	0x3f, r0	; 63
    623c:	cd bf       	out	0x3d, r28	; 61
    623e:	df 91       	pop	r29
    6240:	cf 91       	pop	r28
    6242:	1f 91       	pop	r17
    6244:	0f 91       	pop	r16
    6246:	ff 90       	pop	r15
    6248:	ef 90       	pop	r14
    624a:	df 90       	pop	r13
    624c:	cf 90       	pop	r12
    624e:	08 95       	ret

00006250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    6250:	cf 93       	push	r28
    6252:	df 93       	push	r29
    6254:	cd b7       	in	r28, 0x3d	; 61
    6256:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    6258:	0f b6       	in	r0, 0x3f	; 63
    625a:	f8 94       	cli
    625c:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    625e:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <xTimerQueue>
    6262:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <xTimerQueue+0x1>
    6266:	89 2b       	or	r24, r25
    6268:	e9 f4       	brne	.+58     	; 0x62a4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    626a:	80 e5       	ldi	r24, 0x50	; 80
    626c:	96 e1       	ldi	r25, 0x16	; 22
    626e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    6272:	8b e5       	ldi	r24, 0x5B	; 91
    6274:	96 e1       	ldi	r25, 0x16	; 22
    6276:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    627a:	80 e5       	ldi	r24, 0x50	; 80
    627c:	96 e1       	ldi	r25, 0x16	; 22
    627e:	90 93 67 16 	sts	0x1667, r25	; 0x801667 <pxCurrentTimerList+0x1>
    6282:	80 93 66 16 	sts	0x1666, r24	; 0x801666 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    6286:	8b e5       	ldi	r24, 0x5B	; 91
    6288:	96 e1       	ldi	r25, 0x16	; 22
    628a:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <pxOverflowTimerList+0x1>
    628e:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6292:	40 e0       	ldi	r20, 0x00	; 0
    6294:	67 e0       	ldi	r22, 0x07	; 7
    6296:	8a e0       	ldi	r24, 0x0A	; 10
    6298:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <xQueueGenericCreate>
    629c:	90 93 6b 16 	sts	0x166B, r25	; 0x80166b <xTimerQueue+0x1>
    62a0:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    62a4:	0f 90       	pop	r0
    62a6:	0f be       	out	0x3f, r0	; 63
    }
    62a8:	00 00       	nop
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	08 95       	ret

000062b0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
}
    62b8:	00 00       	nop
    62ba:	df 91       	pop	r29
    62bc:	cf 91       	pop	r28
    62be:	08 95       	ret

000062c0 <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    62c8:	84 e2       	ldi	r24, 0x24	; 36
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	24 e2       	ldi	r18, 0x24	; 36
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	f9 01       	movw	r30, r18
    62d2:	20 81       	ld	r18, Z
    62d4:	20 68       	ori	r18, 0x80	; 128
    62d6:	fc 01       	movw	r30, r24
    62d8:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    62da:	85 e2       	ldi	r24, 0x25	; 37
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	25 e2       	ldi	r18, 0x25	; 37
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	f9 01       	movw	r30, r18
    62e4:	20 81       	ld	r18, Z
    62e6:	20 68       	ori	r18, 0x80	; 128
    62e8:	fc 01       	movw	r30, r24
    62ea:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    62ec:	00 00       	nop
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	08 95       	ret

000062f4 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    62f4:	cf 93       	push	r28
    62f6:	df 93       	push	r29
    62f8:	cd b7       	in	r28, 0x3d	; 61
    62fa:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    62fc:	83 e2       	ldi	r24, 0x23	; 35
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	23 e2       	ldi	r18, 0x23	; 35
    6302:	30 e0       	ldi	r19, 0x00	; 0
    6304:	f9 01       	movw	r30, r18
    6306:	20 81       	ld	r18, Z
    6308:	20 68       	ori	r18, 0x80	; 128
    630a:	fc 01       	movw	r30, r24
    630c:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    630e:	00 00       	nop
    6310:	df 91       	pop	r29
    6312:	cf 91       	pop	r28
    6314:	08 95       	ret

00006316 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    6316:	cf 93       	push	r28
    6318:	df 93       	push	r29
    631a:	cd b7       	in	r28, 0x3d	; 61
    631c:	de b7       	in	r29, 0x3e	; 62
    631e:	2e 97       	sbiw	r28, 0x0e	; 14
    6320:	0f b6       	in	r0, 0x3f	; 63
    6322:	f8 94       	cli
    6324:	de bf       	out	0x3e, r29	; 62
    6326:	0f be       	out	0x3f, r0	; 63
    6328:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    632a:	ca df       	rcall	.-108    	; 0x62c0 <prvSetMainLedOn>
    632c:	80 e0       	ldi	r24, 0x00	; 0
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	a8 e4       	ldi	r26, 0x48	; 72
    6332:	b2 e4       	ldi	r27, 0x42	; 66
    6334:	89 83       	std	Y+1, r24	; 0x01
    6336:	9a 83       	std	Y+2, r25	; 0x02
    6338:	ab 83       	std	Y+3, r26	; 0x03
    633a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	4a e7       	ldi	r20, 0x7A	; 122
    6342:	55 e4       	ldi	r21, 0x45	; 69
    6344:	69 81       	ldd	r22, Y+1	; 0x01
    6346:	7a 81       	ldd	r23, Y+2	; 0x02
    6348:	8b 81       	ldd	r24, Y+3	; 0x03
    634a:	9c 81       	ldd	r25, Y+4	; 0x04
    634c:	a1 d1       	rcall	.+834    	; 0x6690 <__mulsf3>
    634e:	dc 01       	movw	r26, r24
    6350:	cb 01       	movw	r24, r22
    6352:	8d 83       	std	Y+5, r24	; 0x05
    6354:	9e 83       	std	Y+6, r25	; 0x06
    6356:	af 83       	std	Y+7, r26	; 0x07
    6358:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e8       	ldi	r20, 0x80	; 128
    6360:	5f e3       	ldi	r21, 0x3F	; 63
    6362:	6d 81       	ldd	r22, Y+5	; 0x05
    6364:	7e 81       	ldd	r23, Y+6	; 0x06
    6366:	8f 81       	ldd	r24, Y+7	; 0x07
    6368:	98 85       	ldd	r25, Y+8	; 0x08
    636a:	11 d1       	rcall	.+546    	; 0x658e <__cmpsf2>
    636c:	88 23       	and	r24, r24
    636e:	2c f4       	brge	.+10     	; 0x637a <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	9a 87       	std	Y+10, r25	; 0x0a
    6376:	89 87       	std	Y+9, r24	; 0x09
    6378:	3b c0       	rjmp	.+118    	; 0x63f0 <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    637a:	20 e0       	ldi	r18, 0x00	; 0
    637c:	3f ef       	ldi	r19, 0xFF	; 255
    637e:	4f e7       	ldi	r20, 0x7F	; 127
    6380:	57 e4       	ldi	r21, 0x47	; 71
    6382:	6d 81       	ldd	r22, Y+5	; 0x05
    6384:	7e 81       	ldd	r23, Y+6	; 0x06
    6386:	8f 81       	ldd	r24, Y+7	; 0x07
    6388:	98 85       	ldd	r25, Y+8	; 0x08
    638a:	7e d1       	rcall	.+764    	; 0x6688 <__gesf2>
    638c:	18 16       	cp	r1, r24
    638e:	3c f5       	brge	.+78     	; 0x63de <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6390:	20 e0       	ldi	r18, 0x00	; 0
    6392:	30 e0       	ldi	r19, 0x00	; 0
    6394:	40 e2       	ldi	r20, 0x20	; 32
    6396:	51 e4       	ldi	r21, 0x41	; 65
    6398:	69 81       	ldd	r22, Y+1	; 0x01
    639a:	7a 81       	ldd	r23, Y+2	; 0x02
    639c:	8b 81       	ldd	r24, Y+3	; 0x03
    639e:	9c 81       	ldd	r25, Y+4	; 0x04
    63a0:	77 d1       	rcall	.+750    	; 0x6690 <__mulsf3>
    63a2:	dc 01       	movw	r26, r24
    63a4:	cb 01       	movw	r24, r22
    63a6:	bc 01       	movw	r22, r24
    63a8:	cd 01       	movw	r24, r26
    63aa:	f5 d0       	rcall	.+490    	; 0x6596 <__fixunssfsi>
    63ac:	dc 01       	movw	r26, r24
    63ae:	cb 01       	movw	r24, r22
    63b0:	9a 87       	std	Y+10, r25	; 0x0a
    63b2:	89 87       	std	Y+9, r24	; 0x09
    63b4:	0f c0       	rjmp	.+30     	; 0x63d4 <vApplicationMallocFailedHook+0xbe>
    63b6:	80 e9       	ldi	r24, 0x90	; 144
    63b8:	91 e0       	ldi	r25, 0x01	; 1
    63ba:	9c 87       	std	Y+12, r25	; 0x0c
    63bc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    63be:	8b 85       	ldd	r24, Y+11	; 0x0b
    63c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    63c2:	01 97       	sbiw	r24, 0x01	; 1
    63c4:	f1 f7       	brne	.-4      	; 0x63c2 <vApplicationMallocFailedHook+0xac>
    63c6:	9c 87       	std	Y+12, r25	; 0x0c
    63c8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63ca:	89 85       	ldd	r24, Y+9	; 0x09
    63cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ce:	01 97       	sbiw	r24, 0x01	; 1
    63d0:	9a 87       	std	Y+10, r25	; 0x0a
    63d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63d4:	89 85       	ldd	r24, Y+9	; 0x09
    63d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    63d8:	89 2b       	or	r24, r25
    63da:	69 f7       	brne	.-38     	; 0x63b6 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63dc:	13 c0       	rjmp	.+38     	; 0x6404 <vApplicationMallocFailedHook+0xee>
    63de:	6d 81       	ldd	r22, Y+5	; 0x05
    63e0:	7e 81       	ldd	r23, Y+6	; 0x06
    63e2:	8f 81       	ldd	r24, Y+7	; 0x07
    63e4:	98 85       	ldd	r25, Y+8	; 0x08
    63e6:	d7 d0       	rcall	.+430    	; 0x6596 <__fixunssfsi>
    63e8:	dc 01       	movw	r26, r24
    63ea:	cb 01       	movw	r24, r22
    63ec:	9a 87       	std	Y+10, r25	; 0x0a
    63ee:	89 87       	std	Y+9, r24	; 0x09
    63f0:	89 85       	ldd	r24, Y+9	; 0x09
    63f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    63f4:	9e 87       	std	Y+14, r25	; 0x0e
    63f6:	8d 87       	std	Y+13, r24	; 0x0d
    63f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    63fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    63fc:	01 97       	sbiw	r24, 0x01	; 1
    63fe:	f1 f7       	brne	.-4      	; 0x63fc <vApplicationMallocFailedHook+0xe6>
    6400:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    6402:	8d 87       	std	Y+13, r24	; 0x0d
    6404:	77 df       	rcall	.-274    	; 0x62f4 <prvBlinkMainLed>
    }
    6406:	92 cf       	rjmp	.-220    	; 0x632c <vApplicationMallocFailedHook+0x16>

00006408 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    6408:	cf 93       	push	r28
    640a:	df 93       	push	r29
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
    6410:	62 97       	sbiw	r28, 0x12	; 18
    6412:	0f b6       	in	r0, 0x3f	; 63
    6414:	f8 94       	cli
    6416:	de bf       	out	0x3e, r29	; 62
    6418:	0f be       	out	0x3f, r0	; 63
    641a:	cd bf       	out	0x3d, r28	; 61
    641c:	98 8b       	std	Y+16, r25	; 0x10
    641e:	8f 87       	std	Y+15, r24	; 0x0f
    6420:	7a 8b       	std	Y+18, r23	; 0x12
    6422:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    6424:	4d df       	rcall	.-358    	; 0x62c0 <prvSetMainLedOn>
    6426:	80 e0       	ldi	r24, 0x00	; 0
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	aa ef       	ldi	r26, 0xFA	; 250
    642c:	b4 e4       	ldi	r27, 0x44	; 68
    642e:	89 83       	std	Y+1, r24	; 0x01
    6430:	9a 83       	std	Y+2, r25	; 0x02
    6432:	ab 83       	std	Y+3, r26	; 0x03
    6434:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6436:	20 e0       	ldi	r18, 0x00	; 0
    6438:	30 e0       	ldi	r19, 0x00	; 0
    643a:	4a e7       	ldi	r20, 0x7A	; 122
    643c:	55 e4       	ldi	r21, 0x45	; 69
    643e:	69 81       	ldd	r22, Y+1	; 0x01
    6440:	7a 81       	ldd	r23, Y+2	; 0x02
    6442:	8b 81       	ldd	r24, Y+3	; 0x03
    6444:	9c 81       	ldd	r25, Y+4	; 0x04
    6446:	24 d1       	rcall	.+584    	; 0x6690 <__mulsf3>
    6448:	dc 01       	movw	r26, r24
    644a:	cb 01       	movw	r24, r22
    644c:	8d 83       	std	Y+5, r24	; 0x05
    644e:	9e 83       	std	Y+6, r25	; 0x06
    6450:	af 83       	std	Y+7, r26	; 0x07
    6452:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6454:	20 e0       	ldi	r18, 0x00	; 0
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	40 e8       	ldi	r20, 0x80	; 128
    645a:	5f e3       	ldi	r21, 0x3F	; 63
    645c:	6d 81       	ldd	r22, Y+5	; 0x05
    645e:	7e 81       	ldd	r23, Y+6	; 0x06
    6460:	8f 81       	ldd	r24, Y+7	; 0x07
    6462:	98 85       	ldd	r25, Y+8	; 0x08
    6464:	94 d0       	rcall	.+296    	; 0x658e <__cmpsf2>
    6466:	88 23       	and	r24, r24
    6468:	2c f4       	brge	.+10     	; 0x6474 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    646a:	81 e0       	ldi	r24, 0x01	; 1
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	9a 87       	std	Y+10, r25	; 0x0a
    6470:	89 87       	std	Y+9, r24	; 0x09
    6472:	3b c0       	rjmp	.+118    	; 0x64ea <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	3f ef       	ldi	r19, 0xFF	; 255
    6478:	4f e7       	ldi	r20, 0x7F	; 127
    647a:	57 e4       	ldi	r21, 0x47	; 71
    647c:	6d 81       	ldd	r22, Y+5	; 0x05
    647e:	7e 81       	ldd	r23, Y+6	; 0x06
    6480:	8f 81       	ldd	r24, Y+7	; 0x07
    6482:	98 85       	ldd	r25, Y+8	; 0x08
    6484:	01 d1       	rcall	.+514    	; 0x6688 <__gesf2>
    6486:	18 16       	cp	r1, r24
    6488:	3c f5       	brge	.+78     	; 0x64d8 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    648a:	20 e0       	ldi	r18, 0x00	; 0
    648c:	30 e0       	ldi	r19, 0x00	; 0
    648e:	40 e2       	ldi	r20, 0x20	; 32
    6490:	51 e4       	ldi	r21, 0x41	; 65
    6492:	69 81       	ldd	r22, Y+1	; 0x01
    6494:	7a 81       	ldd	r23, Y+2	; 0x02
    6496:	8b 81       	ldd	r24, Y+3	; 0x03
    6498:	9c 81       	ldd	r25, Y+4	; 0x04
    649a:	fa d0       	rcall	.+500    	; 0x6690 <__mulsf3>
    649c:	dc 01       	movw	r26, r24
    649e:	cb 01       	movw	r24, r22
    64a0:	bc 01       	movw	r22, r24
    64a2:	cd 01       	movw	r24, r26
    64a4:	78 d0       	rcall	.+240    	; 0x6596 <__fixunssfsi>
    64a6:	dc 01       	movw	r26, r24
    64a8:	cb 01       	movw	r24, r22
    64aa:	9a 87       	std	Y+10, r25	; 0x0a
    64ac:	89 87       	std	Y+9, r24	; 0x09
    64ae:	0f c0       	rjmp	.+30     	; 0x64ce <vApplicationStackOverflowHook+0xc6>
    64b0:	80 e9       	ldi	r24, 0x90	; 144
    64b2:	91 e0       	ldi	r25, 0x01	; 1
    64b4:	9c 87       	std	Y+12, r25	; 0x0c
    64b6:	8b 87       	std	Y+11, r24	; 0x0b
    64b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    64ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    64bc:	01 97       	sbiw	r24, 0x01	; 1
    64be:	f1 f7       	brne	.-4      	; 0x64bc <vApplicationStackOverflowHook+0xb4>
    64c0:	9c 87       	std	Y+12, r25	; 0x0c
    64c2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64c4:	89 85       	ldd	r24, Y+9	; 0x09
    64c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    64c8:	01 97       	sbiw	r24, 0x01	; 1
    64ca:	9a 87       	std	Y+10, r25	; 0x0a
    64cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ce:	89 85       	ldd	r24, Y+9	; 0x09
    64d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64d2:	89 2b       	or	r24, r25
    64d4:	69 f7       	brne	.-38     	; 0x64b0 <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64d6:	13 c0       	rjmp	.+38     	; 0x64fe <vApplicationStackOverflowHook+0xf6>
    64d8:	6d 81       	ldd	r22, Y+5	; 0x05
    64da:	7e 81       	ldd	r23, Y+6	; 0x06
    64dc:	8f 81       	ldd	r24, Y+7	; 0x07
    64de:	98 85       	ldd	r25, Y+8	; 0x08
    64e0:	5a d0       	rcall	.+180    	; 0x6596 <__fixunssfsi>
    64e2:	dc 01       	movw	r26, r24
    64e4:	cb 01       	movw	r24, r22
    64e6:	9a 87       	std	Y+10, r25	; 0x0a
    64e8:	89 87       	std	Y+9, r24	; 0x09
    64ea:	89 85       	ldd	r24, Y+9	; 0x09
    64ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    64ee:	9e 87       	std	Y+14, r25	; 0x0e
    64f0:	8d 87       	std	Y+13, r24	; 0x0d
    64f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    64f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    64f6:	01 97       	sbiw	r24, 0x01	; 1
    64f8:	f1 f7       	brne	.-4      	; 0x64f6 <vApplicationStackOverflowHook+0xee>
    64fa:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    64fc:	8d 87       	std	Y+13, r24	; 0x0d
    64fe:	fa de       	rcall	.-524    	; 0x62f4 <prvBlinkMainLed>
    }
    6500:	92 cf       	rjmp	.-220    	; 0x6426 <vApplicationStackOverflowHook+0x1e>

00006502 <initializeUsedData>:
#include "TemperatureHumiditySensor.h"
#include "Setup.h"
#include "UpLinkHandler.h"

void initializeUsedData()
{
    6502:	cf 93       	push	r28
    6504:	df 93       	push	r29
    6506:	cd b7       	in	r28, 0x3d	; 61
    6508:	de b7       	in	r29, 0x3e	; 62
	initializeEventGroup();
    650a:	0e 94 2c 04 	call	0x858	; 0x858 <initializeEventGroup>
	
	createUpLinkMessageBuffer();
    650e:	0e 94 3e 04 	call	0x87c	; 0x87c <createUpLinkMessageBuffer>
	
	lora_driver_initialise(ser_USART1, NULL);
    6512:	60 e0       	ldi	r22, 0x00	; 0
    6514:	70 e0       	ldi	r23, 0x00	; 0
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	11 d3       	rcall	.+1570   	; 0x6b3c <lora_driver_initialise>
}
    651a:	00 00       	nop
    651c:	df 91       	pop	r29
    651e:	cf 91       	pop	r28
    6520:	08 95       	ret

00006522 <create_tasks>:

void create_tasks(void)
{
    6522:	cf 93       	push	r28
    6524:	df 93       	push	r29
    6526:	cd b7       	in	r28, 0x3d	; 61
    6528:	de b7       	in	r29, 0x3e	; 62
	createTempAndHumTask(1);
    652a:	81 e0       	ldi	r24, 0x01	; 1
    652c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <createTempAndHumTask>
	createApplicationTask(2);
    6530:	82 e0       	ldi	r24, 0x02	; 2
    6532:	0e 94 a5 01 	call	0x34a	; 0x34a <createApplicationTask>
    lora_handler_uplink_payload(3);
    6536:	83 e0       	ldi	r24, 0x03	; 3
    6538:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lora_handler_uplink_payload>
}
    653c:	00 00       	nop
    653e:	df 91       	pop	r29
    6540:	cf 91       	pop	r28
    6542:	08 95       	ret

00006544 <initialiseSystem>:

void initialiseSystem()
{
    6544:	cf 93       	push	r28
    6546:	df 93       	push	r29
    6548:	cd b7       	in	r28, 0x3d	; 61
    654a:	de b7       	in	r29, 0x3e	; 62
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    654c:	81 e2       	ldi	r24, 0x21	; 33
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	21 e2       	ldi	r18, 0x21	; 33
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	f9 01       	movw	r30, r18
    6556:	20 81       	ld	r18, Z
    6558:	21 68       	ori	r18, 0x81	; 129
    655a:	fc 01       	movw	r30, r24
    655c:	20 83       	st	Z, r18

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	initializeUsedData();
    655e:	d1 df       	rcall	.-94     	; 0x6502 <initializeUsedData>
	stdio_initialise(ser_USART0);
    6560:	80 e0       	ldi	r24, 0x00	; 0
    6562:	0e 94 a1 3c 	call	0x7942	; 0x7942 <stdio_initialise>
	// Let's create some tasks
	create_tasks();
    6566:	dd df       	rcall	.-70     	; 0x6522 <create_tasks>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    6568:	85 e0       	ldi	r24, 0x05	; 5
    656a:	0e 94 a8 3d 	call	0x7b50	; 0x7b50 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	//lora_driver_initialise(1, NULL);
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3); 
	
}
    656e:	00 00       	nop
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <main>:

/*-----------------------------------------------------------*/
int main(void)
{
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	cd b7       	in	r28, 0x3d	; 61
    657c:	de b7       	in	r29, 0x3e	; 62
	initialiseSystem(); // Must be done as the very first thing!!
    657e:	e2 df       	rcall	.-60     	; 0x6544 <initialiseSystem>
	printf("Program Started!!\n");
    6580:	83 ed       	ldi	r24, 0xD3	; 211
    6582:	94 e0       	ldi	r25, 0x04	; 4
    6584:	0e 94 19 43 	call	0x8632	; 0x8632 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    6588:	0e 94 45 1b 	call	0x368a	; 0x368a <vTaskStartScheduler>

	/* Replace with your application code */
	while (1)
	{
	}
    658c:	ff cf       	rjmp	.-2      	; 0x658c <main+0x16>

0000658e <__cmpsf2>:
    658e:	2f d0       	rcall	.+94     	; 0x65ee <__fp_cmp>
    6590:	08 f4       	brcc	.+2      	; 0x6594 <__cmpsf2+0x6>
    6592:	81 e0       	ldi	r24, 0x01	; 1
    6594:	08 95       	ret

00006596 <__fixunssfsi>:
    6596:	57 d0       	rcall	.+174    	; 0x6646 <__fp_splitA>
    6598:	88 f0       	brcs	.+34     	; 0x65bc <__fixunssfsi+0x26>
    659a:	9f 57       	subi	r25, 0x7F	; 127
    659c:	90 f0       	brcs	.+36     	; 0x65c2 <__fixunssfsi+0x2c>
    659e:	b9 2f       	mov	r27, r25
    65a0:	99 27       	eor	r25, r25
    65a2:	b7 51       	subi	r27, 0x17	; 23
    65a4:	a0 f0       	brcs	.+40     	; 0x65ce <__fixunssfsi+0x38>
    65a6:	d1 f0       	breq	.+52     	; 0x65dc <__fixunssfsi+0x46>
    65a8:	66 0f       	add	r22, r22
    65aa:	77 1f       	adc	r23, r23
    65ac:	88 1f       	adc	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	1a f0       	brmi	.+6      	; 0x65b8 <__fixunssfsi+0x22>
    65b2:	ba 95       	dec	r27
    65b4:	c9 f7       	brne	.-14     	; 0x65a8 <__fixunssfsi+0x12>
    65b6:	12 c0       	rjmp	.+36     	; 0x65dc <__fixunssfsi+0x46>
    65b8:	b1 30       	cpi	r27, 0x01	; 1
    65ba:	81 f0       	breq	.+32     	; 0x65dc <__fixunssfsi+0x46>
    65bc:	5e d0       	rcall	.+188    	; 0x667a <__fp_zero>
    65be:	b1 e0       	ldi	r27, 0x01	; 1
    65c0:	08 95       	ret
    65c2:	5b c0       	rjmp	.+182    	; 0x667a <__fp_zero>
    65c4:	67 2f       	mov	r22, r23
    65c6:	78 2f       	mov	r23, r24
    65c8:	88 27       	eor	r24, r24
    65ca:	b8 5f       	subi	r27, 0xF8	; 248
    65cc:	39 f0       	breq	.+14     	; 0x65dc <__fixunssfsi+0x46>
    65ce:	b9 3f       	cpi	r27, 0xF9	; 249
    65d0:	cc f3       	brlt	.-14     	; 0x65c4 <__fixunssfsi+0x2e>
    65d2:	86 95       	lsr	r24
    65d4:	77 95       	ror	r23
    65d6:	67 95       	ror	r22
    65d8:	b3 95       	inc	r27
    65da:	d9 f7       	brne	.-10     	; 0x65d2 <__fixunssfsi+0x3c>
    65dc:	3e f4       	brtc	.+14     	; 0x65ec <__fixunssfsi+0x56>
    65de:	90 95       	com	r25
    65e0:	80 95       	com	r24
    65e2:	70 95       	com	r23
    65e4:	61 95       	neg	r22
    65e6:	7f 4f       	sbci	r23, 0xFF	; 255
    65e8:	8f 4f       	sbci	r24, 0xFF	; 255
    65ea:	9f 4f       	sbci	r25, 0xFF	; 255
    65ec:	08 95       	ret

000065ee <__fp_cmp>:
    65ee:	99 0f       	add	r25, r25
    65f0:	00 08       	sbc	r0, r0
    65f2:	55 0f       	add	r21, r21
    65f4:	aa 0b       	sbc	r26, r26
    65f6:	e0 e8       	ldi	r30, 0x80	; 128
    65f8:	fe ef       	ldi	r31, 0xFE	; 254
    65fa:	16 16       	cp	r1, r22
    65fc:	17 06       	cpc	r1, r23
    65fe:	e8 07       	cpc	r30, r24
    6600:	f9 07       	cpc	r31, r25
    6602:	c0 f0       	brcs	.+48     	; 0x6634 <__fp_cmp+0x46>
    6604:	12 16       	cp	r1, r18
    6606:	13 06       	cpc	r1, r19
    6608:	e4 07       	cpc	r30, r20
    660a:	f5 07       	cpc	r31, r21
    660c:	98 f0       	brcs	.+38     	; 0x6634 <__fp_cmp+0x46>
    660e:	62 1b       	sub	r22, r18
    6610:	73 0b       	sbc	r23, r19
    6612:	84 0b       	sbc	r24, r20
    6614:	95 0b       	sbc	r25, r21
    6616:	39 f4       	brne	.+14     	; 0x6626 <__fp_cmp+0x38>
    6618:	0a 26       	eor	r0, r26
    661a:	61 f0       	breq	.+24     	; 0x6634 <__fp_cmp+0x46>
    661c:	23 2b       	or	r18, r19
    661e:	24 2b       	or	r18, r20
    6620:	25 2b       	or	r18, r21
    6622:	21 f4       	brne	.+8      	; 0x662c <__fp_cmp+0x3e>
    6624:	08 95       	ret
    6626:	0a 26       	eor	r0, r26
    6628:	09 f4       	brne	.+2      	; 0x662c <__fp_cmp+0x3e>
    662a:	a1 40       	sbci	r26, 0x01	; 1
    662c:	a6 95       	lsr	r26
    662e:	8f ef       	ldi	r24, 0xFF	; 255
    6630:	81 1d       	adc	r24, r1
    6632:	81 1d       	adc	r24, r1
    6634:	08 95       	ret

00006636 <__fp_split3>:
    6636:	57 fd       	sbrc	r21, 7
    6638:	90 58       	subi	r25, 0x80	; 128
    663a:	44 0f       	add	r20, r20
    663c:	55 1f       	adc	r21, r21
    663e:	59 f0       	breq	.+22     	; 0x6656 <__fp_splitA+0x10>
    6640:	5f 3f       	cpi	r21, 0xFF	; 255
    6642:	71 f0       	breq	.+28     	; 0x6660 <__fp_splitA+0x1a>
    6644:	47 95       	ror	r20

00006646 <__fp_splitA>:
    6646:	88 0f       	add	r24, r24
    6648:	97 fb       	bst	r25, 7
    664a:	99 1f       	adc	r25, r25
    664c:	61 f0       	breq	.+24     	; 0x6666 <__fp_splitA+0x20>
    664e:	9f 3f       	cpi	r25, 0xFF	; 255
    6650:	79 f0       	breq	.+30     	; 0x6670 <__fp_splitA+0x2a>
    6652:	87 95       	ror	r24
    6654:	08 95       	ret
    6656:	12 16       	cp	r1, r18
    6658:	13 06       	cpc	r1, r19
    665a:	14 06       	cpc	r1, r20
    665c:	55 1f       	adc	r21, r21
    665e:	f2 cf       	rjmp	.-28     	; 0x6644 <__fp_split3+0xe>
    6660:	46 95       	lsr	r20
    6662:	f1 df       	rcall	.-30     	; 0x6646 <__fp_splitA>
    6664:	08 c0       	rjmp	.+16     	; 0x6676 <__fp_splitA+0x30>
    6666:	16 16       	cp	r1, r22
    6668:	17 06       	cpc	r1, r23
    666a:	18 06       	cpc	r1, r24
    666c:	99 1f       	adc	r25, r25
    666e:	f1 cf       	rjmp	.-30     	; 0x6652 <__fp_splitA+0xc>
    6670:	86 95       	lsr	r24
    6672:	71 05       	cpc	r23, r1
    6674:	61 05       	cpc	r22, r1
    6676:	08 94       	sec
    6678:	08 95       	ret

0000667a <__fp_zero>:
    667a:	e8 94       	clt

0000667c <__fp_szero>:
    667c:	bb 27       	eor	r27, r27
    667e:	66 27       	eor	r22, r22
    6680:	77 27       	eor	r23, r23
    6682:	cb 01       	movw	r24, r22
    6684:	97 f9       	bld	r25, 7
    6686:	08 95       	ret

00006688 <__gesf2>:
    6688:	b2 df       	rcall	.-156    	; 0x65ee <__fp_cmp>
    668a:	08 f4       	brcc	.+2      	; 0x668e <__gesf2+0x6>
    668c:	8f ef       	ldi	r24, 0xFF	; 255
    668e:	08 95       	ret

00006690 <__mulsf3>:
    6690:	0b d0       	rcall	.+22     	; 0x66a8 <__mulsf3x>
    6692:	78 c0       	rjmp	.+240    	; 0x6784 <__fp_round>
    6694:	69 d0       	rcall	.+210    	; 0x6768 <__fp_pscA>
    6696:	28 f0       	brcs	.+10     	; 0x66a2 <__mulsf3+0x12>
    6698:	6e d0       	rcall	.+220    	; 0x6776 <__fp_pscB>
    669a:	18 f0       	brcs	.+6      	; 0x66a2 <__mulsf3+0x12>
    669c:	95 23       	and	r25, r21
    669e:	09 f0       	breq	.+2      	; 0x66a2 <__mulsf3+0x12>
    66a0:	5a c0       	rjmp	.+180    	; 0x6756 <__fp_inf>
    66a2:	5f c0       	rjmp	.+190    	; 0x6762 <__fp_nan>
    66a4:	11 24       	eor	r1, r1
    66a6:	ea cf       	rjmp	.-44     	; 0x667c <__fp_szero>

000066a8 <__mulsf3x>:
    66a8:	c6 df       	rcall	.-116    	; 0x6636 <__fp_split3>
    66aa:	a0 f3       	brcs	.-24     	; 0x6694 <__mulsf3+0x4>

000066ac <__mulsf3_pse>:
    66ac:	95 9f       	mul	r25, r21
    66ae:	d1 f3       	breq	.-12     	; 0x66a4 <__mulsf3+0x14>
    66b0:	95 0f       	add	r25, r21
    66b2:	50 e0       	ldi	r21, 0x00	; 0
    66b4:	55 1f       	adc	r21, r21
    66b6:	62 9f       	mul	r22, r18
    66b8:	f0 01       	movw	r30, r0
    66ba:	72 9f       	mul	r23, r18
    66bc:	bb 27       	eor	r27, r27
    66be:	f0 0d       	add	r31, r0
    66c0:	b1 1d       	adc	r27, r1
    66c2:	63 9f       	mul	r22, r19
    66c4:	aa 27       	eor	r26, r26
    66c6:	f0 0d       	add	r31, r0
    66c8:	b1 1d       	adc	r27, r1
    66ca:	aa 1f       	adc	r26, r26
    66cc:	64 9f       	mul	r22, r20
    66ce:	66 27       	eor	r22, r22
    66d0:	b0 0d       	add	r27, r0
    66d2:	a1 1d       	adc	r26, r1
    66d4:	66 1f       	adc	r22, r22
    66d6:	82 9f       	mul	r24, r18
    66d8:	22 27       	eor	r18, r18
    66da:	b0 0d       	add	r27, r0
    66dc:	a1 1d       	adc	r26, r1
    66de:	62 1f       	adc	r22, r18
    66e0:	73 9f       	mul	r23, r19
    66e2:	b0 0d       	add	r27, r0
    66e4:	a1 1d       	adc	r26, r1
    66e6:	62 1f       	adc	r22, r18
    66e8:	83 9f       	mul	r24, r19
    66ea:	a0 0d       	add	r26, r0
    66ec:	61 1d       	adc	r22, r1
    66ee:	22 1f       	adc	r18, r18
    66f0:	74 9f       	mul	r23, r20
    66f2:	33 27       	eor	r19, r19
    66f4:	a0 0d       	add	r26, r0
    66f6:	61 1d       	adc	r22, r1
    66f8:	23 1f       	adc	r18, r19
    66fa:	84 9f       	mul	r24, r20
    66fc:	60 0d       	add	r22, r0
    66fe:	21 1d       	adc	r18, r1
    6700:	82 2f       	mov	r24, r18
    6702:	76 2f       	mov	r23, r22
    6704:	6a 2f       	mov	r22, r26
    6706:	11 24       	eor	r1, r1
    6708:	9f 57       	subi	r25, 0x7F	; 127
    670a:	50 40       	sbci	r21, 0x00	; 0
    670c:	8a f0       	brmi	.+34     	; 0x6730 <__mulsf3_pse+0x84>
    670e:	e1 f0       	breq	.+56     	; 0x6748 <__mulsf3_pse+0x9c>
    6710:	88 23       	and	r24, r24
    6712:	4a f0       	brmi	.+18     	; 0x6726 <__mulsf3_pse+0x7a>
    6714:	ee 0f       	add	r30, r30
    6716:	ff 1f       	adc	r31, r31
    6718:	bb 1f       	adc	r27, r27
    671a:	66 1f       	adc	r22, r22
    671c:	77 1f       	adc	r23, r23
    671e:	88 1f       	adc	r24, r24
    6720:	91 50       	subi	r25, 0x01	; 1
    6722:	50 40       	sbci	r21, 0x00	; 0
    6724:	a9 f7       	brne	.-22     	; 0x6710 <__mulsf3_pse+0x64>
    6726:	9e 3f       	cpi	r25, 0xFE	; 254
    6728:	51 05       	cpc	r21, r1
    672a:	70 f0       	brcs	.+28     	; 0x6748 <__mulsf3_pse+0x9c>
    672c:	14 c0       	rjmp	.+40     	; 0x6756 <__fp_inf>
    672e:	a6 cf       	rjmp	.-180    	; 0x667c <__fp_szero>
    6730:	5f 3f       	cpi	r21, 0xFF	; 255
    6732:	ec f3       	brlt	.-6      	; 0x672e <__mulsf3_pse+0x82>
    6734:	98 3e       	cpi	r25, 0xE8	; 232
    6736:	dc f3       	brlt	.-10     	; 0x672e <__mulsf3_pse+0x82>
    6738:	86 95       	lsr	r24
    673a:	77 95       	ror	r23
    673c:	67 95       	ror	r22
    673e:	b7 95       	ror	r27
    6740:	f7 95       	ror	r31
    6742:	e7 95       	ror	r30
    6744:	9f 5f       	subi	r25, 0xFF	; 255
    6746:	c1 f7       	brne	.-16     	; 0x6738 <__mulsf3_pse+0x8c>
    6748:	fe 2b       	or	r31, r30
    674a:	88 0f       	add	r24, r24
    674c:	91 1d       	adc	r25, r1
    674e:	96 95       	lsr	r25
    6750:	87 95       	ror	r24
    6752:	97 f9       	bld	r25, 7
    6754:	08 95       	ret

00006756 <__fp_inf>:
    6756:	97 f9       	bld	r25, 7
    6758:	9f 67       	ori	r25, 0x7F	; 127
    675a:	80 e8       	ldi	r24, 0x80	; 128
    675c:	70 e0       	ldi	r23, 0x00	; 0
    675e:	60 e0       	ldi	r22, 0x00	; 0
    6760:	08 95       	ret

00006762 <__fp_nan>:
    6762:	9f ef       	ldi	r25, 0xFF	; 255
    6764:	80 ec       	ldi	r24, 0xC0	; 192
    6766:	08 95       	ret

00006768 <__fp_pscA>:
    6768:	00 24       	eor	r0, r0
    676a:	0a 94       	dec	r0
    676c:	16 16       	cp	r1, r22
    676e:	17 06       	cpc	r1, r23
    6770:	18 06       	cpc	r1, r24
    6772:	09 06       	cpc	r0, r25
    6774:	08 95       	ret

00006776 <__fp_pscB>:
    6776:	00 24       	eor	r0, r0
    6778:	0a 94       	dec	r0
    677a:	12 16       	cp	r1, r18
    677c:	13 06       	cpc	r1, r19
    677e:	14 06       	cpc	r1, r20
    6780:	05 06       	cpc	r0, r21
    6782:	08 95       	ret

00006784 <__fp_round>:
    6784:	09 2e       	mov	r0, r25
    6786:	03 94       	inc	r0
    6788:	00 0c       	add	r0, r0
    678a:	11 f4       	brne	.+4      	; 0x6790 <__fp_round+0xc>
    678c:	88 23       	and	r24, r24
    678e:	52 f0       	brmi	.+20     	; 0x67a4 <__fp_round+0x20>
    6790:	bb 0f       	add	r27, r27
    6792:	40 f4       	brcc	.+16     	; 0x67a4 <__fp_round+0x20>
    6794:	bf 2b       	or	r27, r31
    6796:	11 f4       	brne	.+4      	; 0x679c <__fp_round+0x18>
    6798:	60 ff       	sbrs	r22, 0
    679a:	04 c0       	rjmp	.+8      	; 0x67a4 <__fp_round+0x20>
    679c:	6f 5f       	subi	r22, 0xFF	; 255
    679e:	7f 4f       	sbci	r23, 0xFF	; 255
    67a0:	8f 4f       	sbci	r24, 0xFF	; 255
    67a2:	9f 4f       	sbci	r25, 0xFF	; 255
    67a4:	08 95       	ret

000067a6 <_hihTwiCallback>:
    67a6:	65 30       	cpi	r22, 0x05	; 5
    67a8:	f1 f4       	brne	.+60     	; 0x67e6 <_hihTwiCallback+0x40>
    67aa:	fa 01       	movw	r30, r20
    67ac:	80 81       	ld	r24, Z
    67ae:	8f 73       	andi	r24, 0x3F	; 63
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	98 2f       	mov	r25, r24
    67b4:	88 27       	eor	r24, r24
    67b6:	21 81       	ldd	r18, Z+1	; 0x01
    67b8:	82 2b       	or	r24, r18
    67ba:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    67be:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    67c2:	82 81       	ldd	r24, Z+2	; 0x02
    67c4:	f0 e4       	ldi	r31, 0x40	; 64
    67c6:	8f 9f       	mul	r24, r31
    67c8:	c0 01       	movw	r24, r0
    67ca:	11 24       	eor	r1, r1
    67cc:	fa 01       	movw	r30, r20
    67ce:	23 81       	ldd	r18, Z+3	; 0x03
    67d0:	26 95       	lsr	r18
    67d2:	26 95       	lsr	r18
    67d4:	82 2b       	or	r24, r18
    67d6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    67da:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    67de:	81 e0       	ldi	r24, 0x01	; 1
    67e0:	80 93 72 16 	sts	0x1672, r24	; 0x801672 <_measuringIsReady>
    67e4:	08 95       	ret
    67e6:	64 30       	cpi	r22, 0x04	; 4
    67e8:	51 f0       	breq	.+20     	; 0x67fe <_hihTwiCallback+0x58>
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	90 e4       	ldi	r25, 0x40	; 64
    67ee:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    67f2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    67f6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    67fa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    67fe:	08 95       	ret

00006800 <hih8120_initialise>:
    6800:	0f 93       	push	r16
    6802:	1f 93       	push	r17
    6804:	03 ed       	ldi	r16, 0xD3	; 211
    6806:	13 e3       	ldi	r17, 0x33	; 51
    6808:	20 e0       	ldi	r18, 0x00	; 0
    680a:	34 e2       	ldi	r19, 0x24	; 36
    680c:	44 ef       	ldi	r20, 0xF4	; 244
    680e:	50 e0       	ldi	r21, 0x00	; 0
    6810:	60 e0       	ldi	r22, 0x00	; 0
    6812:	87 e2       	ldi	r24, 0x27	; 39
    6814:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <twiCreate>
    6818:	90 93 74 16 	sts	0x1674, r25	; 0x801674 <_hih8120Handler+0x1>
    681c:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <_hih8120Handler>
    6820:	21 e0       	ldi	r18, 0x01	; 1
    6822:	89 2b       	or	r24, r25
    6824:	09 f0       	breq	.+2      	; 0x6828 <hih8120_initialise+0x28>
    6826:	20 e0       	ldi	r18, 0x00	; 0
    6828:	82 2f       	mov	r24, r18
    682a:	1f 91       	pop	r17
    682c:	0f 91       	pop	r16
    682e:	08 95       	ret

00006830 <hih8120_wakeup>:
    6830:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <_hih8120Handler>
    6834:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <_hih8120Handler+0x1>
    6838:	00 97       	sbiw	r24, 0x00	; 0
    683a:	59 f0       	breq	.+22     	; 0x6852 <hih8120_wakeup+0x22>
    683c:	40 e0       	ldi	r20, 0x00	; 0
    683e:	60 e0       	ldi	r22, 0x00	; 0
    6840:	70 e0       	ldi	r23, 0x00	; 0
    6842:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <twiTransmit>
    6846:	84 30       	cpi	r24, 0x04	; 4
    6848:	31 f4       	brne	.+12     	; 0x6856 <hih8120_wakeup+0x26>
    684a:	10 92 72 16 	sts	0x1672, r1	; 0x801672 <_measuringIsReady>
    684e:	80 e0       	ldi	r24, 0x00	; 0
    6850:	08 95       	ret
    6852:	82 e0       	ldi	r24, 0x02	; 2
    6854:	08 95       	ret
    6856:	83 e0       	ldi	r24, 0x03	; 3
    6858:	08 95       	ret

0000685a <hih8120_measure>:
    685a:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <_hih8120Handler>
    685e:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <_hih8120Handler+0x1>
    6862:	00 97       	sbiw	r24, 0x00	; 0
    6864:	39 f0       	breq	.+14     	; 0x6874 <hih8120_measure+0x1a>
    6866:	64 e0       	ldi	r22, 0x04	; 4
    6868:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <twiReceive>
    686c:	85 30       	cpi	r24, 0x05	; 5
    686e:	21 f0       	breq	.+8      	; 0x6878 <hih8120_measure+0x1e>
    6870:	83 e0       	ldi	r24, 0x03	; 3
    6872:	08 95       	ret
    6874:	82 e0       	ldi	r24, 0x02	; 2
    6876:	08 95       	ret
    6878:	80 e0       	ldi	r24, 0x00	; 0
    687a:	08 95       	ret

0000687c <hih8120_getHumidity>:
    687c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    6880:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    6884:	80 e0       	ldi	r24, 0x00	; 0
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	0e 94 1b 41 	call	0x8236	; 0x8236 <__floatunsisf>
    688c:	20 e0       	ldi	r18, 0x00	; 0
    688e:	30 e0       	ldi	r19, 0x00	; 0
    6890:	48 ec       	ldi	r20, 0xC8	; 200
    6892:	52 e4       	ldi	r21, 0x42	; 66
    6894:	fd de       	rcall	.-518    	; 0x6690 <__mulsf3>
    6896:	20 e0       	ldi	r18, 0x00	; 0
    6898:	38 ef       	ldi	r19, 0xF8	; 248
    689a:	4f e7       	ldi	r20, 0x7F	; 127
    689c:	56 e4       	ldi	r21, 0x46	; 70
    689e:	0c 94 a3 40 	jmp	0x8146	; 0x8146 <__divsf3>
    68a2:	08 95       	ret

000068a4 <hih8120_getHumidityPercent_x10>:
    68a4:	eb df       	rcall	.-42     	; 0x687c <hih8120_getHumidity>
    68a6:	20 e0       	ldi	r18, 0x00	; 0
    68a8:	30 e0       	ldi	r19, 0x00	; 0
    68aa:	40 e2       	ldi	r20, 0x20	; 32
    68ac:	51 e4       	ldi	r21, 0x41	; 65
    68ae:	f0 de       	rcall	.-544    	; 0x6690 <__mulsf3>
    68b0:	72 de       	rcall	.-796    	; 0x6596 <__fixunssfsi>
    68b2:	cb 01       	movw	r24, r22
    68b4:	08 95       	ret

000068b6 <hih8120_getTemperature>:
    68b6:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    68ba:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    68be:	80 e0       	ldi	r24, 0x00	; 0
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	0e 94 1b 41 	call	0x8236	; 0x8236 <__floatunsisf>
    68c6:	20 e0       	ldi	r18, 0x00	; 0
    68c8:	30 e0       	ldi	r19, 0x00	; 0
    68ca:	45 e2       	ldi	r20, 0x25	; 37
    68cc:	53 e4       	ldi	r21, 0x43	; 67
    68ce:	e0 de       	rcall	.-576    	; 0x6690 <__mulsf3>
    68d0:	20 e0       	ldi	r18, 0x00	; 0
    68d2:	38 ef       	ldi	r19, 0xF8	; 248
    68d4:	4f e7       	ldi	r20, 0x7F	; 127
    68d6:	56 e4       	ldi	r21, 0x46	; 70
    68d8:	0e 94 a3 40 	call	0x8146	; 0x8146 <__divsf3>
    68dc:	20 e0       	ldi	r18, 0x00	; 0
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	40 e2       	ldi	r20, 0x20	; 32
    68e2:	52 e4       	ldi	r21, 0x42	; 66
    68e4:	0c 94 37 40 	jmp	0x806e	; 0x806e <__subsf3>
    68e8:	08 95       	ret

000068ea <hih8120_getTemperature_x10>:
    68ea:	e5 df       	rcall	.-54     	; 0x68b6 <hih8120_getTemperature>
    68ec:	20 e0       	ldi	r18, 0x00	; 0
    68ee:	30 e0       	ldi	r19, 0x00	; 0
    68f0:	40 e2       	ldi	r20, 0x20	; 32
    68f2:	51 e4       	ldi	r21, 0x41	; 65
    68f4:	cd de       	rcall	.-614    	; 0x6690 <__mulsf3>
    68f6:	0e 94 14 41 	call	0x8228	; 0x8228 <__fixsfsi>
    68fa:	cb 01       	movw	r24, r22
    68fc:	08 95       	ret

000068fe <_serialCallBack>:
    68fe:	0f 93       	push	r16
    6900:	1f 93       	push	r17
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
    6906:	1f 92       	push	r1
    6908:	1f 92       	push	r1
    690a:	cd b7       	in	r28, 0x3d	; 61
    690c:	de b7       	in	r29, 0x3e	; 62
    690e:	8c 01       	movw	r16, r24
    6910:	19 82       	std	Y+1, r1	; 0x01
    6912:	2d c0       	rjmp	.+90     	; 0x696e <_serialCallBack+0x70>
    6914:	e0 91 ac 16 	lds	r30, 0x16AC	; 0x8016ac <rec_buf_inp.2878>
    6918:	ec 32       	cpi	r30, 0x2C	; 44
    691a:	50 f4       	brcc	.+20     	; 0x6930 <_serialCallBack+0x32>
    691c:	81 e0       	ldi	r24, 0x01	; 1
    691e:	8e 0f       	add	r24, r30
    6920:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <rec_buf_inp.2878>
    6924:	f0 e0       	ldi	r31, 0x00	; 0
    6926:	e2 52       	subi	r30, 0x22	; 34
    6928:	f9 4e       	sbci	r31, 0xE9	; 233
    692a:	8a 81       	ldd	r24, Y+2	; 0x02
    692c:	80 83       	st	Z, r24
    692e:	02 c0       	rjmp	.+4      	; 0x6934 <_serialCallBack+0x36>
    6930:	10 92 ac 16 	sts	0x16AC, r1	; 0x8016ac <rec_buf_inp.2878>
    6934:	8a 81       	ldd	r24, Y+2	; 0x02
    6936:	8a 30       	cpi	r24, 0x0A	; 10
    6938:	d1 f4       	brne	.+52     	; 0x696e <_serialCallBack+0x70>
    693a:	40 91 ac 16 	lds	r20, 0x16AC	; 0x8016ac <rec_buf_inp.2878>
    693e:	50 e0       	ldi	r21, 0x00	; 0
    6940:	fa 01       	movw	r30, r20
    6942:	e4 52       	subi	r30, 0x24	; 36
    6944:	f9 4e       	sbci	r31, 0xE9	; 233
    6946:	10 82       	st	Z, r1
    6948:	41 50       	subi	r20, 0x01	; 1
    694a:	51 09       	sbc	r21, r1
    694c:	9e 01       	movw	r18, r28
    694e:	2f 5f       	subi	r18, 0xFF	; 255
    6950:	3f 4f       	sbci	r19, 0xFF	; 255
    6952:	6e ed       	ldi	r22, 0xDE	; 222
    6954:	76 e1       	ldi	r23, 0x16	; 22
    6956:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    695a:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    695e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <xStreamBufferSendFromISR>
    6962:	89 81       	ldd	r24, Y+1	; 0x01
    6964:	81 11       	cpse	r24, r1
    6966:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vPortYield>
    696a:	10 92 ac 16 	sts	0x16AC, r1	; 0x8016ac <rec_buf_inp.2878>
    696e:	be 01       	movw	r22, r28
    6970:	6e 5f       	subi	r22, 0xFE	; 254
    6972:	7f 4f       	sbci	r23, 0xFF	; 255
    6974:	c8 01       	movw	r24, r16
    6976:	4f d5       	rcall	.+2718   	; 0x7416 <serial_getByte>
    6978:	88 23       	and	r24, r24
    697a:	61 f2       	breq	.-104    	; 0x6914 <_serialCallBack+0x16>
    697c:	0f 90       	pop	r0
    697e:	0f 90       	pop	r0
    6980:	df 91       	pop	r29
    6982:	cf 91       	pop	r28
    6984:	1f 91       	pop	r17
    6986:	0f 91       	pop	r16
    6988:	08 95       	ret

0000698a <_uploadMessage>:
    698a:	0f 93       	push	r16
    698c:	1f 93       	push	r17
    698e:	cf 93       	push	r28
    6990:	df 93       	push	r29
    6992:	8c 01       	movw	r16, r24
    6994:	eb 01       	movw	r28, r22
    6996:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    699a:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    699e:	0e 94 be 12 	call	0x257c	; 0x257c <xStreamBufferReset>
    69a2:	b8 01       	movw	r22, r16
    69a4:	85 e7       	ldi	r24, 0x75	; 117
    69a6:	96 e1       	ldi	r25, 0x16	; 22
    69a8:	0e 94 e7 42 	call	0x85ce	; 0x85ce <strcpy>
    69ac:	20 97       	sbiw	r28, 0x00	; 0
    69ae:	79 f0       	breq	.+30     	; 0x69ce <_uploadMessage+0x44>
    69b0:	e5 e7       	ldi	r30, 0x75	; 117
    69b2:	f6 e1       	ldi	r31, 0x16	; 22
    69b4:	01 90       	ld	r0, Z+
    69b6:	00 20       	and	r0, r0
    69b8:	e9 f7       	brne	.-6      	; 0x69b4 <_uploadMessage+0x2a>
    69ba:	31 97       	sbiw	r30, 0x01	; 1
    69bc:	80 e2       	ldi	r24, 0x20	; 32
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	91 83       	std	Z+1, r25	; 0x01
    69c2:	80 83       	st	Z, r24
    69c4:	be 01       	movw	r22, r28
    69c6:	85 e7       	ldi	r24, 0x75	; 117
    69c8:	96 e1       	ldi	r25, 0x16	; 22
    69ca:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <strcat>
    69ce:	e5 e7       	ldi	r30, 0x75	; 117
    69d0:	f6 e1       	ldi	r31, 0x16	; 22
    69d2:	df 01       	movw	r26, r30
    69d4:	0d 90       	ld	r0, X+
    69d6:	00 20       	and	r0, r0
    69d8:	e9 f7       	brne	.-6      	; 0x69d4 <_uploadMessage+0x4a>
    69da:	11 97       	sbiw	r26, 0x01	; 1
    69dc:	8d e0       	ldi	r24, 0x0D	; 13
    69de:	9a e0       	ldi	r25, 0x0A	; 10
    69e0:	11 96       	adiw	r26, 0x01	; 1
    69e2:	9c 93       	st	X, r25
    69e4:	8e 93       	st	-X, r24
    69e6:	12 96       	adiw	r26, 0x02	; 2
    69e8:	1c 92       	st	X, r1
    69ea:	01 90       	ld	r0, Z+
    69ec:	00 20       	and	r0, r0
    69ee:	e9 f7       	brne	.-6      	; 0x69ea <_uploadMessage+0x60>
    69f0:	31 97       	sbiw	r30, 0x01	; 1
    69f2:	e5 57       	subi	r30, 0x75	; 117
    69f4:	f6 41       	sbci	r31, 0x16	; 22
    69f6:	ae 2f       	mov	r26, r30
    69f8:	85 e7       	ldi	r24, 0x75	; 117
    69fa:	96 e1       	ldi	r25, 0x16	; 22
    69fc:	ac 01       	movw	r20, r24
    69fe:	6a 2f       	mov	r22, r26
    6a00:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <_rn2483_serial>
    6a04:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <_rn2483_serial+0x1>
    6a08:	b1 d4       	rcall	.+2402   	; 0x736c <serial_sendBytes>
    6a0a:	81 11       	cpse	r24, r1
    6a0c:	11 c0       	rjmp	.+34     	; 0x6a30 <_uploadMessage+0xa6>
    6a0e:	08 e2       	ldi	r16, 0x28	; 40
    6a10:	15 e0       	ldi	r17, 0x05	; 5
    6a12:	20 e0       	ldi	r18, 0x00	; 0
    6a14:	30 e0       	ldi	r19, 0x00	; 0
    6a16:	4d e2       	ldi	r20, 0x2D	; 45
    6a18:	50 e0       	ldi	r21, 0x00	; 0
    6a1a:	68 e3       	ldi	r22, 0x38	; 56
    6a1c:	77 e1       	ldi	r23, 0x17	; 23
    6a1e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    6a22:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    6a26:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xStreamBufferReceive>
    6a2a:	88 e3       	ldi	r24, 0x38	; 56
    6a2c:	97 e1       	ldi	r25, 0x17	; 23
    6a2e:	02 c0       	rjmp	.+4      	; 0x6a34 <_uploadMessage+0xaa>
    6a30:	80 e0       	ldi	r24, 0x00	; 0
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	df 91       	pop	r29
    6a36:	cf 91       	pop	r28
    6a38:	1f 91       	pop	r17
    6a3a:	0f 91       	pop	r16
    6a3c:	08 95       	ret

00006a3e <_reply2ReturnCode>:
    6a3e:	2f 92       	push	r2
    6a40:	3f 92       	push	r3
    6a42:	4f 92       	push	r4
    6a44:	5f 92       	push	r5
    6a46:	6f 92       	push	r6
    6a48:	7f 92       	push	r7
    6a4a:	8f 92       	push	r8
    6a4c:	9f 92       	push	r9
    6a4e:	af 92       	push	r10
    6a50:	bf 92       	push	r11
    6a52:	cf 92       	push	r12
    6a54:	df 92       	push	r13
    6a56:	ef 92       	push	r14
    6a58:	ff 92       	push	r15
    6a5a:	0f 93       	push	r16
    6a5c:	1f 93       	push	r17
    6a5e:	cf 93       	push	r28
    6a60:	df 93       	push	r29
    6a62:	5c 01       	movw	r10, r24
    6a64:	fc 01       	movw	r30, r24
    6a66:	01 90       	ld	r0, Z+
    6a68:	00 20       	and	r0, r0
    6a6a:	e9 f7       	brne	.-6      	; 0x6a66 <_reply2ReturnCode+0x28>
    6a6c:	31 97       	sbiw	r30, 0x01	; 1
    6a6e:	6f 01       	movw	r12, r30
    6a70:	c8 1a       	sub	r12, r24
    6a72:	d9 0a       	sbc	r13, r25
    6a74:	5c 2c       	mov	r5, r12
    6a76:	0f 2e       	mov	r0, r31
    6a78:	fe e9       	ldi	r31, 0x9E	; 158
    6a7a:	8f 2e       	mov	r8, r31
    6a7c:	f7 e0       	ldi	r31, 0x07	; 7
    6a7e:	9f 2e       	mov	r9, r31
    6a80:	f0 2d       	mov	r31, r0
    6a82:	e1 2c       	mov	r14, r1
    6a84:	f1 2c       	mov	r15, r1
    6a86:	4c 2c       	mov	r4, r12
    6a88:	37 01       	movw	r6, r14
    6a8a:	f4 01       	movw	r30, r8
    6a8c:	01 81       	ldd	r16, Z+1	; 0x01
    6a8e:	12 81       	ldd	r17, Z+2	; 0x02
    6a90:	e8 01       	movw	r28, r16
    6a92:	09 90       	ld	r0, Y+
    6a94:	00 20       	and	r0, r0
    6a96:	e9 f7       	brne	.-6      	; 0x6a92 <_reply2ReturnCode+0x54>
    6a98:	21 97       	sbiw	r28, 0x01	; 1
    6a9a:	c0 1b       	sub	r28, r16
    6a9c:	d1 0b       	sbc	r29, r17
    6a9e:	3c 2e       	mov	r3, r28
    6aa0:	f9 e0       	ldi	r31, 0x09	; 9
    6aa2:	cf 16       	cp	r12, r31
    6aa4:	d1 04       	cpc	r13, r1
    6aa6:	58 f0       	brcs	.+22     	; 0x6abe <_reply2ReturnCode+0x80>
    6aa8:	f4 01       	movw	r30, r8
    6aaa:	20 80       	ld	r2, Z
    6aac:	fe e0       	ldi	r31, 0x0E	; 14
    6aae:	2f 12       	cpse	r2, r31
    6ab0:	06 c0       	rjmp	.+12     	; 0x6abe <_reply2ReturnCode+0x80>
    6ab2:	b8 01       	movw	r22, r16
    6ab4:	c5 01       	movw	r24, r10
    6ab6:	0e 94 b7 42 	call	0x856e	; 0x856e <strcasestr>
    6aba:	89 2b       	or	r24, r25
    6abc:	09 f5       	brne	.+66     	; 0x6b00 <_reply2ReturnCode+0xc2>
    6abe:	44 2d       	mov	r20, r4
    6ac0:	35 14       	cp	r3, r5
    6ac2:	08 f4       	brcc	.+2      	; 0x6ac6 <_reply2ReturnCode+0x88>
    6ac4:	4c 2f       	mov	r20, r28
    6ac6:	50 e0       	ldi	r21, 0x00	; 0
    6ac8:	b8 01       	movw	r22, r16
    6aca:	c5 01       	movw	r24, r10
    6acc:	0e 94 ee 42 	call	0x85dc	; 0x85dc <strncasecmp>
    6ad0:	89 2b       	or	r24, r25
    6ad2:	49 f4       	brne	.+18     	; 0x6ae6 <_reply2ReturnCode+0xa8>
    6ad4:	f3 01       	movw	r30, r6
    6ad6:	ee 0f       	add	r30, r30
    6ad8:	ff 1f       	adc	r31, r31
    6ada:	e6 0d       	add	r30, r6
    6adc:	f7 1d       	adc	r31, r7
    6ade:	e2 56       	subi	r30, 0x62	; 98
    6ae0:	f8 4f       	sbci	r31, 0xF8	; 248
    6ae2:	20 80       	ld	r2, Z
    6ae4:	0d c0       	rjmp	.+26     	; 0x6b00 <_reply2ReturnCode+0xc2>
    6ae6:	8f ef       	ldi	r24, 0xFF	; 255
    6ae8:	e8 1a       	sub	r14, r24
    6aea:	f8 0a       	sbc	r15, r24
    6aec:	e3 e0       	ldi	r30, 0x03	; 3
    6aee:	8e 0e       	add	r8, r30
    6af0:	91 1c       	adc	r9, r1
    6af2:	f1 e1       	ldi	r31, 0x11	; 17
    6af4:	ef 16       	cp	r14, r31
    6af6:	f1 04       	cpc	r15, r1
    6af8:	39 f6       	brne	.-114    	; 0x6a88 <_reply2ReturnCode+0x4a>
    6afa:	68 94       	set
    6afc:	22 24       	eor	r2, r2
    6afe:	24 f8       	bld	r2, 4
    6b00:	82 2d       	mov	r24, r2
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	1f 91       	pop	r17
    6b08:	0f 91       	pop	r16
    6b0a:	ff 90       	pop	r15
    6b0c:	ef 90       	pop	r14
    6b0e:	df 90       	pop	r13
    6b10:	cf 90       	pop	r12
    6b12:	bf 90       	pop	r11
    6b14:	af 90       	pop	r10
    6b16:	9f 90       	pop	r9
    6b18:	8f 90       	pop	r8
    6b1a:	7f 90       	pop	r7
    6b1c:	6f 90       	pop	r6
    6b1e:	5f 90       	pop	r5
    6b20:	4f 90       	pop	r4
    6b22:	3f 90       	pop	r3
    6b24:	2f 90       	pop	r2
    6b26:	08 95       	ret

00006b28 <_uploadMessageRc>:
    6b28:	30 df       	rcall	.-416    	; 0x698a <_uploadMessage>
    6b2a:	89 cf       	rjmp	.-238    	; 0x6a3e <_reply2ReturnCode>
    6b2c:	08 95       	ret

00006b2e <lora_driver_flushBuffers>:
    6b2e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    6b32:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    6b36:	0c 94 be 12 	jmp	0x257c	; 0x257c <xStreamBufferReset>
    6b3a:	08 95       	ret

00006b3c <lora_driver_initialise>:
    6b3c:	8f 92       	push	r8
    6b3e:	9f 92       	push	r9
    6b40:	af 92       	push	r10
    6b42:	cf 92       	push	r12
    6b44:	ef 92       	push	r14
    6b46:	0f 93       	push	r16
    6b48:	1f 93       	push	r17
    6b4a:	cf 93       	push	r28
    6b4c:	c8 2f       	mov	r28, r24
    6b4e:	8b 01       	movw	r16, r22
    6b50:	41 e0       	ldi	r20, 0x01	; 1
    6b52:	60 e0       	ldi	r22, 0x00	; 0
    6b54:	70 e0       	ldi	r23, 0x00	; 0
    6b56:	88 ec       	ldi	r24, 0xC8	; 200
    6b58:	90 e0       	ldi	r25, 0x00	; 0
    6b5a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <xStreamBufferGenericCreate>
    6b5e:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    6b62:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <_serialReplyBufferHandle>
    6b66:	10 93 ae 16 	sts	0x16AE, r17	; 0x8016ae <_downlinkMessageBuffer+0x1>
    6b6a:	00 93 ad 16 	sts	0x16AD, r16	; 0x8016ad <_downlinkMessageBuffer>
    6b6e:	0f 2e       	mov	r0, r31
    6b70:	ff e7       	ldi	r31, 0x7F	; 127
    6b72:	8f 2e       	mov	r8, r31
    6b74:	f4 e3       	ldi	r31, 0x34	; 52
    6b76:	9f 2e       	mov	r9, r31
    6b78:	f0 2d       	mov	r31, r0
    6b7a:	68 94       	set
    6b7c:	aa 24       	eor	r10, r10
    6b7e:	a6 f8       	bld	r10, 6
    6b80:	68 94       	set
    6b82:	cc 24       	eor	r12, r12
    6b84:	c6 f8       	bld	r12, 6
    6b86:	e1 2c       	mov	r14, r1
    6b88:	00 e0       	ldi	r16, 0x00	; 0
    6b8a:	23 e0       	ldi	r18, 0x03	; 3
    6b8c:	40 e0       	ldi	r20, 0x00	; 0
    6b8e:	51 ee       	ldi	r21, 0xE1	; 225
    6b90:	60 e0       	ldi	r22, 0x00	; 0
    6b92:	70 e0       	ldi	r23, 0x00	; 0
    6b94:	8c 2f       	mov	r24, r28
    6b96:	1e d3       	rcall	.+1596   	; 0x71d4 <serial_create>
    6b98:	90 93 b2 16 	sts	0x16B2, r25	; 0x8016b2 <_rn2483_serial+0x1>
    6b9c:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <_rn2483_serial>
    6ba0:	e7 e0       	ldi	r30, 0x07	; 7
    6ba2:	f1 e0       	ldi	r31, 0x01	; 1
    6ba4:	80 81       	ld	r24, Z
    6ba6:	80 61       	ori	r24, 0x10	; 16
    6ba8:	80 83       	st	Z, r24
    6baa:	cf 91       	pop	r28
    6bac:	1f 91       	pop	r17
    6bae:	0f 91       	pop	r16
    6bb0:	ef 90       	pop	r14
    6bb2:	cf 90       	pop	r12
    6bb4:	af 90       	pop	r10
    6bb6:	9f 90       	pop	r9
    6bb8:	8f 90       	pop	r8
    6bba:	08 95       	ret

00006bbc <lora_driver_resetRn2483>:
    6bbc:	88 23       	and	r24, r24
    6bbe:	31 f0       	breq	.+12     	; 0x6bcc <lora_driver_resetRn2483+0x10>
    6bc0:	e8 e0       	ldi	r30, 0x08	; 8
    6bc2:	f1 e0       	ldi	r31, 0x01	; 1
    6bc4:	80 81       	ld	r24, Z
    6bc6:	8f 7e       	andi	r24, 0xEF	; 239
    6bc8:	80 83       	st	Z, r24
    6bca:	08 95       	ret
    6bcc:	e8 e0       	ldi	r30, 0x08	; 8
    6bce:	f1 e0       	ldi	r31, 0x01	; 1
    6bd0:	80 81       	ld	r24, Z
    6bd2:	80 61       	ori	r24, 0x10	; 16
    6bd4:	80 83       	st	Z, r24
    6bd6:	08 95       	ret

00006bd8 <lora_driver_rn2483FactoryReset>:
    6bd8:	60 e0       	ldi	r22, 0x00	; 0
    6bda:	70 e0       	ldi	r23, 0x00	; 0
    6bdc:	84 e2       	ldi	r24, 0x24	; 36
    6bde:	95 e0       	ldi	r25, 0x05	; 5
    6be0:	d4 de       	rcall	.-600    	; 0x698a <_uploadMessage>
    6be2:	e8 e3       	ldi	r30, 0x38	; 56
    6be4:	f7 e1       	ldi	r31, 0x17	; 23
    6be6:	01 90       	ld	r0, Z+
    6be8:	00 20       	and	r0, r0
    6bea:	e9 f7       	brne	.-6      	; 0x6be6 <lora_driver_rn2483FactoryReset+0xe>
    6bec:	31 97       	sbiw	r30, 0x01	; 1
    6bee:	e8 53       	subi	r30, 0x38	; 56
    6bf0:	f7 41       	sbci	r31, 0x17	; 23
    6bf2:	81 e0       	ldi	r24, 0x01	; 1
    6bf4:	75 97       	sbiw	r30, 0x15	; 21
    6bf6:	08 f0       	brcs	.+2      	; 0x6bfa <lora_driver_rn2483FactoryReset+0x22>
    6bf8:	80 e0       	ldi	r24, 0x00	; 0
    6bfa:	08 95       	ret

00006bfc <lora_driver_getRn2483Hweui>:
    6bfc:	cf 93       	push	r28
    6bfe:	df 93       	push	r29
    6c00:	ec 01       	movw	r28, r24
    6c02:	60 e0       	ldi	r22, 0x00	; 0
    6c04:	70 e0       	ldi	r23, 0x00	; 0
    6c06:	85 e3       	ldi	r24, 0x35	; 53
    6c08:	95 e0       	ldi	r25, 0x05	; 5
    6c0a:	bf de       	rcall	.-642    	; 0x698a <_uploadMessage>
    6c0c:	e8 e3       	ldi	r30, 0x38	; 56
    6c0e:	f7 e1       	ldi	r31, 0x17	; 23
    6c10:	01 90       	ld	r0, Z+
    6c12:	00 20       	and	r0, r0
    6c14:	e9 f7       	brne	.-6      	; 0x6c10 <lora_driver_getRn2483Hweui+0x14>
    6c16:	e9 54       	subi	r30, 0x49	; 73
    6c18:	f7 41       	sbci	r31, 0x17	; 23
    6c1a:	39 f4       	brne	.+14     	; 0x6c2a <lora_driver_getRn2483Hweui+0x2e>
    6c1c:	68 e3       	ldi	r22, 0x38	; 56
    6c1e:	77 e1       	ldi	r23, 0x17	; 23
    6c20:	ce 01       	movw	r24, r28
    6c22:	0e 94 e7 42 	call	0x85ce	; 0x85ce <strcpy>
    6c26:	80 e0       	ldi	r24, 0x00	; 0
    6c28:	02 c0       	rjmp	.+4      	; 0x6c2e <lora_driver_getRn2483Hweui+0x32>
    6c2a:	18 82       	st	Y, r1
    6c2c:	81 e0       	ldi	r24, 0x01	; 1
    6c2e:	df 91       	pop	r29
    6c30:	cf 91       	pop	r28
    6c32:	08 95       	ret

00006c34 <lora_driver_setDeviceIdentifier>:
    6c34:	fc 01       	movw	r30, r24
    6c36:	01 90       	ld	r0, Z+
    6c38:	00 20       	and	r0, r0
    6c3a:	e9 f7       	brne	.-6      	; 0x6c36 <lora_driver_setDeviceIdentifier+0x2>
    6c3c:	9f 01       	movw	r18, r30
    6c3e:	21 51       	subi	r18, 0x11	; 17
    6c40:	31 09       	sbc	r19, r1
    6c42:	28 17       	cp	r18, r24
    6c44:	39 07       	cpc	r19, r25
    6c46:	29 f4       	brne	.+10     	; 0x6c52 <lora_driver_setDeviceIdentifier+0x1e>
    6c48:	bc 01       	movw	r22, r24
    6c4a:	83 e6       	ldi	r24, 0x63	; 99
    6c4c:	95 e0       	ldi	r25, 0x05	; 5
    6c4e:	6c cf       	rjmp	.-296    	; 0x6b28 <_uploadMessageRc>
    6c50:	08 95       	ret
    6c52:	89 e0       	ldi	r24, 0x09	; 9
    6c54:	08 95       	ret

00006c56 <lora_driver_setApplicationIdentifier>:
    6c56:	fc 01       	movw	r30, r24
    6c58:	01 90       	ld	r0, Z+
    6c5a:	00 20       	and	r0, r0
    6c5c:	e9 f7       	brne	.-6      	; 0x6c58 <lora_driver_setApplicationIdentifier+0x2>
    6c5e:	9f 01       	movw	r18, r30
    6c60:	21 51       	subi	r18, 0x11	; 17
    6c62:	31 09       	sbc	r19, r1
    6c64:	28 17       	cp	r18, r24
    6c66:	39 07       	cpc	r19, r25
    6c68:	29 f4       	brne	.+10     	; 0x6c74 <lora_driver_setApplicationIdentifier+0x1e>
    6c6a:	bc 01       	movw	r22, r24
    6c6c:	82 e7       	ldi	r24, 0x72	; 114
    6c6e:	95 e0       	ldi	r25, 0x05	; 5
    6c70:	5b cf       	rjmp	.-330    	; 0x6b28 <_uploadMessageRc>
    6c72:	08 95       	ret
    6c74:	89 e0       	ldi	r24, 0x09	; 9
    6c76:	08 95       	ret

00006c78 <lora_driver_setApplicationKey>:
    6c78:	fc 01       	movw	r30, r24
    6c7a:	01 90       	ld	r0, Z+
    6c7c:	00 20       	and	r0, r0
    6c7e:	e9 f7       	brne	.-6      	; 0x6c7a <lora_driver_setApplicationKey+0x2>
    6c80:	9f 01       	movw	r18, r30
    6c82:	21 52       	subi	r18, 0x21	; 33
    6c84:	31 09       	sbc	r19, r1
    6c86:	28 17       	cp	r18, r24
    6c88:	39 07       	cpc	r19, r25
    6c8a:	29 f4       	brne	.+10     	; 0x6c96 <lora_driver_setApplicationKey+0x1e>
    6c8c:	bc 01       	movw	r22, r24
    6c8e:	81 e8       	ldi	r24, 0x81	; 129
    6c90:	95 e0       	ldi	r25, 0x05	; 5
    6c92:	4a cf       	rjmp	.-364    	; 0x6b28 <_uploadMessageRc>
    6c94:	08 95       	ret
    6c96:	89 e0       	ldi	r24, 0x09	; 9
    6c98:	08 95       	ret

00006c9a <lora_driver_saveMac>:
    6c9a:	60 e0       	ldi	r22, 0x00	; 0
    6c9c:	70 e0       	ldi	r23, 0x00	; 0
    6c9e:	80 ec       	ldi	r24, 0xC0	; 192
    6ca0:	95 e0       	ldi	r25, 0x05	; 5
    6ca2:	42 cf       	rjmp	.-380    	; 0x6b28 <_uploadMessageRc>
    6ca4:	08 95       	ret

00006ca6 <lora_driver_join>:
    6ca6:	0f 93       	push	r16
    6ca8:	1f 93       	push	r17
    6caa:	e8 2f       	mov	r30, r24
    6cac:	f0 e0       	ldi	r31, 0x00	; 0
    6cae:	ee 0f       	add	r30, r30
    6cb0:	ff 1f       	adc	r31, r31
    6cb2:	e6 56       	subi	r30, 0x66	; 102
    6cb4:	f8 4f       	sbci	r31, 0xF8	; 248
    6cb6:	60 81       	ld	r22, Z
    6cb8:	71 81       	ldd	r23, Z+1	; 0x01
    6cba:	89 ec       	ldi	r24, 0xC9	; 201
    6cbc:	95 e0       	ldi	r25, 0x05	; 5
    6cbe:	34 df       	rcall	.-408    	; 0x6b28 <_uploadMessageRc>
    6cc0:	81 11       	cpse	r24, r1
    6cc2:	14 c0       	rjmp	.+40     	; 0x6cec <lora_driver_join+0x46>
    6cc4:	08 e2       	ldi	r16, 0x28	; 40
    6cc6:	15 e0       	ldi	r17, 0x05	; 5
    6cc8:	20 e0       	ldi	r18, 0x00	; 0
    6cca:	30 e0       	ldi	r19, 0x00	; 0
    6ccc:	4d e2       	ldi	r20, 0x2D	; 45
    6cce:	50 e0       	ldi	r21, 0x00	; 0
    6cd0:	68 e3       	ldi	r22, 0x38	; 56
    6cd2:	77 e1       	ldi	r23, 0x17	; 23
    6cd4:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    6cd8:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    6cdc:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xStreamBufferReceive>
    6ce0:	88 23       	and	r24, r24
    6ce2:	21 f0       	breq	.+8      	; 0x6cec <lora_driver_join+0x46>
    6ce4:	88 e3       	ldi	r24, 0x38	; 56
    6ce6:	97 e1       	ldi	r25, 0x17	; 23
    6ce8:	aa de       	rcall	.-684    	; 0x6a3e <_reply2ReturnCode>
    6cea:	03 c0       	rjmp	.+6      	; 0x6cf2 <lora_driver_join+0x4c>
    6cec:	88 e3       	ldi	r24, 0x38	; 56
    6cee:	97 e1       	ldi	r25, 0x17	; 23
    6cf0:	a6 de       	rcall	.-692    	; 0x6a3e <_reply2ReturnCode>
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	08 95       	ret

00006cf8 <lora_driver_sendUploadMessage>:
    6cf8:	0f 93       	push	r16
    6cfa:	1f 93       	push	r17
    6cfc:	cf 93       	push	r28
    6cfe:	df 93       	push	r29
    6d00:	1f 92       	push	r1
    6d02:	cd b7       	in	r28, 0x3d	; 61
    6d04:	de b7       	in	r29, 0x3e	; 62
    6d06:	db 01       	movw	r26, r22
    6d08:	11 96       	adiw	r26, 0x01	; 1
    6d0a:	9c 91       	ld	r25, X
    6d0c:	11 97       	sbiw	r26, 0x01	; 1
    6d0e:	95 31       	cpi	r25, 0x15	; 21
    6d10:	08 f0       	brcs	.+2      	; 0x6d14 <lora_driver_sendUploadMessage+0x1c>
    6d12:	b4 c0       	rjmp	.+360    	; 0x6e7c <lora_driver_sendUploadMessage+0x184>
    6d14:	99 23       	and	r25, r25
    6d16:	81 f1       	breq	.+96     	; 0x6d78 <lora_driver_sendUploadMessage+0x80>
    6d18:	60 e0       	ldi	r22, 0x00	; 0
    6d1a:	70 e0       	ldi	r23, 0x00	; 0
    6d1c:	27 2f       	mov	r18, r23
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	46 2f       	mov	r20, r22
    6d22:	50 e0       	ldi	r21, 0x00	; 0
    6d24:	fd 01       	movw	r30, r26
    6d26:	e4 0f       	add	r30, r20
    6d28:	f5 1f       	adc	r31, r21
    6d2a:	92 81       	ldd	r25, Z+2	; 0x02
    6d2c:	92 95       	swap	r25
    6d2e:	9f 70       	andi	r25, 0x0F	; 15
    6d30:	9a 30       	cpi	r25, 0x0A	; 10
    6d32:	10 f0       	brcs	.+4      	; 0x6d38 <lora_driver_sendUploadMessage+0x40>
    6d34:	99 5c       	subi	r25, 0xC9	; 201
    6d36:	01 c0       	rjmp	.+2      	; 0x6d3a <lora_driver_sendUploadMessage+0x42>
    6d38:	90 5d       	subi	r25, 0xD0	; 208
    6d3a:	f9 01       	movw	r30, r18
    6d3c:	e7 53       	subi	r30, 0x37	; 55
    6d3e:	f9 4e       	sbci	r31, 0xE9	; 233
    6d40:	90 83       	st	Z, r25
    6d42:	2f 5f       	subi	r18, 0xFF	; 255
    6d44:	3f 4f       	sbci	r19, 0xFF	; 255
    6d46:	fd 01       	movw	r30, r26
    6d48:	e4 0f       	add	r30, r20
    6d4a:	f5 1f       	adc	r31, r21
    6d4c:	92 81       	ldd	r25, Z+2	; 0x02
    6d4e:	9f 70       	andi	r25, 0x0F	; 15
    6d50:	49 2f       	mov	r20, r25
    6d52:	50 e0       	ldi	r21, 0x00	; 0
    6d54:	4a 30       	cpi	r20, 0x0A	; 10
    6d56:	51 05       	cpc	r21, r1
    6d58:	14 f0       	brlt	.+4      	; 0x6d5e <lora_driver_sendUploadMessage+0x66>
    6d5a:	99 5c       	subi	r25, 0xC9	; 201
    6d5c:	01 c0       	rjmp	.+2      	; 0x6d60 <lora_driver_sendUploadMessage+0x68>
    6d5e:	90 5d       	subi	r25, 0xD0	; 208
    6d60:	f9 01       	movw	r30, r18
    6d62:	e7 53       	subi	r30, 0x37	; 55
    6d64:	f9 4e       	sbci	r31, 0xE9	; 233
    6d66:	90 83       	st	Z, r25
    6d68:	7e 5f       	subi	r23, 0xFE	; 254
    6d6a:	6f 5f       	subi	r22, 0xFF	; 255
    6d6c:	11 96       	adiw	r26, 0x01	; 1
    6d6e:	9c 91       	ld	r25, X
    6d70:	11 97       	sbiw	r26, 0x01	; 1
    6d72:	69 17       	cp	r22, r25
    6d74:	98 f2       	brcs	.-90     	; 0x6d1c <lora_driver_sendUploadMessage+0x24>
    6d76:	01 c0       	rjmp	.+2      	; 0x6d7a <lora_driver_sendUploadMessage+0x82>
    6d78:	70 e0       	ldi	r23, 0x00	; 0
    6d7a:	e7 2f       	mov	r30, r23
    6d7c:	f0 e0       	ldi	r31, 0x00	; 0
    6d7e:	e7 53       	subi	r30, 0x37	; 55
    6d80:	f9 4e       	sbci	r31, 0xE9	; 233
    6d82:	10 82       	st	Z, r1
    6d84:	4c 91       	ld	r20, X
    6d86:	81 11       	cpse	r24, r1
    6d88:	03 c0       	rjmp	.+6      	; 0x6d90 <lora_driver_sendUploadMessage+0x98>
    6d8a:	82 ed       	ldi	r24, 0xD2	; 210
    6d8c:	95 e0       	ldi	r25, 0x05	; 5
    6d8e:	02 c0       	rjmp	.+4      	; 0x6d94 <lora_driver_sendUploadMessage+0x9c>
    6d90:	84 ed       	ldi	r24, 0xD4	; 212
    6d92:	95 e0       	ldi	r25, 0x05	; 5
    6d94:	29 ec       	ldi	r18, 0xC9	; 201
    6d96:	36 e1       	ldi	r19, 0x16	; 22
    6d98:	3f 93       	push	r19
    6d9a:	2f 93       	push	r18
    6d9c:	1f 92       	push	r1
    6d9e:	4f 93       	push	r20
    6da0:	9f 93       	push	r25
    6da2:	8f 93       	push	r24
    6da4:	88 ed       	ldi	r24, 0xD8	; 216
    6da6:	95 e0       	ldi	r25, 0x05	; 5
    6da8:	9f 93       	push	r25
    6daa:	8f 93       	push	r24
    6dac:	8b e0       	ldi	r24, 0x0B	; 11
    6dae:	97 e1       	ldi	r25, 0x17	; 23
    6db0:	9f 93       	push	r25
    6db2:	8f 93       	push	r24
    6db4:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    6db8:	60 e0       	ldi	r22, 0x00	; 0
    6dba:	70 e0       	ldi	r23, 0x00	; 0
    6dbc:	8b e0       	ldi	r24, 0x0B	; 11
    6dbe:	97 e1       	ldi	r25, 0x17	; 23
    6dc0:	b3 de       	rcall	.-666    	; 0x6b28 <_uploadMessageRc>
    6dc2:	0f b6       	in	r0, 0x3f	; 63
    6dc4:	f8 94       	cli
    6dc6:	de bf       	out	0x3e, r29	; 62
    6dc8:	0f be       	out	0x3f, r0	; 63
    6dca:	cd bf       	out	0x3d, r28	; 61
    6dcc:	81 11       	cpse	r24, r1
    6dce:	59 c0       	rjmp	.+178    	; 0x6e82 <lora_driver_sendUploadMessage+0x18a>
    6dd0:	08 e2       	ldi	r16, 0x28	; 40
    6dd2:	15 e0       	ldi	r17, 0x05	; 5
    6dd4:	20 e0       	ldi	r18, 0x00	; 0
    6dd6:	30 e0       	ldi	r19, 0x00	; 0
    6dd8:	4d e2       	ldi	r20, 0x2D	; 45
    6dda:	50 e0       	ldi	r21, 0x00	; 0
    6ddc:	68 e3       	ldi	r22, 0x38	; 56
    6dde:	77 e1       	ldi	r23, 0x17	; 23
    6de0:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_serialReplyBufferHandle>
    6de4:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_serialReplyBufferHandle+0x1>
    6de8:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xStreamBufferReceive>
    6dec:	88 23       	and	r24, r24
    6dee:	09 f4       	brne	.+2      	; 0x6df2 <lora_driver_sendUploadMessage+0xfa>
    6df0:	47 c0       	rjmp	.+142    	; 0x6e80 <lora_driver_sendUploadMessage+0x188>
    6df2:	88 e3       	ldi	r24, 0x38	; 56
    6df4:	97 e1       	ldi	r25, 0x17	; 23
    6df6:	23 de       	rcall	.-954    	; 0x6a3e <_reply2ReturnCode>
    6df8:	8e 30       	cpi	r24, 0x0E	; 14
    6dfa:	09 f0       	breq	.+2      	; 0x6dfe <lora_driver_sendUploadMessage+0x106>
    6dfc:	42 c0       	rjmp	.+132    	; 0x6e82 <lora_driver_sendUploadMessage+0x18a>
    6dfe:	87 e0       	ldi	r24, 0x07	; 7
    6e00:	89 83       	std	Y+1, r24	; 0x01
    6e02:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <_downlinkMessageBuffer>
    6e06:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <_downlinkMessageBuffer+0x1>
    6e0a:	89 2b       	or	r24, r25
    6e0c:	a9 f1       	breq	.+106    	; 0x6e78 <lora_driver_sendUploadMessage+0x180>
    6e0e:	be 01       	movw	r22, r28
    6e10:	6f 5f       	subi	r22, 0xFF	; 255
    6e12:	7f 4f       	sbci	r23, 0xFF	; 255
    6e14:	88 e3       	ldi	r24, 0x38	; 56
    6e16:	97 e1       	ldi	r25, 0x17	; 23
    6e18:	68 d1       	rcall	.+720    	; 0x70ea <decode_port_no>
    6e1a:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <_downlinkPayload>
    6e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    6e20:	f0 e0       	ldi	r31, 0x00	; 0
    6e22:	e8 5c       	subi	r30, 0xC8	; 200
    6e24:	f8 4e       	sbci	r31, 0xE8	; 232
    6e26:	df 01       	movw	r26, r30
    6e28:	0d 90       	ld	r0, X+
    6e2a:	00 20       	and	r0, r0
    6e2c:	e9 f7       	brne	.-6      	; 0x6e28 <lora_driver_sendUploadMessage+0x130>
    6e2e:	11 97       	sbiw	r26, 0x01	; 1
    6e30:	ae 1b       	sub	r26, r30
    6e32:	bf 0b       	sbc	r27, r31
    6e34:	aa 23       	and	r26, r26
    6e36:	91 f0       	breq	.+36     	; 0x6e5c <lora_driver_sendUploadMessage+0x164>
    6e38:	bb 27       	eor	r27, r27
    6e3a:	cd 01       	movw	r24, r26
    6e3c:	01 97       	sbiw	r24, 0x01	; 1
    6e3e:	9c 01       	movw	r18, r24
    6e40:	12 f4       	brpl	.+4      	; 0x6e46 <lora_driver_sendUploadMessage+0x14e>
    6e42:	2f 5f       	subi	r18, 0xFF	; 255
    6e44:	3f 4f       	sbci	r19, 0xFF	; 255
    6e46:	35 95       	asr	r19
    6e48:	27 95       	ror	r18
    6e4a:	20 93 b4 16 	sts	0x16B4, r18	; 0x8016b4 <_downlinkPayload+0x1>
    6e4e:	af 01       	movw	r20, r30
    6e50:	4f 5f       	subi	r20, 0xFF	; 255
    6e52:	5f 4f       	sbci	r21, 0xFF	; 255
    6e54:	64 e1       	ldi	r22, 0x14	; 20
    6e56:	85 eb       	ldi	r24, 0xB5	; 181
    6e58:	96 e1       	ldi	r25, 0x16	; 22
    6e5a:	73 d1       	rcall	.+742    	; 0x7142 <decode_hexadecimal_string_bytes>
    6e5c:	01 e0       	ldi	r16, 0x01	; 1
    6e5e:	10 e0       	ldi	r17, 0x00	; 0
    6e60:	20 e0       	ldi	r18, 0x00	; 0
    6e62:	30 e0       	ldi	r19, 0x00	; 0
    6e64:	46 e1       	ldi	r20, 0x16	; 22
    6e66:	50 e0       	ldi	r21, 0x00	; 0
    6e68:	63 eb       	ldi	r22, 0xB3	; 179
    6e6a:	76 e1       	ldi	r23, 0x16	; 22
    6e6c:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <_downlinkMessageBuffer>
    6e70:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <_downlinkMessageBuffer+0x1>
    6e74:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xStreamBufferSend>
    6e78:	8e e0       	ldi	r24, 0x0E	; 14
    6e7a:	03 c0       	rjmp	.+6      	; 0x6e82 <lora_driver_sendUploadMessage+0x18a>
    6e7c:	84 e1       	ldi	r24, 0x14	; 20
    6e7e:	01 c0       	rjmp	.+2      	; 0x6e82 <lora_driver_sendUploadMessage+0x18a>
    6e80:	80 e0       	ldi	r24, 0x00	; 0
    6e82:	0f 90       	pop	r0
    6e84:	df 91       	pop	r29
    6e86:	cf 91       	pop	r28
    6e88:	1f 91       	pop	r17
    6e8a:	0f 91       	pop	r16
    6e8c:	08 95       	ret

00006e8e <lora_driver_setAdaptiveDataRate>:
    6e8e:	81 30       	cpi	r24, 0x01	; 1
    6e90:	19 f0       	breq	.+6      	; 0x6e98 <lora_driver_setAdaptiveDataRate+0xa>
    6e92:	68 ee       	ldi	r22, 0xE8	; 232
    6e94:	75 e0       	ldi	r23, 0x05	; 5
    6e96:	02 c0       	rjmp	.+4      	; 0x6e9c <lora_driver_setAdaptiveDataRate+0xe>
    6e98:	61 ec       	ldi	r22, 0xC1	; 193
    6e9a:	76 e0       	ldi	r23, 0x06	; 6
    6e9c:	8c ee       	ldi	r24, 0xEC	; 236
    6e9e:	95 e0       	ldi	r25, 0x05	; 5
    6ea0:	43 ce       	rjmp	.-890    	; 0x6b28 <_uploadMessageRc>
    6ea2:	08 95       	ret

00006ea4 <lora_driver_setReceiveDelay>:
    6ea4:	9f 93       	push	r25
    6ea6:	8f 93       	push	r24
    6ea8:	8d e1       	ldi	r24, 0x1D	; 29
    6eaa:	96 e0       	ldi	r25, 0x06	; 6
    6eac:	9f 93       	push	r25
    6eae:	8f 93       	push	r24
    6eb0:	8b e0       	ldi	r24, 0x0B	; 11
    6eb2:	97 e1       	ldi	r25, 0x17	; 23
    6eb4:	9f 93       	push	r25
    6eb6:	8f 93       	push	r24
    6eb8:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    6ebc:	60 e0       	ldi	r22, 0x00	; 0
    6ebe:	70 e0       	ldi	r23, 0x00	; 0
    6ec0:	8b e0       	ldi	r24, 0x0B	; 11
    6ec2:	97 e1       	ldi	r25, 0x17	; 23
    6ec4:	31 de       	rcall	.-926    	; 0x6b28 <_uploadMessageRc>
    6ec6:	0f 90       	pop	r0
    6ec8:	0f 90       	pop	r0
    6eca:	0f 90       	pop	r0
    6ecc:	0f 90       	pop	r0
    6ece:	0f 90       	pop	r0
    6ed0:	0f 90       	pop	r0
    6ed2:	08 95       	ret

00006ed4 <lora_driver_configureToEu868>:
    6ed4:	2f 92       	push	r2
    6ed6:	3f 92       	push	r3
    6ed8:	4f 92       	push	r4
    6eda:	5f 92       	push	r5
    6edc:	6f 92       	push	r6
    6ede:	7f 92       	push	r7
    6ee0:	8f 92       	push	r8
    6ee2:	9f 92       	push	r9
    6ee4:	af 92       	push	r10
    6ee6:	bf 92       	push	r11
    6ee8:	cf 92       	push	r12
    6eea:	df 92       	push	r13
    6eec:	ef 92       	push	r14
    6eee:	ff 92       	push	r15
    6ef0:	0f 93       	push	r16
    6ef2:	1f 93       	push	r17
    6ef4:	cf 93       	push	r28
    6ef6:	df 93       	push	r29
    6ef8:	cd b7       	in	r28, 0x3d	; 61
    6efa:	de b7       	in	r29, 0x3e	; 62
    6efc:	a0 97       	sbiw	r28, 0x20	; 32
    6efe:	0f b6       	in	r0, 0x3f	; 63
    6f00:	f8 94       	cli
    6f02:	de bf       	out	0x3e, r29	; 62
    6f04:	0f be       	out	0x3f, r0	; 63
    6f06:	cd bf       	out	0x3d, r28	; 61
    6f08:	6a e4       	ldi	r22, 0x4A	; 74
    6f0a:	76 e0       	ldi	r23, 0x06	; 6
    6f0c:	86 e5       	ldi	r24, 0x56	; 86
    6f0e:	96 e0       	ldi	r25, 0x06	; 6
    6f10:	3c dd       	rcall	.-1416   	; 0x698a <_uploadMessage>
    6f12:	95 dd       	rcall	.-1238   	; 0x6a3e <_reply2ReturnCode>
    6f14:	81 11       	cpse	r24, r1
    6f16:	a3 c0       	rjmp	.+326    	; 0x705e <lora_driver_configureToEu868+0x18a>
    6f18:	80 e2       	ldi	r24, 0x20	; 32
    6f1a:	e5 ee       	ldi	r30, 0xE5	; 229
    6f1c:	f4 e0       	ldi	r31, 0x04	; 4
    6f1e:	de 01       	movw	r26, r28
    6f20:	11 96       	adiw	r26, 0x01	; 1
    6f22:	01 90       	ld	r0, Z+
    6f24:	0d 92       	st	X+, r0
    6f26:	8a 95       	dec	r24
    6f28:	e1 f7       	brne	.-8      	; 0x6f22 <lora_driver_configureToEu868+0x4e>
    6f2a:	9e 01       	movw	r18, r28
    6f2c:	2f 5f       	subi	r18, 0xFF	; 255
    6f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f30:	69 01       	movw	r12, r18
    6f32:	e1 2c       	mov	r14, r1
    6f34:	f1 2c       	mov	r15, r1
    6f36:	0f 2e       	mov	r0, r31
    6f38:	f2 e6       	ldi	r31, 0x62	; 98
    6f3a:	af 2e       	mov	r10, r31
    6f3c:	f6 e0       	ldi	r31, 0x06	; 6
    6f3e:	bf 2e       	mov	r11, r31
    6f40:	f0 2d       	mov	r31, r0
    6f42:	0b e0       	ldi	r16, 0x0B	; 11
    6f44:	17 e1       	ldi	r17, 0x17	; 23
    6f46:	0f 2e       	mov	r0, r31
    6f48:	fb e7       	ldi	r31, 0x7B	; 123
    6f4a:	4f 2e       	mov	r4, r31
    6f4c:	f6 e0       	ldi	r31, 0x06	; 6
    6f4e:	5f 2e       	mov	r5, r31
    6f50:	f0 2d       	mov	r31, r0
    6f52:	0f 2e       	mov	r0, r31
    6f54:	f2 e9       	ldi	r31, 0x92	; 146
    6f56:	8f 2e       	mov	r8, r31
    6f58:	f6 e0       	ldi	r31, 0x06	; 6
    6f5a:	9f 2e       	mov	r9, r31
    6f5c:	f0 2d       	mov	r31, r0
    6f5e:	0f 2e       	mov	r0, r31
    6f60:	fc ea       	ldi	r31, 0xAC	; 172
    6f62:	6f 2e       	mov	r6, r31
    6f64:	f6 e0       	ldi	r31, 0x06	; 6
    6f66:	7f 2e       	mov	r7, r31
    6f68:	f0 2d       	mov	r31, r0
    6f6a:	3e 2c       	mov	r3, r14
    6f6c:	2f 2c       	mov	r2, r15
    6f6e:	ff 92       	push	r15
    6f70:	ef 92       	push	r14
    6f72:	bf 92       	push	r11
    6f74:	af 92       	push	r10
    6f76:	1f 93       	push	r17
    6f78:	0f 93       	push	r16
    6f7a:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    6f7e:	60 e0       	ldi	r22, 0x00	; 0
    6f80:	70 e0       	ldi	r23, 0x00	; 0
    6f82:	c8 01       	movw	r24, r16
    6f84:	02 dd       	rcall	.-1532   	; 0x698a <_uploadMessage>
    6f86:	5b dd       	rcall	.-1354   	; 0x6a3e <_reply2ReturnCode>
    6f88:	0f 90       	pop	r0
    6f8a:	0f 90       	pop	r0
    6f8c:	0f 90       	pop	r0
    6f8e:	0f 90       	pop	r0
    6f90:	0f 90       	pop	r0
    6f92:	0f 90       	pop	r0
    6f94:	81 11       	cpse	r24, r1
    6f96:	63 c0       	rjmp	.+198    	; 0x705e <lora_driver_configureToEu868+0x18a>
    6f98:	32 e0       	ldi	r19, 0x02	; 2
    6f9a:	3e 15       	cp	r19, r14
    6f9c:	e8 f4       	brcc	.+58     	; 0x6fd8 <lora_driver_configureToEu868+0x104>
    6f9e:	f6 01       	movw	r30, r12
    6fa0:	83 81       	ldd	r24, Z+3	; 0x03
    6fa2:	8f 93       	push	r24
    6fa4:	82 81       	ldd	r24, Z+2	; 0x02
    6fa6:	8f 93       	push	r24
    6fa8:	81 81       	ldd	r24, Z+1	; 0x01
    6faa:	8f 93       	push	r24
    6fac:	80 81       	ld	r24, Z
    6fae:	8f 93       	push	r24
    6fb0:	ff 92       	push	r15
    6fb2:	ef 92       	push	r14
    6fb4:	5f 92       	push	r5
    6fb6:	4f 92       	push	r4
    6fb8:	1f 93       	push	r17
    6fba:	0f 93       	push	r16
    6fbc:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    6fc0:	60 e0       	ldi	r22, 0x00	; 0
    6fc2:	70 e0       	ldi	r23, 0x00	; 0
    6fc4:	c8 01       	movw	r24, r16
    6fc6:	e1 dc       	rcall	.-1598   	; 0x698a <_uploadMessage>
    6fc8:	3a dd       	rcall	.-1420   	; 0x6a3e <_reply2ReturnCode>
    6fca:	0f b6       	in	r0, 0x3f	; 63
    6fcc:	f8 94       	cli
    6fce:	de bf       	out	0x3e, r29	; 62
    6fd0:	0f be       	out	0x3f, r0	; 63
    6fd2:	cd bf       	out	0x3d, r28	; 61
    6fd4:	81 11       	cpse	r24, r1
    6fd6:	43 c0       	rjmp	.+134    	; 0x705e <lora_driver_configureToEu868+0x18a>
    6fd8:	2f 92       	push	r2
    6fda:	3f 92       	push	r3
    6fdc:	9f 92       	push	r9
    6fde:	8f 92       	push	r8
    6fe0:	1f 93       	push	r17
    6fe2:	0f 93       	push	r16
    6fe4:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    6fe8:	60 e0       	ldi	r22, 0x00	; 0
    6fea:	70 e0       	ldi	r23, 0x00	; 0
    6fec:	c8 01       	movw	r24, r16
    6fee:	cd dc       	rcall	.-1638   	; 0x698a <_uploadMessage>
    6ff0:	26 dd       	rcall	.-1460   	; 0x6a3e <_reply2ReturnCode>
    6ff2:	0f 90       	pop	r0
    6ff4:	0f 90       	pop	r0
    6ff6:	0f 90       	pop	r0
    6ff8:	0f 90       	pop	r0
    6ffa:	0f 90       	pop	r0
    6ffc:	0f 90       	pop	r0
    6ffe:	81 11       	cpse	r24, r1
    7000:	2e c0       	rjmp	.+92     	; 0x705e <lora_driver_configureToEu868+0x18a>
    7002:	2f 92       	push	r2
    7004:	3f 92       	push	r3
    7006:	7f 92       	push	r7
    7008:	6f 92       	push	r6
    700a:	1f 93       	push	r17
    700c:	0f 93       	push	r16
    700e:	0e 94 49 43 	call	0x8692	; 0x8692 <sprintf>
    7012:	60 e0       	ldi	r22, 0x00	; 0
    7014:	70 e0       	ldi	r23, 0x00	; 0
    7016:	c8 01       	movw	r24, r16
    7018:	b8 dc       	rcall	.-1680   	; 0x698a <_uploadMessage>
    701a:	11 dd       	rcall	.-1502   	; 0x6a3e <_reply2ReturnCode>
    701c:	0f 90       	pop	r0
    701e:	0f 90       	pop	r0
    7020:	0f 90       	pop	r0
    7022:	0f 90       	pop	r0
    7024:	0f 90       	pop	r0
    7026:	0f 90       	pop	r0
    7028:	81 11       	cpse	r24, r1
    702a:	19 c0       	rjmp	.+50     	; 0x705e <lora_driver_configureToEu868+0x18a>
    702c:	3f ef       	ldi	r19, 0xFF	; 255
    702e:	e3 1a       	sub	r14, r19
    7030:	f3 0a       	sbc	r15, r19
    7032:	84 e0       	ldi	r24, 0x04	; 4
    7034:	c8 0e       	add	r12, r24
    7036:	d1 1c       	adc	r13, r1
    7038:	98 e0       	ldi	r25, 0x08	; 8
    703a:	e9 16       	cp	r14, r25
    703c:	f1 04       	cpc	r15, r1
    703e:	09 f0       	breq	.+2      	; 0x7042 <lora_driver_configureToEu868+0x16e>
    7040:	94 cf       	rjmp	.-216    	; 0x6f6a <lora_driver_configureToEu868+0x96>
    7042:	60 e0       	ldi	r22, 0x00	; 0
    7044:	70 e0       	ldi	r23, 0x00	; 0
    7046:	84 ec       	ldi	r24, 0xC4	; 196
    7048:	96 e0       	ldi	r25, 0x06	; 6
    704a:	9f dc       	rcall	.-1730   	; 0x698a <_uploadMessage>
    704c:	f8 dc       	rcall	.-1552   	; 0x6a3e <_reply2ReturnCode>
    704e:	81 11       	cpse	r24, r1
    7050:	06 c0       	rjmp	.+12     	; 0x705e <lora_driver_configureToEu868+0x18a>
    7052:	60 e0       	ldi	r22, 0x00	; 0
    7054:	70 e0       	ldi	r23, 0x00	; 0
    7056:	85 ed       	ldi	r24, 0xD5	; 213
    7058:	96 e0       	ldi	r25, 0x06	; 6
    705a:	97 dc       	rcall	.-1746   	; 0x698a <_uploadMessage>
    705c:	f0 dc       	rcall	.-1568   	; 0x6a3e <_reply2ReturnCode>
    705e:	a0 96       	adiw	r28, 0x20	; 32
    7060:	0f b6       	in	r0, 0x3f	; 63
    7062:	f8 94       	cli
    7064:	de bf       	out	0x3e, r29	; 62
    7066:	0f be       	out	0x3f, r0	; 63
    7068:	cd bf       	out	0x3d, r28	; 61
    706a:	df 91       	pop	r29
    706c:	cf 91       	pop	r28
    706e:	1f 91       	pop	r17
    7070:	0f 91       	pop	r16
    7072:	ff 90       	pop	r15
    7074:	ef 90       	pop	r14
    7076:	df 90       	pop	r13
    7078:	cf 90       	pop	r12
    707a:	bf 90       	pop	r11
    707c:	af 90       	pop	r10
    707e:	9f 90       	pop	r9
    7080:	8f 90       	pop	r8
    7082:	7f 90       	pop	r7
    7084:	6f 90       	pop	r6
    7086:	5f 90       	pop	r5
    7088:	4f 90       	pop	r4
    708a:	3f 90       	pop	r3
    708c:	2f 90       	pop	r2
    708e:	08 95       	ret

00007090 <lora_driver_setOtaaIdentity>:
    7090:	ef 92       	push	r14
    7092:	ff 92       	push	r15
    7094:	0f 93       	push	r16
    7096:	1f 93       	push	r17
    7098:	cf 93       	push	r28
    709a:	df 93       	push	r29
    709c:	ec 01       	movw	r28, r24
    709e:	8b 01       	movw	r16, r22
    70a0:	7a 01       	movw	r14, r20
    70a2:	81 e0       	ldi	r24, 0x01	; 1
    70a4:	f4 de       	rcall	.-536    	; 0x6e8e <lora_driver_setAdaptiveDataRate>
    70a6:	81 11       	cpse	r24, r1
    70a8:	0d c0       	rjmp	.+26     	; 0x70c4 <lora_driver_setOtaaIdentity+0x34>
    70aa:	ce 01       	movw	r24, r28
    70ac:	d4 dd       	rcall	.-1112   	; 0x6c56 <lora_driver_setApplicationIdentifier>
    70ae:	81 11       	cpse	r24, r1
    70b0:	09 c0       	rjmp	.+18     	; 0x70c4 <lora_driver_setOtaaIdentity+0x34>
    70b2:	c8 01       	movw	r24, r16
    70b4:	e1 dd       	rcall	.-1086   	; 0x6c78 <lora_driver_setApplicationKey>
    70b6:	81 11       	cpse	r24, r1
    70b8:	05 c0       	rjmp	.+10     	; 0x70c4 <lora_driver_setOtaaIdentity+0x34>
    70ba:	c7 01       	movw	r24, r14
    70bc:	bb dd       	rcall	.-1162   	; 0x6c34 <lora_driver_setDeviceIdentifier>
    70be:	81 11       	cpse	r24, r1
    70c0:	01 c0       	rjmp	.+2      	; 0x70c4 <lora_driver_setOtaaIdentity+0x34>
    70c2:	eb dd       	rcall	.-1066   	; 0x6c9a <lora_driver_saveMac>
    70c4:	df 91       	pop	r29
    70c6:	cf 91       	pop	r28
    70c8:	1f 91       	pop	r17
    70ca:	0f 91       	pop	r16
    70cc:	ff 90       	pop	r15
    70ce:	ef 90       	pop	r14
    70d0:	08 95       	ret

000070d2 <lora_driver_mapReturnCodeToText>:
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	fc 01       	movw	r30, r24
    70d6:	ee 0f       	add	r30, r30
    70d8:	ff 1f       	adc	r31, r31
    70da:	8e 0f       	add	r24, r30
    70dc:	9f 1f       	adc	r25, r31
    70de:	fc 01       	movw	r30, r24
    70e0:	e2 56       	subi	r30, 0x62	; 98
    70e2:	f8 4f       	sbci	r31, 0xF8	; 248
    70e4:	81 81       	ldd	r24, Z+1	; 0x01
    70e6:	92 81       	ldd	r25, Z+2	; 0x02
    70e8:	08 95       	ret

000070ea <decode_port_no>:
    70ea:	dc 01       	movw	r26, r24
    70ec:	00 97       	sbiw	r24, 0x00	; 0
    70ee:	29 f1       	breq	.+74     	; 0x713a <decode_port_no+0x50>
    70f0:	fb 01       	movw	r30, r22
    70f2:	20 81       	ld	r18, Z
    70f4:	fc 01       	movw	r30, r24
    70f6:	01 90       	ld	r0, Z+
    70f8:	00 20       	and	r0, r0
    70fa:	e9 f7       	brne	.-6      	; 0x70f6 <decode_port_no+0xc>
    70fc:	31 97       	sbiw	r30, 0x01	; 1
    70fe:	e8 1b       	sub	r30, r24
    7100:	f9 0b       	sbc	r31, r25
    7102:	82 2f       	mov	r24, r18
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	e8 17       	cp	r30, r24
    7108:	f9 07       	cpc	r31, r25
    710a:	c8 f0       	brcs	.+50     	; 0x713e <decode_port_no+0x54>
    710c:	80 e0       	ldi	r24, 0x00	; 0
    710e:	08 c0       	rjmp	.+16     	; 0x7120 <decode_port_no+0x36>
    7110:	88 0f       	add	r24, r24
    7112:	38 2f       	mov	r19, r24
    7114:	33 0f       	add	r19, r19
    7116:	33 0f       	add	r19, r19
    7118:	83 0f       	add	r24, r19
    711a:	80 53       	subi	r24, 0x30	; 48
    711c:	89 0f       	add	r24, r25
    711e:	2f 5f       	subi	r18, 0xFF	; 255
    7120:	fd 01       	movw	r30, r26
    7122:	e2 0f       	add	r30, r18
    7124:	f1 1d       	adc	r31, r1
    7126:	90 81       	ld	r25, Z
    7128:	30 ed       	ldi	r19, 0xD0	; 208
    712a:	39 0f       	add	r19, r25
    712c:	3a 30       	cpi	r19, 0x0A	; 10
    712e:	10 f4       	brcc	.+4      	; 0x7134 <decode_port_no+0x4a>
    7130:	91 11       	cpse	r25, r1
    7132:	ee cf       	rjmp	.-36     	; 0x7110 <decode_port_no+0x26>
    7134:	fb 01       	movw	r30, r22
    7136:	20 83       	st	Z, r18
    7138:	08 95       	ret
    713a:	80 e0       	ldi	r24, 0x00	; 0
    713c:	08 95       	ret
    713e:	80 e0       	ldi	r24, 0x00	; 0
    7140:	08 95       	ret

00007142 <decode_hexadecimal_string_bytes>:
    7142:	0f 93       	push	r16
    7144:	1f 93       	push	r17
    7146:	cf 93       	push	r28
    7148:	df 93       	push	r29
    714a:	dc 01       	movw	r26, r24
    714c:	ea 01       	movw	r28, r20
    714e:	20 97       	sbiw	r28, 0x00	; 0
    7150:	e1 f1       	breq	.+120    	; 0x71ca <decode_hexadecimal_string_bytes+0x88>
    7152:	fa 01       	movw	r30, r20
    7154:	01 90       	ld	r0, Z+
    7156:	00 20       	and	r0, r0
    7158:	e9 f7       	brne	.-6      	; 0x7154 <decode_hexadecimal_string_bytes+0x12>
    715a:	31 97       	sbiw	r30, 0x01	; 1
    715c:	e4 1b       	sub	r30, r20
    715e:	f5 0b       	sbc	r31, r21
    7160:	32 97       	sbiw	r30, 0x02	; 2
    7162:	10 f5       	brcc	.+68     	; 0x71a8 <decode_hexadecimal_string_bytes+0x66>
    7164:	32 c0       	rjmp	.+100    	; 0x71ca <decode_hexadecimal_string_bytes+0x88>
    7166:	8d 01       	movw	r16, r26
    7168:	04 0f       	add	r16, r20
    716a:	15 1f       	adc	r17, r21
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	ae 01       	movw	r20, r28
    7170:	42 0f       	add	r20, r18
    7172:	53 1f       	adc	r21, r19
    7174:	fa 01       	movw	r30, r20
    7176:	90 81       	ld	r25, Z
    7178:	91 34       	cpi	r25, 0x41	; 65
    717a:	28 f0       	brcs	.+10     	; 0x7186 <decode_hexadecimal_string_bytes+0x44>
    717c:	97 53       	subi	r25, 0x37	; 55
    717e:	59 2f       	mov	r21, r25
    7180:	52 95       	swap	r21
    7182:	50 7f       	andi	r21, 0xF0	; 240
    7184:	03 c0       	rjmp	.+6      	; 0x718c <decode_hexadecimal_string_bytes+0x4a>
    7186:	59 2f       	mov	r21, r25
    7188:	52 95       	swap	r21
    718a:	50 7f       	andi	r21, 0xF0	; 240
    718c:	2c 0f       	add	r18, r28
    718e:	3d 1f       	adc	r19, r29
    7190:	f9 01       	movw	r30, r18
    7192:	91 81       	ldd	r25, Z+1	; 0x01
    7194:	91 34       	cpi	r25, 0x41	; 65
    7196:	10 f0       	brcs	.+4      	; 0x719c <decode_hexadecimal_string_bytes+0x5a>
    7198:	97 53       	subi	r25, 0x37	; 55
    719a:	01 c0       	rjmp	.+2      	; 0x719e <decode_hexadecimal_string_bytes+0x5c>
    719c:	90 53       	subi	r25, 0x30	; 48
    719e:	95 0f       	add	r25, r21
    71a0:	f8 01       	movw	r30, r16
    71a2:	90 83       	st	Z, r25
    71a4:	8f 5f       	subi	r24, 0xFF	; 255
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <decode_hexadecimal_string_bytes+0x68>
    71a8:	80 e0       	ldi	r24, 0x00	; 0
    71aa:	28 2f       	mov	r18, r24
    71ac:	22 0f       	add	r18, r18
    71ae:	48 2f       	mov	r20, r24
    71b0:	50 e0       	ldi	r21, 0x00	; 0
    71b2:	fe 01       	movw	r30, r28
    71b4:	01 90       	ld	r0, Z+
    71b6:	00 20       	and	r0, r0
    71b8:	e9 f7       	brne	.-6      	; 0x71b4 <decode_hexadecimal_string_bytes+0x72>
    71ba:	31 97       	sbiw	r30, 0x01	; 1
    71bc:	ec 1b       	sub	r30, r28
    71be:	fd 0b       	sbc	r31, r29
    71c0:	4e 17       	cp	r20, r30
    71c2:	5f 07       	cpc	r21, r31
    71c4:	10 f4       	brcc	.+4      	; 0x71ca <decode_hexadecimal_string_bytes+0x88>
    71c6:	86 13       	cpse	r24, r22
    71c8:	ce cf       	rjmp	.-100    	; 0x7166 <decode_hexadecimal_string_bytes+0x24>
    71ca:	df 91       	pop	r29
    71cc:	cf 91       	pop	r28
    71ce:	1f 91       	pop	r17
    71d0:	0f 91       	pop	r16
    71d2:	08 95       	ret

000071d4 <serial_create>:
    71d4:	2f 92       	push	r2
    71d6:	3f 92       	push	r3
    71d8:	4f 92       	push	r4
    71da:	5f 92       	push	r5
    71dc:	6f 92       	push	r6
    71de:	7f 92       	push	r7
    71e0:	8f 92       	push	r8
    71e2:	9f 92       	push	r9
    71e4:	af 92       	push	r10
    71e6:	cf 92       	push	r12
    71e8:	ef 92       	push	r14
    71ea:	ff 92       	push	r15
    71ec:	0f 93       	push	r16
    71ee:	1f 93       	push	r17
    71f0:	cf 93       	push	r28
    71f2:	df 93       	push	r29
    71f4:	cd b7       	in	r28, 0x3d	; 61
    71f6:	de b7       	in	r29, 0x3e	; 62
    71f8:	f8 2e       	mov	r15, r24
    71fa:	2a 01       	movw	r4, r20
    71fc:	3b 01       	movw	r6, r22
    71fe:	88 e0       	ldi	r24, 0x08	; 8
    7200:	90 e0       	ldi	r25, 0x00	; 0
    7202:	0e 94 82 41 	call	0x8304	; 0x8304 <malloc>
    7206:	8c 01       	movw	r16, r24
    7208:	8f 2d       	mov	r24, r15
    720a:	90 e0       	ldi	r25, 0x00	; 0
    720c:	fc 01       	movw	r30, r24
    720e:	ee 0f       	add	r30, r30
    7210:	ff 1f       	adc	r31, r31
    7212:	eb 59       	subi	r30, 0x9B	; 155
    7214:	f8 4e       	sbci	r31, 0xE8	; 232
    7216:	11 83       	std	Z+1, r17	; 0x01
    7218:	00 83       	st	Z, r16
    721a:	01 15       	cp	r16, r1
    721c:	11 05       	cpc	r17, r1
    721e:	09 f4       	brne	.+2      	; 0x7222 <serial_create+0x4e>
    7220:	68 c0       	rjmp	.+208    	; 0x72f2 <serial_create+0x11e>
    7222:	88 0f       	add	r24, r24
    7224:	99 1f       	adc	r25, r25
    7226:	fc 01       	movw	r30, r24
    7228:	e5 5f       	subi	r30, 0xF5	; 245
    722a:	fd 4f       	sbci	r31, 0xFD	; 253
    722c:	80 81       	ld	r24, Z
    722e:	91 81       	ldd	r25, Z+1	; 0x01
    7230:	d8 01       	movw	r26, r16
    7232:	8d 93       	st	X+, r24
    7234:	9c 93       	st	X, r25
    7236:	8c 2d       	mov	r24, r12
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	88 0f       	add	r24, r24
    723c:	99 1f       	adc	r25, r25
    723e:	88 0f       	add	r24, r24
    7240:	99 1f       	adc	r25, r25
    7242:	0e 94 82 41 	call	0x8304	; 0x8304 <malloc>
    7246:	1c 01       	movw	r2, r24
    7248:	86 e0       	ldi	r24, 0x06	; 6
    724a:	90 e0       	ldi	r25, 0x00	; 0
    724c:	0e 94 82 41 	call	0x8304	; 0x8304 <malloc>
    7250:	7c 01       	movw	r14, r24
    7252:	4c 2d       	mov	r20, r12
    7254:	b1 01       	movw	r22, r2
    7256:	ef d6       	rcall	.+3550   	; 0x8036 <fifo_init>
    7258:	f8 01       	movw	r30, r16
    725a:	f5 82       	std	Z+5, r15	; 0x05
    725c:	e4 82       	std	Z+4, r14	; 0x04
    725e:	8a 2d       	mov	r24, r10
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	88 0f       	add	r24, r24
    7264:	99 1f       	adc	r25, r25
    7266:	88 0f       	add	r24, r24
    7268:	99 1f       	adc	r25, r25
    726a:	0e 94 82 41 	call	0x8304	; 0x8304 <malloc>
    726e:	1c 01       	movw	r2, r24
    7270:	86 e0       	ldi	r24, 0x06	; 6
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	0e 94 82 41 	call	0x8304	; 0x8304 <malloc>
    7278:	7c 01       	movw	r14, r24
    727a:	4a 2d       	mov	r20, r10
    727c:	b1 01       	movw	r22, r2
    727e:	db d6       	rcall	.+3510   	; 0x8036 <fifo_init>
    7280:	d8 01       	movw	r26, r16
    7282:	13 96       	adiw	r26, 0x03	; 3
    7284:	fc 92       	st	X, r15
    7286:	ee 92       	st	-X, r14
    7288:	12 97       	sbiw	r26, 0x02	; 2
    728a:	17 96       	adiw	r26, 0x07	; 7
    728c:	9c 92       	st	X, r9
    728e:	8e 92       	st	-X, r8
    7290:	16 97       	sbiw	r26, 0x06	; 6
    7292:	ff b6       	in	r15, 0x3f	; 63
    7294:	f8 94       	cli
    7296:	ed 91       	ld	r30, X+
    7298:	fc 91       	ld	r31, X
    729a:	11 97       	sbiw	r26, 0x01	; 1
    729c:	36 97       	sbiw	r30, 0x06	; 6
    729e:	80 81       	ld	r24, Z
    72a0:	82 60       	ori	r24, 0x02	; 2
    72a2:	80 83       	st	Z, r24
    72a4:	8d 90       	ld	r8, X+
    72a6:	9c 90       	ld	r9, X
    72a8:	c3 01       	movw	r24, r6
    72aa:	b2 01       	movw	r22, r4
    72ac:	c4 d7       	rcall	.+3976   	; 0x8236 <__floatunsisf>
    72ae:	20 e0       	ldi	r18, 0x00	; 0
    72b0:	30 e0       	ldi	r19, 0x00	; 0
    72b2:	40 e0       	ldi	r20, 0x00	; 0
    72b4:	51 e4       	ldi	r21, 0x41	; 65
    72b6:	ec d9       	rcall	.-3112   	; 0x6690 <__mulsf3>
    72b8:	9b 01       	movw	r18, r22
    72ba:	ac 01       	movw	r20, r24
    72bc:	60 e0       	ldi	r22, 0x00	; 0
    72be:	74 e2       	ldi	r23, 0x24	; 36
    72c0:	84 e7       	ldi	r24, 0x74	; 116
    72c2:	9b e4       	ldi	r25, 0x4B	; 75
    72c4:	40 d7       	rcall	.+3712   	; 0x8146 <__divsf3>
    72c6:	20 e0       	ldi	r18, 0x00	; 0
    72c8:	30 e0       	ldi	r19, 0x00	; 0
    72ca:	40 e8       	ldi	r20, 0x80	; 128
    72cc:	5f e3       	ldi	r21, 0x3F	; 63
    72ce:	cf d6       	rcall	.+3486   	; 0x806e <__subsf3>
    72d0:	62 d9       	rcall	.-3388   	; 0x6596 <__fixunssfsi>
    72d2:	f4 01       	movw	r30, r8
    72d4:	32 97       	sbiw	r30, 0x02	; 2
    72d6:	60 83       	st	Z, r22
    72d8:	d8 01       	movw	r26, r16
    72da:	ed 91       	ld	r30, X+
    72dc:	fc 91       	ld	r31, X
    72de:	11 97       	sbiw	r26, 0x01	; 1
    72e0:	35 97       	sbiw	r30, 0x05	; 5
    72e2:	88 e9       	ldi	r24, 0x98	; 152
    72e4:	80 83       	st	Z, r24
    72e6:	ed 91       	ld	r30, X+
    72e8:	fc 91       	ld	r31, X
    72ea:	34 97       	sbiw	r30, 0x04	; 4
    72ec:	86 e0       	ldi	r24, 0x06	; 6
    72ee:	80 83       	st	Z, r24
    72f0:	ff be       	out	0x3f, r15	; 63
    72f2:	c8 01       	movw	r24, r16
    72f4:	df 91       	pop	r29
    72f6:	cf 91       	pop	r28
    72f8:	1f 91       	pop	r17
    72fa:	0f 91       	pop	r16
    72fc:	ff 90       	pop	r15
    72fe:	ef 90       	pop	r14
    7300:	cf 90       	pop	r12
    7302:	af 90       	pop	r10
    7304:	9f 90       	pop	r9
    7306:	8f 90       	pop	r8
    7308:	7f 90       	pop	r7
    730a:	6f 90       	pop	r6
    730c:	5f 90       	pop	r5
    730e:	4f 90       	pop	r4
    7310:	3f 90       	pop	r3
    7312:	2f 90       	pop	r2
    7314:	08 95       	ret

00007316 <serial_sendByte>:
    7316:	cf 93       	push	r28
    7318:	df 93       	push	r29
    731a:	dc 01       	movw	r26, r24
    731c:	89 2b       	or	r24, r25
    731e:	01 f1       	breq	.+64     	; 0x7360 <serial_sendByte+0x4a>
    7320:	12 96       	adiw	r26, 0x02	; 2
    7322:	ed 91       	ld	r30, X+
    7324:	fc 91       	ld	r31, X
    7326:	13 97       	sbiw	r26, 0x03	; 3
    7328:	93 81       	ldd	r25, Z+3	; 0x03
    732a:	82 81       	ldd	r24, Z+2	; 0x02
    732c:	25 81       	ldd	r18, Z+5	; 0x05
    732e:	98 1b       	sub	r25, r24
    7330:	92 23       	and	r25, r18
    7332:	84 81       	ldd	r24, Z+4	; 0x04
    7334:	98 17       	cp	r25, r24
    7336:	b1 f0       	breq	.+44     	; 0x7364 <serial_sendByte+0x4e>
    7338:	83 81       	ldd	r24, Z+3	; 0x03
    733a:	26 95       	lsr	r18
    733c:	28 23       	and	r18, r24
    733e:	c0 81       	ld	r28, Z
    7340:	d1 81       	ldd	r29, Z+1	; 0x01
    7342:	c2 0f       	add	r28, r18
    7344:	d1 1d       	adc	r29, r1
    7346:	68 83       	st	Y, r22
    7348:	8f 5f       	subi	r24, 0xFF	; 255
    734a:	95 81       	ldd	r25, Z+5	; 0x05
    734c:	89 23       	and	r24, r25
    734e:	83 83       	std	Z+3, r24	; 0x03
    7350:	ed 91       	ld	r30, X+
    7352:	fc 91       	ld	r31, X
    7354:	35 97       	sbiw	r30, 0x05	; 5
    7356:	80 81       	ld	r24, Z
    7358:	80 62       	ori	r24, 0x20	; 32
    735a:	80 83       	st	Z, r24
    735c:	80 e0       	ldi	r24, 0x00	; 0
    735e:	03 c0       	rjmp	.+6      	; 0x7366 <serial_sendByte+0x50>
    7360:	81 e0       	ldi	r24, 0x01	; 1
    7362:	01 c0       	rjmp	.+2      	; 0x7366 <serial_sendByte+0x50>
    7364:	82 e0       	ldi	r24, 0x02	; 2
    7366:	df 91       	pop	r29
    7368:	cf 91       	pop	r28
    736a:	08 95       	ret

0000736c <serial_sendBytes>:
    736c:	ef 92       	push	r14
    736e:	ff 92       	push	r15
    7370:	0f 93       	push	r16
    7372:	1f 93       	push	r17
    7374:	cf 93       	push	r28
    7376:	df 93       	push	r29
    7378:	7c 01       	movw	r14, r24
    737a:	00 97       	sbiw	r24, 0x00	; 0
    737c:	09 f4       	brne	.+2      	; 0x7380 <serial_sendBytes+0x14>
    737e:	41 c0       	rjmp	.+130    	; 0x7402 <serial_sendBytes+0x96>
    7380:	dc 01       	movw	r26, r24
    7382:	12 96       	adiw	r26, 0x02	; 2
    7384:	ed 91       	ld	r30, X+
    7386:	fc 91       	ld	r31, X
    7388:	13 97       	sbiw	r26, 0x03	; 3
    738a:	93 81       	ldd	r25, Z+3	; 0x03
    738c:	82 81       	ldd	r24, Z+2	; 0x02
    738e:	98 1b       	sub	r25, r24
    7390:	85 81       	ldd	r24, Z+5	; 0x05
    7392:	98 23       	and	r25, r24
    7394:	84 81       	ldd	r24, Z+4	; 0x04
    7396:	89 1b       	sub	r24, r25
    7398:	86 17       	cp	r24, r22
    739a:	a8 f1       	brcs	.+106    	; 0x7406 <serial_sendBytes+0x9a>
    739c:	66 23       	and	r22, r22
    739e:	41 f1       	breq	.+80     	; 0x73f0 <serial_sendBytes+0x84>
    73a0:	84 2f       	mov	r24, r20
    73a2:	95 2f       	mov	r25, r21
    73a4:	dc 01       	movw	r26, r24
    73a6:	61 50       	subi	r22, 0x01	; 1
    73a8:	46 2f       	mov	r20, r22
    73aa:	50 e0       	ldi	r21, 0x00	; 0
    73ac:	4f 5f       	subi	r20, 0xFF	; 255
    73ae:	5f 4f       	sbci	r21, 0xFF	; 255
    73b0:	48 0f       	add	r20, r24
    73b2:	59 1f       	adc	r21, r25
    73b4:	e7 01       	movw	r28, r14
    73b6:	ea 81       	ldd	r30, Y+2	; 0x02
    73b8:	fb 81       	ldd	r31, Y+3	; 0x03
    73ba:	93 81       	ldd	r25, Z+3	; 0x03
    73bc:	82 81       	ldd	r24, Z+2	; 0x02
    73be:	25 81       	ldd	r18, Z+5	; 0x05
    73c0:	98 1b       	sub	r25, r24
    73c2:	92 23       	and	r25, r18
    73c4:	84 81       	ldd	r24, Z+4	; 0x04
    73c6:	98 17       	cp	r25, r24
    73c8:	79 f0       	breq	.+30     	; 0x73e8 <serial_sendBytes+0x7c>
    73ca:	8c 91       	ld	r24, X
    73cc:	93 81       	ldd	r25, Z+3	; 0x03
    73ce:	26 95       	lsr	r18
    73d0:	29 23       	and	r18, r25
    73d2:	60 81       	ld	r22, Z
    73d4:	71 81       	ldd	r23, Z+1	; 0x01
    73d6:	8b 01       	movw	r16, r22
    73d8:	02 0f       	add	r16, r18
    73da:	11 1d       	adc	r17, r1
    73dc:	e8 01       	movw	r28, r16
    73de:	88 83       	st	Y, r24
    73e0:	9f 5f       	subi	r25, 0xFF	; 255
    73e2:	85 81       	ldd	r24, Z+5	; 0x05
    73e4:	98 23       	and	r25, r24
    73e6:	93 83       	std	Z+3, r25	; 0x03
    73e8:	11 96       	adiw	r26, 0x01	; 1
    73ea:	a4 17       	cp	r26, r20
    73ec:	b5 07       	cpc	r27, r21
    73ee:	11 f7       	brne	.-60     	; 0x73b4 <serial_sendBytes+0x48>
    73f0:	d7 01       	movw	r26, r14
    73f2:	ed 91       	ld	r30, X+
    73f4:	fc 91       	ld	r31, X
    73f6:	35 97       	sbiw	r30, 0x05	; 5
    73f8:	80 81       	ld	r24, Z
    73fa:	80 62       	ori	r24, 0x20	; 32
    73fc:	80 83       	st	Z, r24
    73fe:	80 e0       	ldi	r24, 0x00	; 0
    7400:	03 c0       	rjmp	.+6      	; 0x7408 <serial_sendBytes+0x9c>
    7402:	81 e0       	ldi	r24, 0x01	; 1
    7404:	01 c0       	rjmp	.+2      	; 0x7408 <serial_sendBytes+0x9c>
    7406:	82 e0       	ldi	r24, 0x02	; 2
    7408:	df 91       	pop	r29
    740a:	cf 91       	pop	r28
    740c:	1f 91       	pop	r17
    740e:	0f 91       	pop	r16
    7410:	ff 90       	pop	r15
    7412:	ef 90       	pop	r14
    7414:	08 95       	ret

00007416 <serial_getByte>:
    7416:	00 97       	sbiw	r24, 0x00	; 0
    7418:	d1 f0       	breq	.+52     	; 0x744e <serial_getByte+0x38>
    741a:	dc 01       	movw	r26, r24
    741c:	14 96       	adiw	r26, 0x04	; 4
    741e:	ed 91       	ld	r30, X+
    7420:	fc 91       	ld	r31, X
    7422:	15 97       	sbiw	r26, 0x05	; 5
    7424:	93 81       	ldd	r25, Z+3	; 0x03
    7426:	82 81       	ldd	r24, Z+2	; 0x02
    7428:	98 17       	cp	r25, r24
    742a:	99 f0       	breq	.+38     	; 0x7452 <serial_getByte+0x3c>
    742c:	92 81       	ldd	r25, Z+2	; 0x02
    742e:	85 81       	ldd	r24, Z+5	; 0x05
    7430:	86 95       	lsr	r24
    7432:	89 23       	and	r24, r25
    7434:	a0 81       	ld	r26, Z
    7436:	b1 81       	ldd	r27, Z+1	; 0x01
    7438:	a8 0f       	add	r26, r24
    743a:	b1 1d       	adc	r27, r1
    743c:	8c 91       	ld	r24, X
    743e:	db 01       	movw	r26, r22
    7440:	8c 93       	st	X, r24
    7442:	9f 5f       	subi	r25, 0xFF	; 255
    7444:	85 81       	ldd	r24, Z+5	; 0x05
    7446:	98 23       	and	r25, r24
    7448:	92 83       	std	Z+2, r25	; 0x02
    744a:	80 e0       	ldi	r24, 0x00	; 0
    744c:	08 95       	ret
    744e:	81 e0       	ldi	r24, 0x01	; 1
    7450:	08 95       	ret
    7452:	83 e0       	ldi	r24, 0x03	; 3
    7454:	08 95       	ret

00007456 <__vector_25>:
    7456:	1f 92       	push	r1
    7458:	0f 92       	push	r0
    745a:	0f b6       	in	r0, 0x3f	; 63
    745c:	0f 92       	push	r0
    745e:	11 24       	eor	r1, r1
    7460:	0b b6       	in	r0, 0x3b	; 59
    7462:	0f 92       	push	r0
    7464:	2f 93       	push	r18
    7466:	3f 93       	push	r19
    7468:	4f 93       	push	r20
    746a:	5f 93       	push	r21
    746c:	6f 93       	push	r22
    746e:	7f 93       	push	r23
    7470:	8f 93       	push	r24
    7472:	9f 93       	push	r25
    7474:	af 93       	push	r26
    7476:	bf 93       	push	r27
    7478:	cf 93       	push	r28
    747a:	df 93       	push	r29
    747c:	ef 93       	push	r30
    747e:	ff 93       	push	r31
    7480:	a0 91 65 17 	lds	r26, 0x1765	; 0x801765 <_ser_handle>
    7484:	b0 91 66 17 	lds	r27, 0x1766	; 0x801766 <_ser_handle+0x1>
    7488:	10 97       	sbiw	r26, 0x00	; 0
    748a:	11 f1       	breq	.+68     	; 0x74d0 <__vector_25+0x7a>
    748c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7490:	14 96       	adiw	r26, 0x04	; 4
    7492:	ed 91       	ld	r30, X+
    7494:	fc 91       	ld	r31, X
    7496:	15 97       	sbiw	r26, 0x05	; 5
    7498:	93 81       	ldd	r25, Z+3	; 0x03
    749a:	82 81       	ldd	r24, Z+2	; 0x02
    749c:	25 81       	ldd	r18, Z+5	; 0x05
    749e:	98 1b       	sub	r25, r24
    74a0:	92 23       	and	r25, r18
    74a2:	84 81       	ldd	r24, Z+4	; 0x04
    74a4:	98 17       	cp	r25, r24
    74a6:	61 f0       	breq	.+24     	; 0x74c0 <__vector_25+0x6a>
    74a8:	83 81       	ldd	r24, Z+3	; 0x03
    74aa:	26 95       	lsr	r18
    74ac:	28 23       	and	r18, r24
    74ae:	c0 81       	ld	r28, Z
    74b0:	d1 81       	ldd	r29, Z+1	; 0x01
    74b2:	c2 0f       	add	r28, r18
    74b4:	d1 1d       	adc	r29, r1
    74b6:	68 83       	st	Y, r22
    74b8:	8f 5f       	subi	r24, 0xFF	; 255
    74ba:	95 81       	ldd	r25, Z+5	; 0x05
    74bc:	89 23       	and	r24, r25
    74be:	83 83       	std	Z+3, r24	; 0x03
    74c0:	16 96       	adiw	r26, 0x06	; 6
    74c2:	ed 91       	ld	r30, X+
    74c4:	fc 91       	ld	r31, X
    74c6:	17 97       	sbiw	r26, 0x07	; 7
    74c8:	30 97       	sbiw	r30, 0x00	; 0
    74ca:	11 f0       	breq	.+4      	; 0x74d0 <__vector_25+0x7a>
    74cc:	cd 01       	movw	r24, r26
    74ce:	19 95       	eicall
    74d0:	ff 91       	pop	r31
    74d2:	ef 91       	pop	r30
    74d4:	df 91       	pop	r29
    74d6:	cf 91       	pop	r28
    74d8:	bf 91       	pop	r27
    74da:	af 91       	pop	r26
    74dc:	9f 91       	pop	r25
    74de:	8f 91       	pop	r24
    74e0:	7f 91       	pop	r23
    74e2:	6f 91       	pop	r22
    74e4:	5f 91       	pop	r21
    74e6:	4f 91       	pop	r20
    74e8:	3f 91       	pop	r19
    74ea:	2f 91       	pop	r18
    74ec:	0f 90       	pop	r0
    74ee:	0b be       	out	0x3b, r0	; 59
    74f0:	0f 90       	pop	r0
    74f2:	0f be       	out	0x3f, r0	; 63
    74f4:	0f 90       	pop	r0
    74f6:	1f 90       	pop	r1
    74f8:	18 95       	reti

000074fa <__vector_26>:
    74fa:	1f 92       	push	r1
    74fc:	0f 92       	push	r0
    74fe:	0f b6       	in	r0, 0x3f	; 63
    7500:	0f 92       	push	r0
    7502:	11 24       	eor	r1, r1
    7504:	0b b6       	in	r0, 0x3b	; 59
    7506:	0f 92       	push	r0
    7508:	2f 93       	push	r18
    750a:	8f 93       	push	r24
    750c:	9f 93       	push	r25
    750e:	af 93       	push	r26
    7510:	bf 93       	push	r27
    7512:	ef 93       	push	r30
    7514:	ff 93       	push	r31
    7516:	e0 91 65 17 	lds	r30, 0x1765	; 0x801765 <_ser_handle>
    751a:	f0 91 66 17 	lds	r31, 0x1766	; 0x801766 <_ser_handle+0x1>
    751e:	30 97       	sbiw	r30, 0x00	; 0
    7520:	b9 f0       	breq	.+46     	; 0x7550 <__vector_26+0x56>
    7522:	02 80       	ldd	r0, Z+2	; 0x02
    7524:	f3 81       	ldd	r31, Z+3	; 0x03
    7526:	e0 2d       	mov	r30, r0
    7528:	93 81       	ldd	r25, Z+3	; 0x03
    752a:	82 81       	ldd	r24, Z+2	; 0x02
    752c:	98 17       	cp	r25, r24
    752e:	b1 f0       	breq	.+44     	; 0x755c <__vector_26+0x62>
    7530:	92 81       	ldd	r25, Z+2	; 0x02
    7532:	85 81       	ldd	r24, Z+5	; 0x05
    7534:	28 2f       	mov	r18, r24
    7536:	26 95       	lsr	r18
    7538:	29 23       	and	r18, r25
    753a:	a0 81       	ld	r26, Z
    753c:	b1 81       	ldd	r27, Z+1	; 0x01
    753e:	a2 0f       	add	r26, r18
    7540:	b1 1d       	adc	r27, r1
    7542:	2c 91       	ld	r18, X
    7544:	9f 5f       	subi	r25, 0xFF	; 255
    7546:	89 23       	and	r24, r25
    7548:	82 83       	std	Z+2, r24	; 0x02
    754a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    754e:	0b c0       	rjmp	.+22     	; 0x7566 <__vector_26+0x6c>
    7550:	e1 ec       	ldi	r30, 0xC1	; 193
    7552:	f0 e0       	ldi	r31, 0x00	; 0
    7554:	80 81       	ld	r24, Z
    7556:	8f 7d       	andi	r24, 0xDF	; 223
    7558:	80 83       	st	Z, r24
    755a:	05 c0       	rjmp	.+10     	; 0x7566 <__vector_26+0x6c>
    755c:	e1 ec       	ldi	r30, 0xC1	; 193
    755e:	f0 e0       	ldi	r31, 0x00	; 0
    7560:	80 81       	ld	r24, Z
    7562:	8f 7d       	andi	r24, 0xDF	; 223
    7564:	80 83       	st	Z, r24
    7566:	ff 91       	pop	r31
    7568:	ef 91       	pop	r30
    756a:	bf 91       	pop	r27
    756c:	af 91       	pop	r26
    756e:	9f 91       	pop	r25
    7570:	8f 91       	pop	r24
    7572:	2f 91       	pop	r18
    7574:	0f 90       	pop	r0
    7576:	0b be       	out	0x3b, r0	; 59
    7578:	0f 90       	pop	r0
    757a:	0f be       	out	0x3f, r0	; 63
    757c:	0f 90       	pop	r0
    757e:	1f 90       	pop	r1
    7580:	18 95       	reti

00007582 <__vector_36>:
    7582:	1f 92       	push	r1
    7584:	0f 92       	push	r0
    7586:	0f b6       	in	r0, 0x3f	; 63
    7588:	0f 92       	push	r0
    758a:	11 24       	eor	r1, r1
    758c:	0b b6       	in	r0, 0x3b	; 59
    758e:	0f 92       	push	r0
    7590:	2f 93       	push	r18
    7592:	3f 93       	push	r19
    7594:	4f 93       	push	r20
    7596:	5f 93       	push	r21
    7598:	6f 93       	push	r22
    759a:	7f 93       	push	r23
    759c:	8f 93       	push	r24
    759e:	9f 93       	push	r25
    75a0:	af 93       	push	r26
    75a2:	bf 93       	push	r27
    75a4:	cf 93       	push	r28
    75a6:	df 93       	push	r29
    75a8:	ef 93       	push	r30
    75aa:	ff 93       	push	r31
    75ac:	a0 91 67 17 	lds	r26, 0x1767	; 0x801767 <_ser_handle+0x2>
    75b0:	b0 91 68 17 	lds	r27, 0x1768	; 0x801768 <_ser_handle+0x3>
    75b4:	10 97       	sbiw	r26, 0x00	; 0
    75b6:	11 f1       	breq	.+68     	; 0x75fc <__vector_36+0x7a>
    75b8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    75bc:	14 96       	adiw	r26, 0x04	; 4
    75be:	ed 91       	ld	r30, X+
    75c0:	fc 91       	ld	r31, X
    75c2:	15 97       	sbiw	r26, 0x05	; 5
    75c4:	93 81       	ldd	r25, Z+3	; 0x03
    75c6:	82 81       	ldd	r24, Z+2	; 0x02
    75c8:	25 81       	ldd	r18, Z+5	; 0x05
    75ca:	98 1b       	sub	r25, r24
    75cc:	92 23       	and	r25, r18
    75ce:	84 81       	ldd	r24, Z+4	; 0x04
    75d0:	98 17       	cp	r25, r24
    75d2:	61 f0       	breq	.+24     	; 0x75ec <__vector_36+0x6a>
    75d4:	83 81       	ldd	r24, Z+3	; 0x03
    75d6:	26 95       	lsr	r18
    75d8:	28 23       	and	r18, r24
    75da:	c0 81       	ld	r28, Z
    75dc:	d1 81       	ldd	r29, Z+1	; 0x01
    75de:	c2 0f       	add	r28, r18
    75e0:	d1 1d       	adc	r29, r1
    75e2:	68 83       	st	Y, r22
    75e4:	8f 5f       	subi	r24, 0xFF	; 255
    75e6:	95 81       	ldd	r25, Z+5	; 0x05
    75e8:	89 23       	and	r24, r25
    75ea:	83 83       	std	Z+3, r24	; 0x03
    75ec:	16 96       	adiw	r26, 0x06	; 6
    75ee:	ed 91       	ld	r30, X+
    75f0:	fc 91       	ld	r31, X
    75f2:	17 97       	sbiw	r26, 0x07	; 7
    75f4:	30 97       	sbiw	r30, 0x00	; 0
    75f6:	11 f0       	breq	.+4      	; 0x75fc <__vector_36+0x7a>
    75f8:	cd 01       	movw	r24, r26
    75fa:	19 95       	eicall
    75fc:	ff 91       	pop	r31
    75fe:	ef 91       	pop	r30
    7600:	df 91       	pop	r29
    7602:	cf 91       	pop	r28
    7604:	bf 91       	pop	r27
    7606:	af 91       	pop	r26
    7608:	9f 91       	pop	r25
    760a:	8f 91       	pop	r24
    760c:	7f 91       	pop	r23
    760e:	6f 91       	pop	r22
    7610:	5f 91       	pop	r21
    7612:	4f 91       	pop	r20
    7614:	3f 91       	pop	r19
    7616:	2f 91       	pop	r18
    7618:	0f 90       	pop	r0
    761a:	0b be       	out	0x3b, r0	; 59
    761c:	0f 90       	pop	r0
    761e:	0f be       	out	0x3f, r0	; 63
    7620:	0f 90       	pop	r0
    7622:	1f 90       	pop	r1
    7624:	18 95       	reti

00007626 <__vector_37>:
    7626:	1f 92       	push	r1
    7628:	0f 92       	push	r0
    762a:	0f b6       	in	r0, 0x3f	; 63
    762c:	0f 92       	push	r0
    762e:	11 24       	eor	r1, r1
    7630:	0b b6       	in	r0, 0x3b	; 59
    7632:	0f 92       	push	r0
    7634:	2f 93       	push	r18
    7636:	8f 93       	push	r24
    7638:	9f 93       	push	r25
    763a:	af 93       	push	r26
    763c:	bf 93       	push	r27
    763e:	ef 93       	push	r30
    7640:	ff 93       	push	r31
    7642:	e0 91 67 17 	lds	r30, 0x1767	; 0x801767 <_ser_handle+0x2>
    7646:	f0 91 68 17 	lds	r31, 0x1768	; 0x801768 <_ser_handle+0x3>
    764a:	30 97       	sbiw	r30, 0x00	; 0
    764c:	b9 f0       	breq	.+46     	; 0x767c <__vector_37+0x56>
    764e:	02 80       	ldd	r0, Z+2	; 0x02
    7650:	f3 81       	ldd	r31, Z+3	; 0x03
    7652:	e0 2d       	mov	r30, r0
    7654:	93 81       	ldd	r25, Z+3	; 0x03
    7656:	82 81       	ldd	r24, Z+2	; 0x02
    7658:	98 17       	cp	r25, r24
    765a:	b1 f0       	breq	.+44     	; 0x7688 <__vector_37+0x62>
    765c:	92 81       	ldd	r25, Z+2	; 0x02
    765e:	85 81       	ldd	r24, Z+5	; 0x05
    7660:	28 2f       	mov	r18, r24
    7662:	26 95       	lsr	r18
    7664:	29 23       	and	r18, r25
    7666:	a0 81       	ld	r26, Z
    7668:	b1 81       	ldd	r27, Z+1	; 0x01
    766a:	a2 0f       	add	r26, r18
    766c:	b1 1d       	adc	r27, r1
    766e:	2c 91       	ld	r18, X
    7670:	9f 5f       	subi	r25, 0xFF	; 255
    7672:	89 23       	and	r24, r25
    7674:	82 83       	std	Z+2, r24	; 0x02
    7676:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    767a:	0b c0       	rjmp	.+22     	; 0x7692 <__vector_37+0x6c>
    767c:	e9 ec       	ldi	r30, 0xC9	; 201
    767e:	f0 e0       	ldi	r31, 0x00	; 0
    7680:	80 81       	ld	r24, Z
    7682:	8f 7d       	andi	r24, 0xDF	; 223
    7684:	80 83       	st	Z, r24
    7686:	05 c0       	rjmp	.+10     	; 0x7692 <__vector_37+0x6c>
    7688:	e9 ec       	ldi	r30, 0xC9	; 201
    768a:	f0 e0       	ldi	r31, 0x00	; 0
    768c:	80 81       	ld	r24, Z
    768e:	8f 7d       	andi	r24, 0xDF	; 223
    7690:	80 83       	st	Z, r24
    7692:	ff 91       	pop	r31
    7694:	ef 91       	pop	r30
    7696:	bf 91       	pop	r27
    7698:	af 91       	pop	r26
    769a:	9f 91       	pop	r25
    769c:	8f 91       	pop	r24
    769e:	2f 91       	pop	r18
    76a0:	0f 90       	pop	r0
    76a2:	0b be       	out	0x3b, r0	; 59
    76a4:	0f 90       	pop	r0
    76a6:	0f be       	out	0x3f, r0	; 63
    76a8:	0f 90       	pop	r0
    76aa:	1f 90       	pop	r1
    76ac:	18 95       	reti

000076ae <__vector_51>:
    76ae:	1f 92       	push	r1
    76b0:	0f 92       	push	r0
    76b2:	0f b6       	in	r0, 0x3f	; 63
    76b4:	0f 92       	push	r0
    76b6:	11 24       	eor	r1, r1
    76b8:	0b b6       	in	r0, 0x3b	; 59
    76ba:	0f 92       	push	r0
    76bc:	2f 93       	push	r18
    76be:	3f 93       	push	r19
    76c0:	4f 93       	push	r20
    76c2:	5f 93       	push	r21
    76c4:	6f 93       	push	r22
    76c6:	7f 93       	push	r23
    76c8:	8f 93       	push	r24
    76ca:	9f 93       	push	r25
    76cc:	af 93       	push	r26
    76ce:	bf 93       	push	r27
    76d0:	cf 93       	push	r28
    76d2:	df 93       	push	r29
    76d4:	ef 93       	push	r30
    76d6:	ff 93       	push	r31
    76d8:	a0 91 69 17 	lds	r26, 0x1769	; 0x801769 <_ser_handle+0x4>
    76dc:	b0 91 6a 17 	lds	r27, 0x176A	; 0x80176a <_ser_handle+0x5>
    76e0:	10 97       	sbiw	r26, 0x00	; 0
    76e2:	11 f1       	breq	.+68     	; 0x7728 <__vector_51+0x7a>
    76e4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    76e8:	14 96       	adiw	r26, 0x04	; 4
    76ea:	ed 91       	ld	r30, X+
    76ec:	fc 91       	ld	r31, X
    76ee:	15 97       	sbiw	r26, 0x05	; 5
    76f0:	93 81       	ldd	r25, Z+3	; 0x03
    76f2:	82 81       	ldd	r24, Z+2	; 0x02
    76f4:	25 81       	ldd	r18, Z+5	; 0x05
    76f6:	98 1b       	sub	r25, r24
    76f8:	92 23       	and	r25, r18
    76fa:	84 81       	ldd	r24, Z+4	; 0x04
    76fc:	98 17       	cp	r25, r24
    76fe:	61 f0       	breq	.+24     	; 0x7718 <__vector_51+0x6a>
    7700:	83 81       	ldd	r24, Z+3	; 0x03
    7702:	26 95       	lsr	r18
    7704:	28 23       	and	r18, r24
    7706:	c0 81       	ld	r28, Z
    7708:	d1 81       	ldd	r29, Z+1	; 0x01
    770a:	c2 0f       	add	r28, r18
    770c:	d1 1d       	adc	r29, r1
    770e:	68 83       	st	Y, r22
    7710:	8f 5f       	subi	r24, 0xFF	; 255
    7712:	95 81       	ldd	r25, Z+5	; 0x05
    7714:	89 23       	and	r24, r25
    7716:	83 83       	std	Z+3, r24	; 0x03
    7718:	16 96       	adiw	r26, 0x06	; 6
    771a:	ed 91       	ld	r30, X+
    771c:	fc 91       	ld	r31, X
    771e:	17 97       	sbiw	r26, 0x07	; 7
    7720:	30 97       	sbiw	r30, 0x00	; 0
    7722:	11 f0       	breq	.+4      	; 0x7728 <__vector_51+0x7a>
    7724:	cd 01       	movw	r24, r26
    7726:	19 95       	eicall
    7728:	ff 91       	pop	r31
    772a:	ef 91       	pop	r30
    772c:	df 91       	pop	r29
    772e:	cf 91       	pop	r28
    7730:	bf 91       	pop	r27
    7732:	af 91       	pop	r26
    7734:	9f 91       	pop	r25
    7736:	8f 91       	pop	r24
    7738:	7f 91       	pop	r23
    773a:	6f 91       	pop	r22
    773c:	5f 91       	pop	r21
    773e:	4f 91       	pop	r20
    7740:	3f 91       	pop	r19
    7742:	2f 91       	pop	r18
    7744:	0f 90       	pop	r0
    7746:	0b be       	out	0x3b, r0	; 59
    7748:	0f 90       	pop	r0
    774a:	0f be       	out	0x3f, r0	; 63
    774c:	0f 90       	pop	r0
    774e:	1f 90       	pop	r1
    7750:	18 95       	reti

00007752 <__vector_52>:
    7752:	1f 92       	push	r1
    7754:	0f 92       	push	r0
    7756:	0f b6       	in	r0, 0x3f	; 63
    7758:	0f 92       	push	r0
    775a:	11 24       	eor	r1, r1
    775c:	0b b6       	in	r0, 0x3b	; 59
    775e:	0f 92       	push	r0
    7760:	2f 93       	push	r18
    7762:	8f 93       	push	r24
    7764:	9f 93       	push	r25
    7766:	af 93       	push	r26
    7768:	bf 93       	push	r27
    776a:	ef 93       	push	r30
    776c:	ff 93       	push	r31
    776e:	e0 91 69 17 	lds	r30, 0x1769	; 0x801769 <_ser_handle+0x4>
    7772:	f0 91 6a 17 	lds	r31, 0x176A	; 0x80176a <_ser_handle+0x5>
    7776:	30 97       	sbiw	r30, 0x00	; 0
    7778:	b9 f0       	breq	.+46     	; 0x77a8 <__vector_52+0x56>
    777a:	02 80       	ldd	r0, Z+2	; 0x02
    777c:	f3 81       	ldd	r31, Z+3	; 0x03
    777e:	e0 2d       	mov	r30, r0
    7780:	93 81       	ldd	r25, Z+3	; 0x03
    7782:	82 81       	ldd	r24, Z+2	; 0x02
    7784:	98 17       	cp	r25, r24
    7786:	b1 f0       	breq	.+44     	; 0x77b4 <__vector_52+0x62>
    7788:	92 81       	ldd	r25, Z+2	; 0x02
    778a:	85 81       	ldd	r24, Z+5	; 0x05
    778c:	28 2f       	mov	r18, r24
    778e:	26 95       	lsr	r18
    7790:	29 23       	and	r18, r25
    7792:	a0 81       	ld	r26, Z
    7794:	b1 81       	ldd	r27, Z+1	; 0x01
    7796:	a2 0f       	add	r26, r18
    7798:	b1 1d       	adc	r27, r1
    779a:	2c 91       	ld	r18, X
    779c:	9f 5f       	subi	r25, 0xFF	; 255
    779e:	89 23       	and	r24, r25
    77a0:	82 83       	std	Z+2, r24	; 0x02
    77a2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    77a6:	0b c0       	rjmp	.+22     	; 0x77be <__vector_52+0x6c>
    77a8:	e1 ed       	ldi	r30, 0xD1	; 209
    77aa:	f0 e0       	ldi	r31, 0x00	; 0
    77ac:	80 81       	ld	r24, Z
    77ae:	8f 7d       	andi	r24, 0xDF	; 223
    77b0:	80 83       	st	Z, r24
    77b2:	05 c0       	rjmp	.+10     	; 0x77be <__vector_52+0x6c>
    77b4:	e1 ed       	ldi	r30, 0xD1	; 209
    77b6:	f0 e0       	ldi	r31, 0x00	; 0
    77b8:	80 81       	ld	r24, Z
    77ba:	8f 7d       	andi	r24, 0xDF	; 223
    77bc:	80 83       	st	Z, r24
    77be:	ff 91       	pop	r31
    77c0:	ef 91       	pop	r30
    77c2:	bf 91       	pop	r27
    77c4:	af 91       	pop	r26
    77c6:	9f 91       	pop	r25
    77c8:	8f 91       	pop	r24
    77ca:	2f 91       	pop	r18
    77cc:	0f 90       	pop	r0
    77ce:	0b be       	out	0x3b, r0	; 59
    77d0:	0f 90       	pop	r0
    77d2:	0f be       	out	0x3f, r0	; 63
    77d4:	0f 90       	pop	r0
    77d6:	1f 90       	pop	r1
    77d8:	18 95       	reti

000077da <__vector_54>:
    77da:	1f 92       	push	r1
    77dc:	0f 92       	push	r0
    77de:	0f b6       	in	r0, 0x3f	; 63
    77e0:	0f 92       	push	r0
    77e2:	11 24       	eor	r1, r1
    77e4:	0b b6       	in	r0, 0x3b	; 59
    77e6:	0f 92       	push	r0
    77e8:	2f 93       	push	r18
    77ea:	3f 93       	push	r19
    77ec:	4f 93       	push	r20
    77ee:	5f 93       	push	r21
    77f0:	6f 93       	push	r22
    77f2:	7f 93       	push	r23
    77f4:	8f 93       	push	r24
    77f6:	9f 93       	push	r25
    77f8:	af 93       	push	r26
    77fa:	bf 93       	push	r27
    77fc:	cf 93       	push	r28
    77fe:	df 93       	push	r29
    7800:	ef 93       	push	r30
    7802:	ff 93       	push	r31
    7804:	a0 91 6b 17 	lds	r26, 0x176B	; 0x80176b <_ser_handle+0x6>
    7808:	b0 91 6c 17 	lds	r27, 0x176C	; 0x80176c <_ser_handle+0x7>
    780c:	10 97       	sbiw	r26, 0x00	; 0
    780e:	11 f1       	breq	.+68     	; 0x7854 <__vector_54+0x7a>
    7810:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    7814:	14 96       	adiw	r26, 0x04	; 4
    7816:	ed 91       	ld	r30, X+
    7818:	fc 91       	ld	r31, X
    781a:	15 97       	sbiw	r26, 0x05	; 5
    781c:	93 81       	ldd	r25, Z+3	; 0x03
    781e:	82 81       	ldd	r24, Z+2	; 0x02
    7820:	25 81       	ldd	r18, Z+5	; 0x05
    7822:	98 1b       	sub	r25, r24
    7824:	92 23       	and	r25, r18
    7826:	84 81       	ldd	r24, Z+4	; 0x04
    7828:	98 17       	cp	r25, r24
    782a:	61 f0       	breq	.+24     	; 0x7844 <__vector_54+0x6a>
    782c:	83 81       	ldd	r24, Z+3	; 0x03
    782e:	26 95       	lsr	r18
    7830:	28 23       	and	r18, r24
    7832:	c0 81       	ld	r28, Z
    7834:	d1 81       	ldd	r29, Z+1	; 0x01
    7836:	c2 0f       	add	r28, r18
    7838:	d1 1d       	adc	r29, r1
    783a:	68 83       	st	Y, r22
    783c:	8f 5f       	subi	r24, 0xFF	; 255
    783e:	95 81       	ldd	r25, Z+5	; 0x05
    7840:	89 23       	and	r24, r25
    7842:	83 83       	std	Z+3, r24	; 0x03
    7844:	16 96       	adiw	r26, 0x06	; 6
    7846:	ed 91       	ld	r30, X+
    7848:	fc 91       	ld	r31, X
    784a:	17 97       	sbiw	r26, 0x07	; 7
    784c:	30 97       	sbiw	r30, 0x00	; 0
    784e:	11 f0       	breq	.+4      	; 0x7854 <__vector_54+0x7a>
    7850:	cd 01       	movw	r24, r26
    7852:	19 95       	eicall
    7854:	ff 91       	pop	r31
    7856:	ef 91       	pop	r30
    7858:	df 91       	pop	r29
    785a:	cf 91       	pop	r28
    785c:	bf 91       	pop	r27
    785e:	af 91       	pop	r26
    7860:	9f 91       	pop	r25
    7862:	8f 91       	pop	r24
    7864:	7f 91       	pop	r23
    7866:	6f 91       	pop	r22
    7868:	5f 91       	pop	r21
    786a:	4f 91       	pop	r20
    786c:	3f 91       	pop	r19
    786e:	2f 91       	pop	r18
    7870:	0f 90       	pop	r0
    7872:	0b be       	out	0x3b, r0	; 59
    7874:	0f 90       	pop	r0
    7876:	0f be       	out	0x3f, r0	; 63
    7878:	0f 90       	pop	r0
    787a:	1f 90       	pop	r1
    787c:	18 95       	reti

0000787e <__vector_55>:
    787e:	1f 92       	push	r1
    7880:	0f 92       	push	r0
    7882:	0f b6       	in	r0, 0x3f	; 63
    7884:	0f 92       	push	r0
    7886:	11 24       	eor	r1, r1
    7888:	0b b6       	in	r0, 0x3b	; 59
    788a:	0f 92       	push	r0
    788c:	2f 93       	push	r18
    788e:	8f 93       	push	r24
    7890:	9f 93       	push	r25
    7892:	af 93       	push	r26
    7894:	bf 93       	push	r27
    7896:	ef 93       	push	r30
    7898:	ff 93       	push	r31
    789a:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <_ser_handle+0x6>
    789e:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <_ser_handle+0x7>
    78a2:	30 97       	sbiw	r30, 0x00	; 0
    78a4:	b9 f0       	breq	.+46     	; 0x78d4 <__vector_55+0x56>
    78a6:	02 80       	ldd	r0, Z+2	; 0x02
    78a8:	f3 81       	ldd	r31, Z+3	; 0x03
    78aa:	e0 2d       	mov	r30, r0
    78ac:	93 81       	ldd	r25, Z+3	; 0x03
    78ae:	82 81       	ldd	r24, Z+2	; 0x02
    78b0:	98 17       	cp	r25, r24
    78b2:	b1 f0       	breq	.+44     	; 0x78e0 <__vector_55+0x62>
    78b4:	92 81       	ldd	r25, Z+2	; 0x02
    78b6:	85 81       	ldd	r24, Z+5	; 0x05
    78b8:	28 2f       	mov	r18, r24
    78ba:	26 95       	lsr	r18
    78bc:	29 23       	and	r18, r25
    78be:	a0 81       	ld	r26, Z
    78c0:	b1 81       	ldd	r27, Z+1	; 0x01
    78c2:	a2 0f       	add	r26, r18
    78c4:	b1 1d       	adc	r27, r1
    78c6:	2c 91       	ld	r18, X
    78c8:	9f 5f       	subi	r25, 0xFF	; 255
    78ca:	89 23       	and	r24, r25
    78cc:	82 83       	std	Z+2, r24	; 0x02
    78ce:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    78d2:	0b c0       	rjmp	.+22     	; 0x78ea <__vector_55+0x6c>
    78d4:	e1 e3       	ldi	r30, 0x31	; 49
    78d6:	f1 e0       	ldi	r31, 0x01	; 1
    78d8:	80 81       	ld	r24, Z
    78da:	8f 7d       	andi	r24, 0xDF	; 223
    78dc:	80 83       	st	Z, r24
    78de:	05 c0       	rjmp	.+10     	; 0x78ea <__vector_55+0x6c>
    78e0:	e1 e3       	ldi	r30, 0x31	; 49
    78e2:	f1 e0       	ldi	r31, 0x01	; 1
    78e4:	80 81       	ld	r24, Z
    78e6:	8f 7d       	andi	r24, 0xDF	; 223
    78e8:	80 83       	st	Z, r24
    78ea:	ff 91       	pop	r31
    78ec:	ef 91       	pop	r30
    78ee:	bf 91       	pop	r27
    78f0:	af 91       	pop	r26
    78f2:	9f 91       	pop	r25
    78f4:	8f 91       	pop	r24
    78f6:	2f 91       	pop	r18
    78f8:	0f 90       	pop	r0
    78fa:	0b be       	out	0x3b, r0	; 59
    78fc:	0f 90       	pop	r0
    78fe:	0f be       	out	0x3f, r0	; 63
    7900:	0f 90       	pop	r0
    7902:	1f 90       	pop	r1
    7904:	18 95       	reti

00007906 <usart_getchar>:
    7906:	cf 93       	push	r28
    7908:	df 93       	push	r29
    790a:	1f 92       	push	r1
    790c:	cd b7       	in	r28, 0x3d	; 61
    790e:	de b7       	in	r29, 0x3e	; 62
    7910:	be 01       	movw	r22, r28
    7912:	6f 5f       	subi	r22, 0xFF	; 255
    7914:	7f 4f       	sbci	r23, 0xFF	; 255
    7916:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <_com_serial_instance>
    791a:	90 91 6e 17 	lds	r25, 0x176E	; 0x80176e <_com_serial_instance+0x1>
    791e:	7b dd       	rcall	.-1290   	; 0x7416 <serial_getByte>
    7920:	81 11       	cpse	r24, r1
    7922:	f6 cf       	rjmp	.-20     	; 0x7910 <usart_getchar+0xa>
    7924:	89 81       	ldd	r24, Y+1	; 0x01
    7926:	90 e0       	ldi	r25, 0x00	; 0
    7928:	0f 90       	pop	r0
    792a:	df 91       	pop	r29
    792c:	cf 91       	pop	r28
    792e:	08 95       	ret

00007930 <usart_putchar>:
    7930:	68 2f       	mov	r22, r24
    7932:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <_com_serial_instance>
    7936:	90 91 6e 17 	lds	r25, 0x176E	; 0x80176e <_com_serial_instance+0x1>
    793a:	ed dc       	rcall	.-1574   	; 0x7316 <serial_sendByte>
    793c:	80 e0       	ldi	r24, 0x00	; 0
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	08 95       	ret

00007942 <stdio_initialise>:
    7942:	8f 92       	push	r8
    7944:	9f 92       	push	r9
    7946:	af 92       	push	r10
    7948:	cf 92       	push	r12
    794a:	ef 92       	push	r14
    794c:	0f 93       	push	r16
    794e:	81 2c       	mov	r8, r1
    7950:	91 2c       	mov	r9, r1
    7952:	68 94       	set
    7954:	aa 24       	eor	r10, r10
    7956:	a7 f8       	bld	r10, 7
    7958:	68 94       	set
    795a:	cc 24       	eor	r12, r12
    795c:	c7 f8       	bld	r12, 7
    795e:	e1 2c       	mov	r14, r1
    7960:	00 e0       	ldi	r16, 0x00	; 0
    7962:	23 e0       	ldi	r18, 0x03	; 3
    7964:	40 e0       	ldi	r20, 0x00	; 0
    7966:	51 ee       	ldi	r21, 0xE1	; 225
    7968:	60 e0       	ldi	r22, 0x00	; 0
    796a:	70 e0       	ldi	r23, 0x00	; 0
    796c:	33 dc       	rcall	.-1946   	; 0x71d4 <serial_create>
    796e:	90 93 6e 17 	sts	0x176E, r25	; 0x80176e <_com_serial_instance+0x1>
    7972:	80 93 6d 17 	sts	0x176D, r24	; 0x80176d <_com_serial_instance>
    7976:	e8 eb       	ldi	r30, 0xB8	; 184
    7978:	f7 e1       	ldi	r31, 0x17	; 23
    797a:	83 e1       	ldi	r24, 0x13	; 19
    797c:	92 e0       	ldi	r25, 0x02	; 2
    797e:	91 83       	std	Z+1, r25	; 0x01
    7980:	80 83       	st	Z, r24
    7982:	93 83       	std	Z+3, r25	; 0x03
    7984:	82 83       	std	Z+2, r24	; 0x02
    7986:	0f 91       	pop	r16
    7988:	ef 90       	pop	r14
    798a:	cf 90       	pop	r12
    798c:	af 90       	pop	r10
    798e:	9f 90       	pop	r9
    7990:	8f 90       	pop	r8
    7992:	08 95       	ret

00007994 <_turn_off>:
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	fc 01       	movw	r30, r24
    7998:	ee 0f       	add	r30, r30
    799a:	ff 1f       	adc	r31, r31
    799c:	e8 0f       	add	r30, r24
    799e:	f9 1f       	adc	r31, r25
    79a0:	ee 0f       	add	r30, r30
    79a2:	ff 1f       	adc	r31, r31
    79a4:	e1 59       	subi	r30, 0x91	; 145
    79a6:	f8 4e       	sbci	r31, 0xE8	; 232
    79a8:	23 81       	ldd	r18, Z+3	; 0x03
    79aa:	21 11       	cpse	r18, r1
    79ac:	1f c0       	rjmp	.+62     	; 0x79ec <_turn_off+0x58>
    79ae:	9c 01       	movw	r18, r24
    79b0:	22 0f       	add	r18, r18
    79b2:	33 1f       	adc	r19, r19
    79b4:	f9 01       	movw	r30, r18
    79b6:	e8 0f       	add	r30, r24
    79b8:	f9 1f       	adc	r31, r25
    79ba:	ee 0f       	add	r30, r30
    79bc:	ff 1f       	adc	r31, r31
    79be:	e1 59       	subi	r30, 0x91	; 145
    79c0:	f8 4e       	sbci	r31, 0xE8	; 232
    79c2:	a0 81       	ld	r26, Z
    79c4:	b1 81       	ldd	r27, Z+1	; 0x01
    79c6:	4c 91       	ld	r20, X
    79c8:	f9 01       	movw	r30, r18
    79ca:	e8 0f       	add	r30, r24
    79cc:	f9 1f       	adc	r31, r25
    79ce:	ee 0f       	add	r30, r30
    79d0:	ff 1f       	adc	r31, r31
    79d2:	e1 59       	subi	r30, 0x91	; 145
    79d4:	f8 4e       	sbci	r31, 0xE8	; 232
    79d6:	81 e0       	ldi	r24, 0x01	; 1
    79d8:	90 e0       	ldi	r25, 0x00	; 0
    79da:	02 80       	ldd	r0, Z+2	; 0x02
    79dc:	02 c0       	rjmp	.+4      	; 0x79e2 <_turn_off+0x4e>
    79de:	88 0f       	add	r24, r24
    79e0:	99 1f       	adc	r25, r25
    79e2:	0a 94       	dec	r0
    79e4:	e2 f7       	brpl	.-8      	; 0x79de <_turn_off+0x4a>
    79e6:	84 2b       	or	r24, r20
    79e8:	8c 93       	st	X, r24
    79ea:	08 95       	ret
    79ec:	fc 01       	movw	r30, r24
    79ee:	ee 0f       	add	r30, r30
    79f0:	ff 1f       	adc	r31, r31
    79f2:	df 01       	movw	r26, r30
    79f4:	a8 0f       	add	r26, r24
    79f6:	b9 1f       	adc	r27, r25
    79f8:	aa 0f       	add	r26, r26
    79fa:	bb 1f       	adc	r27, r27
    79fc:	a1 59       	subi	r26, 0x91	; 145
    79fe:	b8 4e       	sbci	r27, 0xE8	; 232
    7a00:	0d 90       	ld	r0, X+
    7a02:	bc 91       	ld	r27, X
    7a04:	a0 2d       	mov	r26, r0
    7a06:	2c 91       	ld	r18, X
    7a08:	e8 0f       	add	r30, r24
    7a0a:	f9 1f       	adc	r31, r25
    7a0c:	ee 0f       	add	r30, r30
    7a0e:	ff 1f       	adc	r31, r31
    7a10:	e1 59       	subi	r30, 0x91	; 145
    7a12:	f8 4e       	sbci	r31, 0xE8	; 232
    7a14:	81 e0       	ldi	r24, 0x01	; 1
    7a16:	90 e0       	ldi	r25, 0x00	; 0
    7a18:	02 80       	ldd	r0, Z+2	; 0x02
    7a1a:	02 c0       	rjmp	.+4      	; 0x7a20 <_turn_off+0x8c>
    7a1c:	88 0f       	add	r24, r24
    7a1e:	99 1f       	adc	r25, r25
    7a20:	0a 94       	dec	r0
    7a22:	e2 f7       	brpl	.-8      	; 0x7a1c <_turn_off+0x88>
    7a24:	80 95       	com	r24
    7a26:	82 23       	and	r24, r18
    7a28:	8c 93       	st	X, r24
    7a2a:	08 95       	ret

00007a2c <_turn_on>:
    7a2c:	90 e0       	ldi	r25, 0x00	; 0
    7a2e:	fc 01       	movw	r30, r24
    7a30:	ee 0f       	add	r30, r30
    7a32:	ff 1f       	adc	r31, r31
    7a34:	e8 0f       	add	r30, r24
    7a36:	f9 1f       	adc	r31, r25
    7a38:	ee 0f       	add	r30, r30
    7a3a:	ff 1f       	adc	r31, r31
    7a3c:	e1 59       	subi	r30, 0x91	; 145
    7a3e:	f8 4e       	sbci	r31, 0xE8	; 232
    7a40:	23 81       	ldd	r18, Z+3	; 0x03
    7a42:	21 11       	cpse	r18, r1
    7a44:	20 c0       	rjmp	.+64     	; 0x7a86 <_turn_on+0x5a>
    7a46:	9c 01       	movw	r18, r24
    7a48:	22 0f       	add	r18, r18
    7a4a:	33 1f       	adc	r19, r19
    7a4c:	f9 01       	movw	r30, r18
    7a4e:	e8 0f       	add	r30, r24
    7a50:	f9 1f       	adc	r31, r25
    7a52:	ee 0f       	add	r30, r30
    7a54:	ff 1f       	adc	r31, r31
    7a56:	e1 59       	subi	r30, 0x91	; 145
    7a58:	f8 4e       	sbci	r31, 0xE8	; 232
    7a5a:	a0 81       	ld	r26, Z
    7a5c:	b1 81       	ldd	r27, Z+1	; 0x01
    7a5e:	4c 91       	ld	r20, X
    7a60:	f9 01       	movw	r30, r18
    7a62:	e8 0f       	add	r30, r24
    7a64:	f9 1f       	adc	r31, r25
    7a66:	ee 0f       	add	r30, r30
    7a68:	ff 1f       	adc	r31, r31
    7a6a:	e1 59       	subi	r30, 0x91	; 145
    7a6c:	f8 4e       	sbci	r31, 0xE8	; 232
    7a6e:	81 e0       	ldi	r24, 0x01	; 1
    7a70:	90 e0       	ldi	r25, 0x00	; 0
    7a72:	02 80       	ldd	r0, Z+2	; 0x02
    7a74:	02 c0       	rjmp	.+4      	; 0x7a7a <_turn_on+0x4e>
    7a76:	88 0f       	add	r24, r24
    7a78:	99 1f       	adc	r25, r25
    7a7a:	0a 94       	dec	r0
    7a7c:	e2 f7       	brpl	.-8      	; 0x7a76 <_turn_on+0x4a>
    7a7e:	80 95       	com	r24
    7a80:	84 23       	and	r24, r20
    7a82:	8c 93       	st	X, r24
    7a84:	08 95       	ret
    7a86:	fc 01       	movw	r30, r24
    7a88:	ee 0f       	add	r30, r30
    7a8a:	ff 1f       	adc	r31, r31
    7a8c:	df 01       	movw	r26, r30
    7a8e:	a8 0f       	add	r26, r24
    7a90:	b9 1f       	adc	r27, r25
    7a92:	aa 0f       	add	r26, r26
    7a94:	bb 1f       	adc	r27, r27
    7a96:	a1 59       	subi	r26, 0x91	; 145
    7a98:	b8 4e       	sbci	r27, 0xE8	; 232
    7a9a:	0d 90       	ld	r0, X+
    7a9c:	bc 91       	ld	r27, X
    7a9e:	a0 2d       	mov	r26, r0
    7aa0:	2c 91       	ld	r18, X
    7aa2:	e8 0f       	add	r30, r24
    7aa4:	f9 1f       	adc	r31, r25
    7aa6:	ee 0f       	add	r30, r30
    7aa8:	ff 1f       	adc	r31, r31
    7aaa:	e1 59       	subi	r30, 0x91	; 145
    7aac:	f8 4e       	sbci	r31, 0xE8	; 232
    7aae:	81 e0       	ldi	r24, 0x01	; 1
    7ab0:	90 e0       	ldi	r25, 0x00	; 0
    7ab2:	02 80       	ldd	r0, Z+2	; 0x02
    7ab4:	02 c0       	rjmp	.+4      	; 0x7aba <_turn_on+0x8e>
    7ab6:	88 0f       	add	r24, r24
    7ab8:	99 1f       	adc	r25, r25
    7aba:	0a 94       	dec	r0
    7abc:	e2 f7       	brpl	.-8      	; 0x7ab6 <_turn_on+0x8a>
    7abe:	82 2b       	or	r24, r18
    7ac0:	8c 93       	st	X, r24
    7ac2:	08 95       	ret

00007ac4 <_hal_led_task>:
    7ac4:	cc 24       	eor	r12, r12
    7ac6:	c3 94       	inc	r12
    7ac8:	d1 2c       	mov	r13, r1
    7aca:	68 94       	set
    7acc:	bb 24       	eor	r11, r11
    7ace:	b2 f8       	bld	r11, 2
    7ad0:	cf e6       	ldi	r28, 0x6F	; 111
    7ad2:	d7 e1       	ldi	r29, 0x17	; 23
    7ad4:	10 e0       	ldi	r17, 0x00	; 0
    7ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ad8:	81 30       	cpi	r24, 0x01	; 1
    7ada:	81 f0       	breq	.+32     	; 0x7afc <_hal_led_task+0x38>
    7adc:	18 f1       	brcs	.+70     	; 0x7b24 <_hal_led_task+0x60>
    7ade:	82 30       	cpi	r24, 0x02	; 2
    7ae0:	61 f5       	brne	.+88     	; 0x7b3a <_hal_led_task+0x76>
    7ae2:	e8 81       	ld	r30, Y
    7ae4:	f9 81       	ldd	r31, Y+1	; 0x01
    7ae6:	20 81       	ld	r18, Z
    7ae8:	c6 01       	movw	r24, r12
    7aea:	0a 80       	ldd	r0, Y+2	; 0x02
    7aec:	02 c0       	rjmp	.+4      	; 0x7af2 <_hal_led_task+0x2e>
    7aee:	88 0f       	add	r24, r24
    7af0:	99 1f       	adc	r25, r25
    7af2:	0a 94       	dec	r0
    7af4:	e2 f7       	brpl	.-8      	; 0x7aee <_hal_led_task+0x2a>
    7af6:	82 27       	eor	r24, r18
    7af8:	80 83       	st	Z, r24
    7afa:	1f c0       	rjmp	.+62     	; 0x7b3a <_hal_led_task+0x76>
    7afc:	8d 81       	ldd	r24, Y+5	; 0x05
    7afe:	8f 5f       	subi	r24, 0xFF	; 255
    7b00:	86 30       	cpi	r24, 0x06	; 6
    7b02:	10 f4       	brcc	.+4      	; 0x7b08 <_hal_led_task+0x44>
    7b04:	8d 83       	std	Y+5, r24	; 0x05
    7b06:	19 c0       	rjmp	.+50     	; 0x7b3a <_hal_led_task+0x76>
    7b08:	1d 82       	std	Y+5, r1	; 0x05
    7b0a:	e8 81       	ld	r30, Y
    7b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    7b0e:	20 81       	ld	r18, Z
    7b10:	c6 01       	movw	r24, r12
    7b12:	0a 80       	ldd	r0, Y+2	; 0x02
    7b14:	02 c0       	rjmp	.+4      	; 0x7b1a <_hal_led_task+0x56>
    7b16:	88 0f       	add	r24, r24
    7b18:	99 1f       	adc	r25, r25
    7b1a:	0a 94       	dec	r0
    7b1c:	e2 f7       	brpl	.-8      	; 0x7b16 <_hal_led_task+0x52>
    7b1e:	82 27       	eor	r24, r18
    7b20:	80 83       	st	Z, r24
    7b22:	0b c0       	rjmp	.+22     	; 0x7b3a <_hal_led_task+0x76>
    7b24:	0d 81       	ldd	r16, Y+5	; 0x05
    7b26:	00 23       	and	r16, r16
    7b28:	29 f0       	breq	.+10     	; 0x7b34 <_hal_led_task+0x70>
    7b2a:	81 2f       	mov	r24, r17
    7b2c:	7f df       	rcall	.-258    	; 0x7a2c <_turn_on>
    7b2e:	01 50       	subi	r16, 0x01	; 1
    7b30:	0d 83       	std	Y+5, r16	; 0x05
    7b32:	03 c0       	rjmp	.+6      	; 0x7b3a <_hal_led_task+0x76>
    7b34:	bc 82       	std	Y+4, r11	; 0x04
    7b36:	81 2f       	mov	r24, r17
    7b38:	2d df       	rcall	.-422    	; 0x7994 <_turn_off>
    7b3a:	1f 5f       	subi	r17, 0xFF	; 255
    7b3c:	26 96       	adiw	r28, 0x06	; 6
    7b3e:	14 30       	cpi	r17, 0x04	; 4
    7b40:	51 f6       	brne	.-108    	; 0x7ad6 <_hal_led_task+0x12>
    7b42:	6c e0       	ldi	r22, 0x0C	; 12
    7b44:	70 e0       	ldi	r23, 0x00	; 0
    7b46:	80 e0       	ldi	r24, 0x00	; 0
    7b48:	90 e0       	ldi	r25, 0x00	; 0
    7b4a:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskDelay>
    7b4e:	c0 cf       	rjmp	.-128    	; 0x7ad0 <_hal_led_task+0xc>

00007b50 <status_leds_initialise>:
    7b50:	ef 92       	push	r14
    7b52:	ff 92       	push	r15
    7b54:	0f 93       	push	r16
    7b56:	1f 93       	push	r17
    7b58:	cf 93       	push	r28
    7b5a:	df 93       	push	r29
    7b5c:	08 2f       	mov	r16, r24
    7b5e:	80 e4       	ldi	r24, 0x40	; 64
    7b60:	87 b9       	out	0x07, r24	; 7
    7b62:	cf e6       	ldi	r28, 0x6F	; 111
    7b64:	d7 e1       	ldi	r29, 0x17	; 23
    7b66:	0f 2e       	mov	r0, r31
    7b68:	f8 e2       	ldi	r31, 0x28	; 40
    7b6a:	ef 2e       	mov	r14, r31
    7b6c:	f1 2c       	mov	r15, r1
    7b6e:	f0 2d       	mov	r31, r0
    7b70:	f9 82       	std	Y+1, r15	; 0x01
    7b72:	e8 82       	st	Y, r14
    7b74:	86 e0       	ldi	r24, 0x06	; 6
    7b76:	8a 83       	std	Y+2, r24	; 0x02
    7b78:	1b 82       	std	Y+3, r1	; 0x03
    7b7a:	14 e0       	ldi	r17, 0x04	; 4
    7b7c:	1c 83       	std	Y+4, r17	; 0x04
    7b7e:	80 e0       	ldi	r24, 0x00	; 0
    7b80:	09 df       	rcall	.-494    	; 0x7994 <_turn_off>
    7b82:	80 e8       	ldi	r24, 0x80	; 128
    7b84:	87 b9       	out	0x07, r24	; 7
    7b86:	ff 82       	std	Y+7, r15	; 0x07
    7b88:	ee 82       	std	Y+6, r14	; 0x06
    7b8a:	87 e0       	ldi	r24, 0x07	; 7
    7b8c:	88 87       	std	Y+8, r24	; 0x08
    7b8e:	19 86       	std	Y+9, r1	; 0x09
    7b90:	1a 87       	std	Y+10, r17	; 0x0a
    7b92:	81 e0       	ldi	r24, 0x01	; 1
    7b94:	ff de       	rcall	.-514    	; 0x7994 <_turn_off>
    7b96:	80 e2       	ldi	r24, 0x20	; 32
    7b98:	83 bb       	out	0x13, r24	; 19
    7b9a:	84 e3       	ldi	r24, 0x34	; 52
    7b9c:	90 e0       	ldi	r25, 0x00	; 0
    7b9e:	9d 87       	std	Y+13, r25	; 0x0d
    7ba0:	8c 87       	std	Y+12, r24	; 0x0c
    7ba2:	85 e0       	ldi	r24, 0x05	; 5
    7ba4:	8e 87       	std	Y+14, r24	; 0x0e
    7ba6:	1f 86       	std	Y+15, r1	; 0x0f
    7ba8:	18 8b       	std	Y+16, r17	; 0x10
    7baa:	82 e0       	ldi	r24, 0x02	; 2
    7bac:	f3 de       	rcall	.-538    	; 0x7994 <_turn_off>
    7bae:	80 e1       	ldi	r24, 0x10	; 16
    7bb0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    7bb4:	82 e0       	ldi	r24, 0x02	; 2
    7bb6:	91 e0       	ldi	r25, 0x01	; 1
    7bb8:	9b 8b       	std	Y+19, r25	; 0x13
    7bba:	8a 8b       	std	Y+18, r24	; 0x12
    7bbc:	1c 8b       	std	Y+20, r17	; 0x14
    7bbe:	1d 8a       	std	Y+21, r1	; 0x15
    7bc0:	1e 8b       	std	Y+22, r17	; 0x16
    7bc2:	83 e0       	ldi	r24, 0x03	; 3
    7bc4:	e7 de       	rcall	.-562    	; 0x7994 <_turn_off>
    7bc6:	e1 2c       	mov	r14, r1
    7bc8:	f1 2c       	mov	r15, r1
    7bca:	20 e0       	ldi	r18, 0x00	; 0
    7bcc:	30 e0       	ldi	r19, 0x00	; 0
    7bce:	40 ec       	ldi	r20, 0xC0	; 192
    7bd0:	50 e0       	ldi	r21, 0x00	; 0
    7bd2:	61 ed       	ldi	r22, 0xD1	; 209
    7bd4:	77 e0       	ldi	r23, 0x07	; 7
    7bd6:	82 e6       	ldi	r24, 0x62	; 98
    7bd8:	9d e3       	ldi	r25, 0x3D	; 61
    7bda:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskCreate>
    7bde:	df 91       	pop	r29
    7be0:	cf 91       	pop	r28
    7be2:	1f 91       	pop	r17
    7be4:	0f 91       	pop	r16
    7be6:	ff 90       	pop	r15
    7be8:	ef 90       	pop	r14
    7bea:	08 95       	ret

00007bec <status_leds_slowBlink>:
    7bec:	cf 93       	push	r28
    7bee:	df 93       	push	r29
    7bf0:	90 e0       	ldi	r25, 0x00	; 0
    7bf2:	fc 01       	movw	r30, r24
    7bf4:	ee 0f       	add	r30, r30
    7bf6:	ff 1f       	adc	r31, r31
    7bf8:	df 01       	movw	r26, r30
    7bfa:	a8 0f       	add	r26, r24
    7bfc:	b9 1f       	adc	r27, r25
    7bfe:	aa 0f       	add	r26, r26
    7c00:	bb 1f       	adc	r27, r27
    7c02:	a1 59       	subi	r26, 0x91	; 145
    7c04:	b8 4e       	sbci	r27, 0xE8	; 232
    7c06:	cd 91       	ld	r28, X+
    7c08:	dc 91       	ld	r29, X
    7c0a:	11 97       	sbiw	r26, 0x01	; 1
    7c0c:	48 81       	ld	r20, Y
    7c0e:	21 e0       	ldi	r18, 0x01	; 1
    7c10:	30 e0       	ldi	r19, 0x00	; 0
    7c12:	12 96       	adiw	r26, 0x02	; 2
    7c14:	0c 90       	ld	r0, X
    7c16:	12 97       	sbiw	r26, 0x02	; 2
    7c18:	02 c0       	rjmp	.+4      	; 0x7c1e <status_leds_slowBlink+0x32>
    7c1a:	22 0f       	add	r18, r18
    7c1c:	33 1f       	adc	r19, r19
    7c1e:	0a 94       	dec	r0
    7c20:	e2 f7       	brpl	.-8      	; 0x7c1a <status_leds_slowBlink+0x2e>
    7c22:	24 27       	eor	r18, r20
    7c24:	28 83       	st	Y, r18
    7c26:	fd 01       	movw	r30, r26
    7c28:	81 e0       	ldi	r24, 0x01	; 1
    7c2a:	84 83       	std	Z+4, r24	; 0x04
    7c2c:	df 91       	pop	r29
    7c2e:	cf 91       	pop	r28
    7c30:	08 95       	ret

00007c32 <status_leds_fastBlink>:
    7c32:	cf 93       	push	r28
    7c34:	df 93       	push	r29
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	fc 01       	movw	r30, r24
    7c3a:	ee 0f       	add	r30, r30
    7c3c:	ff 1f       	adc	r31, r31
    7c3e:	df 01       	movw	r26, r30
    7c40:	a8 0f       	add	r26, r24
    7c42:	b9 1f       	adc	r27, r25
    7c44:	aa 0f       	add	r26, r26
    7c46:	bb 1f       	adc	r27, r27
    7c48:	a1 59       	subi	r26, 0x91	; 145
    7c4a:	b8 4e       	sbci	r27, 0xE8	; 232
    7c4c:	cd 91       	ld	r28, X+
    7c4e:	dc 91       	ld	r29, X
    7c50:	11 97       	sbiw	r26, 0x01	; 1
    7c52:	48 81       	ld	r20, Y
    7c54:	21 e0       	ldi	r18, 0x01	; 1
    7c56:	30 e0       	ldi	r19, 0x00	; 0
    7c58:	12 96       	adiw	r26, 0x02	; 2
    7c5a:	0c 90       	ld	r0, X
    7c5c:	12 97       	sbiw	r26, 0x02	; 2
    7c5e:	02 c0       	rjmp	.+4      	; 0x7c64 <status_leds_fastBlink+0x32>
    7c60:	22 0f       	add	r18, r18
    7c62:	33 1f       	adc	r19, r19
    7c64:	0a 94       	dec	r0
    7c66:	e2 f7       	brpl	.-8      	; 0x7c60 <status_leds_fastBlink+0x2e>
    7c68:	24 27       	eor	r18, r20
    7c6a:	28 83       	st	Y, r18
    7c6c:	fd 01       	movw	r30, r26
    7c6e:	82 e0       	ldi	r24, 0x02	; 2
    7c70:	84 83       	std	Z+4, r24	; 0x04
    7c72:	df 91       	pop	r29
    7c74:	cf 91       	pop	r28
    7c76:	08 95       	ret

00007c78 <status_leds_ledOn>:
    7c78:	28 2f       	mov	r18, r24
    7c7a:	30 e0       	ldi	r19, 0x00	; 0
    7c7c:	f9 01       	movw	r30, r18
    7c7e:	ee 0f       	add	r30, r30
    7c80:	ff 1f       	adc	r31, r31
    7c82:	e2 0f       	add	r30, r18
    7c84:	f3 1f       	adc	r31, r19
    7c86:	ee 0f       	add	r30, r30
    7c88:	ff 1f       	adc	r31, r31
    7c8a:	e1 59       	subi	r30, 0x91	; 145
    7c8c:	f8 4e       	sbci	r31, 0xE8	; 232
    7c8e:	93 e0       	ldi	r25, 0x03	; 3
    7c90:	94 83       	std	Z+4, r25	; 0x04
    7c92:	cc ce       	rjmp	.-616    	; 0x7a2c <_turn_on>
    7c94:	08 95       	ret

00007c96 <status_leds_ledOff>:
    7c96:	28 2f       	mov	r18, r24
    7c98:	30 e0       	ldi	r19, 0x00	; 0
    7c9a:	f9 01       	movw	r30, r18
    7c9c:	ee 0f       	add	r30, r30
    7c9e:	ff 1f       	adc	r31, r31
    7ca0:	e2 0f       	add	r30, r18
    7ca2:	f3 1f       	adc	r31, r19
    7ca4:	ee 0f       	add	r30, r30
    7ca6:	ff 1f       	adc	r31, r31
    7ca8:	e1 59       	subi	r30, 0x91	; 145
    7caa:	f8 4e       	sbci	r31, 0xE8	; 232
    7cac:	94 e0       	ldi	r25, 0x04	; 4
    7cae:	94 83       	std	Z+4, r25	; 0x04
    7cb0:	71 ce       	rjmp	.-798    	; 0x7994 <_turn_off>
    7cb2:	08 95       	ret

00007cb4 <status_leds_longPuls>:
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	fc 01       	movw	r30, r24
    7cb8:	ee 0f       	add	r30, r30
    7cba:	ff 1f       	adc	r31, r31
    7cbc:	df 01       	movw	r26, r30
    7cbe:	a8 0f       	add	r26, r24
    7cc0:	b9 1f       	adc	r27, r25
    7cc2:	aa 0f       	add	r26, r26
    7cc4:	bb 1f       	adc	r27, r27
    7cc6:	a1 59       	subi	r26, 0x91	; 145
    7cc8:	b8 4e       	sbci	r27, 0xE8	; 232
    7cca:	26 e0       	ldi	r18, 0x06	; 6
    7ccc:	15 96       	adiw	r26, 0x05	; 5
    7cce:	2c 93       	st	X, r18
    7cd0:	15 97       	sbiw	r26, 0x05	; 5
    7cd2:	fd 01       	movw	r30, r26
    7cd4:	14 82       	std	Z+4, r1	; 0x04
    7cd6:	08 95       	ret

00007cd8 <status_leds_shortPuls>:
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	fc 01       	movw	r30, r24
    7cdc:	ee 0f       	add	r30, r30
    7cde:	ff 1f       	adc	r31, r31
    7ce0:	df 01       	movw	r26, r30
    7ce2:	a8 0f       	add	r26, r24
    7ce4:	b9 1f       	adc	r27, r25
    7ce6:	aa 0f       	add	r26, r26
    7ce8:	bb 1f       	adc	r27, r27
    7cea:	a1 59       	subi	r26, 0x91	; 145
    7cec:	b8 4e       	sbci	r27, 0xE8	; 232
    7cee:	15 96       	adiw	r26, 0x05	; 5
    7cf0:	1c 92       	st	X, r1
    7cf2:	15 97       	sbiw	r26, 0x05	; 5
    7cf4:	fd 01       	movw	r30, r26
    7cf6:	14 82       	std	Z+4, r1	; 0x04
    7cf8:	08 95       	ret

00007cfa <_initTwiInterface>:
    7cfa:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <_twiIsInitiated>
    7cfe:	81 11       	cpse	r24, r1
    7d00:	0c c0       	rjmp	.+24     	; 0x7d1a <_initTwiInterface+0x20>
    7d02:	8c e0       	ldi	r24, 0x0C	; 12
    7d04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    7d08:	8f ef       	ldi	r24, 0xFF	; 255
    7d0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    7d0e:	84 e0       	ldi	r24, 0x04	; 4
    7d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7d14:	81 e0       	ldi	r24, 0x01	; 1
    7d16:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <_twiIsInitiated>
    7d1a:	08 95       	ret

00007d1c <twiCreate>:
    7d1c:	af 92       	push	r10
    7d1e:	bf 92       	push	r11
    7d20:	cf 92       	push	r12
    7d22:	df 92       	push	r13
    7d24:	ef 92       	push	r14
    7d26:	ff 92       	push	r15
    7d28:	0f 93       	push	r16
    7d2a:	1f 93       	push	r17
    7d2c:	cf 93       	push	r28
    7d2e:	df 93       	push	r29
    7d30:	a8 2e       	mov	r10, r24
    7d32:	b6 2e       	mov	r11, r22
    7d34:	69 01       	movw	r12, r18
    7d36:	7a 01       	movw	r14, r20
    7d38:	84 e0       	ldi	r24, 0x04	; 4
    7d3a:	90 e0       	ldi	r25, 0x00	; 0
    7d3c:	e3 d2       	rcall	.+1478   	; 0x8304 <malloc>
    7d3e:	ec 01       	movw	r28, r24
    7d40:	89 2b       	or	r24, r25
    7d42:	61 f1       	breq	.+88     	; 0x7d9c <twiCreate+0x80>
    7d44:	a8 82       	st	Y, r10
    7d46:	81 e0       	ldi	r24, 0x01	; 1
    7d48:	b8 12       	cpse	r11, r24
    7d4a:	12 c0       	rjmp	.+36     	; 0x7d70 <twiCreate+0x54>
    7d4c:	c7 01       	movw	r24, r14
    7d4e:	b6 01       	movw	r22, r12
    7d50:	20 ea       	ldi	r18, 0xA0	; 160
    7d52:	36 e8       	ldi	r19, 0x86	; 134
    7d54:	41 e0       	ldi	r20, 0x01	; 1
    7d56:	50 e0       	ldi	r21, 0x00	; 0
    7d58:	ab d2       	rcall	.+1366   	; 0x82b0 <__udivmodsi4>
    7d5a:	da 01       	movw	r26, r20
    7d5c:	c9 01       	movw	r24, r18
    7d5e:	40 97       	sbiw	r24, 0x10	; 16
    7d60:	a1 09       	sbc	r26, r1
    7d62:	b1 09       	sbc	r27, r1
    7d64:	b6 95       	lsr	r27
    7d66:	a7 95       	ror	r26
    7d68:	97 95       	ror	r25
    7d6a:	87 95       	ror	r24
    7d6c:	89 83       	std	Y+1, r24	; 0x01
    7d6e:	11 c0       	rjmp	.+34     	; 0x7d92 <twiCreate+0x76>
    7d70:	c7 01       	movw	r24, r14
    7d72:	b6 01       	movw	r22, r12
    7d74:	20 e8       	ldi	r18, 0x80	; 128
    7d76:	3a e1       	ldi	r19, 0x1A	; 26
    7d78:	46 e0       	ldi	r20, 0x06	; 6
    7d7a:	50 e0       	ldi	r21, 0x00	; 0
    7d7c:	99 d2       	rcall	.+1330   	; 0x82b0 <__udivmodsi4>
    7d7e:	da 01       	movw	r26, r20
    7d80:	c9 01       	movw	r24, r18
    7d82:	40 97       	sbiw	r24, 0x10	; 16
    7d84:	a1 09       	sbc	r26, r1
    7d86:	b1 09       	sbc	r27, r1
    7d88:	b6 95       	lsr	r27
    7d8a:	a7 95       	ror	r26
    7d8c:	97 95       	ror	r25
    7d8e:	87 95       	ror	r24
    7d90:	89 83       	std	Y+1, r24	; 0x01
    7d92:	1b 83       	std	Y+3, r17	; 0x03
    7d94:	0a 83       	std	Y+2, r16	; 0x02
    7d96:	8c 2f       	mov	r24, r28
    7d98:	9d 2f       	mov	r25, r29
    7d9a:	02 c0       	rjmp	.+4      	; 0x7da0 <twiCreate+0x84>
    7d9c:	80 e0       	ldi	r24, 0x00	; 0
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	df 91       	pop	r29
    7da2:	cf 91       	pop	r28
    7da4:	1f 91       	pop	r17
    7da6:	0f 91       	pop	r16
    7da8:	ff 90       	pop	r15
    7daa:	ef 90       	pop	r14
    7dac:	df 90       	pop	r13
    7dae:	cf 90       	pop	r12
    7db0:	bf 90       	pop	r11
    7db2:	af 90       	pop	r10
    7db4:	08 95       	ret

00007db6 <twiIsBusy>:
    7db6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7dba:	81 70       	andi	r24, 0x01	; 1
    7dbc:	08 95       	ret

00007dbe <twiTransmit>:
    7dbe:	ff 92       	push	r15
    7dc0:	0f 93       	push	r16
    7dc2:	1f 93       	push	r17
    7dc4:	cf 93       	push	r28
    7dc6:	df 93       	push	r29
    7dc8:	00 97       	sbiw	r24, 0x00	; 0
    7dca:	d1 f1       	breq	.+116    	; 0x7e40 <twiTransmit+0x82>
    7dcc:	4a 30       	cpi	r20, 0x0A	; 10
    7dce:	d0 f5       	brcc	.+116    	; 0x7e44 <twiTransmit+0x86>
    7dd0:	f4 2e       	mov	r15, r20
    7dd2:	8b 01       	movw	r16, r22
    7dd4:	ec 01       	movw	r28, r24
    7dd6:	ef df       	rcall	.-34     	; 0x7db6 <twiIsBusy>
    7dd8:	81 11       	cpse	r24, r1
    7dda:	36 c0       	rjmp	.+108    	; 0x7e48 <twiTransmit+0x8a>
    7ddc:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_twiCurrentHandler>
    7de0:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_twiCurrentHandler+0x1>
    7de4:	c8 17       	cp	r28, r24
    7de6:	d9 07       	cpc	r29, r25
    7de8:	41 f0       	breq	.+16     	; 0x7dfa <twiTransmit+0x3c>
    7dea:	87 df       	rcall	.-242    	; 0x7cfa <_initTwiInterface>
    7dec:	89 81       	ldd	r24, Y+1	; 0x01
    7dee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    7df2:	d0 93 89 17 	sts	0x1789, r29	; 0x801789 <_twiCurrentHandler+0x1>
    7df6:	c0 93 88 17 	sts	0x1788, r28	; 0x801788 <_twiCurrentHandler>
    7dfa:	81 e0       	ldi	r24, 0x01	; 1
    7dfc:	8f 0d       	add	r24, r15
    7dfe:	80 93 8a 17 	sts	0x178A, r24	; 0x80178a <_twiMessageLen>
    7e02:	88 81       	ld	r24, Y
    7e04:	88 0f       	add	r24, r24
    7e06:	80 93 8b 17 	sts	0x178B, r24	; 0x80178b <_twiMessageBuffer>
    7e0a:	ff 20       	and	r15, r15
    7e0c:	89 f0       	breq	.+34     	; 0x7e30 <twiTransmit+0x72>
    7e0e:	f8 01       	movw	r30, r16
    7e10:	ac e8       	ldi	r26, 0x8C	; 140
    7e12:	b7 e1       	ldi	r27, 0x17	; 23
    7e14:	4f ef       	ldi	r20, 0xFF	; 255
    7e16:	4f 0d       	add	r20, r15
    7e18:	64 2f       	mov	r22, r20
    7e1a:	70 e0       	ldi	r23, 0x00	; 0
    7e1c:	cb 01       	movw	r24, r22
    7e1e:	01 96       	adiw	r24, 0x01	; 1
    7e20:	b8 01       	movw	r22, r16
    7e22:	68 0f       	add	r22, r24
    7e24:	79 1f       	adc	r23, r25
    7e26:	81 91       	ld	r24, Z+
    7e28:	8d 93       	st	X+, r24
    7e2a:	e6 17       	cp	r30, r22
    7e2c:	f7 07       	cpc	r31, r23
    7e2e:	d9 f7       	brne	.-10     	; 0x7e26 <twiTransmit+0x68>
    7e30:	88 ef       	ldi	r24, 0xF8	; 248
    7e32:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    7e36:	85 ea       	ldi	r24, 0xA5	; 165
    7e38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7e3c:	84 e0       	ldi	r24, 0x04	; 4
    7e3e:	05 c0       	rjmp	.+10     	; 0x7e4a <twiTransmit+0x8c>
    7e40:	86 e0       	ldi	r24, 0x06	; 6
    7e42:	03 c0       	rjmp	.+6      	; 0x7e4a <twiTransmit+0x8c>
    7e44:	87 e0       	ldi	r24, 0x07	; 7
    7e46:	01 c0       	rjmp	.+2      	; 0x7e4a <twiTransmit+0x8c>
    7e48:	82 e0       	ldi	r24, 0x02	; 2
    7e4a:	df 91       	pop	r29
    7e4c:	cf 91       	pop	r28
    7e4e:	1f 91       	pop	r17
    7e50:	0f 91       	pop	r16
    7e52:	ff 90       	pop	r15
    7e54:	08 95       	ret

00007e56 <twiReceive>:
    7e56:	1f 93       	push	r17
    7e58:	cf 93       	push	r28
    7e5a:	df 93       	push	r29
    7e5c:	00 97       	sbiw	r24, 0x00	; 0
    7e5e:	29 f1       	breq	.+74     	; 0x7eaa <twiReceive+0x54>
    7e60:	6b 30       	cpi	r22, 0x0B	; 11
    7e62:	28 f5       	brcc	.+74     	; 0x7eae <twiReceive+0x58>
    7e64:	16 2f       	mov	r17, r22
    7e66:	ec 01       	movw	r28, r24
    7e68:	a6 df       	rcall	.-180    	; 0x7db6 <twiIsBusy>
    7e6a:	81 11       	cpse	r24, r1
    7e6c:	22 c0       	rjmp	.+68     	; 0x7eb2 <twiReceive+0x5c>
    7e6e:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_twiCurrentHandler>
    7e72:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_twiCurrentHandler+0x1>
    7e76:	c8 17       	cp	r28, r24
    7e78:	d9 07       	cpc	r29, r25
    7e7a:	41 f0       	breq	.+16     	; 0x7e8c <twiReceive+0x36>
    7e7c:	3e df       	rcall	.-388    	; 0x7cfa <_initTwiInterface>
    7e7e:	89 81       	ldd	r24, Y+1	; 0x01
    7e80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    7e84:	d0 93 89 17 	sts	0x1789, r29	; 0x801789 <_twiCurrentHandler+0x1>
    7e88:	c0 93 88 17 	sts	0x1788, r28	; 0x801788 <_twiCurrentHandler>
    7e8c:	10 93 8a 17 	sts	0x178A, r17	; 0x80178a <_twiMessageLen>
    7e90:	88 81       	ld	r24, Y
    7e92:	88 0f       	add	r24, r24
    7e94:	81 60       	ori	r24, 0x01	; 1
    7e96:	80 93 8b 17 	sts	0x178B, r24	; 0x80178b <_twiMessageBuffer>
    7e9a:	88 ef       	ldi	r24, 0xF8	; 248
    7e9c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    7ea0:	85 ea       	ldi	r24, 0xA5	; 165
    7ea2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7ea6:	85 e0       	ldi	r24, 0x05	; 5
    7ea8:	05 c0       	rjmp	.+10     	; 0x7eb4 <twiReceive+0x5e>
    7eaa:	86 e0       	ldi	r24, 0x06	; 6
    7eac:	03 c0       	rjmp	.+6      	; 0x7eb4 <twiReceive+0x5e>
    7eae:	87 e0       	ldi	r24, 0x07	; 7
    7eb0:	01 c0       	rjmp	.+2      	; 0x7eb4 <twiReceive+0x5e>
    7eb2:	82 e0       	ldi	r24, 0x02	; 2
    7eb4:	df 91       	pop	r29
    7eb6:	cf 91       	pop	r28
    7eb8:	1f 91       	pop	r17
    7eba:	08 95       	ret

00007ebc <__vector_39>:
    7ebc:	1f 92       	push	r1
    7ebe:	0f 92       	push	r0
    7ec0:	0f b6       	in	r0, 0x3f	; 63
    7ec2:	0f 92       	push	r0
    7ec4:	11 24       	eor	r1, r1
    7ec6:	0b b6       	in	r0, 0x3b	; 59
    7ec8:	0f 92       	push	r0
    7eca:	2f 93       	push	r18
    7ecc:	3f 93       	push	r19
    7ece:	4f 93       	push	r20
    7ed0:	5f 93       	push	r21
    7ed2:	6f 93       	push	r22
    7ed4:	7f 93       	push	r23
    7ed6:	8f 93       	push	r24
    7ed8:	9f 93       	push	r25
    7eda:	af 93       	push	r26
    7edc:	bf 93       	push	r27
    7ede:	ef 93       	push	r30
    7ee0:	ff 93       	push	r31
    7ee2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    7ee6:	8e 2f       	mov	r24, r30
    7ee8:	90 e0       	ldi	r25, 0x00	; 0
    7eea:	fc 01       	movw	r30, r24
    7eec:	38 97       	sbiw	r30, 0x08	; 8
    7eee:	e1 35       	cpi	r30, 0x51	; 81
    7ef0:	f1 05       	cpc	r31, r1
    7ef2:	08 f0       	brcs	.+2      	; 0x7ef6 <__vector_39+0x3a>
    7ef4:	75 c0       	rjmp	.+234    	; 0x7fe0 <__vector_39+0x124>
    7ef6:	88 27       	eor	r24, r24
    7ef8:	e4 58       	subi	r30, 0x84	; 132
    7efa:	ff 4f       	sbci	r31, 0xFF	; 255
    7efc:	8f 4f       	sbci	r24, 0xFF	; 255
    7efe:	fa c1       	rjmp	.+1012   	; 0x82f4 <__tablejump2__>
    7f00:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_index.1885>
    7f04:	e0 91 87 17 	lds	r30, 0x1787	; 0x801787 <_index.1885>
    7f08:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <_twiMessageLen>
    7f0c:	e8 17       	cp	r30, r24
    7f0e:	70 f4       	brcc	.+28     	; 0x7f2c <__vector_39+0x70>
    7f10:	81 e0       	ldi	r24, 0x01	; 1
    7f12:	8e 0f       	add	r24, r30
    7f14:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <_index.1885>
    7f18:	f0 e0       	ldi	r31, 0x00	; 0
    7f1a:	e5 57       	subi	r30, 0x75	; 117
    7f1c:	f8 4e       	sbci	r31, 0xE8	; 232
    7f1e:	80 81       	ld	r24, Z
    7f20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    7f24:	85 e8       	ldi	r24, 0x85	; 133
    7f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7f2a:	72 c0       	rjmp	.+228    	; 0x8010 <__vector_39+0x154>
    7f2c:	84 e9       	ldi	r24, 0x94	; 148
    7f2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7f32:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_twiCurrentHandler>
    7f36:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_twiCurrentHandler+0x1>
    7f3a:	dc 01       	movw	r26, r24
    7f3c:	12 96       	adiw	r26, 0x02	; 2
    7f3e:	ed 91       	ld	r30, X+
    7f40:	fc 91       	ld	r31, X
    7f42:	13 97       	sbiw	r26, 0x03	; 3
    7f44:	30 97       	sbiw	r30, 0x00	; 0
    7f46:	09 f4       	brne	.+2      	; 0x7f4a <__vector_39+0x8e>
    7f48:	63 c0       	rjmp	.+198    	; 0x8010 <__vector_39+0x154>
    7f4a:	20 e0       	ldi	r18, 0x00	; 0
    7f4c:	40 e0       	ldi	r20, 0x00	; 0
    7f4e:	50 e0       	ldi	r21, 0x00	; 0
    7f50:	64 e0       	ldi	r22, 0x04	; 4
    7f52:	19 95       	eicall
    7f54:	5d c0       	rjmp	.+186    	; 0x8010 <__vector_39+0x154>
    7f56:	e0 91 87 17 	lds	r30, 0x1787	; 0x801787 <_index.1885>
    7f5a:	81 e0       	ldi	r24, 0x01	; 1
    7f5c:	8e 0f       	add	r24, r30
    7f5e:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <_index.1885>
    7f62:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    7f66:	f0 e0       	ldi	r31, 0x00	; 0
    7f68:	e5 57       	subi	r30, 0x75	; 117
    7f6a:	f8 4e       	sbci	r31, 0xE8	; 232
    7f6c:	80 83       	st	Z, r24
    7f6e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    7f72:	80 34       	cpi	r24, 0x40	; 64
    7f74:	11 f4       	brne	.+4      	; 0x7f7a <__vector_39+0xbe>
    7f76:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_index.1885>
    7f7a:	20 91 87 17 	lds	r18, 0x1787	; 0x801787 <_index.1885>
    7f7e:	30 e0       	ldi	r19, 0x00	; 0
    7f80:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <_twiMessageLen>
    7f84:	90 e0       	ldi	r25, 0x00	; 0
    7f86:	01 97       	sbiw	r24, 0x01	; 1
    7f88:	28 17       	cp	r18, r24
    7f8a:	39 07       	cpc	r19, r25
    7f8c:	24 f4       	brge	.+8      	; 0x7f96 <__vector_39+0xda>
    7f8e:	85 ec       	ldi	r24, 0xC5	; 197
    7f90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7f94:	3d c0       	rjmp	.+122    	; 0x8010 <__vector_39+0x154>
    7f96:	85 e8       	ldi	r24, 0x85	; 133
    7f98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7f9c:	39 c0       	rjmp	.+114    	; 0x8010 <__vector_39+0x154>
    7f9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    7fa2:	e0 91 87 17 	lds	r30, 0x1787	; 0x801787 <_index.1885>
    7fa6:	f0 e0       	ldi	r31, 0x00	; 0
    7fa8:	e5 57       	subi	r30, 0x75	; 117
    7faa:	f8 4e       	sbci	r31, 0xE8	; 232
    7fac:	80 83       	st	Z, r24
    7fae:	84 e9       	ldi	r24, 0x94	; 148
    7fb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7fb4:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_twiCurrentHandler>
    7fb8:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_twiCurrentHandler+0x1>
    7fbc:	dc 01       	movw	r26, r24
    7fbe:	12 96       	adiw	r26, 0x02	; 2
    7fc0:	ed 91       	ld	r30, X+
    7fc2:	fc 91       	ld	r31, X
    7fc4:	13 97       	sbiw	r26, 0x03	; 3
    7fc6:	30 97       	sbiw	r30, 0x00	; 0
    7fc8:	19 f1       	breq	.+70     	; 0x8010 <__vector_39+0x154>
    7fca:	20 91 8a 17 	lds	r18, 0x178A	; 0x80178a <_twiMessageLen>
    7fce:	4b e8       	ldi	r20, 0x8B	; 139
    7fd0:	57 e1       	ldi	r21, 0x17	; 23
    7fd2:	65 e0       	ldi	r22, 0x05	; 5
    7fd4:	19 95       	eicall
    7fd6:	1c c0       	rjmp	.+56     	; 0x8010 <__vector_39+0x154>
    7fd8:	85 ea       	ldi	r24, 0xA5	; 165
    7fda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7fde:	18 c0       	rjmp	.+48     	; 0x8010 <__vector_39+0x154>
    7fe0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    7fe4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    7fe8:	84 e0       	ldi	r24, 0x04	; 4
    7fea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    7fee:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_twiCurrentHandler>
    7ff2:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_twiCurrentHandler+0x1>
    7ff6:	dc 01       	movw	r26, r24
    7ff8:	12 96       	adiw	r26, 0x02	; 2
    7ffa:	ed 91       	ld	r30, X+
    7ffc:	fc 91       	ld	r31, X
    7ffe:	13 97       	sbiw	r26, 0x03	; 3
    8000:	30 97       	sbiw	r30, 0x00	; 0
    8002:	31 f0       	breq	.+12     	; 0x8010 <__vector_39+0x154>
    8004:	20 e0       	ldi	r18, 0x00	; 0
    8006:	40 e0       	ldi	r20, 0x00	; 0
    8008:	50 e0       	ldi	r21, 0x00	; 0
    800a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    800e:	19 95       	eicall
    8010:	ff 91       	pop	r31
    8012:	ef 91       	pop	r30
    8014:	bf 91       	pop	r27
    8016:	af 91       	pop	r26
    8018:	9f 91       	pop	r25
    801a:	8f 91       	pop	r24
    801c:	7f 91       	pop	r23
    801e:	6f 91       	pop	r22
    8020:	5f 91       	pop	r21
    8022:	4f 91       	pop	r20
    8024:	3f 91       	pop	r19
    8026:	2f 91       	pop	r18
    8028:	0f 90       	pop	r0
    802a:	0b be       	out	0x3b, r0	; 59
    802c:	0f 90       	pop	r0
    802e:	0f be       	out	0x3f, r0	; 63
    8030:	0f 90       	pop	r0
    8032:	1f 90       	pop	r1
    8034:	18 95       	reti

00008036 <fifo_init>:
    8036:	fc 01       	movw	r30, r24
    8038:	41 11       	cpse	r20, r1
    803a:	01 c0       	rjmp	.+2      	; 0x803e <fifo_init+0x8>
    803c:	84 d2       	rcall	.+1288   	; 0x8546 <abort>
    803e:	84 2f       	mov	r24, r20
    8040:	90 e0       	ldi	r25, 0x00	; 0
    8042:	9c 01       	movw	r18, r24
    8044:	21 50       	subi	r18, 0x01	; 1
    8046:	31 09       	sbc	r19, r1
    8048:	82 23       	and	r24, r18
    804a:	93 23       	and	r25, r19
    804c:	89 2b       	or	r24, r25
    804e:	09 f0       	breq	.+2      	; 0x8052 <fifo_init+0x1c>
    8050:	7a d2       	rcall	.+1268   	; 0x8546 <abort>
    8052:	41 38       	cpi	r20, 0x81	; 129
    8054:	08 f0       	brcs	.+2      	; 0x8058 <fifo_init+0x22>
    8056:	77 d2       	rcall	.+1262   	; 0x8546 <abort>
    8058:	12 82       	std	Z+2, r1	; 0x02
    805a:	13 82       	std	Z+3, r1	; 0x03
    805c:	44 83       	std	Z+4, r20	; 0x04
    805e:	44 0f       	add	r20, r20
    8060:	41 50       	subi	r20, 0x01	; 1
    8062:	45 83       	std	Z+5, r20	; 0x05
    8064:	71 83       	std	Z+1, r23	; 0x01
    8066:	60 83       	st	Z, r22
    8068:	80 e0       	ldi	r24, 0x00	; 0
    806a:	90 e0       	ldi	r25, 0x00	; 0
    806c:	08 95       	ret

0000806e <__subsf3>:
    806e:	50 58       	subi	r21, 0x80	; 128

00008070 <__addsf3>:
    8070:	bb 27       	eor	r27, r27
    8072:	aa 27       	eor	r26, r26
    8074:	13 d0       	rcall	.+38     	; 0x809c <__addsf3x>
    8076:	0c 94 c2 33 	jmp	0x6784	; 0x6784 <__fp_round>
    807a:	0e 94 b4 33 	call	0x6768	; 0x6768 <__fp_pscA>
    807e:	38 f0       	brcs	.+14     	; 0x808e <__addsf3+0x1e>
    8080:	0e 94 bb 33 	call	0x6776	; 0x6776 <__fp_pscB>
    8084:	20 f0       	brcs	.+8      	; 0x808e <__addsf3+0x1e>
    8086:	39 f4       	brne	.+14     	; 0x8096 <__addsf3+0x26>
    8088:	9f 3f       	cpi	r25, 0xFF	; 255
    808a:	19 f4       	brne	.+6      	; 0x8092 <__addsf3+0x22>
    808c:	26 f4       	brtc	.+8      	; 0x8096 <__addsf3+0x26>
    808e:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <__fp_nan>
    8092:	0e f4       	brtc	.+2      	; 0x8096 <__addsf3+0x26>
    8094:	e0 95       	com	r30
    8096:	e7 fb       	bst	r30, 7
    8098:	0c 94 ab 33 	jmp	0x6756	; 0x6756 <__fp_inf>

0000809c <__addsf3x>:
    809c:	e9 2f       	mov	r30, r25
    809e:	0e 94 1b 33 	call	0x6636	; 0x6636 <__fp_split3>
    80a2:	58 f3       	brcs	.-42     	; 0x807a <__addsf3+0xa>
    80a4:	ba 17       	cp	r27, r26
    80a6:	62 07       	cpc	r22, r18
    80a8:	73 07       	cpc	r23, r19
    80aa:	84 07       	cpc	r24, r20
    80ac:	95 07       	cpc	r25, r21
    80ae:	20 f0       	brcs	.+8      	; 0x80b8 <__addsf3x+0x1c>
    80b0:	79 f4       	brne	.+30     	; 0x80d0 <__addsf3x+0x34>
    80b2:	a6 f5       	brtc	.+104    	; 0x811c <__addsf3x+0x80>
    80b4:	0c 94 3d 33 	jmp	0x667a	; 0x667a <__fp_zero>
    80b8:	0e f4       	brtc	.+2      	; 0x80bc <__addsf3x+0x20>
    80ba:	e0 95       	com	r30
    80bc:	0b 2e       	mov	r0, r27
    80be:	ba 2f       	mov	r27, r26
    80c0:	a0 2d       	mov	r26, r0
    80c2:	0b 01       	movw	r0, r22
    80c4:	b9 01       	movw	r22, r18
    80c6:	90 01       	movw	r18, r0
    80c8:	0c 01       	movw	r0, r24
    80ca:	ca 01       	movw	r24, r20
    80cc:	a0 01       	movw	r20, r0
    80ce:	11 24       	eor	r1, r1
    80d0:	ff 27       	eor	r31, r31
    80d2:	59 1b       	sub	r21, r25
    80d4:	99 f0       	breq	.+38     	; 0x80fc <__addsf3x+0x60>
    80d6:	59 3f       	cpi	r21, 0xF9	; 249
    80d8:	50 f4       	brcc	.+20     	; 0x80ee <__addsf3x+0x52>
    80da:	50 3e       	cpi	r21, 0xE0	; 224
    80dc:	68 f1       	brcs	.+90     	; 0x8138 <__addsf3x+0x9c>
    80de:	1a 16       	cp	r1, r26
    80e0:	f0 40       	sbci	r31, 0x00	; 0
    80e2:	a2 2f       	mov	r26, r18
    80e4:	23 2f       	mov	r18, r19
    80e6:	34 2f       	mov	r19, r20
    80e8:	44 27       	eor	r20, r20
    80ea:	58 5f       	subi	r21, 0xF8	; 248
    80ec:	f3 cf       	rjmp	.-26     	; 0x80d4 <__addsf3x+0x38>
    80ee:	46 95       	lsr	r20
    80f0:	37 95       	ror	r19
    80f2:	27 95       	ror	r18
    80f4:	a7 95       	ror	r26
    80f6:	f0 40       	sbci	r31, 0x00	; 0
    80f8:	53 95       	inc	r21
    80fa:	c9 f7       	brne	.-14     	; 0x80ee <__addsf3x+0x52>
    80fc:	7e f4       	brtc	.+30     	; 0x811c <__addsf3x+0x80>
    80fe:	1f 16       	cp	r1, r31
    8100:	ba 0b       	sbc	r27, r26
    8102:	62 0b       	sbc	r22, r18
    8104:	73 0b       	sbc	r23, r19
    8106:	84 0b       	sbc	r24, r20
    8108:	ba f0       	brmi	.+46     	; 0x8138 <__addsf3x+0x9c>
    810a:	91 50       	subi	r25, 0x01	; 1
    810c:	a1 f0       	breq	.+40     	; 0x8136 <__addsf3x+0x9a>
    810e:	ff 0f       	add	r31, r31
    8110:	bb 1f       	adc	r27, r27
    8112:	66 1f       	adc	r22, r22
    8114:	77 1f       	adc	r23, r23
    8116:	88 1f       	adc	r24, r24
    8118:	c2 f7       	brpl	.-16     	; 0x810a <__addsf3x+0x6e>
    811a:	0e c0       	rjmp	.+28     	; 0x8138 <__addsf3x+0x9c>
    811c:	ba 0f       	add	r27, r26
    811e:	62 1f       	adc	r22, r18
    8120:	73 1f       	adc	r23, r19
    8122:	84 1f       	adc	r24, r20
    8124:	48 f4       	brcc	.+18     	; 0x8138 <__addsf3x+0x9c>
    8126:	87 95       	ror	r24
    8128:	77 95       	ror	r23
    812a:	67 95       	ror	r22
    812c:	b7 95       	ror	r27
    812e:	f7 95       	ror	r31
    8130:	9e 3f       	cpi	r25, 0xFE	; 254
    8132:	08 f0       	brcs	.+2      	; 0x8136 <__addsf3x+0x9a>
    8134:	b0 cf       	rjmp	.-160    	; 0x8096 <__addsf3+0x26>
    8136:	93 95       	inc	r25
    8138:	88 0f       	add	r24, r24
    813a:	08 f0       	brcs	.+2      	; 0x813e <__addsf3x+0xa2>
    813c:	99 27       	eor	r25, r25
    813e:	ee 0f       	add	r30, r30
    8140:	97 95       	ror	r25
    8142:	87 95       	ror	r24
    8144:	08 95       	ret

00008146 <__divsf3>:
    8146:	12 d0       	rcall	.+36     	; 0x816c <__divsf3x>
    8148:	0c 94 c2 33 	jmp	0x6784	; 0x6784 <__fp_round>
    814c:	0e 94 bb 33 	call	0x6776	; 0x6776 <__fp_pscB>
    8150:	58 f0       	brcs	.+22     	; 0x8168 <__divsf3+0x22>
    8152:	0e 94 b4 33 	call	0x6768	; 0x6768 <__fp_pscA>
    8156:	40 f0       	brcs	.+16     	; 0x8168 <__divsf3+0x22>
    8158:	29 f4       	brne	.+10     	; 0x8164 <__divsf3+0x1e>
    815a:	5f 3f       	cpi	r21, 0xFF	; 255
    815c:	29 f0       	breq	.+10     	; 0x8168 <__divsf3+0x22>
    815e:	0c 94 ab 33 	jmp	0x6756	; 0x6756 <__fp_inf>
    8162:	51 11       	cpse	r21, r1
    8164:	0c 94 3e 33 	jmp	0x667c	; 0x667c <__fp_szero>
    8168:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <__fp_nan>

0000816c <__divsf3x>:
    816c:	0e 94 1b 33 	call	0x6636	; 0x6636 <__fp_split3>
    8170:	68 f3       	brcs	.-38     	; 0x814c <__divsf3+0x6>

00008172 <__divsf3_pse>:
    8172:	99 23       	and	r25, r25
    8174:	b1 f3       	breq	.-20     	; 0x8162 <__divsf3+0x1c>
    8176:	55 23       	and	r21, r21
    8178:	91 f3       	breq	.-28     	; 0x815e <__divsf3+0x18>
    817a:	95 1b       	sub	r25, r21
    817c:	55 0b       	sbc	r21, r21
    817e:	bb 27       	eor	r27, r27
    8180:	aa 27       	eor	r26, r26
    8182:	62 17       	cp	r22, r18
    8184:	73 07       	cpc	r23, r19
    8186:	84 07       	cpc	r24, r20
    8188:	38 f0       	brcs	.+14     	; 0x8198 <__divsf3_pse+0x26>
    818a:	9f 5f       	subi	r25, 0xFF	; 255
    818c:	5f 4f       	sbci	r21, 0xFF	; 255
    818e:	22 0f       	add	r18, r18
    8190:	33 1f       	adc	r19, r19
    8192:	44 1f       	adc	r20, r20
    8194:	aa 1f       	adc	r26, r26
    8196:	a9 f3       	breq	.-22     	; 0x8182 <__divsf3_pse+0x10>
    8198:	35 d0       	rcall	.+106    	; 0x8204 <__divsf3_pse+0x92>
    819a:	0e 2e       	mov	r0, r30
    819c:	3a f0       	brmi	.+14     	; 0x81ac <__divsf3_pse+0x3a>
    819e:	e0 e8       	ldi	r30, 0x80	; 128
    81a0:	32 d0       	rcall	.+100    	; 0x8206 <__divsf3_pse+0x94>
    81a2:	91 50       	subi	r25, 0x01	; 1
    81a4:	50 40       	sbci	r21, 0x00	; 0
    81a6:	e6 95       	lsr	r30
    81a8:	00 1c       	adc	r0, r0
    81aa:	ca f7       	brpl	.-14     	; 0x819e <__divsf3_pse+0x2c>
    81ac:	2b d0       	rcall	.+86     	; 0x8204 <__divsf3_pse+0x92>
    81ae:	fe 2f       	mov	r31, r30
    81b0:	29 d0       	rcall	.+82     	; 0x8204 <__divsf3_pse+0x92>
    81b2:	66 0f       	add	r22, r22
    81b4:	77 1f       	adc	r23, r23
    81b6:	88 1f       	adc	r24, r24
    81b8:	bb 1f       	adc	r27, r27
    81ba:	26 17       	cp	r18, r22
    81bc:	37 07       	cpc	r19, r23
    81be:	48 07       	cpc	r20, r24
    81c0:	ab 07       	cpc	r26, r27
    81c2:	b0 e8       	ldi	r27, 0x80	; 128
    81c4:	09 f0       	breq	.+2      	; 0x81c8 <__divsf3_pse+0x56>
    81c6:	bb 0b       	sbc	r27, r27
    81c8:	80 2d       	mov	r24, r0
    81ca:	bf 01       	movw	r22, r30
    81cc:	ff 27       	eor	r31, r31
    81ce:	93 58       	subi	r25, 0x83	; 131
    81d0:	5f 4f       	sbci	r21, 0xFF	; 255
    81d2:	3a f0       	brmi	.+14     	; 0x81e2 <__divsf3_pse+0x70>
    81d4:	9e 3f       	cpi	r25, 0xFE	; 254
    81d6:	51 05       	cpc	r21, r1
    81d8:	78 f0       	brcs	.+30     	; 0x81f8 <__divsf3_pse+0x86>
    81da:	0c 94 ab 33 	jmp	0x6756	; 0x6756 <__fp_inf>
    81de:	0c 94 3e 33 	jmp	0x667c	; 0x667c <__fp_szero>
    81e2:	5f 3f       	cpi	r21, 0xFF	; 255
    81e4:	e4 f3       	brlt	.-8      	; 0x81de <__divsf3_pse+0x6c>
    81e6:	98 3e       	cpi	r25, 0xE8	; 232
    81e8:	d4 f3       	brlt	.-12     	; 0x81de <__divsf3_pse+0x6c>
    81ea:	86 95       	lsr	r24
    81ec:	77 95       	ror	r23
    81ee:	67 95       	ror	r22
    81f0:	b7 95       	ror	r27
    81f2:	f7 95       	ror	r31
    81f4:	9f 5f       	subi	r25, 0xFF	; 255
    81f6:	c9 f7       	brne	.-14     	; 0x81ea <__divsf3_pse+0x78>
    81f8:	88 0f       	add	r24, r24
    81fa:	91 1d       	adc	r25, r1
    81fc:	96 95       	lsr	r25
    81fe:	87 95       	ror	r24
    8200:	97 f9       	bld	r25, 7
    8202:	08 95       	ret
    8204:	e1 e0       	ldi	r30, 0x01	; 1
    8206:	66 0f       	add	r22, r22
    8208:	77 1f       	adc	r23, r23
    820a:	88 1f       	adc	r24, r24
    820c:	bb 1f       	adc	r27, r27
    820e:	62 17       	cp	r22, r18
    8210:	73 07       	cpc	r23, r19
    8212:	84 07       	cpc	r24, r20
    8214:	ba 07       	cpc	r27, r26
    8216:	20 f0       	brcs	.+8      	; 0x8220 <__divsf3_pse+0xae>
    8218:	62 1b       	sub	r22, r18
    821a:	73 0b       	sbc	r23, r19
    821c:	84 0b       	sbc	r24, r20
    821e:	ba 0b       	sbc	r27, r26
    8220:	ee 1f       	adc	r30, r30
    8222:	88 f7       	brcc	.-30     	; 0x8206 <__divsf3_pse+0x94>
    8224:	e0 95       	com	r30
    8226:	08 95       	ret

00008228 <__fixsfsi>:
    8228:	0e 94 cb 32 	call	0x6596	; 0x6596 <__fixunssfsi>
    822c:	68 94       	set
    822e:	b1 11       	cpse	r27, r1
    8230:	0c 94 3e 33 	jmp	0x667c	; 0x667c <__fp_szero>
    8234:	08 95       	ret

00008236 <__floatunsisf>:
    8236:	e8 94       	clt
    8238:	09 c0       	rjmp	.+18     	; 0x824c <__floatsisf+0x12>

0000823a <__floatsisf>:
    823a:	97 fb       	bst	r25, 7
    823c:	3e f4       	brtc	.+14     	; 0x824c <__floatsisf+0x12>
    823e:	90 95       	com	r25
    8240:	80 95       	com	r24
    8242:	70 95       	com	r23
    8244:	61 95       	neg	r22
    8246:	7f 4f       	sbci	r23, 0xFF	; 255
    8248:	8f 4f       	sbci	r24, 0xFF	; 255
    824a:	9f 4f       	sbci	r25, 0xFF	; 255
    824c:	99 23       	and	r25, r25
    824e:	a9 f0       	breq	.+42     	; 0x827a <__floatsisf+0x40>
    8250:	f9 2f       	mov	r31, r25
    8252:	96 e9       	ldi	r25, 0x96	; 150
    8254:	bb 27       	eor	r27, r27
    8256:	93 95       	inc	r25
    8258:	f6 95       	lsr	r31
    825a:	87 95       	ror	r24
    825c:	77 95       	ror	r23
    825e:	67 95       	ror	r22
    8260:	b7 95       	ror	r27
    8262:	f1 11       	cpse	r31, r1
    8264:	f8 cf       	rjmp	.-16     	; 0x8256 <__floatsisf+0x1c>
    8266:	fa f4       	brpl	.+62     	; 0x82a6 <__floatsisf+0x6c>
    8268:	bb 0f       	add	r27, r27
    826a:	11 f4       	brne	.+4      	; 0x8270 <__floatsisf+0x36>
    826c:	60 ff       	sbrs	r22, 0
    826e:	1b c0       	rjmp	.+54     	; 0x82a6 <__floatsisf+0x6c>
    8270:	6f 5f       	subi	r22, 0xFF	; 255
    8272:	7f 4f       	sbci	r23, 0xFF	; 255
    8274:	8f 4f       	sbci	r24, 0xFF	; 255
    8276:	9f 4f       	sbci	r25, 0xFF	; 255
    8278:	16 c0       	rjmp	.+44     	; 0x82a6 <__floatsisf+0x6c>
    827a:	88 23       	and	r24, r24
    827c:	11 f0       	breq	.+4      	; 0x8282 <__floatsisf+0x48>
    827e:	96 e9       	ldi	r25, 0x96	; 150
    8280:	11 c0       	rjmp	.+34     	; 0x82a4 <__floatsisf+0x6a>
    8282:	77 23       	and	r23, r23
    8284:	21 f0       	breq	.+8      	; 0x828e <__floatsisf+0x54>
    8286:	9e e8       	ldi	r25, 0x8E	; 142
    8288:	87 2f       	mov	r24, r23
    828a:	76 2f       	mov	r23, r22
    828c:	05 c0       	rjmp	.+10     	; 0x8298 <__floatsisf+0x5e>
    828e:	66 23       	and	r22, r22
    8290:	71 f0       	breq	.+28     	; 0x82ae <__floatsisf+0x74>
    8292:	96 e8       	ldi	r25, 0x86	; 134
    8294:	86 2f       	mov	r24, r22
    8296:	70 e0       	ldi	r23, 0x00	; 0
    8298:	60 e0       	ldi	r22, 0x00	; 0
    829a:	2a f0       	brmi	.+10     	; 0x82a6 <__floatsisf+0x6c>
    829c:	9a 95       	dec	r25
    829e:	66 0f       	add	r22, r22
    82a0:	77 1f       	adc	r23, r23
    82a2:	88 1f       	adc	r24, r24
    82a4:	da f7       	brpl	.-10     	; 0x829c <__floatsisf+0x62>
    82a6:	88 0f       	add	r24, r24
    82a8:	96 95       	lsr	r25
    82aa:	87 95       	ror	r24
    82ac:	97 f9       	bld	r25, 7
    82ae:	08 95       	ret

000082b0 <__udivmodsi4>:
    82b0:	a1 e2       	ldi	r26, 0x21	; 33
    82b2:	1a 2e       	mov	r1, r26
    82b4:	aa 1b       	sub	r26, r26
    82b6:	bb 1b       	sub	r27, r27
    82b8:	fd 01       	movw	r30, r26
    82ba:	0d c0       	rjmp	.+26     	; 0x82d6 <__udivmodsi4_ep>

000082bc <__udivmodsi4_loop>:
    82bc:	aa 1f       	adc	r26, r26
    82be:	bb 1f       	adc	r27, r27
    82c0:	ee 1f       	adc	r30, r30
    82c2:	ff 1f       	adc	r31, r31
    82c4:	a2 17       	cp	r26, r18
    82c6:	b3 07       	cpc	r27, r19
    82c8:	e4 07       	cpc	r30, r20
    82ca:	f5 07       	cpc	r31, r21
    82cc:	20 f0       	brcs	.+8      	; 0x82d6 <__udivmodsi4_ep>
    82ce:	a2 1b       	sub	r26, r18
    82d0:	b3 0b       	sbc	r27, r19
    82d2:	e4 0b       	sbc	r30, r20
    82d4:	f5 0b       	sbc	r31, r21

000082d6 <__udivmodsi4_ep>:
    82d6:	66 1f       	adc	r22, r22
    82d8:	77 1f       	adc	r23, r23
    82da:	88 1f       	adc	r24, r24
    82dc:	99 1f       	adc	r25, r25
    82de:	1a 94       	dec	r1
    82e0:	69 f7       	brne	.-38     	; 0x82bc <__udivmodsi4_loop>
    82e2:	60 95       	com	r22
    82e4:	70 95       	com	r23
    82e6:	80 95       	com	r24
    82e8:	90 95       	com	r25
    82ea:	9b 01       	movw	r18, r22
    82ec:	ac 01       	movw	r20, r24
    82ee:	bd 01       	movw	r22, r26
    82f0:	cf 01       	movw	r24, r30
    82f2:	08 95       	ret

000082f4 <__tablejump2__>:
    82f4:	ee 0f       	add	r30, r30
    82f6:	ff 1f       	adc	r31, r31
    82f8:	88 1f       	adc	r24, r24
    82fa:	8b bf       	out	0x3b, r24	; 59
    82fc:	07 90       	elpm	r0, Z+
    82fe:	f6 91       	elpm	r31, Z
    8300:	e0 2d       	mov	r30, r0
    8302:	19 94       	eijmp

00008304 <malloc>:
    8304:	0f 93       	push	r16
    8306:	1f 93       	push	r17
    8308:	cf 93       	push	r28
    830a:	df 93       	push	r29
    830c:	82 30       	cpi	r24, 0x02	; 2
    830e:	91 05       	cpc	r25, r1
    8310:	10 f4       	brcc	.+4      	; 0x8316 <malloc+0x12>
    8312:	82 e0       	ldi	r24, 0x02	; 2
    8314:	90 e0       	ldi	r25, 0x00	; 0
    8316:	e0 91 b6 17 	lds	r30, 0x17B6	; 0x8017b6 <__flp>
    831a:	f0 91 b7 17 	lds	r31, 0x17B7	; 0x8017b7 <__flp+0x1>
    831e:	20 e0       	ldi	r18, 0x00	; 0
    8320:	30 e0       	ldi	r19, 0x00	; 0
    8322:	a0 e0       	ldi	r26, 0x00	; 0
    8324:	b0 e0       	ldi	r27, 0x00	; 0
    8326:	30 97       	sbiw	r30, 0x00	; 0
    8328:	19 f1       	breq	.+70     	; 0x8370 <malloc+0x6c>
    832a:	40 81       	ld	r20, Z
    832c:	51 81       	ldd	r21, Z+1	; 0x01
    832e:	02 81       	ldd	r16, Z+2	; 0x02
    8330:	13 81       	ldd	r17, Z+3	; 0x03
    8332:	48 17       	cp	r20, r24
    8334:	59 07       	cpc	r21, r25
    8336:	c8 f0       	brcs	.+50     	; 0x836a <malloc+0x66>
    8338:	84 17       	cp	r24, r20
    833a:	95 07       	cpc	r25, r21
    833c:	69 f4       	brne	.+26     	; 0x8358 <malloc+0x54>
    833e:	10 97       	sbiw	r26, 0x00	; 0
    8340:	31 f0       	breq	.+12     	; 0x834e <malloc+0x4a>
    8342:	12 96       	adiw	r26, 0x02	; 2
    8344:	0c 93       	st	X, r16
    8346:	12 97       	sbiw	r26, 0x02	; 2
    8348:	13 96       	adiw	r26, 0x03	; 3
    834a:	1c 93       	st	X, r17
    834c:	27 c0       	rjmp	.+78     	; 0x839c <malloc+0x98>
    834e:	00 93 b6 17 	sts	0x17B6, r16	; 0x8017b6 <__flp>
    8352:	10 93 b7 17 	sts	0x17B7, r17	; 0x8017b7 <__flp+0x1>
    8356:	22 c0       	rjmp	.+68     	; 0x839c <malloc+0x98>
    8358:	21 15       	cp	r18, r1
    835a:	31 05       	cpc	r19, r1
    835c:	19 f0       	breq	.+6      	; 0x8364 <malloc+0x60>
    835e:	42 17       	cp	r20, r18
    8360:	53 07       	cpc	r21, r19
    8362:	18 f4       	brcc	.+6      	; 0x836a <malloc+0x66>
    8364:	9a 01       	movw	r18, r20
    8366:	bd 01       	movw	r22, r26
    8368:	ef 01       	movw	r28, r30
    836a:	df 01       	movw	r26, r30
    836c:	f8 01       	movw	r30, r16
    836e:	db cf       	rjmp	.-74     	; 0x8326 <malloc+0x22>
    8370:	21 15       	cp	r18, r1
    8372:	31 05       	cpc	r19, r1
    8374:	f9 f0       	breq	.+62     	; 0x83b4 <malloc+0xb0>
    8376:	28 1b       	sub	r18, r24
    8378:	39 0b       	sbc	r19, r25
    837a:	24 30       	cpi	r18, 0x04	; 4
    837c:	31 05       	cpc	r19, r1
    837e:	80 f4       	brcc	.+32     	; 0x83a0 <malloc+0x9c>
    8380:	8a 81       	ldd	r24, Y+2	; 0x02
    8382:	9b 81       	ldd	r25, Y+3	; 0x03
    8384:	61 15       	cp	r22, r1
    8386:	71 05       	cpc	r23, r1
    8388:	21 f0       	breq	.+8      	; 0x8392 <malloc+0x8e>
    838a:	fb 01       	movw	r30, r22
    838c:	93 83       	std	Z+3, r25	; 0x03
    838e:	82 83       	std	Z+2, r24	; 0x02
    8390:	04 c0       	rjmp	.+8      	; 0x839a <malloc+0x96>
    8392:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <__flp+0x1>
    8396:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <__flp>
    839a:	fe 01       	movw	r30, r28
    839c:	32 96       	adiw	r30, 0x02	; 2
    839e:	44 c0       	rjmp	.+136    	; 0x8428 <malloc+0x124>
    83a0:	fe 01       	movw	r30, r28
    83a2:	e2 0f       	add	r30, r18
    83a4:	f3 1f       	adc	r31, r19
    83a6:	81 93       	st	Z+, r24
    83a8:	91 93       	st	Z+, r25
    83aa:	22 50       	subi	r18, 0x02	; 2
    83ac:	31 09       	sbc	r19, r1
    83ae:	39 83       	std	Y+1, r19	; 0x01
    83b0:	28 83       	st	Y, r18
    83b2:	3a c0       	rjmp	.+116    	; 0x8428 <malloc+0x124>
    83b4:	20 91 b4 17 	lds	r18, 0x17B4	; 0x8017b4 <__brkval>
    83b8:	30 91 b5 17 	lds	r19, 0x17B5	; 0x8017b5 <__brkval+0x1>
    83bc:	23 2b       	or	r18, r19
    83be:	41 f4       	brne	.+16     	; 0x83d0 <malloc+0xcc>
    83c0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    83c4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    83c8:	30 93 b5 17 	sts	0x17B5, r19	; 0x8017b5 <__brkval+0x1>
    83cc:	20 93 b4 17 	sts	0x17B4, r18	; 0x8017b4 <__brkval>
    83d0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    83d4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    83d8:	21 15       	cp	r18, r1
    83da:	31 05       	cpc	r19, r1
    83dc:	41 f4       	brne	.+16     	; 0x83ee <malloc+0xea>
    83de:	2d b7       	in	r18, 0x3d	; 61
    83e0:	3e b7       	in	r19, 0x3e	; 62
    83e2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    83e6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    83ea:	24 1b       	sub	r18, r20
    83ec:	35 0b       	sbc	r19, r21
    83ee:	e0 91 b4 17 	lds	r30, 0x17B4	; 0x8017b4 <__brkval>
    83f2:	f0 91 b5 17 	lds	r31, 0x17B5	; 0x8017b5 <__brkval+0x1>
    83f6:	e2 17       	cp	r30, r18
    83f8:	f3 07       	cpc	r31, r19
    83fa:	a0 f4       	brcc	.+40     	; 0x8424 <malloc+0x120>
    83fc:	2e 1b       	sub	r18, r30
    83fe:	3f 0b       	sbc	r19, r31
    8400:	28 17       	cp	r18, r24
    8402:	39 07       	cpc	r19, r25
    8404:	78 f0       	brcs	.+30     	; 0x8424 <malloc+0x120>
    8406:	ac 01       	movw	r20, r24
    8408:	4e 5f       	subi	r20, 0xFE	; 254
    840a:	5f 4f       	sbci	r21, 0xFF	; 255
    840c:	24 17       	cp	r18, r20
    840e:	35 07       	cpc	r19, r21
    8410:	48 f0       	brcs	.+18     	; 0x8424 <malloc+0x120>
    8412:	4e 0f       	add	r20, r30
    8414:	5f 1f       	adc	r21, r31
    8416:	50 93 b5 17 	sts	0x17B5, r21	; 0x8017b5 <__brkval+0x1>
    841a:	40 93 b4 17 	sts	0x17B4, r20	; 0x8017b4 <__brkval>
    841e:	81 93       	st	Z+, r24
    8420:	91 93       	st	Z+, r25
    8422:	02 c0       	rjmp	.+4      	; 0x8428 <malloc+0x124>
    8424:	e0 e0       	ldi	r30, 0x00	; 0
    8426:	f0 e0       	ldi	r31, 0x00	; 0
    8428:	cf 01       	movw	r24, r30
    842a:	df 91       	pop	r29
    842c:	cf 91       	pop	r28
    842e:	1f 91       	pop	r17
    8430:	0f 91       	pop	r16
    8432:	08 95       	ret

00008434 <free>:
    8434:	cf 93       	push	r28
    8436:	df 93       	push	r29
    8438:	00 97       	sbiw	r24, 0x00	; 0
    843a:	09 f4       	brne	.+2      	; 0x843e <free+0xa>
    843c:	81 c0       	rjmp	.+258    	; 0x8540 <free+0x10c>
    843e:	fc 01       	movw	r30, r24
    8440:	32 97       	sbiw	r30, 0x02	; 2
    8442:	13 82       	std	Z+3, r1	; 0x03
    8444:	12 82       	std	Z+2, r1	; 0x02
    8446:	a0 91 b6 17 	lds	r26, 0x17B6	; 0x8017b6 <__flp>
    844a:	b0 91 b7 17 	lds	r27, 0x17B7	; 0x8017b7 <__flp+0x1>
    844e:	10 97       	sbiw	r26, 0x00	; 0
    8450:	81 f4       	brne	.+32     	; 0x8472 <free+0x3e>
    8452:	20 81       	ld	r18, Z
    8454:	31 81       	ldd	r19, Z+1	; 0x01
    8456:	82 0f       	add	r24, r18
    8458:	93 1f       	adc	r25, r19
    845a:	20 91 b4 17 	lds	r18, 0x17B4	; 0x8017b4 <__brkval>
    845e:	30 91 b5 17 	lds	r19, 0x17B5	; 0x8017b5 <__brkval+0x1>
    8462:	28 17       	cp	r18, r24
    8464:	39 07       	cpc	r19, r25
    8466:	51 f5       	brne	.+84     	; 0x84bc <free+0x88>
    8468:	f0 93 b5 17 	sts	0x17B5, r31	; 0x8017b5 <__brkval+0x1>
    846c:	e0 93 b4 17 	sts	0x17B4, r30	; 0x8017b4 <__brkval>
    8470:	67 c0       	rjmp	.+206    	; 0x8540 <free+0x10c>
    8472:	ed 01       	movw	r28, r26
    8474:	20 e0       	ldi	r18, 0x00	; 0
    8476:	30 e0       	ldi	r19, 0x00	; 0
    8478:	ce 17       	cp	r28, r30
    847a:	df 07       	cpc	r29, r31
    847c:	40 f4       	brcc	.+16     	; 0x848e <free+0x5a>
    847e:	4a 81       	ldd	r20, Y+2	; 0x02
    8480:	5b 81       	ldd	r21, Y+3	; 0x03
    8482:	9e 01       	movw	r18, r28
    8484:	41 15       	cp	r20, r1
    8486:	51 05       	cpc	r21, r1
    8488:	f1 f0       	breq	.+60     	; 0x84c6 <free+0x92>
    848a:	ea 01       	movw	r28, r20
    848c:	f5 cf       	rjmp	.-22     	; 0x8478 <free+0x44>
    848e:	d3 83       	std	Z+3, r29	; 0x03
    8490:	c2 83       	std	Z+2, r28	; 0x02
    8492:	40 81       	ld	r20, Z
    8494:	51 81       	ldd	r21, Z+1	; 0x01
    8496:	84 0f       	add	r24, r20
    8498:	95 1f       	adc	r25, r21
    849a:	c8 17       	cp	r28, r24
    849c:	d9 07       	cpc	r29, r25
    849e:	59 f4       	brne	.+22     	; 0x84b6 <free+0x82>
    84a0:	88 81       	ld	r24, Y
    84a2:	99 81       	ldd	r25, Y+1	; 0x01
    84a4:	84 0f       	add	r24, r20
    84a6:	95 1f       	adc	r25, r21
    84a8:	02 96       	adiw	r24, 0x02	; 2
    84aa:	91 83       	std	Z+1, r25	; 0x01
    84ac:	80 83       	st	Z, r24
    84ae:	8a 81       	ldd	r24, Y+2	; 0x02
    84b0:	9b 81       	ldd	r25, Y+3	; 0x03
    84b2:	93 83       	std	Z+3, r25	; 0x03
    84b4:	82 83       	std	Z+2, r24	; 0x02
    84b6:	21 15       	cp	r18, r1
    84b8:	31 05       	cpc	r19, r1
    84ba:	29 f4       	brne	.+10     	; 0x84c6 <free+0x92>
    84bc:	f0 93 b7 17 	sts	0x17B7, r31	; 0x8017b7 <__flp+0x1>
    84c0:	e0 93 b6 17 	sts	0x17B6, r30	; 0x8017b6 <__flp>
    84c4:	3d c0       	rjmp	.+122    	; 0x8540 <free+0x10c>
    84c6:	e9 01       	movw	r28, r18
    84c8:	fb 83       	std	Y+3, r31	; 0x03
    84ca:	ea 83       	std	Y+2, r30	; 0x02
    84cc:	49 91       	ld	r20, Y+
    84ce:	59 91       	ld	r21, Y+
    84d0:	c4 0f       	add	r28, r20
    84d2:	d5 1f       	adc	r29, r21
    84d4:	ec 17       	cp	r30, r28
    84d6:	fd 07       	cpc	r31, r29
    84d8:	61 f4       	brne	.+24     	; 0x84f2 <free+0xbe>
    84da:	80 81       	ld	r24, Z
    84dc:	91 81       	ldd	r25, Z+1	; 0x01
    84de:	84 0f       	add	r24, r20
    84e0:	95 1f       	adc	r25, r21
    84e2:	02 96       	adiw	r24, 0x02	; 2
    84e4:	e9 01       	movw	r28, r18
    84e6:	99 83       	std	Y+1, r25	; 0x01
    84e8:	88 83       	st	Y, r24
    84ea:	82 81       	ldd	r24, Z+2	; 0x02
    84ec:	93 81       	ldd	r25, Z+3	; 0x03
    84ee:	9b 83       	std	Y+3, r25	; 0x03
    84f0:	8a 83       	std	Y+2, r24	; 0x02
    84f2:	e0 e0       	ldi	r30, 0x00	; 0
    84f4:	f0 e0       	ldi	r31, 0x00	; 0
    84f6:	12 96       	adiw	r26, 0x02	; 2
    84f8:	8d 91       	ld	r24, X+
    84fa:	9c 91       	ld	r25, X
    84fc:	13 97       	sbiw	r26, 0x03	; 3
    84fe:	00 97       	sbiw	r24, 0x00	; 0
    8500:	19 f0       	breq	.+6      	; 0x8508 <free+0xd4>
    8502:	fd 01       	movw	r30, r26
    8504:	dc 01       	movw	r26, r24
    8506:	f7 cf       	rjmp	.-18     	; 0x84f6 <free+0xc2>
    8508:	8d 91       	ld	r24, X+
    850a:	9c 91       	ld	r25, X
    850c:	11 97       	sbiw	r26, 0x01	; 1
    850e:	9d 01       	movw	r18, r26
    8510:	2e 5f       	subi	r18, 0xFE	; 254
    8512:	3f 4f       	sbci	r19, 0xFF	; 255
    8514:	82 0f       	add	r24, r18
    8516:	93 1f       	adc	r25, r19
    8518:	20 91 b4 17 	lds	r18, 0x17B4	; 0x8017b4 <__brkval>
    851c:	30 91 b5 17 	lds	r19, 0x17B5	; 0x8017b5 <__brkval+0x1>
    8520:	28 17       	cp	r18, r24
    8522:	39 07       	cpc	r19, r25
    8524:	69 f4       	brne	.+26     	; 0x8540 <free+0x10c>
    8526:	30 97       	sbiw	r30, 0x00	; 0
    8528:	29 f4       	brne	.+10     	; 0x8534 <free+0x100>
    852a:	10 92 b7 17 	sts	0x17B7, r1	; 0x8017b7 <__flp+0x1>
    852e:	10 92 b6 17 	sts	0x17B6, r1	; 0x8017b6 <__flp>
    8532:	02 c0       	rjmp	.+4      	; 0x8538 <free+0x104>
    8534:	13 82       	std	Z+3, r1	; 0x03
    8536:	12 82       	std	Z+2, r1	; 0x02
    8538:	b0 93 b5 17 	sts	0x17B5, r27	; 0x8017b5 <__brkval+0x1>
    853c:	a0 93 b4 17 	sts	0x17B4, r26	; 0x8017b4 <__brkval>
    8540:	df 91       	pop	r29
    8542:	cf 91       	pop	r28
    8544:	08 95       	ret

00008546 <abort>:
    8546:	81 e0       	ldi	r24, 0x01	; 1
    8548:	90 e0       	ldi	r25, 0x00	; 0
    854a:	f8 94       	cli
    854c:	7d c3       	rjmp	.+1786   	; 0x8c48 <_exit>

0000854e <memcpy>:
    854e:	fb 01       	movw	r30, r22
    8550:	dc 01       	movw	r26, r24
    8552:	02 c0       	rjmp	.+4      	; 0x8558 <memcpy+0xa>
    8554:	01 90       	ld	r0, Z+
    8556:	0d 92       	st	X+, r0
    8558:	41 50       	subi	r20, 0x01	; 1
    855a:	50 40       	sbci	r21, 0x00	; 0
    855c:	d8 f7       	brcc	.-10     	; 0x8554 <memcpy+0x6>
    855e:	08 95       	ret

00008560 <memset>:
    8560:	dc 01       	movw	r26, r24
    8562:	01 c0       	rjmp	.+2      	; 0x8566 <memset+0x6>
    8564:	6d 93       	st	X+, r22
    8566:	41 50       	subi	r20, 0x01	; 1
    8568:	50 40       	sbci	r21, 0x00	; 0
    856a:	e0 f7       	brcc	.-8      	; 0x8564 <memset+0x4>
    856c:	08 95       	ret

0000856e <strcasestr>:
    856e:	fb 01       	movw	r30, r22
    8570:	51 91       	ld	r21, Z+
    8572:	55 23       	and	r21, r21
    8574:	b1 f0       	breq	.+44     	; 0x85a2 <strcasestr+0x34>
    8576:	bf 01       	movw	r22, r30
    8578:	dc 01       	movw	r26, r24
    857a:	05 2e       	mov	r0, r21
    857c:	4d 91       	ld	r20, X+
    857e:	44 23       	and	r20, r20
    8580:	69 f0       	breq	.+26     	; 0x859c <strcasestr+0x2e>
    8582:	10 d0       	rcall	.+32     	; 0x85a4 <strcasestr+0x36>
    8584:	d9 f7       	brne	.-10     	; 0x857c <strcasestr+0xe>
    8586:	cd 01       	movw	r24, r26
    8588:	01 90       	ld	r0, Z+
    858a:	00 20       	and	r0, r0
    858c:	49 f0       	breq	.+18     	; 0x85a0 <strcasestr+0x32>
    858e:	4d 91       	ld	r20, X+
    8590:	41 11       	cpse	r20, r1
    8592:	08 d0       	rcall	.+16     	; 0x85a4 <strcasestr+0x36>
    8594:	c9 f3       	breq	.-14     	; 0x8588 <strcasestr+0x1a>
    8596:	fb 01       	movw	r30, r22
    8598:	41 11       	cpse	r20, r1
    859a:	ee cf       	rjmp	.-36     	; 0x8578 <strcasestr+0xa>
    859c:	81 e0       	ldi	r24, 0x01	; 1
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	01 97       	sbiw	r24, 0x01	; 1
    85a2:	08 95       	ret
    85a4:	40 25       	eor	r20, r0
    85a6:	39 f0       	breq	.+14     	; 0x85b6 <strcasestr+0x48>
    85a8:	40 32       	cpi	r20, 0x20	; 32
    85aa:	29 f4       	brne	.+10     	; 0x85b6 <strcasestr+0x48>
    85ac:	40 29       	or	r20, r0
    85ae:	4b 57       	subi	r20, 0x7B	; 123
    85b0:	46 5e       	subi	r20, 0xE6	; 230
    85b2:	08 f0       	brcs	.+2      	; 0x85b6 <strcasestr+0x48>
    85b4:	18 94       	sez
    85b6:	08 95       	ret

000085b8 <strcat>:
    85b8:	fb 01       	movw	r30, r22
    85ba:	dc 01       	movw	r26, r24
    85bc:	0d 90       	ld	r0, X+
    85be:	00 20       	and	r0, r0
    85c0:	e9 f7       	brne	.-6      	; 0x85bc <strcat+0x4>
    85c2:	11 97       	sbiw	r26, 0x01	; 1
    85c4:	01 90       	ld	r0, Z+
    85c6:	0d 92       	st	X+, r0
    85c8:	00 20       	and	r0, r0
    85ca:	e1 f7       	brne	.-8      	; 0x85c4 <strcat+0xc>
    85cc:	08 95       	ret

000085ce <strcpy>:
    85ce:	fb 01       	movw	r30, r22
    85d0:	dc 01       	movw	r26, r24
    85d2:	01 90       	ld	r0, Z+
    85d4:	0d 92       	st	X+, r0
    85d6:	00 20       	and	r0, r0
    85d8:	e1 f7       	brne	.-8      	; 0x85d2 <strcpy+0x4>
    85da:	08 95       	ret

000085dc <strncasecmp>:
    85dc:	fb 01       	movw	r30, r22
    85de:	dc 01       	movw	r26, r24
    85e0:	41 50       	subi	r20, 0x01	; 1
    85e2:	50 40       	sbci	r21, 0x00	; 0
    85e4:	88 f0       	brcs	.+34     	; 0x8608 <strncasecmp+0x2c>
    85e6:	8d 91       	ld	r24, X+
    85e8:	81 34       	cpi	r24, 0x41	; 65
    85ea:	1c f0       	brlt	.+6      	; 0x85f2 <strncasecmp+0x16>
    85ec:	8b 35       	cpi	r24, 0x5B	; 91
    85ee:	0c f4       	brge	.+2      	; 0x85f2 <strncasecmp+0x16>
    85f0:	80 5e       	subi	r24, 0xE0	; 224
    85f2:	61 91       	ld	r22, Z+
    85f4:	61 34       	cpi	r22, 0x41	; 65
    85f6:	1c f0       	brlt	.+6      	; 0x85fe <strncasecmp+0x22>
    85f8:	6b 35       	cpi	r22, 0x5B	; 91
    85fa:	0c f4       	brge	.+2      	; 0x85fe <strncasecmp+0x22>
    85fc:	60 5e       	subi	r22, 0xE0	; 224
    85fe:	86 1b       	sub	r24, r22
    8600:	61 11       	cpse	r22, r1
    8602:	71 f3       	breq	.-36     	; 0x85e0 <strncasecmp+0x4>
    8604:	99 0b       	sbc	r25, r25
    8606:	08 95       	ret
    8608:	88 1b       	sub	r24, r24
    860a:	fc cf       	rjmp	.-8      	; 0x8604 <strncasecmp+0x28>

0000860c <printf>:
    860c:	cf 93       	push	r28
    860e:	df 93       	push	r29
    8610:	cd b7       	in	r28, 0x3d	; 61
    8612:	de b7       	in	r29, 0x3e	; 62
    8614:	ae 01       	movw	r20, r28
    8616:	4a 5f       	subi	r20, 0xFA	; 250
    8618:	5f 4f       	sbci	r21, 0xFF	; 255
    861a:	fa 01       	movw	r30, r20
    861c:	61 91       	ld	r22, Z+
    861e:	71 91       	ld	r23, Z+
    8620:	af 01       	movw	r20, r30
    8622:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <__iob+0x2>
    8626:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <__iob+0x3>
    862a:	61 d0       	rcall	.+194    	; 0x86ee <vfprintf>
    862c:	df 91       	pop	r29
    862e:	cf 91       	pop	r28
    8630:	08 95       	ret

00008632 <puts>:
    8632:	0f 93       	push	r16
    8634:	1f 93       	push	r17
    8636:	cf 93       	push	r28
    8638:	df 93       	push	r29
    863a:	e0 91 ba 17 	lds	r30, 0x17BA	; 0x8017ba <__iob+0x2>
    863e:	f0 91 bb 17 	lds	r31, 0x17BB	; 0x8017bb <__iob+0x3>
    8642:	23 81       	ldd	r18, Z+3	; 0x03
    8644:	21 ff       	sbrs	r18, 1
    8646:	1b c0       	rjmp	.+54     	; 0x867e <puts+0x4c>
    8648:	8c 01       	movw	r16, r24
    864a:	d0 e0       	ldi	r29, 0x00	; 0
    864c:	c0 e0       	ldi	r28, 0x00	; 0
    864e:	f8 01       	movw	r30, r16
    8650:	81 91       	ld	r24, Z+
    8652:	8f 01       	movw	r16, r30
    8654:	60 91 ba 17 	lds	r22, 0x17BA	; 0x8017ba <__iob+0x2>
    8658:	70 91 bb 17 	lds	r23, 0x17BB	; 0x8017bb <__iob+0x3>
    865c:	db 01       	movw	r26, r22
    865e:	18 96       	adiw	r26, 0x08	; 8
    8660:	ed 91       	ld	r30, X+
    8662:	fc 91       	ld	r31, X
    8664:	19 97       	sbiw	r26, 0x09	; 9
    8666:	88 23       	and	r24, r24
    8668:	31 f0       	breq	.+12     	; 0x8676 <puts+0x44>
    866a:	19 95       	eicall
    866c:	89 2b       	or	r24, r25
    866e:	79 f3       	breq	.-34     	; 0x864e <puts+0x1c>
    8670:	df ef       	ldi	r29, 0xFF	; 255
    8672:	cf ef       	ldi	r28, 0xFF	; 255
    8674:	ec cf       	rjmp	.-40     	; 0x864e <puts+0x1c>
    8676:	8a e0       	ldi	r24, 0x0A	; 10
    8678:	19 95       	eicall
    867a:	89 2b       	or	r24, r25
    867c:	19 f0       	breq	.+6      	; 0x8684 <puts+0x52>
    867e:	8f ef       	ldi	r24, 0xFF	; 255
    8680:	9f ef       	ldi	r25, 0xFF	; 255
    8682:	02 c0       	rjmp	.+4      	; 0x8688 <puts+0x56>
    8684:	8d 2f       	mov	r24, r29
    8686:	9c 2f       	mov	r25, r28
    8688:	df 91       	pop	r29
    868a:	cf 91       	pop	r28
    868c:	1f 91       	pop	r17
    868e:	0f 91       	pop	r16
    8690:	08 95       	ret

00008692 <sprintf>:
    8692:	0f 93       	push	r16
    8694:	1f 93       	push	r17
    8696:	cf 93       	push	r28
    8698:	df 93       	push	r29
    869a:	cd b7       	in	r28, 0x3d	; 61
    869c:	de b7       	in	r29, 0x3e	; 62
    869e:	2e 97       	sbiw	r28, 0x0e	; 14
    86a0:	0f b6       	in	r0, 0x3f	; 63
    86a2:	f8 94       	cli
    86a4:	de bf       	out	0x3e, r29	; 62
    86a6:	0f be       	out	0x3f, r0	; 63
    86a8:	cd bf       	out	0x3d, r28	; 61
    86aa:	0e 89       	ldd	r16, Y+22	; 0x16
    86ac:	1f 89       	ldd	r17, Y+23	; 0x17
    86ae:	86 e0       	ldi	r24, 0x06	; 6
    86b0:	8c 83       	std	Y+4, r24	; 0x04
    86b2:	1a 83       	std	Y+2, r17	; 0x02
    86b4:	09 83       	std	Y+1, r16	; 0x01
    86b6:	8f ef       	ldi	r24, 0xFF	; 255
    86b8:	9f e7       	ldi	r25, 0x7F	; 127
    86ba:	9e 83       	std	Y+6, r25	; 0x06
    86bc:	8d 83       	std	Y+5, r24	; 0x05
    86be:	ae 01       	movw	r20, r28
    86c0:	46 5e       	subi	r20, 0xE6	; 230
    86c2:	5f 4f       	sbci	r21, 0xFF	; 255
    86c4:	68 8d       	ldd	r22, Y+24	; 0x18
    86c6:	79 8d       	ldd	r23, Y+25	; 0x19
    86c8:	ce 01       	movw	r24, r28
    86ca:	01 96       	adiw	r24, 0x01	; 1
    86cc:	10 d0       	rcall	.+32     	; 0x86ee <vfprintf>
    86ce:	ef 81       	ldd	r30, Y+7	; 0x07
    86d0:	f8 85       	ldd	r31, Y+8	; 0x08
    86d2:	e0 0f       	add	r30, r16
    86d4:	f1 1f       	adc	r31, r17
    86d6:	10 82       	st	Z, r1
    86d8:	2e 96       	adiw	r28, 0x0e	; 14
    86da:	0f b6       	in	r0, 0x3f	; 63
    86dc:	f8 94       	cli
    86de:	de bf       	out	0x3e, r29	; 62
    86e0:	0f be       	out	0x3f, r0	; 63
    86e2:	cd bf       	out	0x3d, r28	; 61
    86e4:	df 91       	pop	r29
    86e6:	cf 91       	pop	r28
    86e8:	1f 91       	pop	r17
    86ea:	0f 91       	pop	r16
    86ec:	08 95       	ret

000086ee <vfprintf>:
    86ee:	2f 92       	push	r2
    86f0:	3f 92       	push	r3
    86f2:	4f 92       	push	r4
    86f4:	5f 92       	push	r5
    86f6:	6f 92       	push	r6
    86f8:	7f 92       	push	r7
    86fa:	8f 92       	push	r8
    86fc:	9f 92       	push	r9
    86fe:	af 92       	push	r10
    8700:	bf 92       	push	r11
    8702:	cf 92       	push	r12
    8704:	df 92       	push	r13
    8706:	ef 92       	push	r14
    8708:	ff 92       	push	r15
    870a:	0f 93       	push	r16
    870c:	1f 93       	push	r17
    870e:	cf 93       	push	r28
    8710:	df 93       	push	r29
    8712:	cd b7       	in	r28, 0x3d	; 61
    8714:	de b7       	in	r29, 0x3e	; 62
    8716:	2b 97       	sbiw	r28, 0x0b	; 11
    8718:	0f b6       	in	r0, 0x3f	; 63
    871a:	f8 94       	cli
    871c:	de bf       	out	0x3e, r29	; 62
    871e:	0f be       	out	0x3f, r0	; 63
    8720:	cd bf       	out	0x3d, r28	; 61
    8722:	6c 01       	movw	r12, r24
    8724:	7b 01       	movw	r14, r22
    8726:	8a 01       	movw	r16, r20
    8728:	fc 01       	movw	r30, r24
    872a:	17 82       	std	Z+7, r1	; 0x07
    872c:	16 82       	std	Z+6, r1	; 0x06
    872e:	83 81       	ldd	r24, Z+3	; 0x03
    8730:	81 ff       	sbrs	r24, 1
    8732:	bf c1       	rjmp	.+894    	; 0x8ab2 <vfprintf+0x3c4>
    8734:	ce 01       	movw	r24, r28
    8736:	01 96       	adiw	r24, 0x01	; 1
    8738:	3c 01       	movw	r6, r24
    873a:	f6 01       	movw	r30, r12
    873c:	93 81       	ldd	r25, Z+3	; 0x03
    873e:	f7 01       	movw	r30, r14
    8740:	93 fd       	sbrc	r25, 3
    8742:	85 91       	lpm	r24, Z+
    8744:	93 ff       	sbrs	r25, 3
    8746:	81 91       	ld	r24, Z+
    8748:	7f 01       	movw	r14, r30
    874a:	88 23       	and	r24, r24
    874c:	09 f4       	brne	.+2      	; 0x8750 <vfprintf+0x62>
    874e:	ad c1       	rjmp	.+858    	; 0x8aaa <vfprintf+0x3bc>
    8750:	85 32       	cpi	r24, 0x25	; 37
    8752:	39 f4       	brne	.+14     	; 0x8762 <vfprintf+0x74>
    8754:	93 fd       	sbrc	r25, 3
    8756:	85 91       	lpm	r24, Z+
    8758:	93 ff       	sbrs	r25, 3
    875a:	81 91       	ld	r24, Z+
    875c:	7f 01       	movw	r14, r30
    875e:	85 32       	cpi	r24, 0x25	; 37
    8760:	21 f4       	brne	.+8      	; 0x876a <vfprintf+0x7c>
    8762:	b6 01       	movw	r22, r12
    8764:	90 e0       	ldi	r25, 0x00	; 0
    8766:	d6 d1       	rcall	.+940    	; 0x8b14 <fputc>
    8768:	e8 cf       	rjmp	.-48     	; 0x873a <vfprintf+0x4c>
    876a:	91 2c       	mov	r9, r1
    876c:	21 2c       	mov	r2, r1
    876e:	31 2c       	mov	r3, r1
    8770:	ff e1       	ldi	r31, 0x1F	; 31
    8772:	f3 15       	cp	r31, r3
    8774:	d8 f0       	brcs	.+54     	; 0x87ac <vfprintf+0xbe>
    8776:	8b 32       	cpi	r24, 0x2B	; 43
    8778:	79 f0       	breq	.+30     	; 0x8798 <vfprintf+0xaa>
    877a:	38 f4       	brcc	.+14     	; 0x878a <vfprintf+0x9c>
    877c:	80 32       	cpi	r24, 0x20	; 32
    877e:	79 f0       	breq	.+30     	; 0x879e <vfprintf+0xb0>
    8780:	83 32       	cpi	r24, 0x23	; 35
    8782:	a1 f4       	brne	.+40     	; 0x87ac <vfprintf+0xbe>
    8784:	23 2d       	mov	r18, r3
    8786:	20 61       	ori	r18, 0x10	; 16
    8788:	1d c0       	rjmp	.+58     	; 0x87c4 <vfprintf+0xd6>
    878a:	8d 32       	cpi	r24, 0x2D	; 45
    878c:	61 f0       	breq	.+24     	; 0x87a6 <vfprintf+0xb8>
    878e:	80 33       	cpi	r24, 0x30	; 48
    8790:	69 f4       	brne	.+26     	; 0x87ac <vfprintf+0xbe>
    8792:	23 2d       	mov	r18, r3
    8794:	21 60       	ori	r18, 0x01	; 1
    8796:	16 c0       	rjmp	.+44     	; 0x87c4 <vfprintf+0xd6>
    8798:	83 2d       	mov	r24, r3
    879a:	82 60       	ori	r24, 0x02	; 2
    879c:	38 2e       	mov	r3, r24
    879e:	e3 2d       	mov	r30, r3
    87a0:	e4 60       	ori	r30, 0x04	; 4
    87a2:	3e 2e       	mov	r3, r30
    87a4:	2a c0       	rjmp	.+84     	; 0x87fa <vfprintf+0x10c>
    87a6:	f3 2d       	mov	r31, r3
    87a8:	f8 60       	ori	r31, 0x08	; 8
    87aa:	1d c0       	rjmp	.+58     	; 0x87e6 <vfprintf+0xf8>
    87ac:	37 fc       	sbrc	r3, 7
    87ae:	2d c0       	rjmp	.+90     	; 0x880a <vfprintf+0x11c>
    87b0:	20 ed       	ldi	r18, 0xD0	; 208
    87b2:	28 0f       	add	r18, r24
    87b4:	2a 30       	cpi	r18, 0x0A	; 10
    87b6:	40 f0       	brcs	.+16     	; 0x87c8 <vfprintf+0xda>
    87b8:	8e 32       	cpi	r24, 0x2E	; 46
    87ba:	b9 f4       	brne	.+46     	; 0x87ea <vfprintf+0xfc>
    87bc:	36 fc       	sbrc	r3, 6
    87be:	75 c1       	rjmp	.+746    	; 0x8aaa <vfprintf+0x3bc>
    87c0:	23 2d       	mov	r18, r3
    87c2:	20 64       	ori	r18, 0x40	; 64
    87c4:	32 2e       	mov	r3, r18
    87c6:	19 c0       	rjmp	.+50     	; 0x87fa <vfprintf+0x10c>
    87c8:	36 fe       	sbrs	r3, 6
    87ca:	06 c0       	rjmp	.+12     	; 0x87d8 <vfprintf+0xea>
    87cc:	8a e0       	ldi	r24, 0x0A	; 10
    87ce:	98 9e       	mul	r9, r24
    87d0:	20 0d       	add	r18, r0
    87d2:	11 24       	eor	r1, r1
    87d4:	92 2e       	mov	r9, r18
    87d6:	11 c0       	rjmp	.+34     	; 0x87fa <vfprintf+0x10c>
    87d8:	ea e0       	ldi	r30, 0x0A	; 10
    87da:	2e 9e       	mul	r2, r30
    87dc:	20 0d       	add	r18, r0
    87de:	11 24       	eor	r1, r1
    87e0:	22 2e       	mov	r2, r18
    87e2:	f3 2d       	mov	r31, r3
    87e4:	f0 62       	ori	r31, 0x20	; 32
    87e6:	3f 2e       	mov	r3, r31
    87e8:	08 c0       	rjmp	.+16     	; 0x87fa <vfprintf+0x10c>
    87ea:	8c 36       	cpi	r24, 0x6C	; 108
    87ec:	21 f4       	brne	.+8      	; 0x87f6 <vfprintf+0x108>
    87ee:	83 2d       	mov	r24, r3
    87f0:	80 68       	ori	r24, 0x80	; 128
    87f2:	38 2e       	mov	r3, r24
    87f4:	02 c0       	rjmp	.+4      	; 0x87fa <vfprintf+0x10c>
    87f6:	88 36       	cpi	r24, 0x68	; 104
    87f8:	41 f4       	brne	.+16     	; 0x880a <vfprintf+0x11c>
    87fa:	f7 01       	movw	r30, r14
    87fc:	93 fd       	sbrc	r25, 3
    87fe:	85 91       	lpm	r24, Z+
    8800:	93 ff       	sbrs	r25, 3
    8802:	81 91       	ld	r24, Z+
    8804:	7f 01       	movw	r14, r30
    8806:	81 11       	cpse	r24, r1
    8808:	b3 cf       	rjmp	.-154    	; 0x8770 <vfprintf+0x82>
    880a:	98 2f       	mov	r25, r24
    880c:	9f 7d       	andi	r25, 0xDF	; 223
    880e:	95 54       	subi	r25, 0x45	; 69
    8810:	93 30       	cpi	r25, 0x03	; 3
    8812:	28 f4       	brcc	.+10     	; 0x881e <vfprintf+0x130>
    8814:	0c 5f       	subi	r16, 0xFC	; 252
    8816:	1f 4f       	sbci	r17, 0xFF	; 255
    8818:	9f e3       	ldi	r25, 0x3F	; 63
    881a:	99 83       	std	Y+1, r25	; 0x01
    881c:	0d c0       	rjmp	.+26     	; 0x8838 <vfprintf+0x14a>
    881e:	83 36       	cpi	r24, 0x63	; 99
    8820:	31 f0       	breq	.+12     	; 0x882e <vfprintf+0x140>
    8822:	83 37       	cpi	r24, 0x73	; 115
    8824:	71 f0       	breq	.+28     	; 0x8842 <vfprintf+0x154>
    8826:	83 35       	cpi	r24, 0x53	; 83
    8828:	09 f0       	breq	.+2      	; 0x882c <vfprintf+0x13e>
    882a:	55 c0       	rjmp	.+170    	; 0x88d6 <vfprintf+0x1e8>
    882c:	20 c0       	rjmp	.+64     	; 0x886e <vfprintf+0x180>
    882e:	f8 01       	movw	r30, r16
    8830:	80 81       	ld	r24, Z
    8832:	89 83       	std	Y+1, r24	; 0x01
    8834:	0e 5f       	subi	r16, 0xFE	; 254
    8836:	1f 4f       	sbci	r17, 0xFF	; 255
    8838:	88 24       	eor	r8, r8
    883a:	83 94       	inc	r8
    883c:	91 2c       	mov	r9, r1
    883e:	53 01       	movw	r10, r6
    8840:	12 c0       	rjmp	.+36     	; 0x8866 <vfprintf+0x178>
    8842:	28 01       	movw	r4, r16
    8844:	f2 e0       	ldi	r31, 0x02	; 2
    8846:	4f 0e       	add	r4, r31
    8848:	51 1c       	adc	r5, r1
    884a:	f8 01       	movw	r30, r16
    884c:	a0 80       	ld	r10, Z
    884e:	b1 80       	ldd	r11, Z+1	; 0x01
    8850:	36 fe       	sbrs	r3, 6
    8852:	03 c0       	rjmp	.+6      	; 0x885a <vfprintf+0x16c>
    8854:	69 2d       	mov	r22, r9
    8856:	70 e0       	ldi	r23, 0x00	; 0
    8858:	02 c0       	rjmp	.+4      	; 0x885e <vfprintf+0x170>
    885a:	6f ef       	ldi	r22, 0xFF	; 255
    885c:	7f ef       	ldi	r23, 0xFF	; 255
    885e:	c5 01       	movw	r24, r10
    8860:	4e d1       	rcall	.+668    	; 0x8afe <strnlen>
    8862:	4c 01       	movw	r8, r24
    8864:	82 01       	movw	r16, r4
    8866:	f3 2d       	mov	r31, r3
    8868:	ff 77       	andi	r31, 0x7F	; 127
    886a:	3f 2e       	mov	r3, r31
    886c:	15 c0       	rjmp	.+42     	; 0x8898 <vfprintf+0x1aa>
    886e:	28 01       	movw	r4, r16
    8870:	22 e0       	ldi	r18, 0x02	; 2
    8872:	42 0e       	add	r4, r18
    8874:	51 1c       	adc	r5, r1
    8876:	f8 01       	movw	r30, r16
    8878:	a0 80       	ld	r10, Z
    887a:	b1 80       	ldd	r11, Z+1	; 0x01
    887c:	36 fe       	sbrs	r3, 6
    887e:	03 c0       	rjmp	.+6      	; 0x8886 <vfprintf+0x198>
    8880:	69 2d       	mov	r22, r9
    8882:	70 e0       	ldi	r23, 0x00	; 0
    8884:	02 c0       	rjmp	.+4      	; 0x888a <vfprintf+0x19c>
    8886:	6f ef       	ldi	r22, 0xFF	; 255
    8888:	7f ef       	ldi	r23, 0xFF	; 255
    888a:	c5 01       	movw	r24, r10
    888c:	2d d1       	rcall	.+602    	; 0x8ae8 <strnlen_P>
    888e:	4c 01       	movw	r8, r24
    8890:	f3 2d       	mov	r31, r3
    8892:	f0 68       	ori	r31, 0x80	; 128
    8894:	3f 2e       	mov	r3, r31
    8896:	82 01       	movw	r16, r4
    8898:	33 fc       	sbrc	r3, 3
    889a:	19 c0       	rjmp	.+50     	; 0x88ce <vfprintf+0x1e0>
    889c:	82 2d       	mov	r24, r2
    889e:	90 e0       	ldi	r25, 0x00	; 0
    88a0:	88 16       	cp	r8, r24
    88a2:	99 06       	cpc	r9, r25
    88a4:	a0 f4       	brcc	.+40     	; 0x88ce <vfprintf+0x1e0>
    88a6:	b6 01       	movw	r22, r12
    88a8:	80 e2       	ldi	r24, 0x20	; 32
    88aa:	90 e0       	ldi	r25, 0x00	; 0
    88ac:	33 d1       	rcall	.+614    	; 0x8b14 <fputc>
    88ae:	2a 94       	dec	r2
    88b0:	f5 cf       	rjmp	.-22     	; 0x889c <vfprintf+0x1ae>
    88b2:	f5 01       	movw	r30, r10
    88b4:	37 fc       	sbrc	r3, 7
    88b6:	85 91       	lpm	r24, Z+
    88b8:	37 fe       	sbrs	r3, 7
    88ba:	81 91       	ld	r24, Z+
    88bc:	5f 01       	movw	r10, r30
    88be:	b6 01       	movw	r22, r12
    88c0:	90 e0       	ldi	r25, 0x00	; 0
    88c2:	28 d1       	rcall	.+592    	; 0x8b14 <fputc>
    88c4:	21 10       	cpse	r2, r1
    88c6:	2a 94       	dec	r2
    88c8:	21 e0       	ldi	r18, 0x01	; 1
    88ca:	82 1a       	sub	r8, r18
    88cc:	91 08       	sbc	r9, r1
    88ce:	81 14       	cp	r8, r1
    88d0:	91 04       	cpc	r9, r1
    88d2:	79 f7       	brne	.-34     	; 0x88b2 <vfprintf+0x1c4>
    88d4:	e1 c0       	rjmp	.+450    	; 0x8a98 <vfprintf+0x3aa>
    88d6:	84 36       	cpi	r24, 0x64	; 100
    88d8:	11 f0       	breq	.+4      	; 0x88de <vfprintf+0x1f0>
    88da:	89 36       	cpi	r24, 0x69	; 105
    88dc:	39 f5       	brne	.+78     	; 0x892c <vfprintf+0x23e>
    88de:	f8 01       	movw	r30, r16
    88e0:	37 fe       	sbrs	r3, 7
    88e2:	07 c0       	rjmp	.+14     	; 0x88f2 <vfprintf+0x204>
    88e4:	60 81       	ld	r22, Z
    88e6:	71 81       	ldd	r23, Z+1	; 0x01
    88e8:	82 81       	ldd	r24, Z+2	; 0x02
    88ea:	93 81       	ldd	r25, Z+3	; 0x03
    88ec:	0c 5f       	subi	r16, 0xFC	; 252
    88ee:	1f 4f       	sbci	r17, 0xFF	; 255
    88f0:	08 c0       	rjmp	.+16     	; 0x8902 <vfprintf+0x214>
    88f2:	60 81       	ld	r22, Z
    88f4:	71 81       	ldd	r23, Z+1	; 0x01
    88f6:	07 2e       	mov	r0, r23
    88f8:	00 0c       	add	r0, r0
    88fa:	88 0b       	sbc	r24, r24
    88fc:	99 0b       	sbc	r25, r25
    88fe:	0e 5f       	subi	r16, 0xFE	; 254
    8900:	1f 4f       	sbci	r17, 0xFF	; 255
    8902:	f3 2d       	mov	r31, r3
    8904:	ff 76       	andi	r31, 0x6F	; 111
    8906:	3f 2e       	mov	r3, r31
    8908:	97 ff       	sbrs	r25, 7
    890a:	09 c0       	rjmp	.+18     	; 0x891e <vfprintf+0x230>
    890c:	90 95       	com	r25
    890e:	80 95       	com	r24
    8910:	70 95       	com	r23
    8912:	61 95       	neg	r22
    8914:	7f 4f       	sbci	r23, 0xFF	; 255
    8916:	8f 4f       	sbci	r24, 0xFF	; 255
    8918:	9f 4f       	sbci	r25, 0xFF	; 255
    891a:	f0 68       	ori	r31, 0x80	; 128
    891c:	3f 2e       	mov	r3, r31
    891e:	2a e0       	ldi	r18, 0x0A	; 10
    8920:	30 e0       	ldi	r19, 0x00	; 0
    8922:	a3 01       	movw	r20, r6
    8924:	33 d1       	rcall	.+614    	; 0x8b8c <__ultoa_invert>
    8926:	88 2e       	mov	r8, r24
    8928:	86 18       	sub	r8, r6
    892a:	44 c0       	rjmp	.+136    	; 0x89b4 <vfprintf+0x2c6>
    892c:	85 37       	cpi	r24, 0x75	; 117
    892e:	31 f4       	brne	.+12     	; 0x893c <vfprintf+0x24e>
    8930:	23 2d       	mov	r18, r3
    8932:	2f 7e       	andi	r18, 0xEF	; 239
    8934:	b2 2e       	mov	r11, r18
    8936:	2a e0       	ldi	r18, 0x0A	; 10
    8938:	30 e0       	ldi	r19, 0x00	; 0
    893a:	25 c0       	rjmp	.+74     	; 0x8986 <vfprintf+0x298>
    893c:	93 2d       	mov	r25, r3
    893e:	99 7f       	andi	r25, 0xF9	; 249
    8940:	b9 2e       	mov	r11, r25
    8942:	8f 36       	cpi	r24, 0x6F	; 111
    8944:	c1 f0       	breq	.+48     	; 0x8976 <vfprintf+0x288>
    8946:	18 f4       	brcc	.+6      	; 0x894e <vfprintf+0x260>
    8948:	88 35       	cpi	r24, 0x58	; 88
    894a:	79 f0       	breq	.+30     	; 0x896a <vfprintf+0x27c>
    894c:	ae c0       	rjmp	.+348    	; 0x8aaa <vfprintf+0x3bc>
    894e:	80 37       	cpi	r24, 0x70	; 112
    8950:	19 f0       	breq	.+6      	; 0x8958 <vfprintf+0x26a>
    8952:	88 37       	cpi	r24, 0x78	; 120
    8954:	21 f0       	breq	.+8      	; 0x895e <vfprintf+0x270>
    8956:	a9 c0       	rjmp	.+338    	; 0x8aaa <vfprintf+0x3bc>
    8958:	e9 2f       	mov	r30, r25
    895a:	e0 61       	ori	r30, 0x10	; 16
    895c:	be 2e       	mov	r11, r30
    895e:	b4 fe       	sbrs	r11, 4
    8960:	0d c0       	rjmp	.+26     	; 0x897c <vfprintf+0x28e>
    8962:	fb 2d       	mov	r31, r11
    8964:	f4 60       	ori	r31, 0x04	; 4
    8966:	bf 2e       	mov	r11, r31
    8968:	09 c0       	rjmp	.+18     	; 0x897c <vfprintf+0x28e>
    896a:	34 fe       	sbrs	r3, 4
    896c:	0a c0       	rjmp	.+20     	; 0x8982 <vfprintf+0x294>
    896e:	29 2f       	mov	r18, r25
    8970:	26 60       	ori	r18, 0x06	; 6
    8972:	b2 2e       	mov	r11, r18
    8974:	06 c0       	rjmp	.+12     	; 0x8982 <vfprintf+0x294>
    8976:	28 e0       	ldi	r18, 0x08	; 8
    8978:	30 e0       	ldi	r19, 0x00	; 0
    897a:	05 c0       	rjmp	.+10     	; 0x8986 <vfprintf+0x298>
    897c:	20 e1       	ldi	r18, 0x10	; 16
    897e:	30 e0       	ldi	r19, 0x00	; 0
    8980:	02 c0       	rjmp	.+4      	; 0x8986 <vfprintf+0x298>
    8982:	20 e1       	ldi	r18, 0x10	; 16
    8984:	32 e0       	ldi	r19, 0x02	; 2
    8986:	f8 01       	movw	r30, r16
    8988:	b7 fe       	sbrs	r11, 7
    898a:	07 c0       	rjmp	.+14     	; 0x899a <vfprintf+0x2ac>
    898c:	60 81       	ld	r22, Z
    898e:	71 81       	ldd	r23, Z+1	; 0x01
    8990:	82 81       	ldd	r24, Z+2	; 0x02
    8992:	93 81       	ldd	r25, Z+3	; 0x03
    8994:	0c 5f       	subi	r16, 0xFC	; 252
    8996:	1f 4f       	sbci	r17, 0xFF	; 255
    8998:	06 c0       	rjmp	.+12     	; 0x89a6 <vfprintf+0x2b8>
    899a:	60 81       	ld	r22, Z
    899c:	71 81       	ldd	r23, Z+1	; 0x01
    899e:	80 e0       	ldi	r24, 0x00	; 0
    89a0:	90 e0       	ldi	r25, 0x00	; 0
    89a2:	0e 5f       	subi	r16, 0xFE	; 254
    89a4:	1f 4f       	sbci	r17, 0xFF	; 255
    89a6:	a3 01       	movw	r20, r6
    89a8:	f1 d0       	rcall	.+482    	; 0x8b8c <__ultoa_invert>
    89aa:	88 2e       	mov	r8, r24
    89ac:	86 18       	sub	r8, r6
    89ae:	fb 2d       	mov	r31, r11
    89b0:	ff 77       	andi	r31, 0x7F	; 127
    89b2:	3f 2e       	mov	r3, r31
    89b4:	36 fe       	sbrs	r3, 6
    89b6:	0d c0       	rjmp	.+26     	; 0x89d2 <vfprintf+0x2e4>
    89b8:	23 2d       	mov	r18, r3
    89ba:	2e 7f       	andi	r18, 0xFE	; 254
    89bc:	a2 2e       	mov	r10, r18
    89be:	89 14       	cp	r8, r9
    89c0:	58 f4       	brcc	.+22     	; 0x89d8 <vfprintf+0x2ea>
    89c2:	34 fe       	sbrs	r3, 4
    89c4:	0b c0       	rjmp	.+22     	; 0x89dc <vfprintf+0x2ee>
    89c6:	32 fc       	sbrc	r3, 2
    89c8:	09 c0       	rjmp	.+18     	; 0x89dc <vfprintf+0x2ee>
    89ca:	83 2d       	mov	r24, r3
    89cc:	8e 7e       	andi	r24, 0xEE	; 238
    89ce:	a8 2e       	mov	r10, r24
    89d0:	05 c0       	rjmp	.+10     	; 0x89dc <vfprintf+0x2ee>
    89d2:	b8 2c       	mov	r11, r8
    89d4:	a3 2c       	mov	r10, r3
    89d6:	03 c0       	rjmp	.+6      	; 0x89de <vfprintf+0x2f0>
    89d8:	b8 2c       	mov	r11, r8
    89da:	01 c0       	rjmp	.+2      	; 0x89de <vfprintf+0x2f0>
    89dc:	b9 2c       	mov	r11, r9
    89de:	a4 fe       	sbrs	r10, 4
    89e0:	0f c0       	rjmp	.+30     	; 0x8a00 <vfprintf+0x312>
    89e2:	fe 01       	movw	r30, r28
    89e4:	e8 0d       	add	r30, r8
    89e6:	f1 1d       	adc	r31, r1
    89e8:	80 81       	ld	r24, Z
    89ea:	80 33       	cpi	r24, 0x30	; 48
    89ec:	21 f4       	brne	.+8      	; 0x89f6 <vfprintf+0x308>
    89ee:	9a 2d       	mov	r25, r10
    89f0:	99 7e       	andi	r25, 0xE9	; 233
    89f2:	a9 2e       	mov	r10, r25
    89f4:	09 c0       	rjmp	.+18     	; 0x8a08 <vfprintf+0x31a>
    89f6:	a2 fe       	sbrs	r10, 2
    89f8:	06 c0       	rjmp	.+12     	; 0x8a06 <vfprintf+0x318>
    89fa:	b3 94       	inc	r11
    89fc:	b3 94       	inc	r11
    89fe:	04 c0       	rjmp	.+8      	; 0x8a08 <vfprintf+0x31a>
    8a00:	8a 2d       	mov	r24, r10
    8a02:	86 78       	andi	r24, 0x86	; 134
    8a04:	09 f0       	breq	.+2      	; 0x8a08 <vfprintf+0x31a>
    8a06:	b3 94       	inc	r11
    8a08:	a3 fc       	sbrc	r10, 3
    8a0a:	10 c0       	rjmp	.+32     	; 0x8a2c <vfprintf+0x33e>
    8a0c:	a0 fe       	sbrs	r10, 0
    8a0e:	06 c0       	rjmp	.+12     	; 0x8a1c <vfprintf+0x32e>
    8a10:	b2 14       	cp	r11, r2
    8a12:	80 f4       	brcc	.+32     	; 0x8a34 <vfprintf+0x346>
    8a14:	28 0c       	add	r2, r8
    8a16:	92 2c       	mov	r9, r2
    8a18:	9b 18       	sub	r9, r11
    8a1a:	0d c0       	rjmp	.+26     	; 0x8a36 <vfprintf+0x348>
    8a1c:	b2 14       	cp	r11, r2
    8a1e:	58 f4       	brcc	.+22     	; 0x8a36 <vfprintf+0x348>
    8a20:	b6 01       	movw	r22, r12
    8a22:	80 e2       	ldi	r24, 0x20	; 32
    8a24:	90 e0       	ldi	r25, 0x00	; 0
    8a26:	76 d0       	rcall	.+236    	; 0x8b14 <fputc>
    8a28:	b3 94       	inc	r11
    8a2a:	f8 cf       	rjmp	.-16     	; 0x8a1c <vfprintf+0x32e>
    8a2c:	b2 14       	cp	r11, r2
    8a2e:	18 f4       	brcc	.+6      	; 0x8a36 <vfprintf+0x348>
    8a30:	2b 18       	sub	r2, r11
    8a32:	02 c0       	rjmp	.+4      	; 0x8a38 <vfprintf+0x34a>
    8a34:	98 2c       	mov	r9, r8
    8a36:	21 2c       	mov	r2, r1
    8a38:	a4 fe       	sbrs	r10, 4
    8a3a:	0f c0       	rjmp	.+30     	; 0x8a5a <vfprintf+0x36c>
    8a3c:	b6 01       	movw	r22, r12
    8a3e:	80 e3       	ldi	r24, 0x30	; 48
    8a40:	90 e0       	ldi	r25, 0x00	; 0
    8a42:	68 d0       	rcall	.+208    	; 0x8b14 <fputc>
    8a44:	a2 fe       	sbrs	r10, 2
    8a46:	16 c0       	rjmp	.+44     	; 0x8a74 <vfprintf+0x386>
    8a48:	a1 fc       	sbrc	r10, 1
    8a4a:	03 c0       	rjmp	.+6      	; 0x8a52 <vfprintf+0x364>
    8a4c:	88 e7       	ldi	r24, 0x78	; 120
    8a4e:	90 e0       	ldi	r25, 0x00	; 0
    8a50:	02 c0       	rjmp	.+4      	; 0x8a56 <vfprintf+0x368>
    8a52:	88 e5       	ldi	r24, 0x58	; 88
    8a54:	90 e0       	ldi	r25, 0x00	; 0
    8a56:	b6 01       	movw	r22, r12
    8a58:	0c c0       	rjmp	.+24     	; 0x8a72 <vfprintf+0x384>
    8a5a:	8a 2d       	mov	r24, r10
    8a5c:	86 78       	andi	r24, 0x86	; 134
    8a5e:	51 f0       	breq	.+20     	; 0x8a74 <vfprintf+0x386>
    8a60:	a1 fe       	sbrs	r10, 1
    8a62:	02 c0       	rjmp	.+4      	; 0x8a68 <vfprintf+0x37a>
    8a64:	8b e2       	ldi	r24, 0x2B	; 43
    8a66:	01 c0       	rjmp	.+2      	; 0x8a6a <vfprintf+0x37c>
    8a68:	80 e2       	ldi	r24, 0x20	; 32
    8a6a:	a7 fc       	sbrc	r10, 7
    8a6c:	8d e2       	ldi	r24, 0x2D	; 45
    8a6e:	b6 01       	movw	r22, r12
    8a70:	90 e0       	ldi	r25, 0x00	; 0
    8a72:	50 d0       	rcall	.+160    	; 0x8b14 <fputc>
    8a74:	89 14       	cp	r8, r9
    8a76:	30 f4       	brcc	.+12     	; 0x8a84 <vfprintf+0x396>
    8a78:	b6 01       	movw	r22, r12
    8a7a:	80 e3       	ldi	r24, 0x30	; 48
    8a7c:	90 e0       	ldi	r25, 0x00	; 0
    8a7e:	4a d0       	rcall	.+148    	; 0x8b14 <fputc>
    8a80:	9a 94       	dec	r9
    8a82:	f8 cf       	rjmp	.-16     	; 0x8a74 <vfprintf+0x386>
    8a84:	8a 94       	dec	r8
    8a86:	f3 01       	movw	r30, r6
    8a88:	e8 0d       	add	r30, r8
    8a8a:	f1 1d       	adc	r31, r1
    8a8c:	80 81       	ld	r24, Z
    8a8e:	b6 01       	movw	r22, r12
    8a90:	90 e0       	ldi	r25, 0x00	; 0
    8a92:	40 d0       	rcall	.+128    	; 0x8b14 <fputc>
    8a94:	81 10       	cpse	r8, r1
    8a96:	f6 cf       	rjmp	.-20     	; 0x8a84 <vfprintf+0x396>
    8a98:	22 20       	and	r2, r2
    8a9a:	09 f4       	brne	.+2      	; 0x8a9e <vfprintf+0x3b0>
    8a9c:	4e ce       	rjmp	.-868    	; 0x873a <vfprintf+0x4c>
    8a9e:	b6 01       	movw	r22, r12
    8aa0:	80 e2       	ldi	r24, 0x20	; 32
    8aa2:	90 e0       	ldi	r25, 0x00	; 0
    8aa4:	37 d0       	rcall	.+110    	; 0x8b14 <fputc>
    8aa6:	2a 94       	dec	r2
    8aa8:	f7 cf       	rjmp	.-18     	; 0x8a98 <vfprintf+0x3aa>
    8aaa:	f6 01       	movw	r30, r12
    8aac:	86 81       	ldd	r24, Z+6	; 0x06
    8aae:	97 81       	ldd	r25, Z+7	; 0x07
    8ab0:	02 c0       	rjmp	.+4      	; 0x8ab6 <vfprintf+0x3c8>
    8ab2:	8f ef       	ldi	r24, 0xFF	; 255
    8ab4:	9f ef       	ldi	r25, 0xFF	; 255
    8ab6:	2b 96       	adiw	r28, 0x0b	; 11
    8ab8:	0f b6       	in	r0, 0x3f	; 63
    8aba:	f8 94       	cli
    8abc:	de bf       	out	0x3e, r29	; 62
    8abe:	0f be       	out	0x3f, r0	; 63
    8ac0:	cd bf       	out	0x3d, r28	; 61
    8ac2:	df 91       	pop	r29
    8ac4:	cf 91       	pop	r28
    8ac6:	1f 91       	pop	r17
    8ac8:	0f 91       	pop	r16
    8aca:	ff 90       	pop	r15
    8acc:	ef 90       	pop	r14
    8ace:	df 90       	pop	r13
    8ad0:	cf 90       	pop	r12
    8ad2:	bf 90       	pop	r11
    8ad4:	af 90       	pop	r10
    8ad6:	9f 90       	pop	r9
    8ad8:	8f 90       	pop	r8
    8ada:	7f 90       	pop	r7
    8adc:	6f 90       	pop	r6
    8ade:	5f 90       	pop	r5
    8ae0:	4f 90       	pop	r4
    8ae2:	3f 90       	pop	r3
    8ae4:	2f 90       	pop	r2
    8ae6:	08 95       	ret

00008ae8 <strnlen_P>:
    8ae8:	fc 01       	movw	r30, r24
    8aea:	05 90       	lpm	r0, Z+
    8aec:	61 50       	subi	r22, 0x01	; 1
    8aee:	70 40       	sbci	r23, 0x00	; 0
    8af0:	01 10       	cpse	r0, r1
    8af2:	d8 f7       	brcc	.-10     	; 0x8aea <strnlen_P+0x2>
    8af4:	80 95       	com	r24
    8af6:	90 95       	com	r25
    8af8:	8e 0f       	add	r24, r30
    8afa:	9f 1f       	adc	r25, r31
    8afc:	08 95       	ret

00008afe <strnlen>:
    8afe:	fc 01       	movw	r30, r24
    8b00:	61 50       	subi	r22, 0x01	; 1
    8b02:	70 40       	sbci	r23, 0x00	; 0
    8b04:	01 90       	ld	r0, Z+
    8b06:	01 10       	cpse	r0, r1
    8b08:	d8 f7       	brcc	.-10     	; 0x8b00 <strnlen+0x2>
    8b0a:	80 95       	com	r24
    8b0c:	90 95       	com	r25
    8b0e:	8e 0f       	add	r24, r30
    8b10:	9f 1f       	adc	r25, r31
    8b12:	08 95       	ret

00008b14 <fputc>:
    8b14:	0f 93       	push	r16
    8b16:	1f 93       	push	r17
    8b18:	cf 93       	push	r28
    8b1a:	df 93       	push	r29
    8b1c:	fb 01       	movw	r30, r22
    8b1e:	23 81       	ldd	r18, Z+3	; 0x03
    8b20:	21 fd       	sbrc	r18, 1
    8b22:	03 c0       	rjmp	.+6      	; 0x8b2a <fputc+0x16>
    8b24:	8f ef       	ldi	r24, 0xFF	; 255
    8b26:	9f ef       	ldi	r25, 0xFF	; 255
    8b28:	2c c0       	rjmp	.+88     	; 0x8b82 <fputc+0x6e>
    8b2a:	22 ff       	sbrs	r18, 2
    8b2c:	16 c0       	rjmp	.+44     	; 0x8b5a <fputc+0x46>
    8b2e:	46 81       	ldd	r20, Z+6	; 0x06
    8b30:	57 81       	ldd	r21, Z+7	; 0x07
    8b32:	24 81       	ldd	r18, Z+4	; 0x04
    8b34:	35 81       	ldd	r19, Z+5	; 0x05
    8b36:	42 17       	cp	r20, r18
    8b38:	53 07       	cpc	r21, r19
    8b3a:	44 f4       	brge	.+16     	; 0x8b4c <fputc+0x38>
    8b3c:	a0 81       	ld	r26, Z
    8b3e:	b1 81       	ldd	r27, Z+1	; 0x01
    8b40:	9d 01       	movw	r18, r26
    8b42:	2f 5f       	subi	r18, 0xFF	; 255
    8b44:	3f 4f       	sbci	r19, 0xFF	; 255
    8b46:	31 83       	std	Z+1, r19	; 0x01
    8b48:	20 83       	st	Z, r18
    8b4a:	8c 93       	st	X, r24
    8b4c:	26 81       	ldd	r18, Z+6	; 0x06
    8b4e:	37 81       	ldd	r19, Z+7	; 0x07
    8b50:	2f 5f       	subi	r18, 0xFF	; 255
    8b52:	3f 4f       	sbci	r19, 0xFF	; 255
    8b54:	37 83       	std	Z+7, r19	; 0x07
    8b56:	26 83       	std	Z+6, r18	; 0x06
    8b58:	14 c0       	rjmp	.+40     	; 0x8b82 <fputc+0x6e>
    8b5a:	8b 01       	movw	r16, r22
    8b5c:	ec 01       	movw	r28, r24
    8b5e:	fb 01       	movw	r30, r22
    8b60:	00 84       	ldd	r0, Z+8	; 0x08
    8b62:	f1 85       	ldd	r31, Z+9	; 0x09
    8b64:	e0 2d       	mov	r30, r0
    8b66:	19 95       	eicall
    8b68:	89 2b       	or	r24, r25
    8b6a:	e1 f6       	brne	.-72     	; 0x8b24 <fputc+0x10>
    8b6c:	d8 01       	movw	r26, r16
    8b6e:	16 96       	adiw	r26, 0x06	; 6
    8b70:	8d 91       	ld	r24, X+
    8b72:	9c 91       	ld	r25, X
    8b74:	17 97       	sbiw	r26, 0x07	; 7
    8b76:	01 96       	adiw	r24, 0x01	; 1
    8b78:	17 96       	adiw	r26, 0x07	; 7
    8b7a:	9c 93       	st	X, r25
    8b7c:	8e 93       	st	-X, r24
    8b7e:	16 97       	sbiw	r26, 0x06	; 6
    8b80:	ce 01       	movw	r24, r28
    8b82:	df 91       	pop	r29
    8b84:	cf 91       	pop	r28
    8b86:	1f 91       	pop	r17
    8b88:	0f 91       	pop	r16
    8b8a:	08 95       	ret

00008b8c <__ultoa_invert>:
    8b8c:	fa 01       	movw	r30, r20
    8b8e:	aa 27       	eor	r26, r26
    8b90:	28 30       	cpi	r18, 0x08	; 8
    8b92:	51 f1       	breq	.+84     	; 0x8be8 <__ultoa_invert+0x5c>
    8b94:	20 31       	cpi	r18, 0x10	; 16
    8b96:	81 f1       	breq	.+96     	; 0x8bf8 <__ultoa_invert+0x6c>
    8b98:	e8 94       	clt
    8b9a:	6f 93       	push	r22
    8b9c:	6e 7f       	andi	r22, 0xFE	; 254
    8b9e:	6e 5f       	subi	r22, 0xFE	; 254
    8ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    8ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ba6:	af 4f       	sbci	r26, 0xFF	; 255
    8ba8:	b1 e0       	ldi	r27, 0x01	; 1
    8baa:	3e d0       	rcall	.+124    	; 0x8c28 <__ultoa_invert+0x9c>
    8bac:	b4 e0       	ldi	r27, 0x04	; 4
    8bae:	3c d0       	rcall	.+120    	; 0x8c28 <__ultoa_invert+0x9c>
    8bb0:	67 0f       	add	r22, r23
    8bb2:	78 1f       	adc	r23, r24
    8bb4:	89 1f       	adc	r24, r25
    8bb6:	9a 1f       	adc	r25, r26
    8bb8:	a1 1d       	adc	r26, r1
    8bba:	68 0f       	add	r22, r24
    8bbc:	79 1f       	adc	r23, r25
    8bbe:	8a 1f       	adc	r24, r26
    8bc0:	91 1d       	adc	r25, r1
    8bc2:	a1 1d       	adc	r26, r1
    8bc4:	6a 0f       	add	r22, r26
    8bc6:	71 1d       	adc	r23, r1
    8bc8:	81 1d       	adc	r24, r1
    8bca:	91 1d       	adc	r25, r1
    8bcc:	a1 1d       	adc	r26, r1
    8bce:	20 d0       	rcall	.+64     	; 0x8c10 <__ultoa_invert+0x84>
    8bd0:	09 f4       	brne	.+2      	; 0x8bd4 <__ultoa_invert+0x48>
    8bd2:	68 94       	set
    8bd4:	3f 91       	pop	r19
    8bd6:	2a e0       	ldi	r18, 0x0A	; 10
    8bd8:	26 9f       	mul	r18, r22
    8bda:	11 24       	eor	r1, r1
    8bdc:	30 19       	sub	r19, r0
    8bde:	30 5d       	subi	r19, 0xD0	; 208
    8be0:	31 93       	st	Z+, r19
    8be2:	de f6       	brtc	.-74     	; 0x8b9a <__ultoa_invert+0xe>
    8be4:	cf 01       	movw	r24, r30
    8be6:	08 95       	ret
    8be8:	46 2f       	mov	r20, r22
    8bea:	47 70       	andi	r20, 0x07	; 7
    8bec:	40 5d       	subi	r20, 0xD0	; 208
    8bee:	41 93       	st	Z+, r20
    8bf0:	b3 e0       	ldi	r27, 0x03	; 3
    8bf2:	0f d0       	rcall	.+30     	; 0x8c12 <__ultoa_invert+0x86>
    8bf4:	c9 f7       	brne	.-14     	; 0x8be8 <__ultoa_invert+0x5c>
    8bf6:	f6 cf       	rjmp	.-20     	; 0x8be4 <__ultoa_invert+0x58>
    8bf8:	46 2f       	mov	r20, r22
    8bfa:	4f 70       	andi	r20, 0x0F	; 15
    8bfc:	40 5d       	subi	r20, 0xD0	; 208
    8bfe:	4a 33       	cpi	r20, 0x3A	; 58
    8c00:	18 f0       	brcs	.+6      	; 0x8c08 <__ultoa_invert+0x7c>
    8c02:	49 5d       	subi	r20, 0xD9	; 217
    8c04:	31 fd       	sbrc	r19, 1
    8c06:	40 52       	subi	r20, 0x20	; 32
    8c08:	41 93       	st	Z+, r20
    8c0a:	02 d0       	rcall	.+4      	; 0x8c10 <__ultoa_invert+0x84>
    8c0c:	a9 f7       	brne	.-22     	; 0x8bf8 <__ultoa_invert+0x6c>
    8c0e:	ea cf       	rjmp	.-44     	; 0x8be4 <__ultoa_invert+0x58>
    8c10:	b4 e0       	ldi	r27, 0x04	; 4
    8c12:	a6 95       	lsr	r26
    8c14:	97 95       	ror	r25
    8c16:	87 95       	ror	r24
    8c18:	77 95       	ror	r23
    8c1a:	67 95       	ror	r22
    8c1c:	ba 95       	dec	r27
    8c1e:	c9 f7       	brne	.-14     	; 0x8c12 <__ultoa_invert+0x86>
    8c20:	00 97       	sbiw	r24, 0x00	; 0
    8c22:	61 05       	cpc	r22, r1
    8c24:	71 05       	cpc	r23, r1
    8c26:	08 95       	ret
    8c28:	9b 01       	movw	r18, r22
    8c2a:	ac 01       	movw	r20, r24
    8c2c:	0a 2e       	mov	r0, r26
    8c2e:	06 94       	lsr	r0
    8c30:	57 95       	ror	r21
    8c32:	47 95       	ror	r20
    8c34:	37 95       	ror	r19
    8c36:	27 95       	ror	r18
    8c38:	ba 95       	dec	r27
    8c3a:	c9 f7       	brne	.-14     	; 0x8c2e <__ultoa_invert+0xa2>
    8c3c:	62 0f       	add	r22, r18
    8c3e:	73 1f       	adc	r23, r19
    8c40:	84 1f       	adc	r24, r20
    8c42:	95 1f       	adc	r25, r21
    8c44:	a0 1d       	adc	r26, r0
    8c46:	08 95       	ret

00008c48 <_exit>:
    8c48:	f8 94       	cli

00008c4a <__stop_program>:
    8c4a:	ff cf       	rjmp	.-2      	; 0x8c4a <__stop_program>
